/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var Pool = __webpack_require__(185).Pool;
	// TODO: include the wallet here as well


	/**
	 * Listens for the app launching, then creates the window.
	 *
	 * @see http://developer.chrome.com/apps/app.runtime.html
	 * @see http://developer.chrome.com/apps/app.window.html
	 */
	chrome.app.runtime.onLaunched.addListener(function() {
	  var pool = new Pool();
	  Pool.Events.forEach(function(eventName) {
	    pool.on(eventName, function() {
	      chrome.runtime.sendMessage({
	        pool: pool,
	        type: eventName,
	        arguments: arguments
	      });
	    });
	  });

	  pool.connect();

	  chrome.app.window.create(
	    "index.html",
	    {
	      id: "bitcoin-spv-window",
	      outerBounds: { minWidth: 400, minHeight: 600 },
	      innerBounds: { maxWidth: 500, maxHeight: 700 },
	      frame: { type: 'chrome' }
	    },
	    function(window) {
	      window.onClosed.addListener(function() {
	        pool.disconnect();
	        console.log('Shut down.');
	      });
	    }
	  );

	});

	//TODO: is there a better way to check the sender?
	var isSelf = /background_page.html/;
	chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
	  if(isSelf.test(sender.url)){
	    return;
	  }
	  //TODO: background.js dispatcher
	  console.log('background.js message:', request);
	  switch(request.type) {
	    default:
	      break;
	  }
	});


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(359)
	var ieee754 = __webpack_require__(360)
	var isArray = __webpack_require__(361)

	exports.Buffer = Buffer
	exports.SlowBuffer = Buffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var kMaxLength = 0x3fffffff

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    return 42 === arr.foo() && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (subject, encoding, noZero) {
	  if (!(this instanceof Buffer))
	    return new Buffer(subject, encoding, noZero)

	  var type = typeof subject

	  // Find the length
	  var length
	  if (type === 'number')
	    length = subject > 0 ? subject >>> 0 : 0
	  else if (type === 'string') {
	    if (encoding === 'base64')
	      subject = base64clean(subject)
	    length = Buffer.byteLength(subject, encoding)
	  } else if (type === 'object' && subject !== null) { // assume object is array-like
	    if (subject.type === 'Buffer' && isArray(subject.data))
	      subject = subject.data
	    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
	  } else
	    throw new TypeError('must start with number, buffer, array or string')

	  if (this.length > kMaxLength)
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	      'size: 0x' + kMaxLength.toString(16) + ' bytes')

	  var buf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Preferred: Return an augmented `Uint8Array` instance for best performance
	    buf = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return THIS instance of Buffer (created by `new`)
	    buf = this
	    buf.length = length
	    buf._isBuffer = true
	  }

	  var i
	  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
	    // Speed optimization -- use set if we're copying from a typed array
	    buf._set(subject)
	  } else if (isArrayish(subject)) {
	    // Treat array-ish objects as a byte array
	    if (Buffer.isBuffer(subject)) {
	      for (i = 0; i < length; i++)
	        buf[i] = subject.readUInt8(i)
	    } else {
	      for (i = 0; i < length; i++)
	        buf[i] = ((subject[i] % 256) + 256) % 256
	    }
	  } else if (type === 'string') {
	    buf.write(subject, 0, encoding)
	  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
	    for (i = 0; i < length; i++) {
	      buf[i] = 0
	    }
	  }

	  return buf
	}

	Buffer.isBuffer = function (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
	    throw new TypeError('Arguments must be Buffers')

	  var x = a.length
	  var y = b.length
	  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function (list, totalLength) {
	  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (totalLength === undefined) {
	    totalLength = 0
	    for (i = 0; i < list.length; i++) {
	      totalLength += list[i].length
	    }
	  }

	  var buf = new Buffer(totalLength)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	Buffer.byteLength = function (str, encoding) {
	  var ret
	  str = str + ''
	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      ret = str.length
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = str.length * 2
	      break
	    case 'hex':
	      ret = str.length >>> 1
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8ToBytes(str).length
	      break
	    case 'base64':
	      ret = base64ToBytes(str).length
	      break
	    default:
	      ret = str.length
	  }
	  return ret
	}

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	// toString(encoding, start=0, end=buffer.length)
	Buffer.prototype.toString = function (encoding, start, end) {
	  var loweredCase = false

	  start = start >>> 0
	  end = end === undefined || end === Infinity ? this.length : end >>> 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase)
	          throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.equals = function (b) {
	  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max)
	      str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  return Buffer.compare(this, b)
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function (offset) {
		//console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var byte = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(byte)) throw new Error('Invalid hex string')
	    buf[offset + i] = byte
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
	  return charsWritten
	}

	function asciiWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
	  return charsWritten
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
	  return charsWritten
	}

	function utf16leWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2)
	  return charsWritten
	}

	Buffer.prototype.write = function (string, offset, length, encoding) {
	  // Support both (string, offset, length, encoding)
	  // and the legacy (string, encoding, offset, length)
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length
	      length = undefined
	    }
	  } else {  // legacy
	    var swap = encoding
	    encoding = offset
	    offset = length
	    length = swap
	  }

	  offset = Number(offset) || 0
	  var remaining = this.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase()

	  var ret
	  switch (encoding) {
	    case 'hex':
	      ret = hexWrite(this, string, offset, length)
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8Write(this, string, offset, length)
	      break
	    case 'ascii':
	      ret = asciiWrite(this, string, offset, length)
	      break
	    case 'binary':
	      ret = binaryWrite(this, string, offset, length)
	      break
	    case 'base64':
	      ret = base64Write(this, string, offset, length)
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = utf16leWrite(this, string, offset, length)
	      break
	    default:
	      throw new TypeError('Unknown encoding: ' + encoding)
	  }
	  return ret
	}

	Buffer.prototype.toJSON = function () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  return asciiSlice(buf, start, end)
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len;
	    if (start < 0)
	      start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0)
	      end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start)
	    end = start

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    return Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    var newBuf = new Buffer(sliceLen, undefined, true)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	    return newBuf
	  }
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0)
	    throw new RangeError('offset is not uint')
	  if (offset + ext > length)
	    throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUInt8 = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	      ((this[offset + 1] << 16) |
	      (this[offset + 2] << 8) |
	      this[offset + 3])
	}

	Buffer.prototype.readInt8 = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80))
	    return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16) |
	      (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	      (this[offset + 1] << 16) |
	      (this[offset + 2] << 8) |
	      (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new TypeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new TypeError('index out of range')
	}

	Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else objectWriteUInt16(this, value, offset, true)
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else objectWriteUInt16(this, value, offset, false)
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else objectWriteUInt32(this, value, offset, true)
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else objectWriteUInt32(this, value, offset, false)
	  return offset + 4
	}

	Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else objectWriteUInt16(this, value, offset, true)
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else objectWriteUInt16(this, value, offset, false)
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else objectWriteUInt32(this, value, offset, true)
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else objectWriteUInt32(this, value, offset, false)
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new TypeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new TypeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert)
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert)
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function (target, target_start, start, end) {
	  var source = this

	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (!target_start) target_start = 0

	  // Copy 0 bytes; we're done
	  if (end === start) return
	  if (target.length === 0 || source.length === 0) return

	  // Fatal error conditions
	  if (end < start) throw new TypeError('sourceEnd < sourceStart')
	  if (target_start < 0 || target_start >= target.length)
	    throw new TypeError('targetStart out of bounds')
	  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
	  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length)
	    end = this.length
	  if (target.length - target_start < end - start)
	    end = target.length - target_start + start

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + target_start] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), target_start)
	  }
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new TypeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array get/set methods before overwriting
	  arr._get = arr.get
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function isArrayish (subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	      subject && typeof subject === 'object' &&
	      typeof subject.length === 'number'
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    var b = str.charCodeAt(i)
	    if (b <= 0x7F) {
	      byteArray.push(b)
	    } else {
	      var start = i
	      if (b >= 0xD800 && b <= 0xDFFF) i++
	      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
	      for (var j = 0; j < h.length; j++) {
	        byteArray.push(parseInt(h[j], 16))
	      }
	    }
	  }
	  return byteArray
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(str)
	}

	function blitBuffer (src, dst, offset, length, unitSize) {
	  if (unitSize) length -= length % unitSize;
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length))
	      break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};

	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canMutationObserver = typeof window !== 'undefined'
	    && window.MutationObserver;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;

	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }

	    var queue = [];

	    if (canMutationObserver) {
	        var hiddenDiv = document.createElement("div");
	        var observer = new MutationObserver(function () {
	            var queueList = queue.slice();
	            queue.length = 0;
	            queueList.forEach(function (fn) {
	                fn();
	            });
	        });

	        observer.observe(hiddenDiv, { attributes: true });

	        return function nextTick(fn) {
	            if (!queue.length) {
	                hiddenDiv.setAttribute('yes', 'no');
	            }
	            queue.push(fn);
	        };
	    }

	    if (canPost) {
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);

	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }

	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};


/***/ },
/* 3 */,
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.1.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -o ./lodash.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.1.0';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      REARG_FLAG = 128,
	      ARY_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 0,
	      LAZY_MAP_FLAG = 1,
	      LAZY_WHILE_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /**
	   * Used to match ES template delimiters.
	   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)
	   * for more details.
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect named functions. */
	  var reFuncName = /^\s*function[ \n\r\t]+\w/;

	  /** Used to detect hexadecimal string values. */
	  var reHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /**
	   * Used to match `RegExp` special characters.
	   * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)
	   * for more details.
	   */
	  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to detect functions containing a `this` reference. */
	  var reThis = /\bthis\b/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '{2,}(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to detect and test for whitespace. */
	  var whitespace = (
	    // Basic whitespace characters.
	    ' \t\x0b\f\xa0\ufeff' +

	    // Line terminators.
	    '\n\r\u2028\u2029' +

	    // Unicode category "Zs" space separators.
	    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
	  );

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
	    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    'window', 'WinRTError'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used as an internal `_.debounce` options object by `_.throttle`. */
	  var debounceOptions = {
	    'leading': false,
	    'maxWait': 0,
	    'trailing': false
	  };

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it is the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = (objectTypes[typeof window] && window !== (this && this.window)) ? window : this;

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	    root = freeGlobal;
	  }

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare to `other`.
	   * @param {*} other The value to compare to `value`.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsReflexive = value === value,
	          othIsReflexive = other === other;

	      if (value > other || !valIsReflexive || (typeof value == 'undefined' && othIsReflexive)) {
	        return 1;
	      }
	      if (value < other || !othIsReflexive || (typeof other == 'undefined' && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} [fromIndex=0] The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = (fromIndex || 0) - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.sortBy` and `_.sortByAll` which uses `comparer`
	   * to define the sort order of `array` and replaces criteria objects with their
	   * corresponding values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;

	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }

	  /**
	   * Converts `value` to a string if it is not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    if (typeof value == 'string') {
	      return value;
	    }
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.max` and `_.min` as the default callback for string values.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the code unit of the first character of the string.
	   */
	  function charAtCallback(string) {
	    return string.charCodeAt(0);
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByAll` to compare multiple properties of each element
	   * in a collection and stable sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultipleAscending(object, other) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        return result;
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled
	   * string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   * If `fromRight` is provided elements of `array` are iterated from right to left.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} [fromIndex] The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromRight ? (fromIndex || length) : ((fromIndex || 0) - 1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return (value && typeof value == 'object') || false;
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'add': function(a, b) { return a + b; } });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'sub': function(a, b) { return a - b; } });
	   *
	   * _.isFunction(_.add);
	   * // => true
	   * _.isFunction(_.sub);
	   * // => false
	   *
	   * lodash.isFunction(lodash.add);
	   * // => false
	   * lodash.isFunction(lodash.sub);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype;

	    /** Used to detect DOM support. */
	    var document = (document = context.window) && document.document;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to the length of n-tuples for `_.unzip`. */
	    var getLength = baseProperty('length');

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the `toStringTag` of values.
	     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
	     * for more details.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = context._;

	    /** Used to detect if a method is native. */
	    var reNative = RegExp('^' +
	      escapeRegExp(objToString)
	      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
	        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
	        ceil = Math.ceil,
	        clearTimeout = context.clearTimeout,
	        floor = Math.floor,
	        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
	        push = arrayProto.push,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = isNative(Set = context.Set) && Set,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
	        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

	    /** Used to clone array buffers. */
	    var Float64Array = (function() {
	      // Safari 5 errors when using an array buffer to initialize a typed array
	      // where the array buffer's `byteLength` is not a multiple of the typed
	      // array's `BYTES_PER_ELEMENT`.
	      try {
	        var func = isNative(func = context.Float64Array) && func,
	            result = new func(new ArrayBuffer(10), 0, 1) && func;
	      } catch(e) {}
	      return result;
	    }());

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
	        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
	        nativeIsFinite = context.isFinite,
	        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
	        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
	        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /** Used as the size, in bytes, of each `Float64Array` element. */
	    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

	    /**
	     * Used as the maximum length of an array-like value.
	     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	     * for more details.
	     */
	    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that return a boolean or single value will
	     * automatically end the chain returning the unwrapped value. Explicit chaining
	     * may be enabled using `_.chain`. The execution of chained methods is lazy,
	     * that is, execution is deferred until `_#value` is implicitly or explicitly
	     * called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization that merges iteratees to avoid creating intermediate
	     * arrays and reduce the number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers also have the following `Array` methods:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
	     * and `unshift`
	     *
	     * The wrapper functions that support shortcut fusion are:
	     * `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`, `first`,
	     * `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`, `slice`,
	     * `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `where`
	     *
	     * The chainable wrapper functions are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
	     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
	     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
	     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
	     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
	     * `keysIn`, `map`, `mapValues`, `matches`, `memoize`, `merge`, `mixin`,
	     * `negate`, `noop`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,
	     * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `splice`, `spread`,
	     * `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
	     * `thru`, `times`, `toArray`, `toPlainObject`, `transform`, `union`, `uniq`,
	     * `unshift`, `unzip`, `values`, `valuesIn`, `where`, `without`, `wrap`, `xor`,
	     * `zip`, and `zipObject`
	     *
	     * The wrapper functions that are **not** chainable by default are:
	     * `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
	     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
	     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
	     * `identity`, `includes`, `indexOf`, `isArguments`, `isArray`, `isBoolean`,
	     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`, `isFinite`,
	     * `isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`,
	     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,
	     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`,
	     * `noConflict`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`,
	     * `random`, `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`,
	     * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`,
	     * `startCase`, `startsWith`, `template`, `trim`, `trimLeft`, `trimRight`,
	     * `trunc`, `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper function `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(sum, n) { return sum + n; });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) { return n * n; });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    (function(x) {

	      /**
	       * Detect if functions can be decompiled by `Function#toString`
	       * (all but Firefox OS certified apps, older Opera mobile browsers, and
	       * the PlayStation 3; forced `false` for Windows 8 apps).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

	      /**
	       * Detect if `Function#name` is supported (all but IE).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcNames = typeof Function.name == 'string';

	      /**
	       * Detect if the DOM is supported.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.dom = document.createDocumentFragment().nodeType === 11;
	      } catch(e) {
	        support.dom = false;
	      }

	      /**
	       * Detect if `arguments` object indexes are non-enumerable.
	       *
	       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
	       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
	       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
	       * checks for indexes that exceed their function's formal parameters with
	       * associated values of `0`.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
	      } catch(e) {
	        support.nonEnumArgs = true;
	      }
	    }(0, 0));

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = null;
	      this.__dir__ = 1;
	      this.__dropCount__ = 0;
	      this.__filtered__ = false;
	      this.__iteratees__ = null;
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = null;
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var actions = this.__actions__,
	          iteratees = this.__iteratees__,
	          views = this.__views__,
	          result = new LazyWrapper(this.__wrapped__);

	      result.__actions__ = actions ? arrayCopy(actions) : null;
	      result.__dir__ = this.__dir__;
	      result.__dropCount__ = this.__dropCount__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = views ? arrayCopy(views) : null;
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value();
	      if (!isArray(array)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var dir = this.__dir__,
	          isRight = dir < 0,
	          view = getView(0, array.length, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          dropCount = this.__dropCount__,
	          takeCount = nativeMin(length, this.__takeCount__ - dropCount),
	          index = isRight ? end : start - 1,
	          iteratees = this.__iteratees__,
	          iterLength = iteratees ? iteratees.length : 0,
	          resIndex = 0,
	          result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              computed = iteratee(value, index, array),
	              type = data.type;

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        if (dropCount) {
	          dropCount--;
	        } else {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Adds `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.max` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     */
	    function arrayMax(array) {
	      var index = -1,
	          length = array.length,
	          result = NEGATIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value > result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.min` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     */
	    function arrayMin(array) {
	      var index = -1,
	          length = array.length,
	          result = POSITIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value < result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return typeof objectValue == 'undefined' ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This method is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (typeof objectValue == 'undefined' || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize assigning values.
	     * @returns {Object} Returns the destination object.
	     */
	    function baseAssign(object, source, customizer) {
	      var props = keys(source);
	      if (!customizer) {
	        return baseCopy(source, object, props);
	      }
	      var index = -1,
	          length = props.length

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? result !== value : value === value) ||
	            (typeof value == 'undefined' && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.at` without support for strings and individual
	     * key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} [props] The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          length = collection.length,
	          isArr = isLength(length),
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          key = parseFloat(key);
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies the properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Array} props The property names to copy.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, object, props) {
	      if (!props) {
	        props = object;
	        object = {};
	      }
	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.bindAll` without support for individual
	     * method name arguments.
	     *
	     * @private
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {string[]} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     */
	    function baseBindAll(object, methodNames) {
	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return (typeof thisArg != 'undefined' && isBindable(func))
	          ? bindCallback(func, thisArg, argCount)
	          : func;
	      }
	      if (func == null) {
	        return identity;
	      }
	      // Handle "_.property" and "_.matches" style callback shorthands.
	      return type == 'object'
	        ? baseMatches(func)
	        : baseProperty(func + '');
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (typeof result != 'undefined') {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseCopy(value, result, keys(value));
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function Object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          Object.prototype = prototype;
	          var result = new Object;
	          Object.prototype = null;
	        }
	        return result || context.Object();
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The `arguments` object to slice and provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args, fromIndex) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, baseSlice(args, fromIndex)); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = isCommon && values.length >= 200 && createCache(values),
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    function baseEach(collection, iteratee) {
	      var length = collection ? collection.length : 0;
	      if (!isLength(length)) {
	        return baseForOwn(collection, iteratee);
	      }
	      var index = -1,
	          iterable = toObject(collection);

	      while (++index < length) {
	        if (iteratee(iterable[index], index, iterable) === false) {
	          break;
	        }
	      }
	      return collection;
	    }

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    function baseEachRight(collection, iteratee) {
	      var length = collection ? collection.length : 0;
	      if (!isLength(length)) {
	        return baseForOwnRight(collection, iteratee);
	      }
	      var iterable = toObject(collection);
	      while (length--) {
	        if (iteratee(iterable[length], length, iterable) === false) {
	          break;
	        }
	      }
	      return collection;
	    }

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : end >>> 0;
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays and `arguments` objects.
	     * @param {number} [fromIndex=0] The index to start from.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, fromIndex) {
	      var index = (fromIndex || 0) - 1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];

	        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            value = baseFlatten(value, isDeep, isStrict);
	          }
	          var valIndex = -1,
	              valLength = value.length;

	          result.length += valLength;
	          while (++valIndex < valLength) {
	            result[++resIndex] = value[valIndex];
	          }
	        } else if (!isStrict) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iterator functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    function baseFor(object, iteratee, keysFunc) {
	      var index = -1,
	          iterable = toObject(object),
	          props = keysFunc(object),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        if (iteratee(iterable[key], key, iterable) === false) {
	          break;
	        }
	      }
	      return object;
	    }

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForRight(object, iteratee, keysFunc) {
	      var iterable = toObject(object),
	          props = keysFunc(object),
	          length = props.length;

	      while (length--) {
	        var key = props[length];
	        if (iteratee(iterable[key], key, iterable) === false) {
	          break;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.invoke` which requires additional arguments
	     * to be provided as an array of arguments rather than individually.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|string} methodName The name of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {Array} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     */
	    function baseInvoke(collection, methodName, args) {
	      var index = -1,
	          isFunc = typeof methodName == 'function',
	          length = collection ? collection.length : 0,
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? methodName : (value != null && value[methodName]);
	        result[++index] = func ? func.apply(value, args) : undefined;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {
	      // Exit early for identical values.
	      if (value === other) {
	        // Treat `+0` vs. `-0` as not equal.
	        return value !== 0 || (1 / value == 1 / other);
	      }
	      var valType = typeof value,
	          othType = typeof other;

	      // Exit early for unlike primitive values.
	      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
	          value == null || other == null) {
	        // Return `false` unless both values are `NaN`.
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	          othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	      if (valWrapped || othWrapped) {
	        return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands or `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The source property names to match.
	     * @param {Array} values The source values to match.
	     * @param {Array} strictCompareFlags Strict comparison flags for source values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      var index = -1,
	          noCustomizer = !customizer;

	      while (++index < length) {
	        if ((noCustomizer && strictCompareFlags[index])
	              ? values[index] !== object[props[index]]
	              : !hasOwnProperty.call(object, props[index])
	            ) {
	          return false;
	        }
	      }
	      index = -1;
	      while (++index < length) {
	        var key = props[index];
	        if (noCustomizer && strictCompareFlags[index]) {
	          var result = hasOwnProperty.call(object, key);
	        } else {
	          var objValue = object[key],
	              srcValue = values[index];

	          result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (typeof result == 'undefined') {
	            result = baseIsEqual(srcValue, objValue, customizer, true);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var result = [];
	      baseEach(collection, function(value, key, collection) {
	        result.push(iteratee(value, key, collection));
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which supports specifying whether
	     * `source` should be cloned.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var props = keys(source),
	          length = props.length;

	      if (length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return function(object) {
	            return object != null && value === object[key] && hasOwnProperty.call(object, key);
	          };
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = source[props[length]];
	        values[length] = value;
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return function(object) {
	        return baseIsMatch(object, props, values, strictCompareFlags);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns the destination object.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));

	      (isSrcArr ? arrayEach : baseForOwn)(source, function(srcValue, key, source) {
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          return baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        var value = object[key],
	            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	            isCommon = typeof result == 'undefined';

	        if (isCommon) {
	          result = srcValue;
	        }
	        if ((isSrcArr || typeof result != 'undefined') &&
	            (isCommon || (result === result ? result !== value : value === value))) {
	          object[key] = result;
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = typeof result == 'undefined';

	      if (isCommon) {
	        result = srcValue;
	        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (value ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? result !== value : value === value) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` which does not coerce `key` to a string.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     */
	    function basePullAt(array, indexes) {
	      var length = indexes.length,
	          result = baseAt(array, indexes);

	      indexes.sort(baseCompareAscending);
	      while (length--) {
	        var index = parseFloat(indexes[length]);
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + floor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands or `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection)
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end - start) >>> 0;
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * or `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= 200,
	          seen = isLarge && createCache(),
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * returned by `keysFunc`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved unwrapped value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var args = [result],
	            action = actions[index];

	        push.apply(args, action.args);
	        result = action.func.apply(action.thisArg, args);
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest, instead
	     *  of the lowest, index at which a value should be inserted into `array`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (retHighest ? (computed <= value) : (computed < value)) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest, instead
	     *  of the lowest, index at which a value should be inserted into `array`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsUndef = typeof value == 'undefined';

	      while (low < high) {
	        var mid = floor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || typeof computed != 'undefined');
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (typeof thisArg == 'undefined') {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      return bufferSlice.call(buffer, 0);
	    }
	    if (!bufferSlice) {
	      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
	      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
	        var byteLength = buffer.byteLength,
	            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
	            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
	            result = new ArrayBuffer(byteLength);

	        if (floatLength) {
	          var view = new Float64Array(result, 0, floatLength);
	          view.set(new Float64Array(buffer, 0, floatLength));
	        }
	        if (byteLength != offset) {
	          view = new Uint8Array(result, offset);
	          view.set(new Uint8Array(buffer, offset));
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(argsLength + leftLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var pad = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[pad + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[pad + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a function that aggregates a collection, creating an accumulator
	     * object composed from the results of running each element in the collection
	     * through an iteratee. The `setter` sets the keys and values of the accumulator
	     * object. If `initializer` is provided initializes the accumulator object.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that assigns properties of source object(s) to a given
	     * destination object.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return function() {
	        var length = arguments.length,
	            object = arguments[0];

	        if (length < 2 || object == null) {
	          return object;
	        }
	        if (length > 3 && isIterateeCall(arguments[1], arguments[2], arguments[3])) {
	          length = 2;
	        }
	        // Juggle arguments.
	        if (length > 3 && typeof arguments[length - 2] == 'function') {
	          var customizer = bindCallback(arguments[--length - 1], arguments[length--], 5);
	        } else if (length > 2 && typeof arguments[length - 1] == 'function') {
	          customizer = arguments[--length];
	        }
	        var index = 0;
	        while (++index < length) {
	          var source = arguments[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        return (this instanceof wrapper ? Ctor : func).apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
	      return new SetCache(values);
	    };

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, arguments);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a function that gets the extremum value of a collection.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to get the extremum value from an array.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
	     *  extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(arrayFunc, isMin) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = null;
	        }
	        var func = getCallback(),
	            noIteratee = iteratee == null;

	        if (!(func === baseCallback && noIteratee)) {
	          noIteratee = false;
	          iteratee = func(iteratee, thisArg, 3);
	        }
	        if (noIteratee) {
	          var isArr = isArray(collection);
	          if (!isArr && isString(collection)) {
	            iteratee = charAtCallback;
	          } else {
	            return arrayFunc(isArr ? collection : toIterable(collection));
	          }
	        }
	        return extremumBy(collection, iteratee, isMin);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

	      var Ctor = !isBindKey && createCtorWrapper(func),
	          key = func;

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : null,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : null,
	                newHoldersRight = isCurry ? null : argsHolders,
	                newPartials = isCurry ? args : null,
	                newPartialsRight = isCurry ? null : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var result = createHybridWrapper(func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity);
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this;
	        if (isBindKey) {
	          func = thisBinding[key];
	        }
	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        return (this instanceof wrapper ? (Ctor || createCtorWrapper(func)) : func).apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the pad required for `string` based on the given padding length.
	     * The `chars` string may be truncated if the number of padding characters
	     * exceeds the padding length.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPad(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(argsLength + leftLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return (this instanceof wrapper ? Ctor : func).apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = null;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = null;
	      }
	      var data = !isBindKey && getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data && data !== true) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length,
	          result = true;

	      if (arrLength != othLength && !(isWhere && othLength > arrLength)) {
	        return false;
	      }
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (result && ++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        result = undefined;
	        if (customizer) {
	          result = isWhere
	            ? customizer(othValue, arrValue, index)
	            : customizer(arrValue, othValue, index);
	        }
	        if (typeof result == 'undefined') {
	          // Recursively compare arrays (susceptible to call stack limits).
	          if (isWhere) {
	            var othIndex = othLength;
	            while (othIndex--) {
	              othValue = other[othIndex];
	              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
	              if (result) {
	                break;
	              }
	            }
	          } else {
	            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
	          }
	        }
	      }
	      return !!result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} value The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            // But, treat `-0` vs. `+0` as not equal.
	            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isWhere] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isWhere) {
	        return false;
	      }
	      var hasCtor,
	          index = -1;

	      while (++index < objLength) {
	        var key = objProps[index],
	            result = hasOwnProperty.call(other, key);

	        if (result) {
	          var objValue = object[key],
	              othValue = other[key];

	          result = undefined;
	          if (customizer) {
	            result = isWhere
	              ? customizer(othValue, objValue, key)
	              : customizer(objValue, othValue, key);
	          }
	          if (typeof result == 'undefined') {
	            // Recursively compare objects (susceptible to call stack limits).
	            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	        hasCtor || (hasCtor = key == 'constructor');
	      }
	      if (!hasCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments; (value, index, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the
	     *  maximum, extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function extremumBy(collection, iteratee, isMin) {
	      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
	          computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = iteratee(value, index, collection);
	        if ((isMin ? current < computed : current > computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} [transforms] The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms ? transforms.length : 0;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Checks if `func` is eligible for `this` binding.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is eligible, else `false`.
	     */
	    function isBindable(func) {
	      var support = lodash.support,
	          result = !(support.funcNames ? func.name : support.funcDecomp);

	      if (!result) {
	        var source = fnToString.call(func);
	        if (!support.funcNames) {
	          result = !reFuncName.test(source);
	        }
	        if (!result) {
	          // Check if `func` references the `this` keyword and store the result.
	          result = reThis.test(source) || isNative(func);
	          baseSetData(func, result);
	        }
	      }
	      return result;
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = +value;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number') {
	        var length = object.length,
	            prereq = isLength(length) && isIndex(index, length);
	      } else {
	        prereq = type == 'string' && index in object;
	      }
	      return prereq && object[index] === value;
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on ES `ToLength`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
	     * for more details.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask;

	      var arityFlags = ARY_FLAG | REARG_FLAG,
	          bindFlags = BIND_FLAG | BIND_KEY_FLAG,
	          comboFlags = arityFlags | bindFlags | CURRY_BOUND_FLAG | CURRY_RIGHT_FLAG;

	      var isAry = bitmask & ARY_FLAG && !(srcBitmask & ARY_FLAG),
	          isRearg = bitmask & REARG_FLAG && !(srcBitmask & REARG_FLAG),
	          argPos = (isRearg ? data : source)[7],
	          ary = (isAry ? data : source)[8];

	      var isCommon = !(bitmask >= REARG_FLAG && srcBitmask > bindFlags) &&
	        !(bitmask > bindFlags && srcBitmask >= REARG_FLAG);

	      var isCombo = (newBitmask >= arityFlags && newBitmask <= comboFlags) &&
	        (bitmask < REARG_FLAG || ((isRearg || isAry) && argPos.length <= ary));

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties specified
	     * by the `props` array.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `_.isPlainObject` which checks if `value`
	     * is an object created by the `Object` constructor or has a `[[Prototype]]`
	     * of `null`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     */
	    function shimIsPlainObject(value) {
	      var Ctor,
	          support = lodash.support;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
	          (!hasOwnProperty.call(value, 'constructor') &&
	            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
	    }

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length,
	          support = lodash.support;

	      var allowIndexes = length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isLength(value.length)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(+size || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(ceil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all values of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [5, 2, 10]);
	     * // => [1, 3]
	     */
	    function difference() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var value = arguments[index];
	        if (isArray(value) || isArguments(value)) {
	          break;
	        }
	      }
	      return baseDifference(value, baseFlatten(arguments, false, true, ++index));
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per element.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) { return n > 1; });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'status': 'busy', 'active': false },
	     *   { 'user': 'fred',    'status': 'busy', 'active': true },
	     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney']
	     *
	     * // using the "_.matches" callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'status': 'away' }), 'user');
	     * // => ['barney', 'fred']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      predicate = getCallback(predicate, thisArg, 3);
	      while (length-- && predicate(array[length], length, array)) {}
	      return baseSlice(array, 0, length + 1);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per element.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) { return n < 3; });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'status': 'busy', 'active': true },
	     *   { 'user': 'fred',    'status': 'busy', 'active': false },
	     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the "_.matches" callback shorthand
	     * _.pluck(_.dropWhile(users, { 'status': 'busy' }), 'user');
	     * // => ['pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var index = -1;
	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length && predicate(array[index], index, array)) {}
	      return baseSlice(array, index);
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for, instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.findIndex(users, function(chr) { return chr.age < 40; });
	     * // => 0
	     *
	     * // using the "_.matches" callback shorthand
	     * _.findIndex(users, { 'age': 1 });
	     * // => 2
	     *
	     * // using the "_.property" callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 1
	     */
	    function findIndex(array, predicate, thisArg) {
	      var index = -1,
	          length = array ? array.length : 0;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) { return chr.age < 40; });
	     * // => 2
	     *
	     * // using the "_.matches" callback shorthand
	     * _.findLastIndex(users, { 'age': 40 });
	     * // => 1
	     *
	     * // using the "_.property" callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      predicate = getCallback(predicate, thisArg, 3);
	      while (length--) {
	        if (predicate(array[length], length, array)) {
	          return length;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2], [3, [[4]]]]);
	     * // => [1, 2, 3, [[4]]];
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2], [3, [[4]]]], true);
	     * // => [1, 2, 3, 4];
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2], [3, [[4]]]]);
	     * // => [1, 2, 3, 4];
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
	     * it is used as the offset from the end of `array`. If `array` is sorted
	     * providing `true` for `fromIndex` performs a faster binary search.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
	     * // => 4
	     *
	     * // performing a binary search
	     * _.indexOf([4, 4, 5, 5, 6, 6], 5, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value),
	            other = array[index];

	        return (value === value ? value === other : other !== other) ? index : -1;
	      }
	      return baseIndexOf(array, value, fromIndex);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values in all provided arrays using `SameValueZero`
	     * for equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     *
	     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
	     * // => [1, 2]
	     */
	    function intersection() {
	      var args = [],
	          argsIndex = -1,
	          argsLength = arguments.length,
	          caches = [],
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf;

	      while (++argsIndex < argsLength) {
	        var value = arguments[argsIndex];
	        if (isArray(value) || isArguments(value)) {
	          args.push(value);
	          caches.push(isCommon && value.length >= 120 && createCache(argsIndex && value));
	        }
	      }
	      argsLength = args.length;
	      var array = args[0],
	          index = -1,
	          length = array ? array.length : 0,
	          result = [],
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value)) < 0) {
	          argsIndex = argsLength;
	          while (--argsIndex) {
	            var cache = caches[argsIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
	     * // => 4
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([4, 4, 5, 5, 6, 6], 5, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        return (value === value ? value === other : other !== other) ? index : -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using `SameValueZero` for equality
	     * comparisons.
	     *
	     * **Notes:**
	     *  - Unlike `_.without`, this method mutates `array`.
	     *  - `SameValueZero` comparisons are like strict equality comparisons, e.g. `===`,
	     *    except that `NaN` matches `NaN`. See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     *    for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var array = arguments[0];
	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = arguments.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = arguments[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    function pullAt(array) {
	      return basePullAt(array || [], baseFlatten(arguments, false, false, 1));
	    }

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) { return n % 2 == 0; });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var index = -1,
	          length = array ? array.length : 0,
	          result = [];

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          splice.call(array, index--, 1);
	          length--;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This function is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5, 6, 6], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the "_.property" callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    function sortedIndex(array, value, iteratee, thisArg) {
	      var func = getCallback(iteratee);
	      return (func === baseCallback && iteratee == null)
	        ? binaryIndex(array, value)
	        : binaryIndexBy(array, value, func(iteratee, thisArg, 1));
	    }

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5, 6, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value, iteratee, thisArg) {
	      var func = getCallback(iteratee);
	      return (func === baseCallback && iteratee == null)
	        ? binaryIndex(array, value, true)
	        : binaryIndexBy(array, value, func(iteratee, thisArg, 1), true);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per element.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) { return n > 1; });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'status': 'busy', 'active': false },
	     *   { 'user': 'fred',    'status': 'busy', 'active': true },
	     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the "_.matches" callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'status': 'away' }), 'user');
	     * // => ['pebbles']
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      predicate = getCallback(predicate, thisArg, 3);
	      while (length-- && predicate(array[length], length, array)) {}
	      return baseSlice(array, length + 1);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per element.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) { return n < 3; });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'status': 'busy', 'active': true },
	     *   { 'user': 'fred',    'status': 'busy', 'active': false },
	     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => ['barney']
	     *
	     * // using the "_.matches" callback shorthand
	     * _.pluck(_.takeWhile(users, { 'status': 'busy' }), 'user');
	     * // => ['barney', 'fred']
	     */
	    function takeWhile(array, predicate, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var index = -1;
	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length && predicate(array[index], index, array)) {}
	      return baseSlice(array, 0, index);
	    }

	    /**
	     * Creates an array of unique values, in order, of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
	     * // => [1, 2, 3, 5, 4]
	     */
	    function union() {
	      return baseUniq(baseFlatten(arguments, false, true));
	    }

	    /**
	     * Creates a duplicate-value-free version of an array using `SameValueZero`
	     * for equality comparisons. Providing `true` for `isSorted` performs a faster
	     * search algorithm for sorted arrays. If an iteratee function is provided it
	     * is invoked for each value in the array to generate the criterion by which
	     * uniqueness is computed. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments; (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     *  If a property name or object is provided it is used to create a "_.property"
	     *  or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([1, 2, 1]);
	     * // => [1, 2]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) { return this.floor(n); }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the "_.property" callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      // Juggle arguments.
	      if (typeof isSorted != 'boolean' && isSorted != null) {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
	        isSorted = false;
	      }
	      var func = getCallback();
	      if (!(func === baseCallback && iteratee == null)) {
	        iteratee = func(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-`_.zip`
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      var index = -1,
	          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all provided values using `SameValueZero` for
	     * equality comparisons.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
	     * // => [2, 3, 4]
	     */
	    function without(array) {
	      return baseDifference(array, baseSlice(arguments, 1));
	    }

	    /**
	     * Creates an array that is the symmetric difference of the provided arrays.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Symmetric_difference) for
	     * more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2, 3], [5, 2, 1, 4]);
	     * // => [3, 5, 4]
	     *
	     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
	     * // => [1, 4, 5]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArray(array) || isArguments(array)) {
	          var result = result
	            ? baseDifference(result, array).concat(baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    function zip() {
	      var length = arguments.length,
	          array = Array(length);

	      while (length--) {
	        array[length] = arguments[length];
	      }
	      return unzip(array);
	    }

	    /**
	     * Creates an object composed from arrays of property names and values. Provide
	     * either a single two dimensional array, e.g. `[[key1, value1], [key2, value2]]`
	     * or two arrays, one of property names and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) { return chr.user + ' is ' + chr.age; })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) { array.pop(); })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .last()
	     *  .thru(function(value) { return [value]; })
	     *  .value();
	     * // => [3]
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapper = wrapper.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapper.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value());
	    }

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).map(_.partial(Math.pow, _, 2));
	     *
	     * var other = [3, 4];
	     * var otherWrapper = wrapper.plant(other);
	     *
	     * otherWrapper.value();
	     * // => [9, 16]
	     *
	     * wrapper.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof LodashWrapper) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        if (this.__actions__.length) {
	          value = new LazyWrapper(this);
	        }
	        return new LodashWrapper(value.reverse());
	      }
	      return this.thru(function(value) {
	        return value.reverse();
	      });
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
	     * // => ['a', 'c', 'e']
	     *
	     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
	     * // => ['fred', 'pebbles']
	     */
	    function at(collection) {
	      var length = collection ? collection.length : 0;
	      if (isLength(length)) {
	        collection = toIterable(collection);
	      }
	      return baseAt(collection, baseFlatten(arguments, false, false, 1));
	    }

	    /**
	     * Checks if `value` is in `collection` using `SameValueZero` for equality
	     * comparisons. If `fromIndex` is negative, it is used as the offset from
	     * the end of `collection`.
	     *
	     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
	     * e.g. `===`, except that `NaN` matches `NaN`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex) {
	      var length = collection ? collection.length : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (!length) {
	        return false;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      } else {
	        fromIndex = 0;
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
	        : (getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) { return Math.floor(n); });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) { return this.floor(n); }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes']);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.every(users, 'age');
	     * // => true
	     *
	     * // using the "_.matches" callback shorthand
	     * _.every(users, { 'age': 36 });
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var evens = _.filter([1, 2, 3, 4], function(n) { return n % 2 == 0; });
	     * // => [2, 4]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['fred']
	     *
	     * // using the "_.matches" callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36 }), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) { return chr.age < 40; }), 'user');
	     * // => 'barney'
	     *
	     * // using the "_.matches" callback shorthand
	     * _.result(_.find(users, { 'age': 1 }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the "_.property" callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'fred'
	     */
	    function find(collection, predicate, thisArg) {
	      if (isArray(collection)) {
	        var index = findIndex(collection, predicate, thisArg);
	        return index > -1 ? collection[index] : undefined;
	      }
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(collection, predicate, baseEach);
	    }

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) { return n % 2 == 1; });
	     * // => 3
	     */
	    function findLast(collection, predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(collection, predicate, baseEachRight);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'status': 'busy' },
	     *   { 'user': 'fred',   'age': 40, 'status': 'busy' }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'status': 'busy' }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40 }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection). Iterator functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a `length` property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2, 3]).forEach(function(n) { console.log(n); }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(n, key) { console.log(n, key); });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    function forEach(collection, iteratee, thisArg) {
	      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
	        ? arrayEach(collection, iteratee)
	        : baseEach(collection, bindCallback(iteratee, thisArg, 3));
	    }

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2, 3]).forEachRight(function(n) { console.log(n); }).join(',');
	     * // => logs each value from right to left and returns the array
	     */
	    function forEachRight(collection, iteratee, thisArg) {
	      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
	        ? arrayEachRight(collection, iteratee)
	        : baseEachRight(collection, bindCallback(iteratee, thisArg, 3));
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) { return Math.floor(n); });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) { return this.floor(n); }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the "_.property" callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) { return String.fromCharCode(object.code); });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) { return this.fromCharCode(object.code); }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method named by `methodName` on each element in `collection`,
	     * returning an array of the results of each invoked method. Any additional
	     * arguments are provided to each invoked method. If `methodName` is a function
	     * it is invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|string} methodName The name of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    function invoke(collection, methodName) {
	      return baseInvoke(collection, methodName, baseSlice(arguments, 2));
	    }

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * _.map([1, 2, 3], function(n) { return n * 3; });
	     * // => [3, 6, 9]
	     *
	     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(n) { return n * 3; });
	     * // => [3, 6, 9] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments; (value, index, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     *  If a property name or object is provided it is used to create a "_.property"
	     *  or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) { return chr.age; });
	     * // => { 'user': 'fred', 'age': 40 };
	     *
	     * // using the "_.property" callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 };
	     */
	    var max = createExtremum(arrayMax);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments; (value, index, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     *  If a property name or object is provided it is used to create a "_.property"
	     *  or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) { return chr.age; });
	     * // => { 'user': 'barney', 'age': 36 };
	     *
	     * // using the "_.property" callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 };
	     */
	    var min = createExtremum(arrayMin, true);

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) { return n % 2; });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) { return this.floor(n) % 2; }, Math);
	     * // => [[1, 3], [2]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * // using the "_.matches" callback shorthand
	     * _.map(_.partition(users, { 'age': 1 }), function(array) { return _.pluck(array, 'user'); });
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the "_.property" callback shorthand
	     * _.map(_.partition(users, 'active'), function(array) { return _.pluck(array, 'user'); });
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the value of `key` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {string} key The key of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, key) {
	      return map(collection, baseProperty(key + ''));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg`and invoked with four arguments;
	     * (accumulator, value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var sum = _.reduce([1, 2, 3], function(sum, n) { return sum + n; });
	     * // => 6
	     *
	     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6, 'c': 9 } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator, thisArg) {
	      var func = isArray(collection) ? arrayReduce : baseReduce;
	      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEach);
	    }

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     * _.reduceRight(array, function(flattened, other) { return flattened.concat(other); }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator, thisArg) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce;
	      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEachRight);
	    }

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var odds = _.reject([1, 2, 3, 4], function(n) { return n % 2 == 0; });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     *
	     * // using the "_.matches" callback shorthand
	     * _.pluck(_.reject(users, { 'age': 36 }), 'user');
	     * // => ['fred']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var result = shuffle(collection);
	      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the Fisher-Yates
	     * shuffle. See [Wikipedia](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      collection = toIterable(collection);

	      var index = -1,
	          length = collection.length,
	          result = Array(length);

	      while (++index < length) {
	        var rand = baseRandom(0, index);
	        if (index != rand) {
	          result[index] = result[rand];
	        }
	        result[rand] = collection[index];
	      }
	      return result;
	    }

	    /**
	     * Gets the size of `collection` by returning `collection.length` for
	     * array-like values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2]);
	     * // => 2
	     *
	     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
	     * // => 3
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? collection.length : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments; (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     *
	     * // using the "_.matches" callback shorthand
	     * _.some(users, { 'age': 1 });
	     * // => false
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|Object|string} [iteratee=_.identity] The function
	     *  invoked per iteration. If a property name or an object is provided it is
	     *  used to create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) { return Math.sin(n); });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) { return this.sin(n); }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the "_.property" callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      var index = -1,
	          length = collection ? collection.length : 0,
	          result = isLength(length) ? Array(length) : [];

	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = null;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = { 'criteria': iteratee(value, key, collection), 'index': index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it sorts by property names
	     * instead of an iteratee function.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(string|string[])} props The property names to sort by,
	     *  specified as individual property names or arrays of property names.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 26 },
	     *   { 'user': 'fred',   'age': 30 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
	     */
	    function sortByAll(collection) {
	      var args = arguments;
	      if (args.length > 3 && isIterateeCall(args[1], args[2], args[3])) {
	        args = [collection, args[1]];
	      }
	      var index = -1,
	          length = collection ? collection.length : 0,
	          props = baseFlatten(args, false, false, 1),
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value, key, collection) {
	        var length = props.length,
	            criteria = Array(length);

	        while (length--) {
	          criteria[length] = value == null ? undefined : value[props[length]];
	        }
	        result[++index] = { 'criteria': criteria, 'index': index, 'value': value };
	      });
	      return baseSortBy(result, compareMultipleAscending);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'status': 'busy', 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'status': 'busy', 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36 }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     *
	     * _.pluck(_.where(users, { 'status': 'busy' }), 'user');
	     * // => ['barney', 'fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) { console.log(_.now() - stamp); }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = null;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        } else {
	          func = null;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the `length`
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    function bind(func, thisArg) {
	      var bitmask = BIND_FLAG;
	      if (arguments.length > 2) {
	        var partials = baseSlice(arguments, 2),
	            holders = replaceHolders(partials, bind.placeholder);

	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    }

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the `length` property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() { console.log('clicked ' + this.label); }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    function bindAll(object) {
	      return baseBindAll(object,
	        arguments.length > 1
	          ? baseFlatten(arguments, false, false, 1)
	          : functions(object)
	      );
	    }

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    function bindKey(object, key) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (arguments.length > 2) {
	        var partials = baseSlice(arguments, 2),
	            holders = replaceHolders(partials, bindKey.placeholder);

	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    }

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the `length` property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      if (guard && isIterateeCall(func, arity, guard)) {
	        arity = null;
	      }
	      var result = createWrapper(func, CURRY_FLAG, null, null, null, null, null, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the `length` property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      if (guard && isIterateeCall(func, arity, guard)) {
	        arity = null;
	      }
	      var result = createWrapper(func, CURRY_RIGHT_FLAG, null, null, null, null, null, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }

	    /**
	     * Creates a function that delays invoking `func` until after `wait` milliseconds
	     * have elapsed since the last time it was invoked. The created function comes
	     * with a `cancel` method to cancel delayed invocations. Provide an options
	     * object to indicate that `func` should be invoked on the leading and/or
	     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
	     * function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} wait The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : wait;
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          if (maxTimeoutId) {
	            clearTimeout(maxTimeoutId);
	          }
	          var isCalled = trailingCall;
	          maxTimeoutId = timeoutId = trailingCall = undefined;
	          if (isCalled) {
	            lastCalled = now();
	            result = func.apply(thisArg, args);
	            if (!timeoutId && !maxTimeoutId) {
	              args = thisArg = null;
	            }
	          }
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (trailing || (maxWait !== wait)) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = null;
	          }
	        }
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) { console.log(text); }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    function defer(func) {
	      return baseDelay(func, 1, arguments, 1);
	    }

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) { console.log(text); }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    function delay(func, wait) {
	      return baseDelay(func, wait, arguments, 2);
	    }

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function add(x, y) {
	     *   return x + y;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    function flow() {
	      var funcs = arguments,
	          length = funcs.length;

	      if (!length) {
	        return function() { return arguments[0]; };
	      }
	      if (!arrayEvery(funcs, isFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var index = 0,
	            result = funcs[index].apply(this, arguments);

	        while (++index < length) {
	          result = funcs[index].call(this, result);
	        }
	        return result;
	      };
	    }

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function add(x, y) {
	     *   return x + y;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    function flowRight() {
	      var funcs = arguments,
	          fromIndex = funcs.length - 1;

	      if (fromIndex < 0) {
	        return function() { return arguments[0]; };
	      }
	      if (!arrayEvery(funcs, isFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var index = fromIndex,
	            result = funcs[index].apply(this, arguments);

	        while (index--) {
	          result = funcs[index].call(this, result);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the ES `Map` method interface
	     * of `get`, `has`, and `set`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var cache = memoized.cache,
	            key = resolver ? resolver.apply(this, arguments) : arguments[0];

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, arguments);
	        cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(func, 2);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the `length` property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    function partial(func) {
	      var partials = baseSlice(arguments, 1),
	          holders = replaceHolders(partials, partial.placeholder);

	      return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
	    }

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the `length` property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [args] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    function partialRight(func) {
	      var partials = baseSlice(arguments, 1),
	          holders = replaceHolders(partials, partialRight.placeholder);

	      return createWrapper(func, PARTIAL_RIGHT_FLAG, null, partials, holders);
	    }

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) { return n * 3; }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    function rearg(func) {
	      var indexes = baseFlatten(arguments, false, false, 1);
	      return createWrapper(func, REARG_FLAG, null, null, null, indexes);
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and the array of arguments provided to the created function much like
	     * [Function#apply](http://es5.github.io/#x15.3.4.3).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} The function to spread arguments over.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {*} Returns the new function.
	     * @example
	     *
	     * var spread = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * spread(['Fred', 'hello']);
	     * // => 'Fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * var add = function(x, y) {
	     *   return x + y;
	     * };
	     *
	     * numbers.then(_.spread(add));
	     * // => a Promise of 76
	     */
	    function spread(func, thisArg) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(thisArg, array);
	      };
	    }

	    /**
	     * Creates a function that only invokes `func` at most once per every `wait`
	     * milliseconds. The created function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the throttled function return the result of the last
	     * `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} wait The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * var throttled =  _.throttle(renewToken, 300000, { 'trailing': false })
	     * jQuery('.interactive').on('click', throttled);
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      debounceOptions.leading = leading;
	      debounceOptions.maxWait = +wait;
	      debounceOptions.trailing = trailing;
	      return debounce(func, wait, debounceOptions);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the structured clone algorithm.
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var body = _.clone(document.body, function(value) {
	     *   return _.isElement(value) ? value.cloneNode(false) : undefined;
	     * });
	     *
	     * body === document.body
	     * // => false
	     * body.nodeName
	     * // => BODY
	     * body.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      // Juggle arguments.
	      if (typeof isDeep != 'boolean' && isDeep != null) {
	        thisArg = customizer;
	        customizer = isIterateeCall(value, isDeep, thisArg) ? null : isDeep;
	        isDeep = false;
	      }
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, isDeep, customizer);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the structured clone algorithm.
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
	     * });
	     *
	     * body === document.body
	     * // => false
	     * body.nodeName
	     * // => BODY
	     * body.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, true, customizer);
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * (function() { return _.isArguments(arguments); })();
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      var length = isObjectLike(value) ? value.length : undefined;
	      return (isLength(length) && objToString.call(value) == argsTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * (function() { return _.isArray(arguments); })();
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return (value === true || value === false || isObjectLike(value) && objToString.call(value) == boolTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return (isObjectLike(value) && objToString.call(value) == dateTag) || false;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return (value && value.nodeType === 1 && isObjectLike(value) &&
	        objToString.call(value).indexOf('Element') > -1) || false;
	    }
	    // Fallback for environments without DOM support.
	    if (!support.dom) {
	      isElement = function(value) {
	        return (value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value)) || false;
	      };
	    }

	    /**
	     * Checks if a value is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      var length = value.length;
	      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments; (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
	        return value === other;
	      }
	      var result = customizer ? customizer(value, other) : undefined;
	      return typeof result == 'undefined' ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return (isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag) || false;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on ES `Number.isFinite`. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    var isFinite = nativeNumIsFinite || function(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    };

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	      // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	      return typeof value == 'function' || false;
	    }
	    // Fallback for environments that return incorrect `typeof` operator results.
	    if (isFunction(/x/) || (Uint8Array && !isFunction(Uint8Array))) {
	      isFunction = function(value) {
	        // The use of `Object#toString` avoids issues with the `typeof` operator
	        // in older versions of Chrome and Safari which return 'function' for regexes
	        // and Safari 8 equivalents which return 'object' for typed array constructors.
	        return objToString.call(value) == funcTag;
	      };
	    }

	    /**
	     * Checks if `value` is the language type of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return type == 'function' || (value && type == 'object') || false;
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments; (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      var props = keys(source),
	          length = props.length;

	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      if (!customizer && length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return object != null && value === object[key] && hasOwnProperty.call(object, key);
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = values[length] = source[props[length]];
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as native `isNaN` which returns `true`
	     * for `undefined` and other non-numeric values. See the [ES5 spec](https://es5.github.io/#x15.1.2.4)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (objToString.call(value) == funcTag) {
	        return reNative.test(fnToString.call(value));
	      }
	      return (isObjectLike(value) && reHostCtor.test(value)) || false;
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag) || false;
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
	      if (!(value && objToString.call(value) == objectTag)) {
	        return false;
	      }
	      var valueOf = value.valueOf,
	          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

	      return objProto
	        ? (value == objProto || getPrototypeOf(value) == objProto)
	        : shimIsPlainObject(value);
	    };

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return typeof value == 'undefined';
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3);
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? value.length : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments;
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return typeof value == 'undefined' ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(baseAssign);

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = null;
	      }
	      return properties ? baseCopy(properties, result, keys(properties)) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional defaults of the same property are ignored.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    function defaults(object) {
	      if (object == null) {
	        return object;
	      }
	      var args = arrayCopy(arguments);
	      args.push(assignDefaults);
	      return assign.apply(undefined, args);
	    }

	    /**
	     * This method is like `_.findIndex` except that it returns the key of the
	     * first element `predicate` returns truthy for, instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) { return chr.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the "_.matches" callback shorthand
	     * _.findKey(users, { 'age': 1 });
	     * // => 'pebbles'
	     *
	     * // using the "_.property" callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(object, predicate, baseForOwn, true);
	    }

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `predicate` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) { return chr.age < 40; });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the "_.matches" callback shorthand
	     * _.findLastKey(users, { 'age': 36 });
	     * // => 'barney'
	     *
	     * // using the "_.property" callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 3);
	      return baseFind(object, predicate, baseForOwnRight, true);
	    }

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments; (value, key, object). Iterator functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    function forIn(object, iteratee, thisArg) {
	      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
	        iteratee = bindCallback(iteratee, thisArg, 3);
	      }
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    function forInRight(object, iteratee, thisArg) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	      return baseForRight(object, iteratee, keysIn);
	    }

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments; (value, key, object). Iterator functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(n, key) {
	     *   console.log(key);
	     * });
	     * // => logs '0', '1', and 'length' (iteration order is not guaranteed)
	     */
	    function forOwn(object, iteratee, thisArg) {
	      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
	        iteratee = bindCallback(iteratee, thisArg, 3);
	      }
	      return baseForOwn(object, iteratee);
	    }

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(n, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
	     */
	    function forOwnRight(object, iteratee, thisArg) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['all', 'any', 'bind', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Checks if `key` exists as a direct property of `object` instead of an
	     * inherited property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` is a direct property, else `false`.
	     * @example
	     *
	     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
	     * // => true
	     */
	    function has(object, key) {
	      return object ? hasOwnProperty.call(object, key) : false;
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * _.invert({ 'first': 'fred', 'second': 'barney' });
	     * // => { 'fred': 'first', 'barney': 'second' }
	     *
	     * // without `multiValue`
	     * _.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' });
	     * // => { 'fred': 'third', 'barney': 'second' }
	     *
	     * // with `multiValue`
	     * _.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' }, true);
	     * // => { 'fred': ['first', 'third'], 'barney': ['second'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = null;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      if (object) {
	        var Ctor = object.constructor,
	            length = object.length;
	      }
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	         (typeof object != 'function' && (length && isLength(length)))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created "_.property"
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for `iteratee` the created "_.matches" style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration. If a property name or object is provided it is used to
	     *  create a "_.property" or "_.matches" style callback respectively.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(n) { return n * 3; });
	     * // => { 'a': 3, 'b': 6, 'c': 9 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the "_.property" callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee, thisArg) {
	      var result = {};
	      iteratee = getCallback(iteratee, thisArg, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments; (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   return _.isArray(a) ? a.concat(b) : undefined;
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     * Property names may be specified as individual arguments or as arrays of
	     * property names. If `predicate` is provided it is invoked for each property
	     * of `object` omitting the properties `predicate` returns truthy for. The
	     * predicate is bound to `thisArg` and invoked with three arguments;
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    function omit(object, predicate, thisArg) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof predicate != 'function') {
	        var props = arrayMap(baseFlatten(arguments, false, false, 1), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      predicate = bindCallback(predicate, thisArg, 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    }

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments; (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    function pick(object, predicate, thisArg) {
	      if (object == null) {
	        return {};
	      }
	      return typeof predicate == 'function'
	        ? pickByCallback(object, bindCallback(predicate, thisArg, 3))
	        : pickByArray(object, baseFlatten(arguments, false, false, 1));
	    }

	    /**
	     * Resolves the value of property `key` on `object`. If the value of `key` is
	     * a function it is invoked with the `this` binding of `object` and its result
	     * is returned, else the property value is returned. If the property value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the property value
	     *  resolves to `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': _.constant(40) };
	     *
	     * _.result(object, 'user');
	     * // => 'fred'
	     *
	     * _.result(object, 'age');
	     * // => 40
	     *
	     * _.result(object, 'status', 'busy');
	     * // => 'busy'
	     *
	     * _.result(object, 'status', _.constant('busy'));
	     * // => 'busy'
	     */
	    function result(object, key, defaultValue) {
	      var value = object == null ? undefined : object[key];
	      if (typeof value == 'undefined') {
	        value = defaultValue;
	      }
	      return isFunction(value) ? value.call(object) : value;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments; (accumulator, value, key, object). Iterator functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var squares = _.transform([1, 2, 3, 4, 5, 6], function(result, n) {
	     *   n *= n;
	     *   if (n % 2) {
	     *     return result.push(n) < 3;
	     *   }
	     * });
	     * // => [1, 9, 25]
	     *
	     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6, 'c': 9 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) && Ctor.prototype);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = null;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to camel case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/CamelCase) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting latin-1 supplementary letters to basic latin letters.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter);
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = (typeof position == 'undefined' ? length : nativeMin(position < 0 ? 0 : (+position || 0), length)) - target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and '`', in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't require escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#102](https://html5sec.org/#102),
	     * [#108](https://html5sec.org/#108), and [#133](https://html5sec.org/#133) of
	     * the [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always quote attribute values to reduce
	     * XSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "^", "$", ".", "|", "?", "*",
	     * "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to kebab case (a.k.a. spinal case).
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles) for
	     * more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it is shorter then the given
	     * padding length. The `chars` string may be truncated if the number of padding
	     * characters can't be evenly divided by the padding length.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = floor(mid),
	          rightLength = ceil(mid);

	      chars = createPad('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it is shorter then the given padding
	     * length. The `chars` string may be truncated if the number of padding
	     * characters exceeds the padding length.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    function padLeft(string, length, chars) {
	      string = baseToString(string);
	      return string && (createPad(string, length, chars) + string);
	    }

	    /**
	     * Pads `string` on the right side if it is shorter then the given padding
	     * length. The `chars` string may be truncated if the number of padding
	     * characters exceeds the padding length.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    function padRight(string, length, chars) {
	      string = baseToString(string);
	      return string && (string + createPad(string, length, chars));
	    }

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the ES5 implementation of `parseInt`.
	     * See the [ES5 spec](https://es5.github.io/#E) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard && isIterateeCall(string, radix, guard)) {
	        radix = 0;
	      }
	      return nativeParseInt(string, radix);
	    }
	    // Fallback for environments with pre-ES5 implementations.
	    if (nativeParseInt(whitespace + '08') != 8) {
	      parseInt = function(string, radix, guard) {
	        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	        // Chrome fails to trim leading <BOM> whitespace characters.
	        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	          radix = 0;
	        } else if (radix) {
	          radix = +radix;
	        }
	        string = trim(string);
	        return nativeParseInt(string, radix || (reHexPrefix.test(string) ? 16 : 10));
	      };
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = floor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to snake case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Snake_case) for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to start case.
	     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null ? 0 : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes sourceURLs for easier debugging.
	     * See the [HTML5 Rocks article on sourcemaps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for more details.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     *   var __t, __p = '';
	     *   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     *   return __p;
	     * }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      //var settings = lodash.templateSettings;

	      //if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        //options = otherOptions = null;
	      //}
	      //string = baseToString(string);
	      //options = baseAssign(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      //var imports = baseAssign(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          //importsKeys = keys(imports),
	          //importsValues = baseValues(imports, importsKeys);

	      //var isEscaping,
	          //isEvaluating,
	          //index = 0,
	          //interpolate = options.interpolate || reNoMatch,
	          //source = "__p += '";

	      //// Compile the regexp to match each delimiter.
	      //var reDelimiters = RegExp(
	        //(options.escape || reNoMatch).source + '|' +
	        //interpolate.source + '|' +
	        //(interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        //(options.evaluate || reNoMatch).source + '|$'
	      //, 'g');

	      //// Use a sourceURL for easier debugging.
	      //var sourceURL = '//# sourceURL=' +
	        //('sourceURL' in options
	          //? options.sourceURL
	          //: ('lodash.templateSources[' + (++templateCounter) + ']')
	        //) + '\n';

	      //string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        //interpolateValue || (interpolateValue = esTemplateValue);

	        //// Escape characters that can't be included in string literals.
	        //source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        //// Replace delimiters with snippets.
	        //if (escapeValue) {
	          //isEscaping = true;
	          //source += "' +\n__e(" + escapeValue + ") +\n'";
	        //}
	        //if (evaluateValue) {
	          //isEvaluating = true;
	          //source += "';\n" + evaluateValue + ";\n__p += '";
	        //}
	        //if (interpolateValue) {
	          //source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        //}
	        //index = offset + match.length;

	        //// The JS engine embedded in Adobe products requires returning the `match`
	        //// string in order to produce the correct `offset` value.
	        //return match;
	      //});

	      //source += "';\n";

	      //// If `variable` is not specified wrap a with-statement around the generated
	      //// code to add the data object to the top of the scope chain.
	      //var variable = options.variable;
	      //if (!variable) {
	        //source = 'with (obj) {\n' + source + '\n}\n';
	      //}
	      //// Cleanup code by stripping empty strings.
	      //source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        //.replace(reEmptyStringMiddle, '$1')
	        //.replace(reEmptyStringTrailing, '$1;');

	      //// Frame code as the function body.
	      //source = 'function(' + (variable || 'obj') + ') {\n' +
	        //(variable
	          //? ''
	          //: 'obj || (obj = {});\n'
	        //) +
	        //"var __t, __p = ''" +
	        //(isEscaping
	           //? ', __e = _.escape'
	           //: ''
	        //) +
	        //(isEvaluating
	          //? ', __j = Array.prototype.join;\n' +
	            //"function print() { __p += __j.call(arguments, '') }\n"
	          //: ';\n'
	        //) +
	        //source +
	        //'return __p\n}';

	      //var result = attempt(function() {
	        //return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      //});

	      //// Provide the compiled function's source by its `toString` method or
	      //// the `source` property as a convenience for inlining compiled templates.
	      //result.source = source;
	      //if (isError(result)) {
	        //throw result;
	      //}
	      //return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar]
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string))
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1)
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it is longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', { 'length': 24, 'separator': ' ' });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', { 'length': 24, 'separator': /,? +/ });
	     * //=> 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', { 'omission': ' [...]' });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = null;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? +options.length || 0 : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = null;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    function attempt(func) {
	      try {
	        return func.apply(undefined, baseSlice(arguments, 1));
	      } catch(e) {
	        return isError(e) ? e : Error(e);
	      }
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = null;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function which performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * var matchesAge = _.matches({ 'age': 36 });
	     *
	     * _.filter(users, matchesAge);
	     * // => [{ 'user': 'barney', 'age': 36 }]
	     *
	     * _.find(users, matchesAge);
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=this] object The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * // use `_.runInContext` to avoid potential conflicts (esp. in Node.js)
	     * var _ = require('lodash').runInContext();
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj && keys(source),
	            methodNames = props && props.length && baseFunctions(source, props);

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__);
	                (result.__actions__ = arrayCopy(this.__actions__)).push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              var args = [this.value()];
	              push.apply(args, arguments);
	              return func.apply(object, args);
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      context._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function which returns the property value of `key` on a given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * var getName = _.property('user');
	     *
	     * _.map(users, getName);
	     * // => ['fred', barney']
	     *
	     * _.pluck(_.sortBy(users, getName), 'user');
	     * // => ['barney', 'fred']
	     */
	    function property(key) {
	      return baseProperty(key + '');
	    }

	    /**
	     * The inverse of `_.property`; this method creates a function which returns
	     * the property value of a given key on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to inspect.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40, 'active': true };
	     * _.map(['active', 'user'], _.propertyOf(object));
	     * // => [true, 'fred']
	     *
	     * var object = { 'a': 3, 'b': 1, 'c': 2 };
	     * _.sortBy(['a', 'b', 'c'], _.propertyOf(object));
	     * // => ['b', 'c', 'a']
	     */
	    function propertyOf(object) {
	      return function(key) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `start` is less than `end` a
	     * zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = null;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(ceil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) { mage.castSpell(n); });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2` respectively
	     *
	     * _.times(3, function(n) { this.cast(n); }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = +n;

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure `new LodashWrapper` is an instance of `lodash`.
	    LodashWrapper.prototype = baseCreate(lodash.prototype);

	    // Ensure `new LazyWraper` is an instance of `LodashWrapper`
	    LazyWrapper.prototype = baseCreate(LodashWrapper.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var isFilter = index == LAZY_FILTER_FLAG,
	          isWhile = index == LAZY_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone(),
	            filtered = result.__filtered__,
	            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

	        result.__filtered__ = filtered || isFilter || (isWhile && result.__dir__ < 0);
	        iteratees.push({ 'iteratee': getCallback(iteratee, thisArg, 3), 'type': index });
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      var countName = '__' + methodName + 'Count__',
	          whileName = methodName + 'While';

	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n == null ? 1 : nativeMax(+n || 0, 0);

	        var result = this.clone();
	        if (result.__filtered__) {
	          var value = result[countName];
	          result[countName] = index ? nativeMin(value, n) : (value + n);
	        } else {
	          var views = result.__views__ || (result.__views__ = []);
	          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };

	      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
	        return this.reverse()[whileName](predicate, thisArg).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right': '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : baseProperty;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(index ? value : (value + '')));
	      };
	    });

	    LazyWrapper.prototype.dropWhile = function(iteratee, thisArg) {
	      var done;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return this.filter(function(value, index, array) {
	        return done || (done = !iteratee(value, index, array));
	      });
	    };

	    LazyWrapper.prototype.reject = function(iteratee, thisArg) {
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return this.filter(function(value, index, array) {
	        return !iteratee(value, index, array);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);
	      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

	      if (typeof end != 'undefined') {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName],
	          retUnwrapped = /^(?:first|last)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = arguments,
	            chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          return onlyLazy
	            ? func.call(value)
	            : lodashFunc.call(lodash, this.value());
	        }
	        var interceptor = function(value) {
	          var otherArgs = [value];
	          push.apply(otherArgs, args);
	          return lodashFunc.apply(lodash, otherArgs);
	        };
	        if (isLazy || isArray(value)) {
	          var wrapper = onlyLazy ? value : new LazyWrapper(this),
	              result = func.apply(wrapper, args);

	          if (!retUnwrapped && (isHybrid || result.__actions__)) {
	            var actions = result.__actions__ || (result.__actions__ = []);
	            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
	          }
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array.prototype` functions to `lodash.prototype`.
	    arrayEach(['concat', 'join', 'pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the lodash wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the lodash wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Narwhal or Rhino -require.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)(module), (function() { return this; }())))

/***/ },
/* 5 */,
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var buffer = __webpack_require__(1);
	var assert = __webpack_require__(15);

	var js = __webpack_require__(10);
	var $ = __webpack_require__(8);

	function equals(a, b) {
	  if (a.length !== b.length) {
	    return false;
	  }
	  var length = a.length;
	  for (var i = 0; i < length; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = {
	  /**
	   * Fill a buffer with a value.
	   *
	   * @param {Buffer} buffer
	   * @param {number} value
	   * @return {Buffer}
	   */
	  fill: function fill(buffer, value) {
	    $.checkArgumentType(buffer, 'Buffer', 'buffer');
	    $.checkArgumentType(value, 'number', 'value');
	    var length = buffer.length;
	    for (var i = 0; i < length; i++) {
	      buffer[i] = value;
	    }
	    return buffer;
	  },

	  /**
	   * Return a copy of a buffer
	   *
	   * @param {Buffer} original
	   * @return {Buffer}
	   */
	  copy: function(original) {
	    var buffer = new Buffer(original.length);
	    original.copy(buffer);
	    return buffer;
	  },

	  /**
	   * Returns true if the given argument is an instance of a buffer. Tests for
	   * both node's Buffer and Uint8Array
	   *
	   * @param {*} arg
	   * @return {boolean}
	   */
	  isBuffer: function isBuffer(arg) {
	    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;
	  },

	  /**
	   * Returns a zero-filled byte array
	   *
	   * @param {number} bytes
	   * @return {Buffer}
	   */
	  emptyBuffer: function emptyBuffer(bytes) {
	    $.checkArgumentType(bytes, 'number', 'bytes');
	    var result = new buffer.Buffer(bytes);
	    for (var i = 0; i < bytes; i++) {
	      result.write('\0', i);
	    }
	    return result;
	  },

	  /**
	   * Concatenates a buffer
	   *
	   * Shortcut for <tt>buffer.Buffer.concat</tt>
	   */
	  concat: buffer.Buffer.concat,

	  equals: equals,
	  equal: equals,

	  /**
	   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value
	   *
	   * @param {number} integer
	   * @return {Buffer}
	   */
	  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {
	    $.checkArgumentType(integer, 'number', 'integer');
	    return new buffer.Buffer([integer & 0xff]);
	  },

	  /**
	   * Transform a 4-byte integer into a Buffer of length 4.
	   *
	   * @param {number} integer
	   * @return {Buffer}
	   */
	  integerAsBuffer: function integerAsBuffer(integer) {
	    $.checkArgumentType(integer, 'number', 'integer');
	    var bytes = [];
	    bytes.push((integer >> 24) & 0xff);
	    bytes.push((integer >> 16) & 0xff);
	    bytes.push((integer >> 8) & 0xff);
	    bytes.push(integer & 0xff);
	    return new Buffer(bytes);
	  },

	  /**
	   * Transform the first 4 values of a Buffer into a number, in little endian encoding
	   *
	   * @param {Buffer} buffer
	   * @return {number}
	   */
	  integerFromBuffer: function integerFromBuffer(buffer) {
	    $.checkArgumentType(buffer, 'Buffer', 'buffer');
	    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];
	  },

	  /**
	   * Transforms the first byte of an array into a number ranging from -128 to 127
	   * @param {Buffer} buffer
	   * @return {number}
	   */
	  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {
	    $.checkArgumentType(buffer, 'Buffer', 'buffer');
	    return buffer[0];
	  },

	  /**
	   * Transforms a buffer into a string with a number in hexa representation
	   *
	   * Shorthand for <tt>buffer.toString('hex')</tt>
	   *
	   * @param {Buffer} buffer
	   * @return {string}
	   */
	  bufferToHex: function bufferToHex(buffer) {
	    $.checkArgumentType(buffer, 'Buffer', 'buffer');
	    return buffer.toString('hex');
	  },

	  /**
	   * Reverse a buffer
	   * @param {Buffer} param
	   * @return {Buffer}
	   */
	  reverse: function reverse(param) {
	    $.checkArgumentType(param, 'Buffer', 'param');
	    var ret = new buffer.Buffer(param.length);
	    for (var i = 0; i < param.length; i++) {
	      ret[i] = param[param.length - i - 1];
	    }
	    return ret;
	  },

	  /**
	   * Transforms an hexa encoded string into a Buffer with binary values
	   *
	   * Shorthand for <tt>Buffer(string, 'hex')</tt>
	   *
	   * @param {string} string
	   * @return {Buffer}
	   */
	  hexToBuffer: function hexToBuffer(string) {
	    assert(js.isHexa(string));
	    return new buffer.Buffer(string, 'hex');
	  }
	};

	module.exports.NULL_HASH = module.exports.fill(new Buffer(32), 0);
	module.exports.EMPTY_BUFFER = new Buffer(0);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 7 */,
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var errors = __webpack_require__(30);
	var _ = __webpack_require__(4);

	module.exports = {
	  checkState: function(condition, message) {
	    if (!condition) {
	      throw new errors.InvalidState(message);
	    }
	  },
	  checkArgument: function(condition, argumentName, message, docsPath) {
	    if (!condition) {
	      throw new errors.InvalidArgument(argumentName, message, docsPath);
	    }
	  },
	  checkArgumentType: function(argument, type, argumentName) {
	    argumentName = argumentName || '(unknown name)';
	    if (_.isString(type)) {
	      if (type === 'Buffer') {
	        var BufferUtil = __webpack_require__(6);
	        if (!BufferUtil.isBuffer(argument)) {
	          throw new errors.InvalidArgumentType(argument, type, argumentName);
	        }
	      } else if (typeof argument !== type) {
	        throw new errors.InvalidArgumentType(argument, type, argumentName);
	      }
	    } else {
	      if (!(argument instanceof type)) {
	        throw new errors.InvalidArgumentType(argument, type.name, argumentName);
	      }
	    }
	  }
	};


/***/ },
/* 9 */,
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);

	/**
	 * Determines whether a string contains only hexadecimal values
	 *
	 * @name JSUtil.isHexa
	 * @param {string} value
	 * @return {boolean} true if the string is the hexa representation of a number
	 */
	var isHexa = function isHexa(value) {
	  if (!_.isString(value)) {
	    return false;
	  }
	  return /^[0-9a-fA-F]+$/.test(value);
	};

	/**
	 * @namespace JSUtil
	 */
	module.exports = {
	  /**
	   * Test if an argument is a valid JSON object. If it is, returns a truthy
	   * value (the json object decoded), so no double JSON.parse call is necessary
	   *
	   * @param {string} arg
	   * @return {Object|boolean} false if the argument is not a JSON string.
	   */
	  isValidJSON: function isValidJSON(arg) {
	    var parsed;
	    if (!_.isString(arg)) {
	      return false;
	    }
	    try {
	      parsed = JSON.parse(arg);
	    } catch (e) {
	      return false;
	    }
	    if (typeof(parsed) === 'object') {
	      return true;
	    }
	    return false;
	  },
	  isHexa: isHexa,
	  isHexaString: isHexa,

	  /**
	   * Clone an array
	   */
	  cloneArray: function(array) {
	    return [].concat(array);
	  },

	  /**
	   * Define immutable properties on a target object
	   *
	   * @param {Object} target - An object to be extended
	   * @param {Object} values - An object of properties
	   * @return {Object} The target object
	   */
	  defineImmutable: function defineImmutable(target, values){
	    Object.keys(values).forEach(function(key){
	      Object.defineProperty(target, key, {
	        configurable: false,
	        enumerable: true,
	        value: values[key]
	      });
	    });
	    return target;
	  }
	};


/***/ },
/* 11 */,
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var BN = __webpack_require__(20);
	var $ = __webpack_require__(8);
	var _ = __webpack_require__(4);

	var reversebuf = function(buf) {
	  var buf2 = new Buffer(buf.length);
	  for (var i = 0; i < buf.length; i++) {
	    buf2[i] = buf[buf.length - 1 - i];
	  }
	  return buf2;
	};

	BN.Zero = new BN(0);
	BN.One = new BN(1);
	BN.Minus1 = new BN(-1);

	BN.fromNumber = function(n) {
	  $.checkArgument(_.isNumber(n));
	  return new BN(n);
	};

	BN.fromString = function(str) {
	  $.checkArgument(_.isString(str));
	  return new BN(str);
	};

	BN.fromBuffer = function(buf, opts) {
	  if (typeof opts !== 'undefined' && opts.endian === 'little') {
	    buf = reversebuf(buf);
	  }
	  var hex = buf.toString('hex');
	  var bn = new BN(hex, 16);
	  return bn;
	};

	/**
	 * Instantiate a BigNumber from a "signed magnitude buffer"
	 * (a buffer where the most significant bit represents the sign (0 = positive, -1 = negative))
	 */
	BN.fromSM = function(buf, opts) {
	  var ret;
	  if (buf.length === 0) {
	    return BN.fromBuffer(new Buffer([0]));
	  }

	  var endian = 'big';
	  if (opts) {
	    endian = opts.endian;
	  }
	  if (endian === 'little') {
	    buf = reversebuf(buf);
	  }

	  if (buf[0] & 0x80) {
	    buf[0] = buf[0] & 0x7f;
	    ret = BN.fromBuffer(buf);
	    ret.neg().copy(ret);
	  } else {
	    ret = BN.fromBuffer(buf);
	  }
	  return ret;
	};


	BN.prototype.toNumber = function() {
	  return parseInt(this.toString(10), 10);
	};

	BN.prototype.toBuffer = function(opts) {
	  var buf, hex;
	  if (opts && opts.size) {
	    hex = this.toString(16, 2);
	    var natlen = hex.length / 2;
	    buf = new Buffer(hex, 'hex');

	    if (natlen === opts.size) {
	      buf = buf;
	    } else if (natlen > opts.size) {
	      buf = BN.trim(buf, natlen);
	    } else if (natlen < opts.size) {
	      buf = BN.pad(buf, natlen, opts.size);
	    }
	  } else {
	    hex = this.toString(16, 2);
	    buf = new Buffer(hex, 'hex');
	  }

	  if (typeof opts !== 'undefined' && opts.endian === 'little') {
	    buf = reversebuf(buf);
	  }

	  return buf;
	};

	BN.prototype.toSMBigEndian = function() {
	  var buf;
	  if (this.cmp(BN.Zero) === -1) {
	    buf = this.neg().toBuffer();
	    if (buf[0] & 0x80) {
	      buf = Buffer.concat([new Buffer([0x80]), buf]);
	    } else {
	      buf[0] = buf[0] | 0x80;
	    }
	  } else {
	    buf = this.toBuffer();
	    if (buf[0] & 0x80) {
	      buf = Buffer.concat([new Buffer([0x00]), buf]);
	    }
	  }

	  if (buf.length === 1 & buf[0] === 0) {
	    buf = new Buffer([]);
	  }
	  return buf;
	};

	BN.prototype.toSM = function(opts) {
	  var endian = opts ? opts.endian : 'big';
	  var buf = this.toSMBigEndian();

	  if (endian === 'little') {
	    buf = reversebuf(buf);
	  }
	  return buf;
	};

	/**
	 * Create a BN from a "ScriptNum":
	 * This is analogous to the constructor for CScriptNum in bitcoind. Many ops in
	 * bitcoind's script interpreter use CScriptNum, which is not really a proper
	 * bignum. Instead, an error is thrown if trying to input a number bigger than
	 * 4 bytes. We copy that behavior here.
	 */
	BN.fromScriptNumBuffer = function(buf, fRequireMinimal) {
	  var nMaxNumSize = 4;
	  $.checkArgument(buf.length <= nMaxNumSize, new Error('script number overflow'));
	  if (fRequireMinimal && buf.length > 0) {
	    // Check that the number is encoded with the minimum possible
	    // number of bytes.
	    //
	    // If the most-significant-byte - excluding the sign bit - is zero
	    // then we're not minimal. Note how this test also rejects the
	    // negative-zero encoding, 0x80.
	    if ((buf[buf.length - 1] & 0x7f) === 0) {
	      // One exception: if there's more than one byte and the most
	      // significant bit of the second-most-significant-byte is set
	      // it would conflict with the sign bit. An example of this case
	      // is +-255, which encode to 0xff00 and 0xff80 respectively.
	      // (big-endian).
	      if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) {
	        throw new Error('non-minimally encoded script number');
	      }
	    }
	  }
	  return BN.fromSM(buf, {
	    endian: 'little'
	  });
	};

	/**
	 * The corollary to the above, with the notable exception that we do not throw
	 * an error if the output is larger than four bytes. (Which can happen if
	 * performing a numerical operation that results in an overflow to more than 4
	 * bytes).
	 */
	BN.prototype.toScriptNumBuffer = function() {
	  return this.toSM({
	    endian: 'little'
	  });
	};

	BN.prototype.gt = function(b) {
	  return this.cmp(b) > 0;
	};

	BN.prototype.lt = function(b) {
	  return this.cmp(b) < 0;
	};

	BN.trim = function(buf, natlen) {
	  return buf.slice(natlen - buf.length, buf.length);
	};

	BN.pad = function(buf, natlen, size) {
	  var rbuf = new Buffer(size);
	  for (var i = 0; i < buf.length; i++) {
	    rbuf[rbuf.length - 1 - i] = buf[buf.length - 1 - i];
	  }
	  for (i = 0; i < size - natlen; i++) {
	    rbuf[i] = 0;
	  }
	  return rbuf;
	};

	module.exports = BN;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 13 */,
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var hashjs = __webpack_require__(41);
	var sha512 = __webpack_require__(235);
	var crypto = __webpack_require__(77);
	var BufferUtil = __webpack_require__(6);
	var $ = __webpack_require__(8);

	var Hash = module.exports;

	Hash.sha1 = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  return crypto.createHash('sha1').update(buf).digest();
	};

	Hash.sha1.blocksize = 512;

	Hash.sha256 = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  return crypto.createHash('sha256').update(buf).digest();
	};

	Hash.sha256.blocksize = 512;

	Hash.sha256sha256 = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  return Hash.sha256(Hash.sha256(buf));
	};

	Hash.ripemd160 = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  var hash = (new hashjs.ripemd160()).update(buf).digest();
	  return new Buffer(hash);
	};

	Hash.sha256ripemd160 = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  return Hash.ripemd160(Hash.sha256(buf));
	};

	Hash.sha512 = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  var hash = sha512(buf);
	  return new Buffer(hash);
	};

	Hash.sha512.blocksize = 1024;

	Hash.hmac = function(hashf, data, key) {
	  //http://en.wikipedia.org/wiki/Hash-based_message_authentication_code
	  //http://tools.ietf.org/html/rfc4868#section-2
	  $.checkArgument(BufferUtil.isBuffer(data));
	  $.checkArgument(BufferUtil.isBuffer(key));
	  $.checkArgument(hashf.blocksize);

	  var blocksize = hashf.blocksize / 8;

	  if (key.length > blocksize) {
	    key = hashf(key);
	  } else if (key < blocksize) {
	    var fill = new Buffer(blocksize);
	    fill.fill(0);
	    key.copy(fill);
	    key = fill;
	  }

	  var o_key = new Buffer(blocksize);
	  o_key.fill(0x5c);

	  var i_key = new Buffer(blocksize);
	  i_key.fill(0x36);

	  var o_key_pad = new Buffer(blocksize);
	  var i_key_pad = new Buffer(blocksize);
	  for (var i = 0; i < blocksize; i++) {
	    o_key_pad[i] = o_key[i] ^ key[i];
	    i_key_pad[i] = i_key[i] ^ key[i];
	  }

	  return hashf(Buffer.concat([o_key_pad, hashf(Buffer.concat([i_key_pad, data]))]));
	};

	Hash.sha256hmac = function(data, key) {
	  return Hash.hmac(Hash.sha256, data, key);
	};

	Hash.sha512hmac = function(data, key) {
	  return Hash.hmac(Hash.sha512, data, key);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(17);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 16 */,
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(114);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(113);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2)))

/***/ },
/* 18 */,
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(125);

	module.exports.Interpreter = __webpack_require__(213);


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// Utils

	function assert(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	}

	// Could use `inherits` module, but don't want to move from single file
	// architecture yet.
	function inherits(ctor, superCtor) {
	  ctor.super_ = superCtor
	  var TempCtor = function () {}
	  TempCtor.prototype = superCtor.prototype
	  ctor.prototype = new TempCtor()
	  ctor.prototype.constructor = ctor
	}

	// BN

	function BN(number, base, endian) {
	  // May be `new BN(bn)` ?
	  if (number !== null &&
	      typeof number === 'object' &&
	      Array.isArray(number.words)) {
	    return number;
	  }

	  this.sign = false;
	  this.words = null;
	  this.length = 0;

	  // Reduction context
	  this.red = null;

	  if (base === 'le' || base === 'be') {
	    endian = base;
	    base = 10;
	  }

	  if (number !== null)
	    this._init(number || 0, base || 10, endian || 'be');
	}
	if (true)
	  module.exports = BN;

	BN.BN = BN;
	BN.wordSize = 26;

	BN.prototype._init = function init(number, base, endian) {
	  if (typeof number === 'number') {
	    if (number < 0) {
	      this.sign = true;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    }
	    return;
	  } else if (typeof number === 'object') {
	    return this._initArray(number, base, endian);
	  }
	  if (base === 'hex')
	    base = 16;
	  assert(base === (base | 0) && base >= 2 && base <= 36);

	  number = number.toString().replace(/\s+/g, '');
	  var start = 0;
	  if (number[0] === '-')
	    start++;

	  if (base === 16)
	    this._parseHex(number, start);
	  else
	    this._parseBase(number, base, start);

	  if (number[0] === '-')
	    this.sign = true;

	  this.strip();
	};

	BN.prototype._initArray = function _initArray(number, base, endian) {
	  // Perhaps a Uint8Array
	  assert(typeof number.length === 'number');
	  this.length = Math.ceil(number.length / 3);
	  this.words = new Array(this.length);
	  for (var i = 0; i < this.length; i++)
	    this.words[i] = 0;

	  var off = 0;
	  if (endian === 'be') {
	    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {
	      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	  } else if (endian === 'le') {
	    for (var i = 0, j = 0; i < number.length; i += 3) {
	      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	  }
	  return this.strip();
	};

	BN.prototype._parseHex = function parseHex(number, start) {
	  // Create possibly bigger array to ensure that it fits the number
	  this.length = Math.ceil((number.length - start) / 6);
	  this.words = new Array(this.length);
	  for (var i = 0; i < this.length; i++)
	    this.words[i] = 0;

	  // Scan 24-bit chunks and add them to the number
	  var off = 0;
	  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {
	    var w = parseInt(number.slice(i, i + 6), 16);
	    this.words[j] |= (w << off) & 0x3ffffff;
	    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    off += 24;
	    if (off >= 26) {
	      off -= 26;
	      j++;
	    }
	  }
	  if (i + 6 !== start) {
	    var w = parseInt(number.slice(start, i + 6), 16);
	    this.words[j] |= (w << off) & 0x3ffffff;
	    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	  }
	  this.strip();
	};

	BN.prototype._parseBase = function parseBase(number, base, start) {
	  // Initialize as zero
	  this.words = [ 0 ];
	  this.length = 1;

	  var word = 0;
	  var q = 1;
	  var p = 0;
	  var bigQ = null;
	  for (var i = start; i < number.length; i++) {
	    var digit;
	    var ch = number[i];
	    if (base === 10 || ch <= '9')
	      digit = ch | 0;
	    else if (ch >= 'a')
	      digit = ch.charCodeAt(0) - 97 + 10;
	    else
	      digit = ch.charCodeAt(0) - 65 + 10;
	    word *= base;
	    word += digit;
	    q *= base;
	    p++;

	    if (q > 0xfffff) {
	      assert(q <= 0x3ffffff);
	      if (!bigQ)
	        bigQ = new BN(q);
	      this.mul(bigQ).copy(this);
	      this.iadd(new BN(word));
	      word = 0;
	      q = 1;
	      p = 0;
	    }
	  }
	  if (p !== 0) {
	    this.mul(new BN(q)).copy(this);
	    this.iadd(new BN(word));
	  }
	};

	BN.prototype.copy = function copy(dest) {
	  dest.words = new Array(this.length);
	  for (var i = 0; i < this.length; i++)
	    dest.words[i] = this.words[i];
	  dest.length = this.length;
	  dest.sign = this.sign;
	  dest.red = this.red;
	};

	BN.prototype.clone = function clone() {
	  var r = new BN(null);
	  this.copy(r);
	  return r;
	};

	// Remove leading `0` from `this`
	BN.prototype.strip = function strip() {
	  while (this.length > 1 && this.words[this.length - 1] === 0)
	    this.length--;
	  return this._normSign();
	};

	BN.prototype._normSign = function _normSign() {
	  // -0 = 0
	  if (this.length === 1 && this.words[0] === 0)
	    this.sign = false;
	  return this;
	};

	BN.prototype.inspect = function inspect() {
	  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	};

	/*

	var zeros = [];
	var groupSizes = [];
	var groupBases = [];

	var s = '';
	var i = -1;
	while (++i < BN.wordSize) {
	  zeros[i] = s;
	  s += '0';
	}
	groupSizes[0] = 0;
	groupSizes[1] = 0;
	groupBases[0] = 0;
	groupBases[1] = 0;
	var base = 2 - 1;
	while (++base < 36 + 1) {
	  var groupSize = 0;
	  var groupBase = 1;
	  // TODO: <=
	  while (groupBase < (1 << BN.wordSize) / base) {
	    groupBase *= base;
	    groupSize += 1;
	  }
	  groupSizes[base] = groupSize;
	  groupBases[base] = groupBase;
	}

	*/

	var zeros = [
	  '',
	  '0',
	  '00',
	  '000',
	  '0000',
	  '00000',
	  '000000',
	  '0000000',
	  '00000000',
	  '000000000',
	  '0000000000',
	  '00000000000',
	  '000000000000',
	  '0000000000000',
	  '00000000000000',
	  '000000000000000',
	  '0000000000000000',
	  '00000000000000000',
	  '000000000000000000',
	  '0000000000000000000',
	  '00000000000000000000',
	  '000000000000000000000',
	  '0000000000000000000000',
	  '00000000000000000000000',
	  '000000000000000000000000',
	  '0000000000000000000000000'
	];

	var groupSizes = [
	  0, 0,
	  25, 16, 12, 11, 10, 9, 8,
	  8, 7, 7, 7, 7, 6, 6,
	  6, 6, 6, 6, 6, 5, 5,
	  5, 5, 5, 5, 5, 5, 5,
	  5, 5, 5, 5, 5, 5, 5
	];

	var groupBases = [
	  0, 0,
	  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	];

	BN.prototype.toString = function toString(base, padding) {
	  base = base || 10;
	  if (base === 16 || base === 'hex') {
	    var out = '';
	    var off = 0;
	    var padding = padding | 0 || 1;
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = this.words[i];
	      var word = (((w << off) | carry) & 0xffffff).toString(16);
	      carry = (w >>> (24 - off)) & 0xffffff;
	      if (carry !== 0 || i !== this.length - 1)
	        out = zeros[6 - word.length] + word + out;
	      else
	        out = word + out;
	      off += 2;
	      if (off >= 26) {
	        off -= 26;
	        i--;
	      }
	    }
	    if (carry !== 0)
	      out = carry.toString(16) + out;
	    while (out.length % padding !== 0)
	      out = '0' + out;
	    if (this.sign)
	      out = '-' + out;
	    return out;
	  } else if (base === (base | 0) && base >= 2 && base <= 36) {
	    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	    var groupSize = groupSizes[base];
	    // var groupBase = Math.pow(base, groupSize);
	    var groupBase = groupBases[base];
	    var out = '';
	    var c = this.clone();
	    c.sign = false;
	    while (c.cmpn(0) !== 0) {
	      var r = c.modn(groupBase).toString(base);
	      c = c.idivn(groupBase);

	      if (c.cmpn(0) !== 0)
	        out = zeros[groupSize - r.length] + r + out;
	      else
	        out = r + out;
	    }
	    if (this.cmpn(0) === 0)
	      out = '0' + out;
	    if (this.sign)
	      out = '-' + out;
	    return out;
	  } else {
	    assert(false, 'Base should be between 2 and 36');
	  }
	};

	BN.prototype.toJSON = function toJSON() {
	  return this.toString(16);
	};

	BN.prototype.toArray = function toArray() {
	  this.strip();
	  var res = new Array(this.byteLength());
	  res[0] = 0;

	  var q = this.clone();
	  for (var i = 0; q.cmpn(0) !== 0; i++) {
	    var b = q.andln(0xff);
	    q.ishrn(8);

	    // Assume big-endian
	    res[res.length - i - 1] = b;
	  }

	  return res;
	};

	/*
	function genCountBits(bits) {
	  var arr = [];

	  for (var i = bits - 1; i >= 0; i--) {
	    var bit = '0x' + (1 << i).toString(16);
	    arr.push('w >= ' + bit + ' ? ' + (i + 1));
	  }

	  return new Function('w', 'return ' + arr.join(' :\n') + ' :\n0;');
	};

	BN.prototype._countBits = genCountBits(26);
	*/

	// Sadly chrome apps could not contain `new Function()` calls
	BN.prototype._countBits = function _countBits(w) {
	  return w >= 0x2000000 ? 26 :
	         w >= 0x1000000 ? 25 :
	         w >= 0x800000 ? 24 :
	         w >= 0x400000 ? 23 :
	         w >= 0x200000 ? 22 :
	         w >= 0x100000 ? 21 :
	         w >= 0x80000 ? 20 :
	         w >= 0x40000 ? 19 :
	         w >= 0x20000 ? 18 :
	         w >= 0x10000 ? 17 :
	         w >= 0x8000 ? 16 :
	         w >= 0x4000 ? 15 :
	         w >= 0x2000 ? 14 :
	         w >= 0x1000 ? 13 :
	         w >= 0x800 ? 12 :
	         w >= 0x400 ? 11 :
	         w >= 0x200 ? 10 :
	         w >= 0x100 ? 9 :
	         w >= 0x80 ? 8 :
	         w >= 0x40 ? 7 :
	         w >= 0x20 ? 6 :
	         w >= 0x10 ? 5 :
	         w >= 0x8 ? 4 :
	         w >= 0x4 ? 3 :
	         w >= 0x2 ? 2 :
	         w >= 0x1 ? 1 :
	         0;
	};

	// Return number of used bits in a BN
	BN.prototype.bitLength = function bitLength() {
	  var hi = 0;
	  var w = this.words[this.length - 1];
	  var hi = this._countBits(w);
	  return (this.length - 1) * 26 + hi;
	};

	BN.prototype.byteLength = function byteLength() {
	  var hi = 0;
	  var w = this.words[this.length - 1];
	  return Math.ceil(this.bitLength() / 8);
	};

	// Return negative clone of `this`
	BN.prototype.neg = function neg() {
	  if (this.cmpn(0) === 0)
	    return this.clone();

	  var r = this.clone();
	  r.sign = !this.sign;
	  return r;
	};

	// Add `num` to `this` in-place
	BN.prototype.iadd = function iadd(num) {
	  // negative + positive
	  if (this.sign && !num.sign) {
	    this.sign = false;
	    var r = this.isub(num);
	    this.sign = !this.sign;
	    return this._normSign();

	  // positive + negative
	  } else if (!this.sign && num.sign) {
	    num.sign = false;
	    var r = this.isub(num);
	    num.sign = true;
	    return r._normSign();
	  }

	  // a.length > b.length
	  var a;
	  var b;
	  if (this.length > num.length) {
	    a = this;
	    b = num;
	  } else {
	    a = num;
	    b = this;
	  }

	  var carry = 0;
	  for (var i = 0; i < b.length; i++) {
	    var r = a.words[i] + b.words[i] + carry;
	    this.words[i] = r & 0x3ffffff;
	    carry = r >>> 26;
	  }
	  for (; carry !== 0 && i < a.length; i++) {
	    var r = a.words[i] + carry;
	    this.words[i] = r & 0x3ffffff;
	    carry = r >>> 26;
	  }

	  this.length = a.length;
	  if (carry !== 0) {
	    this.words[this.length] = carry;
	    this.length++;
	  // Copy the rest of the words
	  } else if (a !== this) {
	    for (; i < a.length; i++)
	      this.words[i] = a.words[i];
	  }

	  return this;
	};

	// Add `num` to `this`
	BN.prototype.add = function add(num) {
	  if (num.sign && !this.sign) {
	    num.sign = false;
	    var res = this.sub(num);
	    num.sign = true;
	    return res;
	  } else if (!num.sign && this.sign) {
	    this.sign = false;
	    var res = num.sub(this);
	    this.sign = true;
	    return res;
	  }

	  if (this.length > num.length)
	    return this.clone().iadd(num);
	  else
	    return num.clone().iadd(this);
	};

	// Subtract `num` from `this` in-place
	BN.prototype.isub = function isub(num) {
	  // this - (-num) = this + num
	  if (num.sign) {
	    num.sign = false;
	    var r = this.iadd(num);
	    num.sign = true;
	    return r._normSign();

	  // -this - num = -(this + num)
	  } else if (this.sign) {
	    this.sign = false;
	    this.iadd(num);
	    this.sign = true;
	    return this._normSign();
	  }

	  // At this point both numbers are positive
	  var cmp = this.cmp(num);

	  // Optimization - zeroify
	  if (cmp === 0) {
	    this.sign = false;
	    this.length = 1;
	    this.words[0] = 0;
	    return this;
	  }

	  // a > b
	  if (cmp > 0) {
	    var a = this;
	    var b = num;
	  } else {
	    var a = num;
	    var b = this;
	  }

	  var carry = 0;
	  for (var i = 0; i < b.length; i++) {
	    var r = a.words[i] - b.words[i] - carry;
	    if (r < 0) {
	      r += 0x4000000;
	      carry = 1;
	    } else {
	      carry = 0;
	    }
	    this.words[i] = r;
	  }
	  for (; carry !== 0 && i < a.length; i++) {
	    var r = a.words[i] - carry;
	    if (r < 0) {
	      r += 0x4000000;
	      carry = 1;
	    } else {
	      carry = 0;
	    }
	    this.words[i] = r;
	  }

	  // Copy rest of the words
	  if (carry === 0 && i < a.length && a !== this)
	    for (; i < a.length; i++)
	      this.words[i] = a.words[i];
	  this.length = Math.max(this.length, i);

	  if (a !== this)
	    this.sign = true;

	  return this.strip();
	};

	// Subtract `num` from `this`
	BN.prototype.sub = function sub(num) {
	  return this.clone().isub(num);
	};

	/*
	// NOTE: This could be potentionally used to generate loop-less multiplications
	function _genCombMulTo(alen, blen) {
	  var len = alen + blen - 1;
	  var src = [
	    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +
	        'mask = 0x3ffffff, shift = 0x4000000;',
	    'out.length = ' + len + ';'
	  ];
	  for (var k = 0; k < len; k++) {
	    var minJ = Math.max(0, k - alen + 1);
	    var maxJ = Math.min(k, blen - 1);

	    for (var j = minJ; j <= maxJ; j++) {
	      var i = k - j;
	      var mul = 'a[' + i + '] * b[' + j + ']';

	      if (j === minJ) {
	        src.push('w = ' + mul + ' + c;');
	        src.push('c = (w / shift) | 0;');
	      } else {
	        src.push('w += ' + mul + ';');
	        src.push('c += (w / shift) | 0;');
	      }
	      src.push('w &= mask;');
	    }
	    src.push('o[' + k + '] = w;');
	  }
	  src.push('if (c !== 0) {',
	           '  o[' + k + '] = c;',
	           '  out.length++;',
	           '}',
	           'return out;');

	  return src.join('\n');
	}
	*/

	BN.prototype._smallMulTo = function _smallMulTo(num, out) {
	  out.sign = num.sign !== this.sign;
	  out.length = this.length + num.length;

	  var carry = 0;
	  for (var k = 0; k < out.length - 1; k++) {
	    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	    // note that ncarry could be >= 0x3ffffff
	    var ncarry = carry >>> 26;
	    var rword = carry & 0x3ffffff;
	    var maxJ = Math.min(k, num.length - 1);
	    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
	      var i = k - j;
	      var a = this.words[i] | 0;
	      var b = num.words[j] | 0;
	      var r = a * b;

	      var lo = r & 0x3ffffff;
	      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	      lo = (lo + rword) | 0;
	      rword = lo & 0x3ffffff;
	      ncarry = (ncarry + (lo >>> 26)) | 0;
	    }
	    out.words[k] = rword;
	    carry = ncarry;
	  }
	  if (carry !== 0) {
	    out.words[k] = carry;
	  } else {
	    out.length--;
	  }

	  return out.strip();
	};

	BN.prototype._bigMulTo = function _bigMulTo(num, out) {
	  out.sign = num.sign !== this.sign;
	  out.length = this.length + num.length;

	  var carry = 0;
	  var hncarry = 0;
	  for (var k = 0; k < out.length - 1; k++) {
	    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	    // note that ncarry could be >= 0x3ffffff
	    var ncarry = hncarry;
	    hncarry = 0;
	    var rword = carry & 0x3ffffff;
	    var maxJ = Math.min(k, num.length - 1);
	    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {
	      var i = k - j;
	      var a = this.words[i] | 0;
	      var b = num.words[j] | 0;
	      var r = a * b;

	      var lo = r & 0x3ffffff;
	      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	      lo = (lo + rword) | 0;
	      rword = lo & 0x3ffffff;
	      ncarry = (ncarry + (lo >>> 26)) | 0;

	      hncarry += ncarry >>> 26;
	      ncarry &= 0x3ffffff;
	    }
	    out.words[k] = rword;
	    carry = ncarry;
	    ncarry = hncarry;
	  }
	  if (carry !== 0) {
	    out.words[k] = carry;
	  } else {
	    out.length--;
	  }

	  return out.strip();
	};

	BN.prototype.mulTo = function mulTo(num, out) {
	  var res;
	  if (this.length + num.length < 63)
	    res = this._smallMulTo(num, out);
	  else
	    res = this._bigMulTo(num, out);
	  return res;
	};

	// Multiply `this` by `num`
	BN.prototype.mul = function mul(num) {
	  var out = new BN(null);
	  out.words = new Array(this.length + num.length);
	  return this.mulTo(num, out);
	};

	// In-place Multiplication
	BN.prototype.imul = function imul(num) {
	  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {
	    this.words[0] = 0;
	    this.length = 1;
	    return this;
	  }

	  var tlen = this.length;
	  var nlen = num.length;

	  this.sign = num.sign !== this.sign;
	  this.length = this.length + num.length;
	  this.words[this.length - 1] = 0;

	  var lastCarry = 0;
	  for (var k = this.length - 2; k >= 0; k--) {
	    // Sum all words with the same `i + j = k` and accumulate `carry`,
	    // note that carry could be >= 0x3ffffff
	    var carry = 0;
	    var rword = 0;
	    var maxJ = Math.min(k, nlen - 1);
	    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {
	      var i = k - j;
	      var a = this.words[i];
	      var b = num.words[j];
	      var r = a * b;

	      var lo = r & 0x3ffffff;
	      carry += (r / 0x4000000) | 0;
	      lo += rword;
	      rword = lo & 0x3ffffff;
	      carry += lo >>> 26;
	    }
	    this.words[k] = rword;
	    this.words[k + 1] += carry;
	    carry = 0;
	  }

	  // Propagate overflows
	  var carry = 0;
	  for (var i = 1; i < this.length; i++) {
	    var w = this.words[i] + carry;
	    this.words[i] = w & 0x3ffffff;
	    carry = w >>> 26;
	  }

	  return this.strip();
	};

	// `this` * `this`
	BN.prototype.sqr = function sqr() {
	  return this.mul(this);
	};

	// `this` * `this` in-place
	BN.prototype.isqr = function isqr() {
	  return this.mul(this);
	};

	// Shift-left in-place
	BN.prototype.ishln = function ishln(bits) {
	  assert(typeof bits === 'number' && bits >= 0);
	  var r = bits % 26;
	  var s = (bits - r) / 26;
	  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);

	  var o = this.clone();
	  if (r !== 0) {
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var newCarry = this.words[i] & carryMask;
	      var c = (this.words[i] - newCarry) << r;
	      this.words[i] = c | carry;
	      carry = newCarry >>> (26 - r);
	    }
	    if (carry) {
	      this.words[i] = carry;
	      this.length++;
	    }
	  }

	  if (s !== 0) {
	    for (var i = this.length - 1; i >= 0; i--)
	      this.words[i + s] = this.words[i];
	    for (var i = 0; i < s; i++)
	      this.words[i] = 0;
	    this.length += s;
	  }

	  return this.strip();
	};

	// Shift-right in-place
	// NOTE: `hint` is a lowest bit before trailing zeroes
	// NOTE: if `extended` is true - { lo: ..., hi: } object will be returned
	BN.prototype.ishrn = function ishrn(bits, hint, extended) {
	  assert(typeof bits === 'number' && bits >= 0);
	  if (hint)
	    hint = (hint - (hint % 26)) / 26;
	  else
	    hint = 0;

	  var r = bits % 26;
	  var s = Math.min((bits - r) / 26, this.length);
	  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	  var maskedWords = extended;

	  hint -= s;
	  hint = Math.max(0, hint);

	  // Extended mode, copy masked part
	  if (maskedWords) {
	    for (var i = 0; i < s; i++)
	      maskedWords.words[i] = this.words[i];
	    maskedWords.length = s;
	  }

	  if (s === 0) {
	    // No-op, we should not move anything at all
	  } else if (this.length > s) {
	    this.length -= s;
	    for (var i = 0; i < this.length; i++)
	      this.words[i] = this.words[i + s];
	  } else {
	    this.words[0] = 0;
	    this.length = 1;
	  }

	  var carry = 0;
	  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= hint); i--) {
	    var word = this.words[i];
	    this.words[i] = (carry << (26 - r)) | (word >>> r);
	    carry = word & mask;
	  }

	  // Push carried bits as a mask
	  if (maskedWords && carry !== 0)
	    maskedWords.words[maskedWords.length++] = carry;

	  if (this.length === 0) {
	    this.words[0] = 0;
	    this.length = 1;
	  }

	  this.strip();
	  if (extended)
	    return { hi: this, lo: maskedWords };

	  return this;
	};

	// Shift-left
	BN.prototype.shln = function shln(bits) {
	  return this.clone().ishln(bits);
	};

	// Shift-right
	BN.prototype.shrn = function shrn(bits) {
	  return this.clone().ishrn(bits);
	};

	// Test if n bit is set
	BN.prototype.testn = function testn(bit) {
	  assert(typeof bit === 'number' && bit >= 0);
	  var r = bit % 26;
	  var s = (bit - r) / 26;
	  var q = 1 << r;

	  // Fast case: bit is much higher than all existing words
	  if (this.length <= s) {
	    return false;
	  }

	  // Check bit and return
	  var w = this.words[s];

	  return !!(w & q);
	};

	// Return only lowers bits of number (in-place)
	BN.prototype.imaskn = function imaskn(bits) {
	  assert(typeof bits === 'number' && bits >= 0);
	  var r = bits % 26;
	  var s = (bits - r) / 26;

	  assert(!this.sign, 'imaskn works only with positive numbers');

	  if (r !== 0)
	    s++;
	  this.length = Math.min(s, this.length);

	  if (r !== 0) {
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    this.words[this.length - 1] &= mask;
	  }

	  return this.strip();
	};

	// Return only lowers bits of number
	BN.prototype.maskn = function maskn(bits) {
	  return this.clone().imaskn(bits);
	};

	// Add plain number `num` to `this`
	BN.prototype.iaddn = function iaddn(num) {
	  assert(typeof num === 'number');
	  if (num < 0)
	    return this.isubn(-num);

	  // Possible sign change
	  if (this.sign) {
	    if (this.length === 1 && this.words[0] < num) {
	      this.words[0] = num - this.words[0];
	      this.sign = false;
	      return this;
	    }

	    this.sign = false;
	    this.isubn(num);
	    this.sign = true;
	    return this;
	  }
	  this.words[0] += num;

	  // Carry
	  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	    this.words[i] -= 0x4000000;
	    if (i === this.length - 1)
	      this.words[i + 1] = 1;
	    else
	      this.words[i + 1]++;
	  }
	  this.length = Math.max(this.length, i + 1);

	  return this;
	};

	// Subtract plain number `num` from `this`
	BN.prototype.isubn = function isubn(num) {
	  assert(typeof num === 'number');
	  if (num < 0)
	    return this.iaddn(-num);

	  if (this.sign) {
	    this.sign = false;
	    this.iaddn(num);
	    this.sign = true;
	    return this;
	  }

	  this.words[0] -= num;

	  // Carry
	  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	    this.words[i] += 0x4000000;
	    this.words[i + 1] -= 1;
	  }

	  return this.strip();
	};

	BN.prototype.addn = function addn(num) {
	  return this.clone().iaddn(num);
	};

	BN.prototype.subn = function subn(num) {
	  return this.clone().isubn(num);
	};

	BN.prototype.iabs = function iabs() {
	  this.sign = false;

	  return this
	};

	BN.prototype.abs = function abs() {
	  return this.clone().iabs();
	};

	BN.prototype._wordDiv = function _wordDiv(num, mode) {
	  var shift = this.length - num.length;

	  var a = this.clone();
	  var b = num;

	  var q = mode !== 'mod' && new BN(0);
	  var sign = false;

	  // Approximate quotient at each step
	  while (a.length > b.length) {
	    // NOTE: a.length is always >= 2, because of the condition .div()
	    var hi = a.words[a.length - 1] * 0x4000000 + a.words[a.length - 2];
	    var sq = (hi / b.words[b.length - 1]);
	    var sqhi = (sq / 0x4000000) | 0;
	    var sqlo = sq & 0x3ffffff;
	    sq = new BN(null);
	    sq.words = [ sqlo, sqhi ];
	    sq.length = 2;

	    // Collect quotient
	    var shift = (a.length - b.length - 1) * 26;
	    if (q) {
	      var t = sq.shln(shift);
	      if (a.sign)
	        q.isub(t);
	      else
	        q.iadd(t);
	    }

	    sq = sq.mul(b).ishln(shift);
	    if (a.sign)
	      a.iadd(sq)
	    else
	      a.isub(sq);
	  }
	  // At this point a.length <= b.length
	  while (a.ucmp(b) >= 0) {
	    // NOTE: a.length is always >= 2, because of the condition above
	    var hi = a.words[a.length - 1];
	    var sq = new BN((hi / b.words[b.length - 1]) | 0);
	    var shift = (a.length - b.length) * 26;

	    if (q) {
	      var t = sq.shln(shift);
	      if (a.sign)
	        q.isub(t);
	      else
	        q.iadd(t);
	    }

	    sq = sq.mul(b).ishln(shift);

	    if (a.sign)
	      a.iadd(sq);
	    else
	      a.isub(sq);
	  }

	  if (a.sign) {
	    if (q)
	      q.isubn(1);
	    a.iadd(b);
	  }
	  return { div: q ? q : null, mod: a };
	};

	BN.prototype.divmod = function divmod(num, mode) {
	  assert(num.cmpn(0) !== 0);

	  if (this.sign && !num.sign) {
	    var res = this.neg().divmod(num, mode);
	    var div;
	    var mod;
	    if (mode !== 'mod')
	      div = res.div.neg();
	    if (mode !== 'div')
	      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);
	    return {
	      div: div,
	      mod: mod
	    };
	  } else if (!this.sign && num.sign) {
	    var res = this.divmod(num.neg(), mode);
	    var div;
	    if (mode !== 'mod')
	      div = res.div.neg();
	    return { div: div, mod: res.mod };
	  } else if (this.sign && num.sign) {
	    return this.neg().divmod(num.neg(), mode);
	  }

	  // Both numbers are positive at this point

	  // Strip both numbers to approximate shift value
	  if (num.length > this.length || this.cmp(num) < 0)
	    return { div: new BN(0), mod: this };

	  // Very short reduction
	  if (num.length === 1) {
	    if (mode === 'div')
	      return { div: this.divn(num.words[0]), mod: null };
	    else if (mode === 'mod')
	      return { div: null, mod: new BN(this.modn(num.words[0])) };
	    return {
	      div: this.divn(num.words[0]),
	      mod: new BN(this.modn(num.words[0]))
	    };
	  }

	  return this._wordDiv(num, mode);
	};

	// Find `this` / `num`
	BN.prototype.div = function div(num) {
	  return this.divmod(num, 'div').div;
	};

	// Find `this` % `num`
	BN.prototype.mod = function mod(num) {
	  return this.divmod(num, 'mod').mod;
	};

	// Find Round(`this` / `num`)
	BN.prototype.divRound = function divRound(num) {
	  var dm = this.divmod(num);

	  // Fast case - exact division
	  if (dm.mod.cmpn(0) === 0)
	    return dm.div;

	  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;

	  var half = num.shrn(1);
	  var r2 = num.andln(1);
	  var cmp = mod.cmp(half);

	  // Round down
	  if (cmp < 0 || r2 === 1 && cmp === 0)
	    return dm.div;

	  // Round up
	  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);
	};

	BN.prototype.modn = function modn(num) {
	  assert(num <= 0x3ffffff);
	  var p = (1 << 26) % num;

	  var acc = 0;
	  for (var i = this.length - 1; i >= 0; i--)
	    acc = (p * acc + this.words[i]) % num;

	  return acc;
	};

	// In-place division by number
	BN.prototype.idivn = function idivn(num) {
	  assert(num <= 0x3ffffff);

	  var carry = 0;
	  for (var i = this.length - 1; i >= 0; i--) {
	    var w = this.words[i] + carry * 0x4000000;
	    this.words[i] = (w / num) | 0;
	    carry = w % num;
	  }

	  return this.strip();
	};

	BN.prototype.divn = function divn(num) {
	  return this.clone().idivn(num);
	};

	BN.prototype._egcd = function _egcd(x1, p) {
	  assert(!p.sign);
	  assert(p.cmpn(0) !== 0);

	  var a = this;
	  var b = p.clone();

	  if (a.sign)
	    a = a.mod(p);
	  else
	    a = a.clone();

	  var x2 = new BN(0);
	  while (b.isEven())
	    b.ishrn(1);
	  var delta = b.clone();
	  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	    while (a.isEven()) {
	      a.ishrn(1);
	      if (x1.isEven())
	        x1.ishrn(1);
	      else
	        x1.iadd(delta).ishrn(1);
	    }
	    while (b.isEven()) {
	      b.ishrn(1);
	      if (x2.isEven())
	        x2.ishrn(1);
	      else
	        x2.iadd(delta).ishrn(1);
	    }
	    if (a.cmp(b) >= 0) {
	      a.isub(b);
	      x1.isub(x2);
	    } else {
	      b.isub(a);
	      x2.isub(x1);
	    }
	  }
	  if (a.cmpn(1) === 0)
	    return x1;
	  else
	    return x2;
	};

	BN.prototype.gcd = function gcd(num) {
	  if (this.cmpn(0) === 0)
	    return num.clone();
	  if (num.cmpn(0) === 0)
	    return this.clone();

	  var a = this.clone();
	  var b = num.clone();
	  a.sign = false;
	  b.sign = false;

	  // Remove common factor of two
	  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	    a.ishrn(1);
	    b.ishrn(1);
	  }

	  while (a.isEven())
	    a.ishrn(1);

	  do {
	    while (b.isEven())
	      b.ishrn(1);

	    // Swap `a` and `b` to make `a` always bigger than `b`
	    if (a.cmp(b) < 0) {
	      var t = a;
	      a = b;
	      b = t;
	    }
	    a.isub(a.div(b).mul(b));
	  } while (a.cmpn(0) !== 0 && b.cmpn(0) !== 0);
	  if (a.cmpn(0) === 0)
	    return b.ishln(shift);
	  else
	    return a.ishln(shift);
	};

	// Invert number in the field F(num)
	BN.prototype.invm = function invm(num) {
	  return this._egcd(new BN(1), num).mod(num);
	};

	BN.prototype.isEven = function isEven(num) {
	  return (this.words[0] & 1) === 0;
	};

	BN.prototype.isOdd = function isOdd(num) {
	  return (this.words[0] & 1) === 1;
	};

	// And first word and num
	BN.prototype.andln = function andln(num) {
	  return this.words[0] & num;
	};

	// Increment at the bit position in-line
	BN.prototype.bincn = function bincn(bit) {
	  assert(typeof bit === 'number');
	  var r = bit % 26;
	  var s = (bit - r) / 26;
	  var q = 1 << r;

	  // Fast case: bit is much higher than all existing words
	  if (this.length <= s) {
	    for (var i = this.length; i < s + 1; i++)
	      this.words[i] = 0;
	    this.words[s] |= q;
	    this.length = s + 1;
	    return this;
	  }

	  // Add bit and propagate, if needed
	  var carry = q;
	  for (var i = s; carry !== 0 && i < this.length; i++) {
	    var w = this.words[i];
	    w += carry;
	    carry = w >>> 26;
	    w &= 0x3ffffff;
	    this.words[i] = w;
	  }
	  if (carry !== 0) {
	    this.words[i] = carry;
	    this.length++;
	  }
	  return this;
	};

	BN.prototype.cmpn = function cmpn(num) {
	  var sign = num < 0;
	  if (sign)
	    num = -num;

	  if (this.sign && !sign)
	    return -1;
	  else if (!this.sign && sign)
	    return 1;

	  num &= 0x3ffffff;
	  this.strip();

	  var res;
	  if (this.length > 1) {
	    res = 1;
	  } else {
	    var w = this.words[0];
	    res = w === num ? 0 : w < num ? -1 : 1;
	  }
	  if (this.sign)
	    res = -res;
	  return res;
	};

	// Compare two numbers and return:
	// 1 - if `this` > `num`
	// 0 - if `this` == `num`
	// -1 - if `this` < `num`
	BN.prototype.cmp = function cmp(num) {
	  if (this.sign && !num.sign)
	    return -1;
	  else if (!this.sign && num.sign)
	    return 1;

	  var res = this.ucmp(num);
	  if (this.sign)
	    return -res;
	  else
	    return res;
	};

	// Unsigned comparison
	BN.prototype.ucmp = function ucmp(num) {
	  // At this point both numbers have the same sign
	  if (this.length > num.length)
	    return 1;
	  else if (this.length < num.length)
	    return -1;

	  var res = 0;
	  for (var i = this.length - 1; i >= 0; i--) {
	    var a = this.words[i];
	    var b = num.words[i];

	    if (a === b)
	      continue;
	    if (a < b)
	      res = -1;
	    else if (a > b)
	      res = 1;
	    break;
	  }
	  return res;
	};

	//
	// A reduce context, could be using montgomery or something better, depending
	// on the `m` itself.
	//
	BN.red = function red(num) {
	  return new Red(num);
	};

	BN.prototype.toRed = function toRed(ctx) {
	  assert(!this.red, 'Already a number in reduction context');
	  assert(!this.sign, 'red works only with positives');
	  return ctx.convertTo(this)._forceRed(ctx);
	};

	BN.prototype.fromRed = function fromRed() {
	  assert(this.red, 'fromRed works only with numbers in reduction context');
	  return this.red.convertFrom(this);
	};

	BN.prototype._forceRed = function _forceRed(ctx) {
	  this.red = ctx;
	  return this;
	};

	BN.prototype.forceRed = function forceRed(ctx) {
	  assert(!this.red, 'Already a number in reduction context');
	  return this._forceRed(ctx);
	};

	BN.prototype.redAdd = function redAdd(num) {
	  assert(this.red, 'redAdd works only with red numbers');
	  return this.red.add(this, num);
	};

	BN.prototype.redIAdd = function redIAdd(num) {
	  assert(this.red, 'redIAdd works only with red numbers');
	  return this.red.iadd(this, num);
	};

	BN.prototype.redSub = function redSub(num) {
	  assert(this.red, 'redSub works only with red numbers');
	  return this.red.sub(this, num);
	};

	BN.prototype.redISub = function redISub(num) {
	  assert(this.red, 'redISub works only with red numbers');
	  return this.red.isub(this, num);
	};

	BN.prototype.redShl = function redShl(num) {
	  assert(this.red, 'redShl works only with red numbers');
	  return this.red.shl(this, num);
	};

	BN.prototype.redMul = function redMul(num) {
	  assert(this.red, 'redMul works only with red numbers');
	  this.red._verify2(this, num);
	  return this.red.mul(this, num);
	};

	BN.prototype.redIMul = function redIMul(num) {
	  assert(this.red, 'redMul works only with red numbers');
	  this.red._verify2(this, num);
	  return this.red.imul(this, num);
	};

	BN.prototype.redSqr = function redSqr() {
	  assert(this.red, 'redSqr works only with red numbers');
	  this.red._verify1(this);
	  return this.red.sqr(this);
	};

	BN.prototype.redISqr = function redISqr() {
	  assert(this.red, 'redISqr works only with red numbers');
	  this.red._verify1(this);
	  return this.red.isqr(this);
	};

	// Square root over p
	BN.prototype.redSqrt = function redSqrt() {
	  assert(this.red, 'redSqrt works only with red numbers');
	  this.red._verify1(this);
	  return this.red.sqrt(this);
	};

	BN.prototype.redInvm = function redInvm() {
	  assert(this.red, 'redInvm works only with red numbers');
	  this.red._verify1(this);
	  return this.red.invm(this);
	};

	// Return negative clone of `this` % `red modulo`
	BN.prototype.redNeg = function redNeg() {
	  assert(this.red, 'redNeg works only with red numbers');
	  this.red._verify1(this);
	  return this.red.neg(this);
	};

	BN.prototype.redPow = function redPow(num) {
	  assert(this.red && !num.red, 'redPow(normalNum)');
	  this.red._verify1(this);
	  return this.red.pow(this, num);
	};

	// Prime numbers with efficient reduction
	var primes = {
	  k256: null,
	  p224: null,
	  p192: null,
	  p25519: null
	};

	// Pseudo-Mersenne prime
	function MPrime(name, p) {
	  // P = 2 ^ N - K
	  this.name = name;
	  this.p = new BN(p, 16);
	  this.n = this.p.bitLength();
	  this.k = new BN(1).ishln(this.n).isub(this.p);

	  this.tmp = this._tmp();
	}

	MPrime.prototype._tmp = function _tmp() {
	  var tmp = new BN(null);
	  tmp.words = new Array(Math.ceil(this.n / 13));
	  return tmp;
	};

	MPrime.prototype.ireduce = function ireduce(num) {
	  // Assumes that `num` is less than `P^2`
	  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	  var r = num;
	  var rlen;

	  do {
	    var pair = r.ishrn(this.n, 0, this.tmp);
	    r = this.imulK(pair.hi);
	    r = r.iadd(pair.lo);
	    rlen = r.bitLength();
	  } while (rlen > this.n);

	  var cmp = rlen < this.n ? -1 : r.cmp(this.p);
	  if (cmp === 0) {
	    r.words[0] = 0;
	    r.length = 1;
	  } else if (cmp > 0) {
	    r.isub(this.p);
	  } else {
	    r.strip();
	  }

	  return r;
	};

	MPrime.prototype.imulK = function imulK(num) {
	  return num.imul(this.k);
	};

	function K256() {
	  MPrime.call(
	    this,
	    'k256',
	    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	}
	inherits(K256, MPrime);

	K256.prototype.imulK = function imulK(num) {
	  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	  num.words[num.length] = 0;
	  num.words[num.length + 1] = 0;
	  num.length += 2;

	  var uhi = 0;
	  var hi = 0;
	  var lo = 0;
	  for (var i = 0; i < num.length; i++) {
	    var w = num.words[i];
	    hi += w * 0x40;
	    lo += w * 0x3d1;
	    hi += (lo / 0x4000000) | 0;
	    uhi += (hi / 0x4000000) | 0;
	    hi &= 0x3ffffff;
	    lo &= 0x3ffffff;

	    num.words[i] = lo;

	    lo = hi;
	    hi = uhi;
	    uhi = 0;
	  }

	  // Fast length reduction
	  if (num.words[num.length - 1] === 0)
	    num.length--;
	  if (num.words[num.length - 1] === 0)
	    num.length--;
	  return num;
	};

	function P224() {
	  MPrime.call(
	    this,
	    'p224',
	    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	}
	inherits(P224, MPrime);

	function P192() {
	  MPrime.call(
	    this,
	    'p192',
	    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	}
	inherits(P192, MPrime);

	function P25519() {
	  // 2 ^ 255 - 19
	  MPrime.call(
	    this,
	    '25519',
	    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	}
	inherits(P25519, MPrime);

	P25519.prototype.imulK = function imulK(num) {
	  // K = 0x13
	  var carry = 0;
	  for (var i = 0; i < num.length; i++) {
	    var hi = num.words[i] * 0x13 + carry;
	    var lo = hi & 0x3ffffff;
	    hi >>>= 26;

	    num.words[i] = lo;
	    carry = hi;
	  }
	  if (carry !== 0)
	    num.words[num.length++] = carry;
	  return num;
	};

	// Exported mostly for testing purposes, use plain name instead
	BN._prime = function prime(name) {
	  // Cached version of prime
	  if (primes[name])
	    return primes[name];

	  var prime;
	  if (name === 'k256')
	    prime = new K256();
	  else if (name === 'p224')
	    prime = new P224();
	  else if (name === 'p192')
	    prime = new P192();
	  else if (name === 'p25519')
	    prime = new P25519();
	  else
	    throw new Error('Unknown prime ' + name);
	  primes[name] = prime;

	  return prime;
	}

	//
	// Base reduction engine
	//
	function Red(m) {
	  if (typeof m === 'string') {
	    var prime = BN._prime(m);
	    this.m = prime.p;
	    this.prime = prime;
	  } else {
	    this.m = m;
	    this.prime = null;
	  }
	}

	Red.prototype._verify1 = function _verify1(a) {
	  assert(!a.sign, 'red works only with positives');
	  assert(a.red, 'red works only with red numbers');
	};

	Red.prototype._verify2 = function _verify2(a, b) {
	  assert(!a.sign && !b.sign, 'red works only with positives');
	  assert(a.red && a.red === b.red,
	         'red works only with red numbers');
	};

	Red.prototype.imod = function imod(a) {
	  if (this.prime)
	    return this.prime.ireduce(a)._forceRed(this);
	  return a.mod(this.m)._forceRed(this);
	};

	Red.prototype.neg = function neg(a) {
	  var r = a.clone();
	  r.sign = !r.sign;
	  return r.iadd(this.m)._forceRed(this);
	};

	Red.prototype.add = function add(a, b) {
	  this._verify2(a, b);

	  var res = a.add(b);
	  if (res.cmp(this.m) >= 0)
	    res.isub(this.m);
	  return res._forceRed(this);
	};

	Red.prototype.iadd = function iadd(a, b) {
	  this._verify2(a, b);

	  var res = a.iadd(b);
	  if (res.cmp(this.m) >= 0)
	    res.isub(this.m);
	  return res;
	};

	Red.prototype.sub = function sub(a, b) {
	  this._verify2(a, b);

	  var res = a.sub(b);
	  if (res.cmpn(0) < 0)
	    res.iadd(this.m);
	  return res._forceRed(this);
	};

	Red.prototype.isub = function isub(a, b) {
	  this._verify2(a, b);

	  var res = a.isub(b);
	  if (res.cmpn(0) < 0)
	    res.iadd(this.m);
	  return res;
	};

	Red.prototype.shl = function shl(a, num) {
	  this._verify1(a);
	  return this.imod(a.shln(num));
	};

	Red.prototype.imul = function imul(a, b) {
	  this._verify2(a, b);
	  return this.imod(a.imul(b));
	};

	Red.prototype.mul = function mul(a, b) {
	  this._verify2(a, b);
	  return this.imod(a.mul(b));
	};

	Red.prototype.isqr = function isqr(a) {
	  return this.imul(a, a);
	};

	Red.prototype.sqr = function sqr(a) {
	  return this.mul(a, a);
	};

	Red.prototype.sqrt = function sqrt(a) {
	  if (a.cmpn(0) === 0)
	    return a.clone();

	  var mod3 = this.m.andln(3);
	  assert(mod3 % 2 === 1);

	  // Fast case
	  if (mod3 === 3) {
	    var pow = this.m.add(new BN(1)).ishrn(2);
	    var r = this.pow(a, pow);
	    return r;
	  }

	  // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	  //
	  // Find Q and S, that Q * 2 ^ S = (P - 1)
	  var q = this.m.subn(1);
	  var s = 0;
	  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {
	    s++;
	    q.ishrn(1);
	  }
	  assert(q.cmpn(0) !== 0);

	  var one = new BN(1).toRed(this);
	  var nOne = one.redNeg();

	  // Find quadratic non-residue
	  // NOTE: Max is such because of generalized Riemann hypothesis.
	  var lpow = this.m.subn(1).ishrn(1);
	  var z = this.m.bitLength();
	  z = new BN(2 * z * z).toRed(this);
	  while (this.pow(z, lpow).cmp(nOne) !== 0)
	    z.redIAdd(nOne);

	  var c = this.pow(z, q);
	  var r = this.pow(a, q.addn(1).ishrn(1));
	  var t = this.pow(a, q);
	  var m = s;
	  while (t.cmp(one) !== 0) {
	    var tmp = t;
	    for (var i = 0; tmp.cmp(one) !== 0; i++)
	      tmp = tmp.redSqr();
	    assert(i < m);
	    var b = this.pow(c, new BN(1).ishln(m - i - 1));

	    r = r.redMul(b);
	    c = b.redSqr();
	    t = t.redMul(c);
	    m = i;
	  }

	  return r;
	};

	Red.prototype.invm = function invm(a) {
	  var inv = a._egcd(new BN(1), this.m);
	  if (inv.sign) {
	    inv.sign = false;
	    return this.imod(inv).redNeg();
	  } else {
	    return this.imod(inv);
	  }
	};

	Red.prototype.pow = function pow(a, num) {
	  var w = [];
	  var q = num.clone();
	  while (q.cmpn(0) !== 0) {
	    w.push(q.andln(1));
	    q.ishrn(1);
	  }

	  // Skip leading zeroes
	  var res = a;
	  for (var i = 0; i < w.length; i++, res = this.sqr(res))
	    if (w[i] !== 0)
	      break;

	  if (++i < w.length) {
	    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {
	      if (w[i] === 0)
	        continue;
	      res = this.mul(res, q);
	    }
	  }

	  return res;
	};

	Red.prototype.convertTo = function convertTo(num) {
	  return num.clone();
	};

	Red.prototype.convertFrom = function convertFrom(num) {
	  var res = num.clone();
	  res.red = null;
	  return res;
	};

	//
	// Montgomery method engine
	//

	BN.mont = function mont(num) {
	  return new Mont(num);
	};

	function Mont(m) {
	  Red.call(this, m);

	  this.shift = this.m.bitLength();
	  if (this.shift % 26 !== 0)
	    this.shift += 26 - (this.shift % 26);
	  this.r = new BN(1).ishln(this.shift);
	  this.r2 = this.imod(this.r.sqr());
	  this.rinv = this.r.invm(this.m);

	  // TODO(indutny): simplify it
	  this.minv = this.rinv.mul(this.r)
	                       .sub(new BN(1))
	                       .div(this.m)
	                       .neg()
	                       .mod(this.r);
	}
	inherits(Mont, Red);

	Mont.prototype.convertTo = function convertTo(num) {
	  return this.imod(num.shln(this.shift));
	};

	Mont.prototype.convertFrom = function convertFrom(num) {
	  var r = this.imod(num.mul(this.rinv));
	  r.red = null;
	  return r;
	};

	Mont.prototype.imul = function imul(a, b) {
	  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {
	    a.words[0] = 0;
	    a.length = 1;
	    return a;
	  }

	  var t = a.imul(b);
	  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	  var u = t.isub(c).ishrn(this.shift);
	  var res = u;
	  if (u.cmp(this.m) >= 0)
	    res = u.isub(this.m);
	  else if (u.cmpn(0) < 0)
	    res = u.iadd(this.m);

	  return res._forceRed(this);
	};

	Mont.prototype.mul = function mul(a, b) {
	  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)
	    return new BN(0)._forceRed(this);

	  var t = a.mul(b);
	  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	  var u = t.isub(c).ishrn(this.shift);
	  var res = u;
	  if (u.cmp(this.m) >= 0)
	    res = u.isub(this.m);
	  else if (u.cmpn(0) < 0)
	    res = u.iadd(this.m);

	  return res._forceRed(this);
	};

	Mont.prototype.invm = function invm(a) {
	  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	  var res = this.imod(a.invm(this.m).mul(this.r2));
	  return res._forceRed(this);
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var elliptic = exports;

	elliptic.version = __webpack_require__(259).version;
	elliptic.utils = __webpack_require__(226);
	elliptic.rand = __webpack_require__(227);
	elliptic.hmacDRBG = __webpack_require__(225);
	elliptic.curve = __webpack_require__(67);
	elliptic.curves = __webpack_require__(221);

	// Protocols
	elliptic.ec = __webpack_require__(222);


/***/ },
/* 22 */,
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var bitcore = module.exports;


	// crypto 
	bitcore.crypto = {};
	bitcore.crypto.BN = __webpack_require__(12);
	bitcore.crypto.ECDSA = __webpack_require__(122);
	bitcore.crypto.Hash = __webpack_require__(14);
	bitcore.crypto.Random = __webpack_require__(64);
	bitcore.crypto.Point = __webpack_require__(47);
	bitcore.crypto.Signature = __webpack_require__(28);

	// encoding
	bitcore.encoding = {};
	bitcore.encoding.Base58 = __webpack_require__(65);
	bitcore.encoding.Base58Check = __webpack_require__(55);
	bitcore.encoding.BufferReader = __webpack_require__(39);
	bitcore.encoding.BufferWriter = __webpack_require__(29);
	bitcore.encoding.Varint = __webpack_require__(211);

	// utilities
	bitcore.util = {};
	bitcore.util.buffer = __webpack_require__(6);
	bitcore.util.js = __webpack_require__(10);
	bitcore.util.preconditions = __webpack_require__(8);

	// errors thrown by the library
	bitcore.errors = __webpack_require__(30);

	// main bitcoin library
	bitcore.Address = __webpack_require__(38);
	bitcore.Block = __webpack_require__(120);
	bitcore.BlockHeader = __webpack_require__(121);
	bitcore.HDPrivateKey = __webpack_require__(123);
	bitcore.HDPublicKey = __webpack_require__(124);
	bitcore.Networks = __webpack_require__(40);
	bitcore.Opcode = __webpack_require__(81);
	bitcore.PrivateKey = __webpack_require__(66);
	bitcore.PublicKey = __webpack_require__(25);
	bitcore.Script = __webpack_require__(19);
	bitcore.Transaction = __webpack_require__(82);
	bitcore.URI = __webpack_require__(216);
	bitcore.Unit = __webpack_require__(86);

	// dependencies, subject to change
	bitcore.deps = {};
	bitcore.deps.bnjs = __webpack_require__(20);
	bitcore.deps.bs58 = __webpack_require__(128);
	bitcore.deps.Buffer = Buffer;
	bitcore.deps.elliptic = __webpack_require__(21);
	bitcore.deps._ = __webpack_require__(4);

	// Internal usage, exposed for testing/advanced tweaking
	bitcore._HDKeyCache = __webpack_require__(80);
	bitcore.Transaction.sighash = __webpack_require__(56);

	// module information
	bitcore.version = 'v'+__webpack_require__(260).version;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var Address = __webpack_require__(38);
	var BN = __webpack_require__(12);
	var Point = __webpack_require__(47);
	var Hash = __webpack_require__(14);
	var JSUtil = __webpack_require__(10);
	var Network = __webpack_require__(40);
	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);

	/**
	 * Instantiate a PublicKey from a {@link PrivateKey}, {@link Point}, `string`, or `Buffer`.
	 *
	 * There are two internal properties, `network` and `compressed`, that deal with importing
	 * a PublicKey from a PrivateKey in WIF format. More details described on {@link PrivateKey}
	 *
	 * @example
	 * ```javascript
	 * // instantiate from a private key
	 * var key = PublicKey(privateKey, true);
	 *
	 * // export to as a DER hex encoded string
	 * var exported = key.toString();
	 *
	 * // import the public key
	 * var imported = PublicKey.fromString(exported);
	 * ```
	 *
	 * @param {String} data - The encoded data in various formats
	 * @param {Object} extra - additional options
	 * @param {Network=} extra.network - Which network should the address for this public key be for
	 * @param {String=} extra.compressed - If the public key is compressed
	 * @returns {PublicKey} A new valid instance of an PublicKey
	 * @constructor
	 */
	var PublicKey = function PublicKey(data, extra) {

	  if (!(this instanceof PublicKey)) {
	    return new PublicKey(data, extra);
	  }

	  $.checkArgument(data, new TypeError('First argument is required, please include public key data.'));

	  if (data instanceof PublicKey) {
	    // Return copy, but as it's an immutable object, return same argument
	    return data;
	  }
	  extra = extra || {};

	  var info = this._classifyArgs(data, extra);

	  // validation
	  info.point.validate();

	  JSUtil.defineImmutable(this, {
	    point: info.point,
	    compressed: info.compressed,
	    network: info.network || Network.defaultNetwork
	  });

	  return this;
	};

	/**
	 * Internal function to differentiate between arguments passed to the constructor
	 * @param {*} data
	 * @param {Object} extra
	 */
	PublicKey.prototype._classifyArgs = function(data, extra) {
	  /* jshint maxcomplexity: 10 */
	  var info = {
	    compressed: _.isUndefined(extra.compressed) || extra.compressed,
	    network: _.isUndefined(extra.network) ? undefined : Network.get(extra.network)
	  };

	  // detect type of data
	  if (data instanceof Point) {
	    info.point = data;
	  } else if (PublicKey._isJSON(data)) {
	    info = PublicKey._transformJSON(data);
	  } else if (typeof(data) === 'string') {
	    info = PublicKey._transformDER(new Buffer(data, 'hex'));
	  } else if (PublicKey._isBuffer(data)) {
	    info = PublicKey._transformDER(data);
	  } else if (PublicKey._isPrivateKey(data)) {
	    info = PublicKey._transformPrivateKey(data);
	  } else {
	    throw new TypeError('First argument is an unrecognized data format.');
	  }
	  return info;
	};

	/**
	 * Internal function to detect if an object is a {@link PrivateKey}
	 *
	 * @param {*} param - object to test
	 * @returns {boolean}
	 * @private
	 */
	PublicKey._isPrivateKey = function(param) {
	  var PrivateKey = __webpack_require__(66);
	  return param instanceof PrivateKey;
	};

	/**
	 * Internal function to detect if an object is a Buffer
	 *
	 * @param {*} param - object to test
	 * @returns {boolean}
	 * @private
	 */
	PublicKey._isBuffer = function(param) {
	  return (param instanceof Buffer) || (param instanceof Uint8Array);
	};

	/**
	 * Internal function to detect if a param is a JSON string or plain object
	 *
	 * @param {*} param - value to test
	 * @returns {boolean}
	 * @private
	 */
	PublicKey._isJSON = function(json) {
	  return !!(JSUtil.isValidJSON(json) || (json.x && json.y));
	};

	/**
	 * Internal function to transform a private key into a public key point
	 *
	 * @param {PrivateKey} privkey - An instance of PrivateKey
	 * @returns {Object} An object with keys: point and compressed
	 * @private
	 */
	PublicKey._transformPrivateKey = function(privkey) {
	  $.checkArgument(PublicKey._isPrivateKey(privkey),
	    new TypeError('Must be an instance of PrivateKey'));
	  var info = {};
	  info.point = Point.getG().mul(privkey.bn);
	  info.compressed = privkey.compressed;
	  info.network = privkey.network;
	  return info;
	};

	/**
	 * Internal function to transform DER into a public key point
	 *
	 * @param {Buffer} buf - An hex encoded buffer
	 * @param {bool} [strict] - if set to false, will loosen some conditions
	 * @returns {Object} An object with keys: point and compressed
	 * @private
	 */
	PublicKey._transformDER = function(buf, strict) {
	  /* jshint maxstatements: 30 */
	  /* jshint maxcomplexity: 12 */
	  $.checkArgument(PublicKey._isBuffer(buf), new TypeError('Must be a hex buffer of DER encoded public key'));
	  var info = {};

	  strict = _.isUndefined(strict) ? true : strict;

	  var x;
	  var y;
	  var xbuf;
	  var ybuf;

	  if (buf[0] === 0x04 || (!strict && (buf[0] === 0x06 || buf[0] === 0x07))) {
	    xbuf = buf.slice(1, 33);
	    ybuf = buf.slice(33, 65);
	    if (xbuf.length !== 32 || ybuf.length !== 32 || buf.length !== 65) {
	      throw new TypeError('Length of x and y must be 32 bytes');
	    }
	    x = new BN(xbuf);
	    y = new BN(ybuf);
	    info.point = new Point(x, y);
	    info.compressed = false;
	  } else if (buf[0] === 0x03) {
	    xbuf = buf.slice(1);
	    x = new BN(xbuf);
	    info = PublicKey._transformX(true, x);
	    info.compressed = true;
	  } else if (buf[0] === 0x02) {
	    xbuf = buf.slice(1);
	    x = new BN(xbuf);
	    info = PublicKey._transformX(false, x);
	    info.compressed = true;
	  } else {
	    throw new TypeError('Invalid DER format public key');
	  }
	  return info;
	};

	/**
	 * Internal function to transform X into a public key point
	 *
	 * @param {Boolean} odd - If the point is above or below the x axis
	 * @param {Point} x - The x point
	 * @returns {Object} An object with keys: point and compressed
	 * @private
	 */
	PublicKey._transformX = function(odd, x) {
	  $.checkArgument(typeof odd === 'boolean',
	    new TypeError('Must specify whether y is odd or not (true or false)'));
	  var info = {};
	  info.point = Point.fromX(odd, x);
	  return info;
	};

	/**
	 * Instantiate a PublicKey from JSON
	 *
	 * @param {String} json - A JSON string
	 * @returns {PublicKey} A new valid instance of PublicKey
	 */
	PublicKey.fromJSON = function(json) {
	  $.checkArgument(PublicKey._isJSON(json),
	    new TypeError('Must be a valid JSON string or plain object'));
	  return new PublicKey(json);
	};

	/**
	 * Internal function to transform a JSON into a public key point
	 *
	 * @param {Buffer} buf - a JSON string or plain object
	 * @returns {Object} An object with keys: point and compressed
	 * @private
	 */
	PublicKey._transformJSON = function(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  var x = new BN(json.x, 'hex');
	  var y = new BN(json.y, 'hex');
	  var point = new Point(x, y);
	  return new PublicKey(point, {
	    compressed: json.compressed
	  });
	};

	/**
	 * Instantiate a PublicKey from a PrivateKey
	 *
	 * @param {PrivateKey} privkey - An instance of PrivateKey
	 * @returns {PublicKey} A new valid instance of PublicKey
	 */
	PublicKey.fromPrivateKey = function(privkey) {
	  $.checkArgument(PublicKey._isPrivateKey(privkey), new TypeError('Must be an instance of PrivateKey'));
	  var info = PublicKey._transformPrivateKey(privkey);
	  return new PublicKey(info.point, {
	    compressed: info.compressed,
	    network: info.network
	  });
	};

	/**
	 * Instantiate a PublicKey from a Buffer
	 * @param {Buffer} buf - A DER hex buffer
	 * @param {bool} [strict] - if set to false, will loosen some conditions
	 * @returns {PublicKey} A new valid instance of PublicKey
	 */
	PublicKey.fromDER = PublicKey.fromBuffer = function(buf, strict) {
	  $.checkArgument(PublicKey._isBuffer(buf),
	    new TypeError('Must be a hex buffer of DER encoded public key'));
	  var info = PublicKey._transformDER(buf, strict);
	  return new PublicKey(info.point, {
	    compressed: info.compressed
	  });
	};

	/**
	 * Instantiate a PublicKey from a Point
	 *
	 * @param {Point} point - A Point instance
	 * @param {boolean=} compressed - whether to store this public key as compressed format
	 * @returns {PublicKey} A new valid instance of PublicKey
	 */
	PublicKey.fromPoint = function(point, compressed) {
	  $.checkArgument(point instanceof Point,
	    new TypeError('First argument must be an instance of Point.'));
	  return new PublicKey(point, {
	    compressed: compressed
	  });
	};

	/**
	 * Instantiate a PublicKey from a DER hex encoded string
	 *
	 * @param {String} str - A DER hex string
	 * @param {String} [encoding] - The type of string encoding
	 * @returns {PublicKey} A new valid instance of PublicKey
	 */
	PublicKey.fromString = function(str, encoding) {
	  var buf = new Buffer(str, encoding || 'hex');
	  var info = PublicKey._transformDER(buf);
	  return new PublicKey(info.point, {
	    compressed: info.compressed
	  });
	};

	/**
	 * Instantiate a PublicKey from an X Point
	 *
	 * @param {Boolean} odd - If the point is above or below the x axis
	 * @param {Point} x - The x point
	 * @returns {PublicKey} A new valid instance of PublicKey
	 */
	PublicKey.fromX = function(odd, x) {
	  var info = PublicKey._transformX(odd, x);
	  return new PublicKey(info.point, {
	    compressed: info.compressed
	  });
	};

	/**
	 * Check if there would be any errors when initializing a PublicKey
	 *
	 * @param {String} data - The encoded data in various formats
	 * @param {String} [compressed] - If the public key is compressed
	 * @returns {null|Error} An error if exists
	 */
	PublicKey.getValidationError = function(data) {
	  var error;
	  try {
	    /* jshint nonew: false */
	    new PublicKey(data);
	  } catch (e) {
	    error = e;
	  }
	  return error;
	};

	/**
	 * Check if the parameters are valid
	 *
	 * @param {String} data - The encoded data in various formats
	 * @param {String} [compressed] - If the public key is compressed
	 * @returns {Boolean} If the public key would be valid
	 */
	PublicKey.isValid = function(data) {
	  return !PublicKey.getValidationError(data);
	};

	/**
	 * @returns {Object} A plain object of the PublicKey
	 */
	PublicKey.prototype.toObject = function toObject() {
	  return {
	    x: this.point.getX().toString('hex'),
	    y: this.point.getY().toString('hex'),
	    compressed: this.compressed
	  };
	};

	PublicKey.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Will output the PublicKey to a DER Buffer
	 *
	 * @returns {Buffer} A DER hex encoded buffer
	 */
	PublicKey.prototype.toBuffer = PublicKey.prototype.toDER = function() {
	  var x = this.point.getX();
	  var y = this.point.getY();

	  var xbuf = x.toBuffer({
	    size: 32
	  });
	  var ybuf = y.toBuffer({
	    size: 32
	  });

	  var prefix;
	  if (!this.compressed) {
	    prefix = new Buffer([0x04]);
	    return Buffer.concat([prefix, xbuf, ybuf]);
	  } else {
	    var odd = ybuf[ybuf.length - 1] % 2;
	    if (odd) {
	      prefix = new Buffer([0x03]);
	    } else {
	      prefix = new Buffer([0x02]);
	    }
	    return Buffer.concat([prefix, xbuf]);
	  }
	};

	/**
	 * Will return a sha256 + ripemd160 hash of the serialized public key
	 * @see https://github.com/bitcoin/bitcoin/blob/master/src/pubkey.h#L141
	 * @returns {Buffer}
	 */
	PublicKey.prototype._getID = function _getID() {
	  return Hash.sha256ripemd160(this.toBuffer());
	};

	/**
	 * Will return an address for the public key
	 *
	 * @returns {Address} An address generated from the public key
	 */
	PublicKey.prototype.toAddress = function(network) {
	  return Address.fromPublicKey(this, network || this.network);
	};

	/**
	 * Will output the PublicKey to a DER encoded hex string
	 *
	 * @returns {String} A DER hex encoded string
	 */
	PublicKey.prototype.toString = function() {
	  return this.toDER().toString('hex');
	};

	/**
	 * Will return a string formatted for the console
	 *
	 * @returns {String} Public key
	 */
	PublicKey.prototype.inspect = function() {
	  return '<PublicKey: ' + this.toString() +
	    (this.compressed ? '' : ', uncompressed') + '>';
	};


	module.exports = PublicKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 26 */,
/* 27 */,
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var BN = __webpack_require__(12);
	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var BufferUtil = __webpack_require__(6);

	var Signature = function Signature(r, s) {
	  if (!(this instanceof Signature)) {
	    return new Signature(r, s);
	  }
	  if (r instanceof BN) {
	    this.set({
	      r: r,
	      s: s
	    });
	  } else if (r) {
	    var obj = r;
	    this.set(obj);
	  }
	};

	/* jshint maxcomplexity: 7 */
	Signature.prototype.set = function(obj) {
	  this.r = obj.r || this.r || undefined;
	  this.s = obj.s || this.s || undefined;
	  this.i = typeof obj.i !== 'undefined' ? obj.i : this.i; //public key recovery parameter in range [0, 3]
	  this.compressed = typeof obj.compressed !== 'undefined' ?
	    obj.compressed : this.compressed; //whether the recovered pubkey is compressed
	  return this;
	};

	Signature.fromCompact = function(buf) {
	  var sig = new Signature();
	  //TODO: handle uncompressed pubkeys
	  var compressed = true;
	  var i = buf.slice(0, 1)[0] - 27 - 4;
	  var b2 = buf.slice(1, 33);
	  var b3 = buf.slice(33, 65);

	  $.checkArgument(i === 0 || i === 1 || i === 2 || i === 3, new Error('i must be 0, 1, 2, or 3'));
	  $.checkArgument(b2.length === 32, new Error('r must be 32 bytes'));
	  $.checkArgument(b3.length === 32, new Error('s must be 32 bytes'));

	  sig.compressed = compressed;
	  sig.i = i;
	  sig.r = BN.fromBuffer(b2);
	  sig.s = BN.fromBuffer(b3);

	  return sig;
	};

	Signature.fromDER = Signature.fromBuffer = function(buf, strict) {
	  var obj = Signature.parseDER(buf, strict);
	  var sig = new Signature();

	  sig.r = obj.r;
	  sig.s = obj.s;

	  return sig;
	};

	// The format used in a tx
	Signature.fromTxFormat = function(buf) {
	  var nhashtype = buf.readUInt8(buf.length - 1);
	  var derbuf = buf.slice(0, buf.length - 1);
	  var sig = new Signature.fromDER(derbuf, false);
	  sig.nhashtype = nhashtype;
	  return sig;
	};

	Signature.fromString = function(str) {
	  var buf = new Buffer(str, 'hex');
	  return Signature.fromDER(buf);
	};


	/**
	 * In order to mimic the non-strict DER encoding of OpenSSL, set strict = false.
	 */
	Signature.parseDER = function(buf, strict) {
	  $.checkArgument(BufferUtil.isBuffer(buf), new Error('DER formatted signature should be a buffer'));
	  if (_.isUndefined(strict)) {
	    strict = true;
	  }

	  var header = buf[0];
	  $.checkArgument(header === 0x30, new Error('Header byte should be 0x30'));

	  var length = buf[1];
	  var buflength = buf.slice(2).length;
	  $.checkArgument(!strict || length === buflength, new Error('Length byte should length of what follows'));

	  length = length < buflength ? length : buflength;

	  var rheader = buf[2 + 0];
	  $.checkArgument(rheader === 0x02, new Error('Integer byte for r should be 0x02'));

	  var rlength = buf[2 + 1];
	  var rbuf = buf.slice(2 + 2, 2 + 2 + rlength);
	  var r = BN.fromBuffer(rbuf);
	  var rneg = buf[2 + 1 + 1] === 0x00 ? true : false;
	  $.checkArgument(rlength === rbuf.length, new Error('Length of r incorrect'));

	  var sheader = buf[2 + 2 + rlength + 0];
	  $.checkArgument(sheader === 0x02, new Error('Integer byte for s should be 0x02'));

	  var slength = buf[2 + 2 + rlength + 1];
	  var sbuf = buf.slice(2 + 2 + rlength + 2, 2 + 2 + rlength + 2 + slength);
	  var s = BN.fromBuffer(sbuf);
	  var sneg = buf[2 + 2 + rlength + 2 + 2] === 0x00 ? true : false;
	  $.checkArgument(slength === sbuf.length, new Error('Length of s incorrect'));

	  var sumlength = 2 + 2 + rlength + 2 + slength;
	  $.checkArgument(length === sumlength - 2, new Error('Length of signature incorrect'));

	  var obj = {
	    header: header,
	    length: length,
	    rheader: rheader,
	    rlength: rlength,
	    rneg: rneg,
	    rbuf: rbuf,
	    r: r,
	    sheader: sheader,
	    slength: slength,
	    sneg: sneg,
	    sbuf: sbuf,
	    s: s
	  };

	  return obj;
	};


	Signature.prototype.toCompact = function(i, compressed) {
	  i = typeof i === 'number' ? i : this.i;
	  compressed = typeof compressed === 'boolean' ? compressed : this.compressed;

	  if (!(i === 0 || i === 1 || i === 2 || i === 3)) {
	    throw new Error('i must be equal to 0, 1, 2, or 3');
	  }

	  var val = i + 27 + 4;
	  if (compressed === false)
	    val = val - 4;
	  var b1 = new Buffer([val]);
	  var b2 = this.r.toBuffer({
	    size: 32
	  });
	  var b3 = this.s.toBuffer({
	    size: 32
	  });
	  return Buffer.concat([b1, b2, b3]);
	};

	Signature.prototype.toBuffer = Signature.prototype.toDER = function() {
	  var rnbuf = this.r.toBuffer();
	  var snbuf = this.s.toBuffer();

	  var rneg = rnbuf[0] & 0x80 ? true : false;
	  var sneg = snbuf[0] & 0x80 ? true : false;

	  var rbuf = rneg ? Buffer.concat([new Buffer([0x00]), rnbuf]) : rnbuf;
	  var sbuf = sneg ? Buffer.concat([new Buffer([0x00]), snbuf]) : snbuf;

	  var rlength = rbuf.length;
	  var slength = sbuf.length;
	  var length = 2 + rlength + 2 + slength;
	  var rheader = 0x02;
	  var sheader = 0x02;
	  var header = 0x30;

	  var der = Buffer.concat([new Buffer([header, length, rheader, rlength]), rbuf, new Buffer([sheader, slength]), sbuf]);
	  return der;
	};

	Signature.prototype.toString = function() {
	  var buf = this.toDER();
	  return buf.toString('hex');
	};

	/**
	 * This function is translated from bitcoind's IsDERSignature and is used in
	 * the script interpreter.  This "DER" format actually includes an extra byte,
	 * the nhashtype, at the end. It is really the tx format, not DER format.
	 *
	 * A canonical signature exists of: [30] [total len] [02] [len R] [R] [02] [len S] [S] [hashtype]
	 * Where R and S are not negative (their first byte has its highest bit not set), and not
	 * excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,
	 * in which case a single 0 byte is necessary and even required).
	 *
	 * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623
	 */
	Signature.isTxDER = function(buf) {
	  if (buf.length < 9) {
	    //  Non-canonical signature: too short
	    return false;
	  }
	  if (buf.length > 73) {
	    // Non-canonical signature: too long
	    return false;
	  }
	  if (buf[0] !== 0x30) {
	    //  Non-canonical signature: wrong type
	    return false;
	  }
	  if (buf[1] !== buf.length - 3) {
	    //  Non-canonical signature: wrong length marker
	    return false;
	  }
	  var nLenR = buf[3];
	  if (5 + nLenR >= buf.length) {
	    //  Non-canonical signature: S length misplaced
	    return false;
	  }
	  var nLenS = buf[5 + nLenR];
	  if ((nLenR + nLenS + 7) !== buf.length) {
	    //  Non-canonical signature: R+S length mismatch
	    return false;
	  }

	  var R = buf.slice(4);
	  if (buf[4 - 2] !== 0x02) {
	    //  Non-canonical signature: R value type mismatch
	    return false;
	  }
	  if (nLenR === 0) {
	    //  Non-canonical signature: R length is zero
	    return false;
	  }
	  if (R[0] & 0x80) {
	    //  Non-canonical signature: R value negative
	    return false;
	  }
	  if (nLenR > 1 && (R[0] === 0x00) && !(R[1] & 0x80)) {
	    //  Non-canonical signature: R value excessively padded
	    return false;
	  }

	  var S = buf.slice(6 + nLenR);
	  if (buf[6 + nLenR - 2] !== 0x02) {
	    //  Non-canonical signature: S value type mismatch
	    return false;
	  }
	  if (nLenS === 0) {
	    //  Non-canonical signature: S length is zero
	    return false;
	  }
	  if (S[0] & 0x80) {
	    //  Non-canonical signature: S value negative
	    return false;
	  }
	  if (nLenS > 1 && (S[0] === 0x00) && !(S[1] & 0x80)) {
	    //  Non-canonical signature: S value excessively padded
	    return false;
	  }
	  return true;
	};

	/**
	 * Compares to bitcoind's IsLowDERSignature
	 * See also ECDSA signature algorithm which enforces this.
	 * See also BIP 62, "low S values in signatures"
	 */
	Signature.prototype.hasLowS = function() {
	  if (this.s.lt(new BN(1)) ||
	    this.s.gt(new BN('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0'))) {
	    return false;
	  }
	  return true;
	};

	/**
	 * @returns true if the nhashtype is exactly equal to one of the standard options or combinations thereof.
	 * Translated from bitcoind's IsDefinedHashtypeSignature
	 */
	Signature.prototype.hasDefinedHashtype = function() {
	  if (this.nhashtype < Signature.SIGHASH_ALL || this.nhashtype > Signature.SIGHASH_SINGLE) {
	    return false;
	  }
	  return true;
	};

	Signature.prototype.toTxFormat = function() {
	  var derbuf = this.toDER();
	  var buf = new Buffer(1);
	  buf.writeUInt8(this.nhashtype, 0);
	  return Buffer.concat([derbuf, buf]);
	};

	Signature.SIGHASH_ALL = 0x01;
	Signature.SIGHASH_NONE = 0x02;
	Signature.SIGHASH_SINGLE = 0x03;
	Signature.SIGHASH_ANYONECANPAY = 0x80;

	module.exports = Signature;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var bufferUtil = __webpack_require__(6);
	var assert = __webpack_require__(15);

	var BufferWriter = function BufferWriter(obj) {
	  if (!(this instanceof BufferWriter))
	    return new BufferWriter(obj);
	  if (obj)
	    this.set(obj);
	  else
	    this.bufs = [];
	};

	BufferWriter.prototype.set = function(obj) {
	  this.bufs = obj.bufs || this.bufs || [];
	  return this;
	};

	BufferWriter.prototype.toBuffer = function() {
	  return this.concat();
	};

	BufferWriter.prototype.concat = function() {
	  return Buffer.concat(this.bufs);
	};

	BufferWriter.prototype.write = function(buf) {
	  assert(bufferUtil.isBuffer(buf));
	  this.bufs.push(buf);
	  return this;
	};

	BufferWriter.prototype.writeReverse = function(buf) {
	  assert(bufferUtil.isBuffer(buf));
	  this.bufs.push(bufferUtil.reverse(buf));
	  return this;
	};

	BufferWriter.prototype.writeUInt8 = function(n) {
	  var buf = new Buffer(1);
	  buf.writeUInt8(n, 0);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeUInt16BE = function(n) {
	  var buf = new Buffer(2);
	  buf.writeUInt16BE(n, 0);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeUInt16LE = function(n) {
	  var buf = new Buffer(2);
	  buf.writeUInt16LE(n, 0);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeUInt32BE = function(n) {
	  var buf = new Buffer(4);
	  buf.writeUInt32BE(n, 0);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeInt32LE = function(n) {
	  var buf = new Buffer(4);
	  buf.writeInt32LE(n, 0);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeUInt32LE = function(n) {
	  var buf = new Buffer(4);
	  buf.writeUInt32LE(n, 0);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeUInt64BEBN = function(bn) {
	  var buf = bn.toBuffer({size: 8});
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeUInt64LEBN = function(bn) {
	  var buf = bn.toBuffer({size: 8});
	  var reversebuf = new Buffer(Array.apply(new Array(), buf).reverse());
	  this.write(reversebuf);
	  return this;
	};

	BufferWriter.prototype.writeVarintNum = function(n) {
	  var buf = BufferWriter.varintBufNum(n);
	  this.write(buf);
	  return this;
	};

	BufferWriter.prototype.writeVarintBN = function(bn) {
	  var buf = BufferWriter.varintBufBN(bn);
	  this.write(buf);
	  return this;
	};

	BufferWriter.varintBufNum = function(n) {
	  var buf = undefined;
	  if (n < 253) {
	    buf = new Buffer(1);
	    buf.writeUInt8(n, 0);
	  } else if (n < 0x10000) {
	    buf = new Buffer(1 + 2);
	    buf.writeUInt8(253, 0);
	    buf.writeUInt16LE(n, 1);
	  } else if (n < 0x100000000) {
	    buf = new Buffer(1 + 4);
	    buf.writeUInt8(254, 0);
	    buf.writeUInt32LE(n, 1);
	  } else {
	    buf = new Buffer(1 + 8);
	    buf.writeUInt8(255, 0);
	    buf.writeInt32LE(n & -1, 1);
	    buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);
	  }
	  return buf;
	};

	BufferWriter.varintBufBN = function(bn) {
	  var buf = undefined;
	  var n = bn.toNumber();
	  if (n < 253) {
	    buf = new Buffer(1);
	    buf.writeUInt8(n, 0);
	  } else if (n < 0x10000) {
	    buf = new Buffer(1 + 2);
	    buf.writeUInt8(253, 0);
	    buf.writeUInt16LE(n, 1);
	  } else if (n < 0x100000000) {
	    buf = new Buffer(1 + 4);
	    buf.writeUInt8(254, 0);
	    buf.writeUInt32LE(n, 1);
	  } else {
	    var bw = new BufferWriter();
	    bw.writeUInt8(255);
	    bw.writeUInt64LEBN(bn);
	    var buf = bw.concat();
	  }
	  return buf;
	};

	module.exports = BufferWriter;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);

	function format(message, args) {
	  return message
	    .replace('{0}', args[0])
	    .replace('{1}', args[1])
	    .replace('{2}', args[2]);
	}
	var traverseNode = function(parent, errorDefinition) {
	  var NodeError = function() {
	    if (_.isString(errorDefinition.message)) {
	      this.message = format(errorDefinition.message, arguments);
	    } else if (_.isFunction(errorDefinition.message)) {
	      this.message = errorDefinition.message.apply(null, arguments);
	    } else {
	      throw new Error('Invalid error definition for ' + errorDefinition.name);
	    }
	    this.stack = this.message + '\n' + (new Error()).stack;
	  };
	  NodeError.prototype = Object.create(parent.prototype);
	  NodeError.prototype.name = parent.prototype.name + errorDefinition.name;
	  parent[errorDefinition.name] = NodeError;
	  if (errorDefinition.errors) {
	    childDefinitions(NodeError, errorDefinition.errors);
	  }
	  return NodeError;
	};

	/* jshint latedef: false */
	var childDefinitions = function(parent, childDefinitions) {
	  _.each(childDefinitions, function(childDefinition) {
	    traverseNode(parent, childDefinition);
	  });
	};
	/* jshint latedef: true */

	var traverseRoot = function(parent, errorsDefinition) {
	  childDefinitions(parent, errorsDefinition);
	  return parent;
	};


	var bitcore = {};
	bitcore.Error = function() {
	  this.message = 'Internal error';
	  this.stack = this.message + '\n' + (new Error()).stack;
	};
	bitcore.Error.prototype = Object.create(Error.prototype);
	bitcore.Error.prototype.name = 'bitcore.Error';


	var data = __webpack_require__(212);
	traverseRoot(bitcore.Error, data);

	module.exports = bitcore.Error;

	module.exports.extend = function(spec) {
	  return traverseNode(bitcore.Error, spec);
	};


/***/ },
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var Base58Check = __webpack_require__(55);
	var Networks = __webpack_require__(40);
	var Hash = __webpack_require__(14);
	var JSUtil = __webpack_require__(10);

	/**
	 * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,
	 * or an instance of {@link PublicKey} or {@link Script}.
	 *
	 * This is an immutable class, and if the first parameter provided to this constructor is an
	 * `Address` instance, the same argument will be returned.
	 *
	 * An address has two key properties: `network` and `type`. The type is either
	 * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)
	 * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.
	 * You can quickly check whether an address is of a given kind by using the methods
	 * `isPayToPublicKeyHash` and `isPayToScriptHash`
	 *
	 * @example
	 * ```javascript
	 * // validate that an input field is valid
	 * var error = Address.getValidationError(input, 'testnet');
	 * if (!error) {
	 *   var address = Address(input, 'testnet');
	 * } else {
	 *   // invalid network or checksum (typo?)
	 *   var message = error.messsage;
	 * }
	 *
	 * // get an address from a public key
	 * var address = Address(publicKey, 'testnet').toString();
	 * ```
	 *
	 * @param {*} data - The encoded data in various formats
	 * @param {Network|String|number} [network] - The network: 'livenet' or 'testnet'
	 * @param {String} [type] - The type of address: 'script' or 'pubkey'
	 * @returns {Address} A new valid and frozen instance of an Address
	 * @constructor
	 */
	function Address(data, network, type) {
	  /* jshint maxcomplexity: 12 */
	  /* jshint maxstatements: 20 */

	  if (!(this instanceof Address)) {
	    return new Address(data, network, type);
	  }

	  if (_.isArray(data) && _.isNumber(network)) {
	    return Address.createMultisig(data, network, type);
	  }

	  if (data instanceof Address) {
	    // Immutable instance
	    return data;
	  }

	  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');

	  if (network && !Networks.get(network)) {
	    throw new TypeError('Second argument must be "livenet" or "testnet".');
	  }

	  if (type && (type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash)) {
	    throw new TypeError('Third argument must be "pubkeyhash" or "scripthash".');
	  }

	  var info = this._classifyArguments(data, network, type);

	  // set defaults if not set
	  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;
	  info.type = info.type || type || Address.PayToPublicKeyHash;

	  JSUtil.defineImmutable(this, {
	    hashBuffer: info.hashBuffer,
	    network: info.network,
	    type: info.type
	  });

	  return this;
	}

	/**
	 * Internal function used to split different kinds of arguments of the constructor
	 * @param {*} data - The encoded data in various formats
	 * @param {Network|String|number} [network] - The network: 'livenet' or 'testnet'
	 * @param {String} [type] - The type of address: 'script' or 'pubkey'
	 * @returns {Object} An "info" object with "type", "network", and "hashBuffer"
	 */
	Address.prototype._classifyArguments = function(data, network, type) {
	  var PublicKey = __webpack_require__(25);
	  var Script = __webpack_require__(19);
	  /* jshint maxcomplexity: 10 */
	  // transform and validate input data
	  if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) {
	    return Address._transformHash(data);
	  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) {
	    return Address._transformBuffer(data, network, type);
	  } else if (data instanceof PublicKey) {
	    return Address._transformPublicKey(data);
	  } else if (data instanceof Script) {
	    return Address._transformScript(data, network);
	  } else if (typeof(data) === 'string') {
	    return Address._transformString(data, network, type);
	  } else if (_.isObject(data)) {
	    return Address._transformObject(data);
	  } else {
	    throw new TypeError('First argument is an unrecognized data format.');
	  }
	};

	/** @static */
	Address.PayToPublicKeyHash = 'pubkeyhash';
	/** @static */
	Address.PayToScriptHash = 'scripthash';

	/**
	 * @param {Buffer} hash - An instance of a hash Buffer
	 * @returns {Object} An object with keys: hashBuffer
	 * @private
	 */
	Address._transformHash = function(hash){
	  var info = {};
	  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {
	    throw new TypeError('Address supplied is not a buffer.');
	  }
	  if (hash.length !== 20) {
	    throw new TypeError('Address hashbuffers must be exactly 20 bytes.');
	  }
	  info.hashBuffer = hash;
	  return info;
	};

	/**
	 * Deserializes an address serialized through `Address#toObject()`
	 * @param {Object} data
	 * @param {string} data.hash - the hash that this address encodes
	 * @param {string} data.type - either 'pubkeyhash' or 'scripthash'
	 * @param {Network=} data.network - the name of the network associated
	 * @return {Address}
	 */
	Address._transformObject = function(data) {
	  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');
	  $.checkArgument(data.type, 'Must provide a `type` property');
	  return {
	    hashBuffer: data.hash ? new Buffer(data.hash, 'hex') : data.hashBuffer,
	    network: Networks.get(data.network) || Networks.defaultNetwork,
	    type: data.type
	  };
	};

	/**
	 * Internal function to discover the network and type based on the first data byte
	 *
	 * @param {Buffer} buffer - An instance of a hex encoded address Buffer
	 * @returns {Object} An object with keys: network and type
	 * @private
	 */
	Address._classifyFromVersion = function(buffer){
	  var version = {};
	  version.network = Networks.get(buffer[0]);
	  switch (buffer[0]) { // the version byte
	    case Networks.livenet.pubkeyhash:
	      version.type = Address.PayToPublicKeyHash;
	      break;

	    case Networks.livenet.scripthash:
	      version.type = Address.PayToScriptHash;
	      break;

	    case Networks.testnet.pubkeyhash:
	      version.type = Address.PayToPublicKeyHash;
	      break;

	    case Networks.testnet.scripthash:
	      version.type = Address.PayToScriptHash;
	      break;
	  }
	  return version;
	};

	/**
	 * Internal function to transform a bitcoin address buffer
	 *
	 * @param {Buffer} buffer - An instance of a hex encoded address Buffer
	 * @param {String} [network] - The network: 'livenet' or 'testnet'
	 * @param {String} [type] - The type: 'pubkeyhash' or 'scripthash'
	 * @returns {Object} An object with keys: hashBuffer, network and type
	 * @private
	 */
	Address._transformBuffer = function(buffer, network, type){
	  /* jshint maxcomplexity: 9 */
	  var info = {};
	  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {
	    throw new TypeError('Address supplied is not a buffer.');
	  }
	  if (buffer.length !== 1 + 20) {
	    throw new TypeError('Address buffers must be exactly 21 bytes.');
	  }

	  network = Networks.get(network);
	  var bufferVersion = Address._classifyFromVersion(buffer);

	  if (!bufferVersion.network || (network && network !== bufferVersion.network)) {
	    throw new TypeError('Address has mismatched network type.');
	  }

	  if (!bufferVersion.type || ( type && type !== bufferVersion.type )) {
	    throw new TypeError('Address has mismatched type.');
	  }

	  info.hashBuffer = buffer.slice(1);
	  info.network = bufferVersion.network;
	  info.type = bufferVersion.type;
	  return info;
	};

	/**
	 * Internal function to transform a {@link PublicKey}
	 *
	 * @param {PublicKey} pubkey - An instance of PublicKey
	 * @returns {Object} An object with keys: hashBuffer, type
	 * @private
	 */
	Address._transformPublicKey = function(pubkey){
	  var PublicKey = __webpack_require__(25);
	  var info = {};
	  if (!(pubkey instanceof PublicKey)) {
	    throw new TypeError('Address must be an instance of PublicKey.');
	  }
	  info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());
	  info.type = Address.PayToPublicKeyHash;
	  return info;
	};

	/**
	 * Internal function to transform a {@link Script} into a `info` object.
	 *
	 * @param {Script} script - An instance of Script
	 * @returns {Object} An object with keys: hashBuffer, type
	 * @private
	 */
	Address._transformScript = function(script, network){
	  var Script = __webpack_require__(19);
	  var info = {};
	  if (!(script instanceof Script)) {
	    throw new TypeError('Address must be an instance of Script.');
	  }
	  if (script.isScriptHashOut()) {
	    info.hashBuffer = script.getData();
	    info.type = Address.PayToScriptHash;
	  } else if (script.isPublicKeyHashOut()) {
	    info.hashBuffer = script.getData();
	    info.type = Address.PayToPublicKeyHash;
	  } else {
	    info.hashBuffer = Hash.sha256ripemd160(script.toBuffer());
	    info.type = Address.PayToScriptHash;
	  }
	  info.network = Networks.get(network) || Networks.defaultNetwork;
	  return info;
	};

	/**
	 * Creates a P2SH address from a set of public keys and a threshold.
	 *
	 * The addresses will be sorted lexicographically, as that is the trend in bitcoin.
	 * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}
	 * interface.
	 *
	 * @param {Array} publicKeys - a set of public keys to create an address
	 * @param {number} threshold - the number of signatures needed to release the funds
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @return {Address}
	 */
	Address.createMultisig = function(publicKeys, threshold, network) {
	  var Script = __webpack_require__(19);
	  network = network || publicKeys[0].network;
	  return new Address(Script.buildMultisigOut(publicKeys, threshold), network || Networks.defaultNetwork);
	};

	/**
	 * Internal function to transform a bitcoin address string
	 *
	 * @param {String} data
	 * @param {String|Network} [network] - either a Network instance, 'livenet', or 'testnet'
	 * @param {String} [type] - The type: 'pubkeyhash' or 'scripthash'
	 * @returns {Object} An object with keys: hashBuffer, network and type
	 * @private
	 */
	Address._transformString = function(data, network, type){
	  if( typeof(data) !== 'string' ) {
	    throw new TypeError('Address supplied is not a string.');
	  }
	  var addressBuffer = Base58Check.decode(data);
	  var info = Address._transformBuffer(addressBuffer, network, type);
	  return info;
	};

	/**
	 * Instantiate an address from a PublicKey instance
	 *
	 * @param {PublicKey} data
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @returns {Address} A new valid and frozen instance of an Address
	 */
	Address.fromPublicKey = function(data, network){
	  var info = Address._transformPublicKey(data);
	  network = network || Networks.defaultNetwork;
	  return new Address(info.hashBuffer, network, info.type);
	};

	/**
	 * Instantiate an address from a ripemd160 public key hash
	 *
	 * @param {Buffer} hash - An instance of buffer of the hash
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @returns {Address} A new valid and frozen instance of an Address
	 */
	Address.fromPublicKeyHash = function(hash, network) {
	  var info = Address._transformHash(hash);
	  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);
	};

	/**
	 * Instantiate an address from a ripemd160 script hash
	 *
	 * @param {Buffer} hash - An instance of buffer of the hash
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @returns {Address} A new valid and frozen instance of an Address
	 */
	Address.fromScriptHash = function(hash, network) {
	  var info = Address._transformHash(hash);
	  return new Address(info.hashBuffer, network, Address.PayToScriptHash);
	};

	/**
	 * Instantiate an address from a Script
	 *
	 * @param {Script} script - An instance of Script
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @returns {Address} A new valid and frozen instance of an Address
	 */
	Address.fromScript = function(script, network) {
	  var info = Address._transformScript(script, network);
	  return new Address(info.hashBuffer, network, info.type);
	};

	/**
	 * Instantiate an address from a buffer of the address
	 *
	 * @param {Buffer} buffer - An instance of buffer of the address
	 * @param {String|Network} [network] - either a Network instance, 'livenet', or 'testnet'
	 * @param {String} [type] - The type of address: 'script' or 'pubkey'
	 * @returns {Address} A new valid and frozen instance of an Address
	 */
	Address.fromBuffer = function(buffer, network, type) {
	  var info = Address._transformBuffer(buffer, network, type);
	  return new Address(info.hashBuffer, info.network, info.type);
	};

	/**
	 * Instantiate an address from an address string
	 *
	 * @param {String} str - An string of the bitcoin address
	 * @param {String|Network} [network] - either a Network instance, 'livenet', or 'testnet'
	 * @param {String} [type] - The type of address: 'script' or 'pubkey'
	 * @returns {Address} A new valid and frozen instance of an Address
	 */
	Address.fromString = function(str, network, type) {
	  var info = Address._transformString(str, network, type);
	  return new Address(info.hashBuffer, info.network, info.type);
	};

	/**
	 * Instantiate an address from JSON
	 *
	 * @param {String} json - An JSON string or Object with keys: hash, network and type
	 * @returns {Address} A new valid instance of an Address
	 */
	Address.fromJSON = function fromJSON(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  $.checkState(
	    JSUtil.isHexa(json.hash),
	    'Unexpected hash property, "' + json.hash + '", expected to be hex.'
	  );
	  var hashBuffer = new Buffer(json.hash, 'hex');
	  return new Address(hashBuffer, json.network, json.type);
	};

	/**
	 * Will return a validation error if exists
	 *
	 * @example
	 * ```javascript
	 * // a network mismatch error
	 * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');
	 * ```
	 *
	 * @param {String} data - The encoded data
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @param {String} type - The type of address: 'script' or 'pubkey'
	 * @returns {null|Error} The corresponding error message
	 */
	Address.getValidationError = function(data, network, type) {
	  var error;
	  try {
	    /* jshint nonew: false */
	    new Address(data, network, type);
	  } catch (e) {
	    error = e;
	  }
	  return error;
	};

	/**
	 * Will return a boolean if an address is valid
	 *
	 * @example
	 * ```javascript
	 * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));
	 * ```
	 *
	 * @param {String} data - The encoded data
	 * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'
	 * @param {String} type - The type of address: 'script' or 'pubkey'
	 * @returns {boolean} The corresponding error message
	 */
	Address.isValid = function(data, network, type) {
	  return !Address.getValidationError(data, network, type);
	};

	/**
	 * Returns true if an address is of pay to public key hash type
	 * @return boolean
	 */
	Address.prototype.isPayToPublicKeyHash = function() {
	  return this.type === Address.PayToPublicKeyHash;
	};

	/**
	 * Returns true if an address is of pay to script hash type
	 * @return boolean
	 */
	Address.prototype.isPayToScriptHash = function() {
	  return this.type === Address.PayToScriptHash;
	};

	/**
	 * Will return a buffer representation of the address
	 *
	 * @returns {Buffer} Bitcoin address buffer
	 */
	Address.prototype.toBuffer = function() {
	  var version = new Buffer([this.network[this.type]]);
	  var buf = Buffer.concat([version, this.hashBuffer]);
	  return buf;
	};

	/**
	 * @returns {Object} A plain object with the address information
	 */
	Address.prototype.toObject = function toObject() {
	  return {
	    hash: this.hashBuffer.toString('hex'),
	    type: this.type,
	    network: this.network.toString()
	  };
	};

	/**
	 * @returns {String} A JSON representation of a plain object with the address information
	 */
	Address.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Will return a the string representation of the address
	 *
	 * @returns {String} Bitcoin address
	 */
	Address.prototype.toString = function() {
	  return Base58Check.encode(this.toBuffer());
	};

	/**
	 * Will return a string formatted for the console
	 *
	 * @returns {String} Bitcoin address
	 */
	Address.prototype.inspect = function() {
	  return '<Address: ' + this.toString() + ', type: '+this.type+', network: '+this.network+'>';
	};

	module.exports = Address;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var BufferUtil = __webpack_require__(6);
	var BN = __webpack_require__(12);

	var BufferReader = function BufferReader(buf) {
	  if (!(this instanceof BufferReader)) {
	    return new BufferReader(buf);
	  }
	  if (Buffer.isBuffer(buf)) {
	    this.set({
	      buf: buf
	    });
	  } else if (buf) {
	    var obj = buf;
	    this.set(obj);
	  }
	};

	BufferReader.prototype.set = function(obj) {
	  this.buf = obj.buf || this.buf || undefined;
	  this.pos = obj.pos || this.pos || 0;
	  return this;
	};

	BufferReader.prototype.eof = function() {
	  return this.pos >= this.buf.length;
	};

	BufferReader.prototype.finished = BufferReader.prototype.eof;

	BufferReader.prototype.read = function(len) {
	  $.checkArgument(!_.isUndefined(len), 'Must specify a length');
	  var buf = this.buf.slice(this.pos, this.pos + len);
	  this.pos = this.pos + len;
	  return buf;
	};

	BufferReader.prototype.readAll = function() {
	  var buf = this.buf.slice(this.pos, this.buf.length);
	  this.pos = this.buf.length;
	  return buf;
	};

	BufferReader.prototype.readUInt8 = function() {
	  var val = this.buf.readUInt8(this.pos);
	  this.pos = this.pos + 1;
	  return val;
	};

	BufferReader.prototype.readUInt16BE = function() {
	  var val = this.buf.readUInt16BE(this.pos);
	  this.pos = this.pos + 2;
	  return val;
	};

	BufferReader.prototype.readUInt16LE = function() {
	  var val = this.buf.readUInt16LE(this.pos);
	  this.pos = this.pos + 2;
	  return val;
	};

	BufferReader.prototype.readUInt32BE = function() {
	  var val = this.buf.readUInt32BE(this.pos);
	  this.pos = this.pos + 4;
	  return val;
	};

	BufferReader.prototype.readUInt32LE = function() {
	  var val = this.buf.readUInt32LE(this.pos);
	  this.pos = this.pos + 4;
	  return val;
	};

	BufferReader.prototype.readUInt64BEBN = function() {
	  var buf = this.buf.slice(this.pos, this.pos + 8);
	  var bn = BN.fromBuffer(buf);
	  this.pos = this.pos + 8;
	  return bn;
	};

	BufferReader.prototype.readUInt64LEBN = function() {
	  var buf = this.buf.slice(this.pos, this.pos + 8);
	  var reversebuf = BufferReader({
	    buf: buf
	  }).readReverse();
	  var bn = BN.fromBuffer(reversebuf);
	  this.pos = this.pos + 8;
	  return bn;
	};

	BufferReader.prototype.readVarintNum = function() {
	  var first = this.readUInt8();
	  switch (first) {
	    case 0xFD:
	      return this.readUInt16LE();
	    case 0xFE:
	      return this.readUInt32LE();
	    case 0xFF:
	      var bn = this.readUInt64LEBN();
	      var n = bn.toNumber();
	      if (n <= Math.pow(2, 53)) {
	        return n;
	      } else {
	        throw new Error('number too large to retain precision - use readVarintBN');
	      }
	      break;
	    default:
	      return first;
	  }
	};

	/**
	 * reads a length prepended buffer
	 */
	BufferReader.prototype.readVarLengthBuffer = function() {
	  var len = this.readVarintNum();
	  var buf = this.read(len);
	  $.checkState(buf.length === len, 'Invalid length while reading varlength buffer. ' +
	    'Expected to read: ' + len + ' and read ' + buf.length);
	  return buf;
	};

	BufferReader.prototype.readVarintBuf = function() {
	  var first = this.buf.readUInt8(this.pos);
	  switch (first) {
	    case 0xFD:
	      return this.read(1 + 2);
	    case 0xFE:
	      return this.read(1 + 4);
	    case 0xFF:
	      return this.read(1 + 8);
	    default:
	      return this.read(1);
	  }
	};

	BufferReader.prototype.readVarintBN = function() {
	  var first = this.readUInt8();
	  switch (first) {
	    case 0xFD:
	      return new BN(this.readUInt16LE());
	    case 0xFE:
	      return new BN(this.readUInt32LE());
	    case 0xFF:
	      return this.readUInt64LEBN();
	    default:
	      return new BN(first);
	  }
	};

	BufferReader.prototype.reverse = function() {
	  var buf = new Buffer(this.buf.length);
	  for (var i = 0; i < buf.length; i++) {
	    buf[i] = this.buf[this.buf.length - 1 - i];
	  }
	  this.buf = buf;
	  return this;
	};

	BufferReader.prototype.readReverse = function(len) {
	  if (_.isUndefined(len)) {
	    len = this.buf.length;
	  }
	  var buf = this.buf.slice(this.pos, this.pos + len);
	  this.pos = this.pos + len;
	  return BufferUtil.reverse(buf);
	};

	module.exports = BufferReader;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var _ = __webpack_require__(4);

	var BufferUtil = __webpack_require__(6);
	var networks = [];
	var networkMaps = {};

	/**
	 * A network is merely a map containing values that correspond to version
	 * numbers for each bitcoin network. Currently only supporting "livenet"
	 * (a.k.a. "mainnet") and "testnet".
	 * @constructor
	 */
	function Network() {}

	Network.prototype.toString = function toString() {
	  return this.name;
	};

	/**
	 * @function
	 * @member Networks#get
	 * Retrieves the network associated with a magic number or string.
	 * @param {string|number|Network} arg
	 * @param {string} key - if set, only check if the magic number associated with this name matches
	 * @return Network
	 */
	function getNetwork(arg, key) {
	  if (~networks.indexOf(arg)) {
	    return arg;
	  }
	  if (key) {
	    for (var index in networks) {
	      if (networks[index][key] === arg) {
	        return networks[index];
	      }
	    }
	    return undefined;
	  }
	  return networkMaps[arg];
	}

	/**
	 * @function
	 * @member Networks#add
	 * Will add a custom Network
	 * @param {Object} data
	 * @param {String} data.name - The name of the network
	 * @param {String} data.alias - The aliased name of the network
	 * @param {Number} data.pubkeyhash - The publickey hash prefix
	 * @param {Number} data.privatekey - The privatekey prefix
	 * @param {Number} data.scripthash - The scripthash prefix
	 * @param {Number} data.xpubkey - The extended public key magic
	 * @param {Number} data.xprivkey - The extended private key magic
	 * @param {Number} data.networkMagic - The network magic number
	 * @param {Number} data.port - The network port
	 * @param {Array}  data.dnsSeeds - An array of dns seeds
	 * @return Network
	 */
	function addNetwork(data) {

	  var network = new Network();

	  _.extend(network, {
	    name: data.name,
	    alias: data.alias,
	    pubkeyhash: data.pubkeyhash,
	    privatekey: data.privatekey,
	    scripthash: data.scripthash,
	    xpubkey: data.xpubkey,
	    xprivkey: data.xprivkey,
	    networkMagic: BufferUtil.integerAsBuffer(data.networkMagic),
	    port: data.port,
	    dnsSeeds: data.dnsSeeds
	  });

	  _.each(_.values(network), function(value) {
	    if (!_.isObject(value)) {
	      networkMaps[value] = network;
	    }
	  });

	  networks.push(network);

	  return network;

	}

	addNetwork({
	  name: 'livenet',
	  alias: 'mainnet',
	  pubkeyhash: 0x00,
	  privatekey: 0x80,
	  scripthash: 0x05,
	  xpubkey:  0x0488b21e,
	  xprivkey: 0x0488ade4,
	  networkMagic: 0xf9beb4d9,
	  port: 8333,
	  dnsSeeds: [
	    'seed.bitcoin.sipa.be',
	    'dnsseed.bluematt.me',
	    'dnsseed.bitcoin.dashjr.org',
	    'seed.bitcoinstats.com',
	    'seed.bitnodes.io',
	    'bitseed.xf2.org'
	  ]
	});

	addNetwork({
	  name: 'testnet',
	  alias: 'testnet',
	  pubkeyhash: 0x6f,
	  privatekey: 0xef,
	  scripthash: 0xc4,
	  xpubkey: 0x043587cf,
	  xprivkey: 0x04358394,
	  networkMagic: 0x0b110907,
	  port: 18333,
	  dnsSeeds: [
	    'testnet-seed.bitcoin.petertodd.org',
	    'testnet-seed.bluematt.me',
	    'testnet-seed.alexykot.me',
	    'testnet-seed.bitcoin.schildbach.de'
	  ],
	});

	/**
	* @instance
	* @member Networks#livenet
	*/
	var livenet = getNetwork('livenet');

	/**
	* @instance
	* @member Networks#testnet
	*/
	var testnet = getNetwork('testnet');

	/**
	 * @namespace Networks
	 */
	module.exports = {
	  add: addNetwork,
	  defaultNetwork: livenet,
	  livenet: livenet,
	  mainnet: livenet,
	  testnet: testnet,
	  get: getNetwork
	};


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var hash = exports;

	hash.utils = __webpack_require__(232);
	hash.common = __webpack_require__(228);
	hash.sha = __webpack_require__(231);
	hash.ripemd = __webpack_require__(230);
	hash.hmac = __webpack_require__(229);

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.ripemd160 = hash.ripemd.ripemd160;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(61);
	util.inherits = __webpack_require__(62);
	/*</replacement>*/

	var Readable = __webpack_require__(183);
	var Writable = __webpack_require__(112);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var BN = __webpack_require__(12);
	var BufferUtil = __webpack_require__(6);
	var ec = __webpack_require__(21).curves.secp256k1;
	var ecPoint = ec.curve.point.bind(ec.curve);
	var ecPointFromX = ec.curve.pointFromX.bind(ec.curve);

	/**
	 *
	 * Instantiate a valid secp256k1 Point from the X and Y coordinates.
	 *
	 * @param {BN|String} x - The X coordinate
	 * @param {BN|String} y - The Y coordinate
	 * @link https://github.com/indutny/elliptic
	 * @augments elliptic.curve.point
	 * @throws {Error} A validation error if exists
	 * @returns {Point} An instance of Point
	 * @constructor
	 */
	var Point = function Point(x, y, isRed) {
	  var point = ecPoint(x, y, isRed);
	  point.validate();
	  return point;
	};

	Point.prototype = Object.getPrototypeOf(ec.curve.point());

	/**
	 *
	 * Instantiate a valid secp256k1 Point from only the X coordinate
	 *
	 * @param {boolean} odd - If the Y coordinate is odd
	 * @param {BN|String} x - The X coordinate
	 * @throws {Error} A validation error if exists
	 * @returns {Point} An instance of Point
	 */
	Point.fromX = function fromX(odd, x){
	  var point = ecPointFromX(odd, x);
	  point.validate();
	  return point;
	};

	/**
	 *
	 * Will return a secp256k1 ECDSA base point.
	 *
	 * @link https://en.bitcoin.it/wiki/Secp256k1
	 * @returns {Point} An instance of the base point.
	 */
	Point.getG = function getG() {
	  return ec.curve.g;
	};

	/**
	 *
	 * Will return the max of range of valid private keys as governed by the secp256k1 ECDSA standard.
	 *
	 * @link https://en.bitcoin.it/wiki/Private_key#Range_of_valid_ECDSA_private_keys
	 * @returns {BN} A BN instance of the number of points on the curve
	 */
	Point.getN = function getN() {
	  return new BN(ec.curve.n.toArray());
	};

	Point.prototype._getX = Point.prototype.getX;

	/**
	 *
	 * Will return the X coordinate of the Point
	 *
	 * @returns {BN} A BN instance of the X coordinate
	 */
	Point.prototype.getX = function getX() {
	  return new BN(this._getX().toArray());
	};

	Point.prototype._getY = Point.prototype.getY;

	/**
	 *
	 * Will return the Y coordinate of the Point
	 *
	 * @returns {BN} A BN instance of the Y coordinate
	 */
	Point.prototype.getY = function getY() {
	  return new BN(this._getY().toArray());
	};

	/**
	 *
	 * Will determine if the point is valid
	 *
	 * @link https://www.iacr.org/archive/pkc2003/25670211/25670211.pdf
	 * @param {Point} An instance of Point
	 * @throws {Error} A validation error if exists
	 * @returns {Point} An instance of the same Point
	 */
	Point.prototype.validate = function validate() {

	  if (this.isInfinity()){
	    throw new Error('Point cannot be equal to Infinity');
	  }

	  if (this.getX().cmp(BN.Zero) === 0 || this.getY().cmp(BN.Zero) === 0){
	    throw new Error('Invalid x,y value for curve, cannot equal 0.');
	  }

	  var p2 = ecPointFromX(this.getY().isOdd(), this.getX());

	  if (p2.y.cmp(this.y) !== 0) {
	    throw new Error('Invalid y value for curve.');
	  }

	  var xValidRange = (this.getX().gt(BN.Minus1) && this.getX().lt(Point.getN()));
	  var yValidRange = (this.getY().gt(BN.Minus1) && this.getY().lt(Point.getN()));

	  if ( !xValidRange || !yValidRange ) {
	    throw new Error('Point does not lie on the curve');
	  }

	  //todo: needs test case
	  if (!(this.mul(Point.getN()).isInfinity())) {
	    throw new Error('Point times N must be infinity');
	  }

	  return this;

	};

	Point.pointToCompressed = function pointToCompressed(point) {
	  var xbuf = point.getX().toBuffer({size: 32});
	  var ybuf = point.getY().toBuffer({size: 32});

	  var prefix;
	  var odd = ybuf[ybuf.length - 1] % 2;
	  if (odd) {
	    prefix = new Buffer([0x03]);
	  } else {
	    prefix = new Buffer([0x02]);
	  }
	  return BufferUtil.concat([prefix, xbuf]);
	};

	module.exports = Point;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);
	var BN = __webpack_require__(12);
	var buffer = __webpack_require__(1);
	var bufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);
	var BufferWriter = __webpack_require__(29);
	var Script = __webpack_require__(19);

	function Output(params) {
	  if (!(this instanceof Output)) {
	    return new Output(params);
	  }
	  if (params) {
	    if (JSUtil.isValidJSON(params)) {
	      return Output.fromJSON(params);
	    }
	    return this._fromObject(params);
	  }
	}

	Object.defineProperty(Output.prototype, 'script', {
	  configurable: false,
	  writeable: false,
	  enumerable: true,
	  get: function() {
	    if (!this._script) {
	      this._script = new Script(this._scriptBuffer);
	    }
	    return this._script;
	  }
	});

	Object.defineProperty(Output.prototype, 'satoshis', {
	  configurable: false,
	  writeable: true,
	  enumerable: true,
	  get: function() {
	    return this._satoshis;
	  },
	  set: function(num) {
	    if (num instanceof BN) {
	      this._satoshisBN = num;
	      this._satoshis = num.toNumber();
	    } else if (_.isString(num)) {
	      this._satoshis = parseInt(num);
	      this._satoshisBN = BN.fromNumber(this._satoshis);
	    } else {
	      this._satoshisBN = BN.fromNumber(num);
	      this._satoshis = num;
	    }
	  }
	});

	Output.prototype._fromObject = function(param) {
	  this.satoshis = param.satoshis;
	  if (param.script || param.scriptBuffer) {
	    this.setScript(param.script || param.scriptBuffer);
	  }
	  return this;
	};

	Output.prototype.toObject = function toObject() {
	  return {
	    satoshis: this.satoshis,
	    script: this.script.toString()
	  };
	};

	Output.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	Output.fromJSON = function(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  return new Output({
	    satoshis: json.satoshis || -(-json.valuebn),
	    script: new Script(json.script)
	  });
	};

	Output.prototype.setScript = function(script) {
	  if (script instanceof Script) {
	    this._scriptBuffer = script.toBuffer();
	    this._script = script;
	  } else if (_.isString(script)) {
	    this._script = new Script(script);
	    this._scriptBuffer = this._script.toBuffer();
	  } else if (bufferUtil.isBuffer(script)) {
	    this._scriptBuffer = script;
	    this._script = null;
	  } else {
	    throw new TypeError('Unrecognized Argument');
	  }
	  return this;
	};

	Output.prototype.inspect = function() {
	  return '<Output (' + this.satoshis + ' sats) ' + this.script.inspect() + '>';
	};

	Output.fromBufferReader = function(br) {
	  var output = new Output();
	  output.satoshis = br.readUInt64LEBN();
	  var size = br.readVarintNum();
	  if (size !== 0) {
	    output._scriptBuffer = br.read(size);
	  } else {
	    output._scriptBuffer = new buffer.Buffer([]);
	  }
	  return output;
	};

	Output.prototype.toBufferWriter = function(writer) {
	  if (!writer) {
	    writer = new BufferWriter();
	  }
	  writer.writeUInt64LEBN(this._satoshisBN);
	  var script = this._scriptBuffer;
	  writer.writeVarintNum(script.length);
	  writer.write(script);
	  return writer;
	};

	module.exports = Output;


/***/ },
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var Base58 = __webpack_require__(65);
	var buffer = __webpack_require__(1);
	var sha256sha256 = __webpack_require__(14).sha256sha256;

	var Base58Check = function Base58Check(obj) {
	  if (!(this instanceof Base58Check))
	    return new Base58Check(obj);
	  if (Buffer.isBuffer(obj)) {
	    var buf = obj;
	    this.fromBuffer(buf);
	  } else if (typeof obj === 'string') {
	    var str = obj;
	    this.fromString(str);
	  } else if (obj) {
	    this.set(obj);
	  }
	};

	Base58Check.prototype.set = function(obj) {
	  this.buf = obj.buf || this.buf || undefined;
	  return this;
	};

	Base58Check.validChecksum = function validChecksum(data, checksum) {
	  if (_.isString(data)) {
	    data = new buffer.Buffer(Base58.decode(data));
	  }
	  if (_.isString(checksum)) {
	    checksum = new buffer.Buffer(Base58.decode(checksum));
	  }
	  if (!checksum) {
	    checksum = data.slice(-4);
	    data = data.slice(0, -4);
	  }
	  return Base58Check.checksum(data).toString('hex') === checksum.toString('hex');
	};

	Base58Check.decode = function(s) {
	  if (typeof s !== 'string')
	    throw new Error('Input must be a string');

	  var buf = new Buffer(Base58.decode(s));

	  if (buf.length < 4)
	    throw new Error("Input string too short");

	  var data = buf.slice(0, -4);
	  var csum = buf.slice(-4);

	  var hash = sha256sha256(data);
	  var hash4 = hash.slice(0, 4);

	  if (csum.toString('hex') !== hash4.toString('hex'))
	    throw new Error("Checksum mismatch");

	  return data;
	};

	Base58Check.checksum = function(buffer) {
	  return sha256sha256(buffer).slice(0, 4);
	};

	Base58Check.encode = function(buf) {
	  if (!Buffer.isBuffer(buf))
	    throw new Error('Input must be a buffer');
	  var checkedBuf = new Buffer(buf.length + 4);
	  var hash = Base58Check.checksum(buf);
	  buf.copy(checkedBuf);
	  hash.copy(checkedBuf, buf.length);
	  return Base58.encode(checkedBuf);
	};

	Base58Check.prototype.fromBuffer = function(buf) {
	  this.buf = buf;
	  return this;
	};

	Base58Check.prototype.fromString = function(str) {
	  var buf = Base58Check.decode(str);
	  this.buf = buf;
	  return this;
	};

	Base58Check.prototype.toBuffer = function() {
	  return this.buf;
	};

	Base58Check.prototype.toString = function() {
	  return Base58Check.encode(this.buf);
	};

	module.exports = Base58Check;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var buffer = __webpack_require__(1);

	var Signature = __webpack_require__(28);
	var Script = __webpack_require__(19);
	var Output = __webpack_require__(48);
	var BufferReader = __webpack_require__(39);
	var BufferWriter = __webpack_require__(29);
	var BN = __webpack_require__(12);
	var Hash = __webpack_require__(14);
	var ECDSA = __webpack_require__(122);
	var $ = __webpack_require__(8);
	var _ = __webpack_require__(4);

	var SIGHASH_SINGLE_BUG = '0000000000000000000000000000000000000000000000000000000000000001';
	var BITS_64_ON = 'ffffffffffffffff';

	/**
	 * Returns a buffer of length 32 bytes with the hash that needs to be signed
	 * for OP_CHECKSIG.
	 *
	 * @name Signing.sighash
	 * @param {Transaction} transaction the transaction to sign
	 * @param {number} sighashType the type of the hash
	 * @param {number} inputNumber the input index for the signature
	 * @param {Script} subscript the script that will be signed
	 */
	var sighash = function sighash(transaction, sighashType, inputNumber, subscript) {
	  var Transaction = __webpack_require__(126);
	  var Input = __webpack_require__(83);

	  var i;
	  // Copy transaction
	  var txcopy = Transaction.shallowCopy(transaction);

	  // Copy script
	  subscript = new Script(subscript);
	  subscript.removeCodeseparators();

	  for (i = 0; i < txcopy.inputs.length; i++) {
	    // Blank signatures for other inputs
	    txcopy.inputs[i] = new Input(txcopy.inputs[i]).setScript(Script.empty());
	  }

	  txcopy.inputs[inputNumber] = new Input(txcopy.inputs[inputNumber]).setScript(subscript);

	  if ((sighashType & 31) === Signature.SIGHASH_NONE ||
	    (sighashType & 31) === Signature.SIGHASH_SINGLE) {

	    // clear all sequenceNumbers
	    for (i = 0; i < txcopy.inputs.length; i++) {
	      if (i !== inputNumber) {
	        txcopy.inputs[i].sequenceNumber = 0;
	      }
	    }
	  }

	  if ((sighashType & 31) === Signature.SIGHASH_NONE) {
	    txcopy.outputs = [];

	  } else if ((sighashType & 31) === Signature.SIGHASH_SINGLE) {
	    // The SIGHASH_SINGLE bug.
	    // https://bitcointalk.org/index.php?topic=260595.0
	    if (inputNumber > txcopy.outputs.length - 1) {
	      return new Buffer(SIGHASH_SINGLE_BUG, 'hex');
	    }
	    if (txcopy.outputs.length <= inputNumber) {
	      throw new Error('Missing output to sign');
	    }

	    txcopy.outputs.length = inputNumber + 1;

	    for (i = 0; i < inputNumber; i++) {
	      txcopy.outputs[i] = new Output({
	        satoshis: BN.fromBuffer(new buffer.Buffer(BITS_64_ON, 'hex')),
	        script: Script.empty()
	      });
	    }
	  }

	  if (sighashType & Signature.SIGHASH_ANYONECANPAY) {
	    txcopy.inputs = [txcopy.inputs[inputNumber]];
	  }

	  var buf = new BufferWriter()
	    .write(txcopy.toBuffer())
	    .writeInt32LE(sighashType)
	    .toBuffer();
	  var ret = Hash.sha256sha256(buf);
	  ret = new BufferReader(ret).readReverse();
	  return ret;
	};

	/**
	 * Create a signature
	 *
	 * @name Signing.sign
	 * @param {Transaction} transaction
	 * @param {PrivateKey} privateKey
	 * @param {number} sighash
	 * @param {number} inputIndex
	 * @param {Script} subscript
	 * @return {Signature}
	 */
	function sign(transaction, privateKey, sighashType, inputIndex, subscript) {
	  var hashbuf = sighash(transaction, sighashType, inputIndex, subscript);
	  var sig = ECDSA.sign(hashbuf, privateKey, 'little').set({
	    nhashtype: sighashType
	  });
	  return sig;
	}

	/**
	 * Verify a signature
	 *
	 * @name Signing.verify
	 * @param {Transaction} transaction
	 * @param {Signature} signature
	 * @param {PublicKey} publicKey
	 * @param {number} inputIndex
	 * @param {Script} subscript
	 * @return {boolean}
	 */
	function verify(transaction, signature, publicKey, inputIndex, subscript) {
	  $.checkArgument(!_.isUndefined(transaction));
	  $.checkArgument(!_.isUndefined(signature) && !_.isUndefined(signature.nhashtype));
	  var hashbuf = sighash(transaction, signature.nhashtype, inputIndex, subscript);
	  return ECDSA.verify(hashbuf, signature, publicKey, 'little');
	}

	/**
	 * @namespace Signing
	 */
	module.exports = {
	  sighash: sighash,
	  sign: sign,
	  verify: verify
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(23).EventEmitter;
	var inherits = __webpack_require__(387);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(384);
	Stream.Writable = __webpack_require__(386);
	Stream.Duplex = __webpack_require__(381);
	Stream.Transform = __webpack_require__(385);
	Stream.PassThrough = __webpack_require__(383);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {'use strict';

	function Random() {
	}

	/* secure random bytes that sometimes throws an error due to lack of entropy */
	Random.getRandomBuffer = function(size) {
	  if (process.browser)
	    return Random.getRandomBufferBrowser(size);
	  else
	    return Random.getRandomBufferNode(size);
	};

	Random.getRandomBufferNode = function(size) {
	  var crypto = __webpack_require__(77);
	  return crypto.randomBytes(size);
	};

	Random.getRandomBufferBrowser = function(size) {
	  if (!window.crypto && !window.msCrypto)
	    throw new Error('window.crypto not available');

	  if (window.crypto && window.crypto.getRandomValues)
	    var crypto = window.crypto;
	  else if (window.msCrypto && window.msCrypto.getRandomValues) //internet explorer
	    var crypto = window.msCrypto;
	  else
	    throw new Error('window.crypto.getRandomValues not available');

	  var bbuf = new Uint8Array(size);
	  crypto.getRandomValues(bbuf);
	  var buf = new Buffer(bbuf);

	  return buf;
	};

	/* insecure random bytes, but it never fails */
	Random.getPseudoRandomBuffer = function(size) {
	  var b32 = 0x100000000;
	  var b = new Buffer(size);
	  var r;

	  for (var i = 0; i <= size; i++) {
	    var j = Math.floor(i / 4);
	    var k = i - j * 4;
	    if (k === 0) {
	      r = Math.random() * b32;
	      b[i] = r & 0xff;
	    } else {
	      b[i] = (r = r >>> 8) & 0xff;
	    }
	  }

	  return b;
	};

	module.exports = Random;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1).Buffer))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var bs58 = __webpack_require__(128);
	var buffer = __webpack_require__(1);

	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'.split('');

	var Base58 = function Base58(obj) {
	  /* jshint maxcomplexity: 8 */
	  if (!(this instanceof Base58)) {
	    return new Base58(obj);
	  }
	  if (Buffer.isBuffer(obj)) {
	    var buf = obj;
	    this.fromBuffer(buf);
	  } else if (typeof obj === 'string') {
	    var str = obj;
	    this.fromString(str);
	  } else if (obj) {
	    this.set(obj);
	  }
	};

	Base58.validCharacters = function validCharacters(chars) {
	  if (buffer.Buffer.isBuffer(chars)) {
	    chars = chars.toString();
	  }
	  return _.all(_.map(chars, function(char) { return _.contains(ALPHABET, char); }));
	};

	Base58.prototype.set = function(obj) {
	  this.buf = obj.buf || this.buf || undefined;
	  return this;
	};

	Base58.encode = function(buf) {
	  if (!buffer.Buffer.isBuffer(buf)) {
	    throw new Error('Input should be a buffer');
	  }
	  return bs58.encode(buf);
	};

	Base58.decode = function(str) {
	  if (typeof str !== 'string') {
	    throw new Error('Input should be a string');
	  }
	  return new Buffer(bs58.decode(str));
	};

	Base58.prototype.fromBuffer = function(buf) {
	  this.buf = buf;
	  return this;
	};

	Base58.prototype.fromString = function(str) {
	  var buf = Base58.decode(str);
	  this.buf = buf;
	  return this;
	};

	Base58.prototype.toBuffer = function() {
	  return this.buf;
	};

	Base58.prototype.toString = function() {
	  return Base58.encode(this.buf);
	};

	module.exports = Base58;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var Address = __webpack_require__(38);
	var Base58Check = __webpack_require__(55);
	var BN = __webpack_require__(12);
	var JSUtil = __webpack_require__(10);
	var Networks = __webpack_require__(40);
	var Point = __webpack_require__(47);
	var PublicKey = __webpack_require__(25);
	var Random = __webpack_require__(64);

	/**
	 * Instantiate a PrivateKey from a BN, Buffer and WIF.
	 *
	 * @example
	 * ```javascript
	 * // generate a new random key
	 * var key = PrivateKey();
	 *
	 * // get the associated address
	 * var address = key.toAddress();
	 *
	 * // encode into wallet export format
	 * var exported = key.toWIF();
	 *
	 * // instantiate from the exported (and saved) private key
	 * var imported = PrivateKey.fromWIF(exported);
	 * ```
	 *
	 * @param {string} data - The encoded data in various formats
	 * @param {Network|string} [network] - a {@link Network} object, or a string with the network name
	 * @returns {PrivateKey} A new valid instance of an PrivateKey
	 * @constructor
	 */
	var PrivateKey = function PrivateKey(data, network) {
	  /* jshint maxstatements: 20 */
	  /* jshint maxcomplexity: 8 */

	  if (!(this instanceof PrivateKey)) {
	    return new PrivateKey(data, network);
	  }
	  if (data instanceof PrivateKey) {
	    return data;
	  }

	  var info = this._classifyArguments(data, network);

	  // validation
	  if (!info.bn || info.bn.cmp(new BN(0)) === 0){
	    throw new TypeError('Number can not be equal to zero, undefined, null or false');
	  }
	  if (!info.bn.lt(Point.getN())) {
	    throw new TypeError('Number must be less than N');
	  }
	  if (typeof(info.network) === 'undefined') {
	    throw new TypeError('Must specify the network ("livenet" or "testnet")');
	  }

	  JSUtil.defineImmutable(this, {
	    bn: info.bn,
	    compressed: info.compressed,
	    network: info.network
	  });

	  Object.defineProperty(this, 'publicKey', {
	    configurable: false,
	    enumerable: true,
	    get: this.toPublicKey.bind(this)
	  });

	  return this;

	};

	/**
	 * Internal helper to instantiate PrivateKey internal `info` object from
	 * different kinds of arguments passed to the constructor.
	 *
	 * @param {*} data
	 * @param {Network|string} [network] - a {@link Network} object, or a string with the network name
	 * @return {Object}
	 */
	PrivateKey.prototype._classifyArguments = function(data, network) {
	  /* jshint maxcomplexity: 10 */
	  var info = {
	    compressed: true,
	    network: network ? Networks.get(network) : Networks.defaultNetwork
	  };

	  // detect type of data
	  if (_.isUndefined(data) || _.isNull(data)){
	    info.bn = PrivateKey._getRandomBN();
	  } else if (data instanceof BN) {
	    info.bn = data;
	  } else if (data instanceof Buffer || data instanceof Uint8Array) {
	    info = PrivateKey._transformBuffer(data, network);
	  } else if (PrivateKey._isJSON(data)){
	    info = PrivateKey._transformJSON(data);
	  } else if (!network && Networks.get(data)) {
	    info.bn = PrivateKey._getRandomBN();
	    info.network = Networks.get(data);
	  } else if (typeof(data) === 'string'){
	    if (JSUtil.isHexa(data)) {
	      info.bn = new BN(new Buffer(data, 'hex'));
	    } else {
	      info = PrivateKey._transformWIF(data, network);
	    }
	  } else {
	    throw new TypeError('First argument is an unrecognized data type.');
	  }
	  return info;
	};

	/**
	 * Internal function to get a random Big Number (BN)
	 *
	 * @returns {BN} A new randomly generated BN
	 * @private
	 */
	PrivateKey._getRandomBN = function(){
	  var condition;
	  var bn;
	  do {
	    var privbuf = Random.getRandomBuffer(32);
	    bn = BN.fromBuffer(privbuf);
	    condition = bn.lt(Point.getN());
	  } while (!condition);
	  return bn;
	};

	/**
	 * Internal function to detect if a param is a JSON string or plain object
	 *
	 * @param {*} param - value to test
	 * @returns {boolean}
	 * @private
	 */
	PrivateKey._isJSON = function(json) {
	  return JSUtil.isValidJSON(json) || (json.bn && json.network);
	};

	/**
	 * Internal function to transform a WIF Buffer into a private key
	 *
	 * @param {Buffer} buf - An WIF string
	 * @param {Network|string} [network] - a {@link Network} object, or a string with the network name
	 * @returns {Object} An object with keys: bn, network and compressed
	 * @private
	 */
	PrivateKey._transformBuffer = function(buf, network) {

	  var info = {};

	  if (buf.length === 32) {
	    return PrivateKey._transformBNBuffer(buf, network);
	  }

	  info.network = Networks.get(buf[0], 'privatekey');
	  if (buf[0] === Networks.livenet.privatekey) {
	    info.network = Networks.livenet;
	  } else if (buf[0] === Networks.testnet.privatekey) {
	    info.network = Networks.testnet;
	  } else {
	    throw new Error('Invalid network');
	  }

	  if (network && info.network !== Networks.get(network)) {
	    throw new TypeError('Private key network mismatch');
	  }

	  if (buf.length === 1 + 32 + 1 && buf[1 + 32 + 1 - 1] === 1) {
	    info.compressed = true;
	  } else if (buf.length === 1 + 32) {
	    info.compressed = false;
	  } else {
	    throw new Error('Length of buffer must be 33 (uncompressed) or 34 (compressed)');
	  }

	  info.bn = BN.fromBuffer(buf.slice(1, 32 + 1));

	  return info;
	};

	/**
	 * Internal function to transform a BN buffer into a private key
	 *
	 * @param {Buffer} buf
	 * @param {Network|string} [network] - a {@link Network} object, or a string with the network name
	 * @returns {object} an Object with keys: bn, network, and compressed
	 * @private
	 */
	PrivateKey._transformBNBuffer = function(buf, network) {
	  var info = {};
	  info.network = Networks.get(network) || Networks.defaultNetwork;
	  info.bn = BN.fromBuffer(buf);
	  info.compressed = false;
	  return info;
	};

	/**
	 * Internal function to transform a WIF string into a private key
	 *
	 * @param {String} buf - An WIF string
	 * @returns {Object} An object with keys: bn, network and compressed
	 * @private
	 */
	PrivateKey._transformWIF = function(str, network) {
	  return PrivateKey._transformBuffer(Base58Check.decode(str), network);
	};

	/**
	 * Instantiate a PrivateKey from a JSON string
	 *
	 * @param {String} json - The JSON encoded private key string
	 * @returns {PrivateKey} A new valid instance of PrivateKey
	 */
	PrivateKey.fromJSON = function(json) {
	  if (!PrivateKey._isJSON(json)) {
	    throw new TypeError('Must be a valid JSON string or plain object');
	  }

	  return new PrivateKey(json);
	};

	/**
	 * Instantiate a PrivateKey from a Buffer with the DER or WIF representation
	 *
	 * @param {Buffer} arg
	 * @param {Network} network
	 * @return {PrivateKey}
	 */
	PrivateKey.fromBuffer = function(arg, network) {
	  return new PrivateKey(arg, network);
	};

	/**
	 * Internal function to transform a JSON string on plain object into a private key
	 * return this.
	 *
	 * @param {String} json - A JSON string or plain object
	 * @returns {Object} An object with keys: bn, network and compressed
	 * @private
	 */
	PrivateKey._transformJSON = function(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  var bn = new BN(json.bn, 'hex');
	  return {
	    bn: bn,
	    network: json.network,
	    compressed: json.compressed
	  };
	};

	/**
	 * Instantiate a PrivateKey from a WIF string
	 *
	 * @param {String} str - The WIF encoded private key string
	 * @returns {PrivateKey} A new valid instance of PrivateKey
	 */
	PrivateKey.fromString = PrivateKey.fromWIF = function(str) {
	  return new PrivateKey(str);
	};

	/**
	 * Instantiate a PrivateKey from random bytes
	 *
	 * @param {String} [network] - Either "livenet" or "testnet"
	 * @returns {PrivateKey} A new valid instance of PrivateKey
	 */
	PrivateKey.fromRandom = function(network) {
	  var bn = PrivateKey._getRandomBN();
	  return new PrivateKey(bn, network);
	};

	/**
	 * Check if there would be any errors when initializing a PrivateKey
	 *
	 * @param {String} data - The encoded data in various formats
	 * @param {String} [network] - Either "livenet" or "testnet"
	 * @returns {null|Error} An error if exists
	 */

	PrivateKey.getValidationError = function(data, network) {
	  var error;
	  try {
	    /* jshint nonew: false */
	    new PrivateKey(data, network);
	  } catch (e) {
	    error = e;
	  }
	  return error;
	};

	/**
	 * Check if the parameters are valid
	 *
	 * @param {String} data - The encoded data in various formats
	 * @param {String} [network] - Either "livenet" or "testnet"
	 * @returns {Boolean} If the private key is would be valid
	 */
	PrivateKey.isValid = function(data, network){
	  return !PrivateKey.getValidationError(data, network);
	};

	/**
	 * Will output the PrivateKey encoded as hex string
	 *
	 * @returns {String}
	 */
	PrivateKey.prototype.toString = function() {
	  return this.toBuffer().toString('hex');
	};

	/**
	 * Will output the PrivateKey to a WIF string
	 *
	 * @returns {String} A WIP representation of the private key
	 */
	PrivateKey.prototype.toWIF = function() {
	  var network = this.network;
	  var compressed = this.compressed;

	  var buf;
	  if (compressed) {
	    buf = Buffer.concat([new Buffer([network.privatekey]),
	                         this.bn.toBuffer({size: 32}),
	                         new Buffer([0x01])]);
	  } else {
	    buf = Buffer.concat([new Buffer([network.privatekey]),
	                         this.bn.toBuffer({size: 32})]);
	  }

	  return Base58Check.encode(buf);
	};

	/**
	 * Will return the private key as a BN instance
	 *
	 * @returns {BN} A BN instance of the private key
	 */
	PrivateKey.prototype.toBigNumber = function(){
	  return this.bn;
	};

	/**
	 * Will return the private key as a BN buffer
	 *
	 * @returns {Buffer} A buffer of the private key
	 */
	PrivateKey.prototype.toBuffer = function(){
	  return this.bn.toBuffer();
	};

	/**
	 * Will return the corresponding public key
	 *
	 * @returns {PublicKey} A public key generated from the private key
	 */
	PrivateKey.prototype.toPublicKey = function(){
	  if (!this._pubkey) {
	    this._pubkey = PublicKey.fromPrivateKey(this);
	  }
	  return this._pubkey;
	};

	/**
	 * Will return an address for the private key
	 *
	 * @returns {Address} An address generated from the private key
	 */
	PrivateKey.prototype.toAddress = function() {
	  var pubkey = this.toPublicKey();
	  return Address.fromPublicKey(pubkey, this.network);
	};

	/**
	 * @returns {Object} A plain object representation
	 */
	PrivateKey.prototype.toObject = function toObject() {
	  return {
	    bn: this.bn.toString('hex'),
	    compressed: this.compressed,
	    network: this.network.toString()
	  };
	};

	PrivateKey.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Will return a string formatted for the console
	 *
	 * @returns {String} Private key
	 */
	PrivateKey.prototype.inspect = function() {
	  var uncompressed = !this.compressed ? ', uncompressed' : '';
	  return '<PrivateKey: ' + this.toString() + ', network: ' + this.network + uncompressed + '>';
	};

	module.exports = PrivateKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var curve = exports;

	curve.base = __webpack_require__(217);
	curve.short = __webpack_require__(220);
	curve.mont = __webpack_require__(219);
	curve.edwards = __webpack_require__(218);


/***/ },
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(376)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(174)

	exports.createHmac = __webpack_require__(362)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(375)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync
	__webpack_require__(367)(exports, module.exports);

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  _cache: {},
	  _count: 0,
	  _eraseIndex: 0,
	  _usedList: {},
	  _usedIndex: {},
	  _CACHE_SIZE: 5000,

	  get: function(xkey, number, hardened) {
	    hardened = !!hardened;
	    var key = xkey + '/' + number + '/' + hardened;
	    if (this._cache[key]) {
	      this._cacheHit(key);
	      return this._cache[key];
	    }
	  },
	  set: function(xkey, number, hardened, derived) {
	    hardened = !!hardened;
	    var key = xkey + '/' + number + '/' + hardened;
	    this._cache[key] = derived;
	    this._cacheHit(key);
	  },
	  _cacheHit: function(key) {
	    if (this._usedIndex[key]) {
	      delete this._usedList[this._usedIndex[key]];
	    }
	    this._usedList[this._count] = key;
	    this._usedIndex[key] = this._count;
	    this._count++;
	    this._cacheRemove();
	  },
	  _cacheRemove: function() {
	    while (this._eraseIndex < this._count - this._CACHE_SIZE) {
	      if (this._usedList[this._eraseIndex]) {
	        var removeKey = this._usedList[this._eraseIndex];
	        delete this._usedIndex[removeKey];
	        delete this._cache[removeKey];
	      }
	      delete this._usedList[this._eraseIndex];
	      this._eraseIndex++;
	    }
	  }
	};


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var BufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);

	function Opcode(num) {
	  if (!(this instanceof Opcode)) {
	    return new Opcode(num);
	  }

	  var value;

	  if (_.isNumber(num)) {
	    value = num;
	  } else if (_.isString(num)) {
	    value = Opcode.map[num];
	  } else {
	    throw new TypeError('Unrecognized num type: "' + typeof(num) + '" for Opcode');
	  }

	  JSUtil.defineImmutable(this, {
	    num: value
	  });

	  return this;
	}

	Opcode.fromBuffer = function(buf) {
	  $.checkArgument(BufferUtil.isBuffer(buf));
	  return new Opcode(Number('0x' + buf.toString('hex')));
	};

	Opcode.fromNumber = function(num) {
	  $.checkArgument(_.isNumber(num));
	  return new Opcode(num);
	};

	Opcode.fromString = function(str) {
	  $.checkArgument(_.isString(str));
	  var value = Opcode.map[str];
	  if (typeof value === 'undefined') {
	    throw new TypeError('Invalid opcodestr');
	  }
	  return new Opcode(value);
	};

	Opcode.prototype.toHex = function() {
	  return this.num.toString(16);
	};

	Opcode.prototype.toBuffer = function() {
	  return new Buffer(this.toHex(), 'hex');
	};

	Opcode.prototype.toNumber = function() {
	  return this.num;
	};

	Opcode.prototype.toString = function() {
	  var str = Opcode.reverseMap[this.num];
	  if (typeof str === 'undefined') {
	    throw new Error('Opcode does not have a string representation');
	  }
	  return str;
	};

	Opcode.smallInt = function(n) {
	  $.checkArgument(n >= 0 && n <= 16, 'Invalid Argument: n must be between 0 and 16');
	  if (n === 0) {
	    return Opcode('OP_0');
	  }
	  return new Opcode(Opcode.map.OP_1 + n - 1);
	};

	Opcode.map = {
	  // push value
	  OP_FALSE: 0,
	  OP_0: 0,
	  OP_PUSHDATA1: 76,
	  OP_PUSHDATA2: 77,
	  OP_PUSHDATA4: 78,
	  OP_1NEGATE: 79,
	  OP_RESERVED: 80,
	  OP_TRUE: 81,
	  OP_1: 81,
	  OP_2: 82,
	  OP_3: 83,
	  OP_4: 84,
	  OP_5: 85,
	  OP_6: 86,
	  OP_7: 87,
	  OP_8: 88,
	  OP_9: 89,
	  OP_10: 90,
	  OP_11: 91,
	  OP_12: 92,
	  OP_13: 93,
	  OP_14: 94,
	  OP_15: 95,
	  OP_16: 96,

	  // control
	  OP_NOP: 97,
	  OP_VER: 98,
	  OP_IF: 99,
	  OP_NOTIF: 100,
	  OP_VERIF: 101,
	  OP_VERNOTIF: 102,
	  OP_ELSE: 103,
	  OP_ENDIF: 104,
	  OP_VERIFY: 105,
	  OP_RETURN: 106,

	  // stack ops
	  OP_TOALTSTACK: 107,
	  OP_FROMALTSTACK: 108,
	  OP_2DROP: 109,
	  OP_2DUP: 110,
	  OP_3DUP: 111,
	  OP_2OVER: 112,
	  OP_2ROT: 113,
	  OP_2SWAP: 114,
	  OP_IFDUP: 115,
	  OP_DEPTH: 116,
	  OP_DROP: 117,
	  OP_DUP: 118,
	  OP_NIP: 119,
	  OP_OVER: 120,
	  OP_PICK: 121,
	  OP_ROLL: 122,
	  OP_ROT: 123,
	  OP_SWAP: 124,
	  OP_TUCK: 125,

	  // splice ops
	  OP_CAT: 126,
	  OP_SUBSTR: 127,
	  OP_LEFT: 128,
	  OP_RIGHT: 129,
	  OP_SIZE: 130,

	  // bit logic
	  OP_INVERT: 131,
	  OP_AND: 132,
	  OP_OR: 133,
	  OP_XOR: 134,
	  OP_EQUAL: 135,
	  OP_EQUALVERIFY: 136,
	  OP_RESERVED1: 137,
	  OP_RESERVED2: 138,

	  // numeric
	  OP_1ADD: 139,
	  OP_1SUB: 140,
	  OP_2MUL: 141,
	  OP_2DIV: 142,
	  OP_NEGATE: 143,
	  OP_ABS: 144,
	  OP_NOT: 145,
	  OP_0NOTEQUAL: 146,

	  OP_ADD: 147,
	  OP_SUB: 148,
	  OP_MUL: 149,
	  OP_DIV: 150,
	  OP_MOD: 151,
	  OP_LSHIFT: 152,
	  OP_RSHIFT: 153,

	  OP_BOOLAND: 154,
	  OP_BOOLOR: 155,
	  OP_NUMEQUAL: 156,
	  OP_NUMEQUALVERIFY: 157,
	  OP_NUMNOTEQUAL: 158,
	  OP_LESSTHAN: 159,
	  OP_GREATERTHAN: 160,
	  OP_LESSTHANOREQUAL: 161,
	  OP_GREATERTHANOREQUAL: 162,
	  OP_MIN: 163,
	  OP_MAX: 164,

	  OP_WITHIN: 165,

	  // crypto
	  OP_RIPEMD160: 166,
	  OP_SHA1: 167,
	  OP_SHA256: 168,
	  OP_HASH160: 169,
	  OP_HASH256: 170,
	  OP_CODESEPARATOR: 171,
	  OP_CHECKSIG: 172,
	  OP_CHECKSIGVERIFY: 173,
	  OP_CHECKMULTISIG: 174,
	  OP_CHECKMULTISIGVERIFY: 175,

	  // expansion
	  OP_NOP1: 176,
	  OP_NOP2: 177,
	  OP_NOP3: 178,
	  OP_NOP4: 179,
	  OP_NOP5: 180,
	  OP_NOP6: 181,
	  OP_NOP7: 182,
	  OP_NOP8: 183,
	  OP_NOP9: 184,
	  OP_NOP10: 185,

	  // template matching params
	  OP_PUBKEYHASH: 253,
	  OP_PUBKEY: 254,
	  OP_INVALIDOPCODE: 255
	};

	Opcode.reverseMap = [];

	for (var k in Opcode.map) {
	  Opcode.reverseMap[Opcode.map[k]] = k;
	}

	// Easier access to opcodes
	_.extend(Opcode, Opcode.map);

	/**
	 * @returns true if opcode is one of OP_0, OP_1, ..., OP_16
	 */
	Opcode.isSmallIntOp = function(opcode) {
	  if (opcode instanceof Opcode) {
	    opcode = opcode.toNumber();
	  }
	  return ((opcode === Opcode.map.OP_0) ||
	    ((opcode >= Opcode.map.OP_1) && (opcode <= Opcode.map.OP_16)));
	};

	/**
	 * Will return a string formatted for the console
	 *
	 * @returns {String} Script opcode
	 */
	Opcode.prototype.inspect = function() {
	  return '<Opcode: ' + this.toString() + ', hex: '+this.toHex()+', decimal: '+this.num+'>';
	};

	module.exports = Opcode;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(126);

	module.exports.Input = __webpack_require__(83);
	module.exports.Output = __webpack_require__(48);
	module.exports.UnspentOutput = __webpack_require__(127);
	module.exports.Signature = __webpack_require__(85);


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(84);

	module.exports.PublicKeyHash = __webpack_require__(215);
	module.exports.MultiSigScriptHash = __webpack_require__(214);


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);
	var errors = __webpack_require__(30);
	var BufferWriter = __webpack_require__(29);
	var buffer = __webpack_require__(1);
	var BufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);
	var Script = __webpack_require__(19);
	var Sighash = __webpack_require__(56);
	var Output = __webpack_require__(48);

	function Input(params) {
	  if (!(this instanceof Input)) {
	    return new Input(params);
	  }
	  if (params) {
	    return this._fromObject(params);
	  }
	}

	Object.defineProperty(Input.prototype, 'script', {
	  configurable: false,
	  writeable: false,
	  enumerable: true,
	  get: function() {
	    if (!this._script) {
	      this._script = new Script(this._scriptBuffer);
	    }
	    return this._script;
	  }
	});

	Input.prototype._fromObject = function(params) {
	  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {
	    params.prevTxId = new buffer.Buffer(params.prevTxId, 'hex');
	  }
	  this.output = params.output ?
	    (params.output instanceof Output ? params.output : new Output(params.output)) : undefined;
	  this.prevTxId = params.prevTxId;
	  this.outputIndex = params.outputIndex;
	  this.sequenceNumber = params.sequenceNumber;
	  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {
	    throw new errors.Transaction.Input.MissingScript();
	  }
	  this.setScript(params.scriptBuffer || params.script);
	  return this;
	};

	Input.prototype.toObject = function toObject() {
	  return {
	    prevTxId: this.prevTxId.toString('hex'),
	    outputIndex: this.outputIndex,
	    sequenceNumber: this.sequenceNumber,
	    script: this.script.toString(),
	    output: this.output ? this.output.toObject() : undefined
	  };
	};

	Input.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	Input.fromJSON = function(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  return new Input({
	    output: json.output ? new Output(json.output) : undefined,
	    prevTxId: json.prevTxId || json.txidbuf,
	    outputIndex: _.isUndefined(json.outputIndex) ? json.txoutnum : json.outputIndex,
	    sequenceNumber: json.sequenceNumber || json.seqnum,
	    scriptBuffer: new Script(json.script, 'hex')
	  });
	};

	Input.fromBufferReader = function(br) {
	  var input = new Input();
	  input.prevTxId = br.readReverse(32);
	  input.outputIndex = br.readUInt32LE();
	  input._scriptBuffer = br.readVarLengthBuffer();
	  input.sequenceNumber = br.readUInt32LE();
	  return input;
	};

	Input.prototype.toBufferWriter = function(writer) {
	  if (!writer) {
	    writer = new BufferWriter();
	  }
	  writer.writeReverse(this.prevTxId);
	  writer.writeUInt32LE(this.outputIndex);
	  var script = this._scriptBuffer;
	  writer.writeVarintNum(script.length);
	  writer.write(script);
	  writer.writeUInt32LE(this.sequenceNumber);
	  return writer;
	};

	Input.prototype.setScript = function(script) {
	  if (script instanceof Script) {
	    this._script = script;
	    this._scriptBuffer = script.toBuffer();
	  } else if (_.isString(script)) {
	    this._script = new Script(script);
	    this._scriptBuffer = this._script.toBuffer();
	  } else if (BufferUtil.isBuffer(script)) {
	    this._script = null;
	    this._scriptBuffer = new buffer.Buffer(script);
	  } else {
	    throw new TypeError('Invalid Argument');
	  }
	  return this;
	};

	/**
	 * Retrieve signatures for the provided PrivateKey.
	 *
	 * @param {Transaction} transaction - the transaction to be signed
	 * @param {PrivateKey} privateKey - the private key to use when signing
	 * @param {number} inputIndex - the index of this input in the provided transaction
	 * @param {number} sigType - defaults to Signature.SIGHASH_ALL
	 * @param {Buffer} addressHash - if provided, don't calculate the hash of the
	 *     public key associated with the private key provided
	 * @abstract
	 */
	Input.prototype.getSignatures = function() {
	  throw new errors.AbstractMethodInvoked(
	    'Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' +
	    ' for input: ' + this.toJSON()
	  );
	};

	Input.prototype.isFullySigned = function() {
	  throw new errors.AbstractMethodInvoked('Input#isFullySigned');
	};

	Input.prototype.addSignature = function() {
	  throw new errors.AbstractMethodInvoked('Input#addSignature');
	};

	Input.prototype.clearSignatures = function() {
	  throw new errors.AbstractMethodInvoked('Input#clearSignatures');
	};

	Input.prototype.isValidSignature = function(transaction, signature) {
	  // FIXME: Refactor signature so this is not necessary
	  signature.signature.nhashtype = signature.sigtype;
	  return Sighash.verify(
	    transaction,
	    signature.signature,
	    signature.publicKey,
	    signature.inputIndex,
	    this.output.script
	  );
	};

	/**
	 * @returns true if this is a coinbase input (represents no input)
	 */
	Input.prototype.isNull = function() {
	  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' &&
	    this.outputIndex === 0xffffffff;
	};

	Input.prototype._estimateSize = function() {
	  var bufferWriter = new BufferWriter();
	  this.toBufferWriter(bufferWriter);
	  return bufferWriter.toBuffer().length;
	};

	module.exports = Input;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var inherits = __webpack_require__(42);
	var BufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);

	var PublicKey = __webpack_require__(25);
	var errors = __webpack_require__(30);
	var Signature = __webpack_require__(28);

	/**
	 * @desc
	 * Wrapper around Signature with fields related to signing a transaction specifically
	 *
	 * @param {Object|string|TransactionSignature} arg
	 * @constructor
	 */
	function TransactionSignature(arg) {
	  if (!(this instanceof TransactionSignature)) {
	    return new TransactionSignature(arg);
	  }
	  if (arg instanceof TransactionSignature) {
	    return arg;
	  }
	  if (_.isString(arg)) {
	    if (JSUtil.isValidJSON(arg)) {
	      return TransactionSignature.fromJSON(arg);
	    }
	  }
	  if (_.isObject(arg)) {
	    return this._fromObject(arg);
	  }
	  throw new errors.InvalidArgument('TransactionSignatures must be instantiated from an object');
	}
	inherits(TransactionSignature, Signature);

	TransactionSignature.prototype._fromObject = function(arg) {
	  this._checkObjectArgs(arg);
	  this.publicKey = new PublicKey(arg.publicKey);
	  this.prevTxId = BufferUtil.isBuffer(arg.prevTxId) ? arg.prevTxId : new Buffer(arg.prevTxId, 'hex');
	  this.outputIndex = arg.outputIndex;
	  this.inputIndex = arg.inputIndex;
	  this.signature = (arg.signature instanceof Signature) ? arg.signature :
	                     BufferUtil.isBuffer(arg.signature) ? Signature.fromBuffer(arg.signature) :
	                     Signature.fromString(arg.signature);
	  this.sigtype = arg.sigtype;
	  return this;
	};

	TransactionSignature.prototype._checkObjectArgs = function(arg) {
	  $.checkArgument(PublicKey(arg.publicKey), 'publicKey');
	  $.checkArgument(!_.isUndefined(arg.inputIndex), 'inputIndex');
	  $.checkArgument(!_.isUndefined(arg.outputIndex), 'outputIndex');
	  $.checkState(_.isNumber(arg.inputIndex), 'inputIndex must be a number');
	  $.checkState(_.isNumber(arg.outputIndex), 'outputIndex must be a number');
	  $.checkArgument(arg.signature, 'signature');
	  $.checkArgument(arg.prevTxId, 'prevTxId');
	  $.checkState(arg.signature instanceof Signature ||
	               BufferUtil.isBuffer(arg.signature) ||
	               JSUtil.isHexa(arg.signature), 'signature must be a buffer or hexa value');
	  $.checkState(BufferUtil.isBuffer(arg.prevTxId) ||
	               JSUtil.isHexa(arg.prevTxId), 'prevTxId must be a buffer or hexa value');
	  $.checkArgument(arg.sigtype, 'sigtype');
	  $.checkState(_.isNumber(arg.sigtype), 'sigtype must be a number');
	};

	/**
	 * Serializes a transaction to a plain JS object
	 * @return {Object}
	 */
	TransactionSignature.prototype.toObject = function() {
	  return {
	    publicKey: this.publicKey.toString(),
	    prevTxId: this.prevTxId.toString('hex'),
	    outputIndex: this.outputIndex,
	    inputIndex: this.inputIndex,
	    signature: this.signature.toString(),
	    sigtype: this.sigtype
	  };
	};

	/**
	 * Serializes a transaction to a JSON string
	 * @return {string}
	 */
	TransactionSignature.prototype.toJSON = function() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Builds a TransactionSignature from a JSON string
	 * @param {string} json
	 * @return {TransactionSignature}
	 */
	TransactionSignature.fromJSON = function(json) {
	  return new TransactionSignature(JSON.parse(json));
	};

	/**
	 * Builds a TransactionSignature from an object
	 * @param {Object} object
	 * @return {TransactionSignature}
	 */
	TransactionSignature.fromObject = function(object) {
	  $.checkArgument(object);
	  return new TransactionSignature(object);
	};

	module.exports = TransactionSignature;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);

	var errors = __webpack_require__(30);
	var JSUtil = __webpack_require__(10);

	var UNITS = {
	  'BTC'      : [1e8, 8],
	  'mBTC'     : [1e5, 5],
	  'uBTC'     : [1e2, 2],
	  'bits'     : [1e2, 2],
	  'satoshis' : [1, 0]
	};

	/**
	 * Utility for handling and converting bitcoins units. The supported units are
	 * BTC, mBTC, bits (also named uBTC) and satoshis. A unit instance can be created with an
	 * amount and a unit code, or alternatively using static methods like {fromBTC}.
	 * It also allows to be created from a fiat amount and the exchange rate, or
	 * alternatively using the {fromFiat} static method.
	 * You can consult for different representation of a unit instance using it's
	 * {to} method, the fixed unit methods like {toSatoshis} or alternatively using
	 * the unit accessors. It also can be converted to a fiat amount by providing the
	 * corresponding BTC/fiat exchange rate.
	 *
	 * @example
	 * ```javascript
	 * var sats = Unit.fromBTC(1.3).toSatoshis();
	 * var mili = Unit.fromBits(1.3).to(Unit.mBTC);
	 * var bits = Unit.fromFiat(1.3, 350).bits;
	 * var btc = new Unit(1.3, Unit.bits).BTC;
	 * ```
	 *
	 * @param {Number} amount - The amount to be represented
	 * @param {String|Number} code - The unit of the amount or the exchange rate
	 * @returns {Unit} A new instance of an Unit
	 * @constructor
	 */
	function Unit(amount, code) {
	  if (!(this instanceof Unit)) {
	    return new Unit(amount, code);
	  }

	  // convert fiat to BTC
	  if (_.isNumber(code)) {
	    if (code <= 0) {
	      throw new errors.Unit.InvalidRate(code);
	    }
	    amount = amount / code;
	    code = Unit.BTC;
	  }

	  this._value = this._from(amount, code);

	  var self = this;
	  var defineAccesor = function(key) {
	    Object.defineProperty(self, key, {
	      get: function() { return self.to(key); },
	      enumerable: true,
	    });
	  };

	  Object.keys(UNITS).forEach(defineAccesor);
	}

	Object.keys(UNITS).forEach(function(key) {
	  Unit[key] = key;
	});

	/**
	 * Returns a Unit instance created from JSON string or object
	 *
	 * @param {String|Object} json - JSON with keys: amount and code
	 * @returns {Unit} A Unit instance
	 */
	Unit.fromJSON = function fromJSON(json){
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  return new Unit(json.amount, json.code);
	};

	/**
	 * Returns a Unit instance created from an amount in BTC
	 *
	 * @param {Number} amount - The amount in BTC
	 * @returns {Unit} A Unit instance
	 */
	Unit.fromBTC = function(amount) {
	  return new Unit(amount, Unit.BTC);
	};

	/**
	 * Returns a Unit instance created from an amount in mBTC
	 *
	 * @param {Number} amount - The amount in mBTC
	 * @returns {Unit} A Unit instance
	 */
	Unit.fromMilis = function(amount) {
	  return new Unit(amount, Unit.mBTC);
	};

	/**
	 * Returns a Unit instance created from an amount in bits
	 *
	 * @param {Number} amount - The amount in bits
	 * @returns {Unit} A Unit instance
	 */
	Unit.fromMicros = Unit.fromBits = function(amount) {
	  return new Unit(amount, Unit.bits);
	};

	/**
	 * Returns a Unit instance created from an amount in satoshis
	 *
	 * @param {Number} amount - The amount in satoshis
	 * @returns {Unit} A Unit instance
	 */
	Unit.fromSatoshis = function(amount) {
	  return new Unit(amount, Unit.satoshis);
	};

	/**
	 * Returns a Unit instance created from a fiat amount and exchange rate.
	 *
	 * @param {Number} amount - The amount in fiat
	 * @param {Number} rate - The exchange rate BTC/fiat
	 * @returns {Unit} A Unit instance
	 */
	Unit.fromFiat = function(amount, rate) {
	  return new Unit(amount, rate);
	};

	Unit.prototype._from = function(amount, code) {
	  if (!UNITS[code]) {
	    throw new errors.Unit.UnknownCode(code);
	  }
	  return parseInt((amount * UNITS[code][0]).toFixed());
	};

	/**
	 * Returns the value represented in the specified unit
	 *
	 * @param {String|Number} code - The unit code or exchange rate
	 * @returns {Number} The converted value
	 */
	Unit.prototype.to = function(code) {
	  if (_.isNumber(code)) {
	    if (code <= 0) {
	      throw new errors.Unit.InvalidRate(code);
	    }
	    return parseFloat((this.BTC * code).toFixed(2));
	  }

	  if (!UNITS[code]) {
	    throw new errors.Unit.UnknownCode(code);
	  }

	  var value = this._value / UNITS[code][0];
	  return parseFloat(value.toFixed(UNITS[code][1]));
	};

	/**
	 * Returns the value represented in BTC
	 *
	 * @returns {Number} The value converted to BTC
	 */
	Unit.prototype.toBTC = function() {
	  return this.to(Unit.BTC);
	};

	/**
	 * Returns the value represented in mBTC
	 *
	 * @returns {Number} The value converted to mBTC
	 */
	Unit.prototype.toMilis = function() {
	  return this.to(Unit.mBTC);
	};

	/**
	 * Returns the value represented in bits
	 *
	 * @returns {Number} The value converted to bits
	 */
	Unit.prototype.toMicros = Unit.prototype.toBits = function() {
	  return this.to(Unit.bits);
	};

	/**
	 * Returns the value represented in satoshis
	 *
	 * @returns {Number} The value converted to satoshis
	 */
	Unit.prototype.toSatoshis = function() {
	  return this.to(Unit.satoshis);
	};

	/**
	 * Returns the value represented in fiat
	 *
	 * @param {string} rate - The exchange rate between BTC/currency
	 * @returns {Number} The value converted to satoshis
	 */
	Unit.prototype.atRate = function(rate) {
	  return this.to(rate);
	};

	/**
	 * Returns a the string representation of the value in satoshis
	 *
	 * @returns {String} the value in satoshis
	 */
	Unit.prototype.toString = function() {
	  return this.satoshis + ' satoshis';
	};

	/**
	 * Returns a plain object representation of the Unit
	 *
	 * @returns {Object} An object with the keys: amount and code
	 */
	Unit.prototype.toObject = function toObject() {
	  return {
	    amount: this.BTC,
	    code: Unit.BTC
	  };
	};

	Unit.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Returns a string formatted for the console
	 *
	 * @returns {String} the value in satoshis
	 */
	Unit.prototype.inspect = function() {
	  return '<Unit: ' + this.toString() + '>';
	};

	module.exports = Unit;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {module.exports = WordArray

	/** An array of 32-bit words. */
	function WordArray(words, sigBytes) {
	  this.words = words || [];

	  if (sigBytes != undefined) {
	      this.sigBytes = sigBytes;
	  } else {
	      this.sigBytes = this.words.length * 4;
	  }
	}

	/**
	 * Concatenates a word array to this word array.
	 *
	 * @param {WordArray} wordArray The word array to append.
	 *
	 * @return {WordArray} This word array.
	 *
	 * @example
	 *
	 *     wordArray1.concat(wordArray2);
	 */
	WordArray.prototype.concat = function (wordArray) {
	  if (Buffer.isBuffer(wordArray))
	    wordArray = WordArray.fromBuffer(wordArray)

	        // Shortcuts
	        var thisWords = this.words;
	        var thatWords = wordArray.words;
	        var thisSigBytes = this.sigBytes;
	        var thatSigBytes = wordArray.sigBytes;

	        // Clamp excess bits
	        this.clamp();

	        // Concat
	        if (thisSigBytes % 4) {
	            // Copy one byte at a time
	            for (var i = 0; i < thatSigBytes; i++) {
	                var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	            }
	        } else if (thatWords.length > 0xffff) {
	            // Copy one word at a time
	            for (var i = 0; i < thatSigBytes; i += 4) {
	                thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	            }
	        } else {
	            // Copy all words at once
	            thisWords.push.apply(thisWords, thatWords);
	        }
	        this.sigBytes += thatSigBytes;

	        // Chainable
	        return this;
	}

	/**
	 * Removes insignificant bits.
	 *
	 */
	WordArray.prototype.clamp = function () {
	  // Shortcuts
	  var words = this.words;
	  var sigBytes = this.sigBytes;

	  // Clamp
	  words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	  words.length = Math.ceil(sigBytes / 4);
	}

	WordArray.prototype.clone = function() {
	  var wa = new WordArray(this.words.slice(0))
	  return wa
	}

	WordArray.prototype.toBuffer = function() {
	  var buf = new Buffer(this.words.length * 4)
	  for (var i = 0; i < this.words.length; ++i) {
	    var w = this.words[i]
	    buf.writeUInt32BE(w, i*4, true)
	  }
	  return buf 
	}

	WordArray.fromBuffer = function(buf) {
	  var len = buf.length
	  var dif = len % 4
	  var w = []

	  if (!process.browser) {
	    for (var i = 0; i < len; i += 4) {
	      var n = buf.readUInt32BE(i, true) 
	      w.push(n)
	    }
	    return new WordArray(w, buf.length)
	  } else { //bug in browserify / buffer
	    for (var i = 0; i < len - dif; i += 4) {
	      var n = buf.readUInt32BE(i)
	      w.push(n)
	    }
	    var lw = 0x0
	    var off = len - dif
	    for (var j = 0; j < dif; j += 1) {
	      lw |=  (buf.readUInt8(off + j) << ((3-j)*8))
	    }
	    if (dif > 0)
	      w.push(lw)
	    return new WordArray(w, buf.length)
	  } 
	}


	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer, __webpack_require__(2)))

/***/ },
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	    var ret, x_pos;
	    ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	    return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}

	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.INV_SUB_MIX = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  })();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}

	Global.prototype.init = function() {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = (function() {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push((i << 1) ^ 0x11b);
	      }
	    }
	    return _results;
	  })();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8);
	    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16);
	    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24);
	    this.SUB_MIX[3][x] = t;
	    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
	    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
	    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};

	var G = new Global();


	AES.blockSize = 4 * 4;

	AES.prototype.blockSize = AES.blockSize;

	AES.keySize = 256 / 8;

	AES.prototype.keySize = AES.keySize;

	AES.ivSize = AES.blockSize;

	AES.prototype.ivSize = AES.ivSize;

	 function bufferToArray(buf) {
	  var len = buf.length/4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	 }
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}

	AES.prototype._doReset = function() {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};

	AES.prototype.encryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};

	AES.prototype.decryptBlock = function(M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};

	AES.prototype.scrub = function() {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};

	AES.prototype._doCryptBlock = function(M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;

	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [
	    fixup_uint32(t0),
	    fixup_uint32(t1),
	    fixup_uint32(t2),
	    fixup_uint32(t3)
	  ];

	};




	  exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var Transform = __webpack_require__(63).Transform;
	var inherits = __webpack_require__(78);

	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while ((chunk = this.read())) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(46);

	/*<replacement>*/
	var util = __webpack_require__(61);
	util.inherits = __webpack_require__(62);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(1).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(61);
	util.inherits = __webpack_require__(62);
	/*</replacement>*/

	var Stream = __webpack_require__(63);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(46);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(46);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  MAX_GETDATA_HASHES: 50000,
	  MAINNET_CHECKPOINTS: __webpack_require__(187),
	  TESTNET_CHECKPOINTS: __webpack_require__(188),
	  GENESIS_BLOCK: {
	    height: 0, // Extra
	    version: 1,
	    time: 1231006505,
	    bits: 486604799,
	    nonce: 2083236893,
	    hash: '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f', // Extra
	    prevHash: '0000000000000000000000000000000000000000000000000000000000000000',
	    merkleRoot: '3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a'
	  }
	};


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var bitcore = __webpack_require__(24);
	var BloomFilter = __webpack_require__(130);
	var BufferReader = bitcore.encoding.BufferReader;
	var BufferWriter = bitcore.encoding.BufferWriter;
	var $ = bitcore.util.preconditions;


	BloomFilter.fromBuffer = function fromBuffer(payload) {
	  var parser = new BufferReader(payload);
	  var data = parser.readVarLengthBuffer();
	  $.checkState(data.length <= BloomFilter.MAX_BLOOM_FILTER_SIZE,
	    'Filter data must be <= MAX_BLOOM_FILTER_SIZE bytes');
	  var nHashFuncs = parser.readUInt32LE();
	  $.checkState(nHashFuncs <= BloomFilter.MAX_HASH_FUNCS,
	    'Filter nHashFuncs must be <= MAX_HASH_FUNCS');
	  var nTweak = parser.readUInt32LE();
	  var nFlags = parser.readUInt8();

	  var vData = [];
	  var dataParser = new BufferReader(data);
	  for(var i = 0; i < data.length; i++) {
	    vData.push(dataParser.readUInt8());
	  }

	  return new BloomFilter({
	    vData: vData,
	    nHashFuncs: nHashFuncs,
	    nTweak: nTweak,
	    nFlags: nFlags
	  });
	}

	BloomFilter.prototype.toBuffer = function toBuffer() {
	  var bw = new BufferWriter();
	  bw.writeVarintNum(this.vData.length);
	  for(var i = 0; i < this.vData.length; i++) {
	    bw.writeUInt8(this.vData[i]);
	  }
	  bw.writeUInt32LE(this.nHashFuncs);
	  bw.writeUInt32LE(this.nTweak);
	  bw.writeUInt8(this.nFlags);
	  return bw.concat();
	};

	module.exports = BloomFilter;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	/**
	 * @namespace P2P.Message
	 */
	/* jshint curly: false */

	var Buffers = __webpack_require__(119);
	var Put = __webpack_require__(204);
	var util = __webpack_require__(17);
	var BloomFilter = __webpack_require__(116);

	var bitcore = __webpack_require__(24);
	var _ = bitcore.deps._;

	var BlockHeaderModel = bitcore.BlockHeader;
	var BlockModel = bitcore.Block;
	var MerkleBlockModel = bitcore.MerkleBlock;
	var BufferReader = bitcore.encoding.BufferReader;
	var BufferWriter = bitcore.encoding.BufferWriter;
	var BufferUtil = bitcore.util.buffer;
	var $ = bitcore.util.preconditions;
	var Hash = bitcore.crypto.Hash;
	var Random = bitcore.crypto.Random;
	var TransactionModel = bitcore.Transaction;

	var CONNECTION_NONCE = Random.getPseudoRandomBuffer(8);
	var PROTOCOL_VERSION = 70000;

	/**
	 * @desc Internal function that discards data until another message is found.
	 * @name P2P.Message#discardUntilNextMessage
	 */
	var discardUntilNextMessage = function(network, dataBuffer) {
	  var magicNumber = network.networkMagic;

	  var i = 0;
	  for (;;) {
	    // check if it's the beginning of a new message
	    var packageNumber = dataBuffer.slice(0, 4);
	    if (BufferUtil.equals(packageNumber, magicNumber)) {
	      dataBuffer.skip(i);
	      return true;
	    }

	    // did we reach the end of the buffer?
	    if (i > (dataBuffer.length - 4)) {
	      dataBuffer.skip(i);
	      return false;
	    }

	    i++; // continue scanning
	  }
	};

	/**
	 * Abstract Message this knows how to parse and serialize itself.
	 * Concrete subclasses should implement {fromBuffer} and {getPayload} methods.
	 * @name P2P.Message
	 */
	function Message() {}

	/**
	 * @value
	 * @name P2P.Message.COMMANDS
	 */
	Message.COMMANDS = {};

	var PAYLOAD_START = 16;
	/**
	 * Static helper for consuming a data buffer until the next message.
	 *
	 * @name P2P.Message#parseMessage
	 * @param{Network} network - the network object
	 * @param{Buffer} dataBuffer - the buffer to read from
	 * @returns{Message|undefined} A message or undefined if there is nothing to read.
	 */
	var parseMessage = function(network, dataBuffer) {
	  $.checkArgument(network);
	  $.checkArgument(dataBuffer);
	  /* jshint maxstatements: 18 */
	  if (dataBuffer.length < 20) {
	    return;
	  }

	  // Search the next magic number
	  if (!discardUntilNextMessage(network, dataBuffer)) return;

	  var payloadLen = (dataBuffer.get(PAYLOAD_START)) +
	    (dataBuffer.get(PAYLOAD_START + 1) << 8) +
	    (dataBuffer.get(PAYLOAD_START + 2) << 16) +
	    (dataBuffer.get(PAYLOAD_START + 3) << 24);

	  var messageLength = 24 + payloadLen;
	  if (dataBuffer.length < messageLength) {
	    return;
	  }

	  var command = dataBuffer.slice(4, 16).toString('ascii').replace(/\0+$/, '');
	  var payload = dataBuffer.slice(24, messageLength);
	  var checksum = dataBuffer.slice(20, 24);

	  var checksumConfirm = Hash.sha256sha256(payload).slice(0, 4);
	  if (!BufferUtil.equals(checksumConfirm, checksum)) {
	    dataBuffer.skip(messageLength);
	    return;
	  }

	  dataBuffer.skip(messageLength);
	  return Message.buildMessage(command, payload);
	};

	module.exports.parseMessage = parseMessage;


	/**
	 * Look up a message type by command name and instantiate the correct Message
	 * @name P2P.Message#buildMessage
	 */
	Message.buildMessage = function(command, payload) {
	  var CommandClass = Message.COMMANDS[command];
	  $.checkState(CommandClass, 'Unsupported message command: ' + command);
	  return new CommandClass().fromBuffer(payload);
	};

	/**
	 * Parse instance state from buffer.
	 *
	 * @param{Buffer} payload - the buffer to read from
	 * @returns{Message} The same message instance
	 */
	Message.prototype.fromBuffer = function(payload) {
	  /* jshint unused: false */
	  return this;
	};

	/**
	 * Serialize the payload into a buffer.
	 *
	 * @returns{Buffer} the serialized payload
	 */
	Message.prototype.getPayload = function() {
	  return BufferUtil.EMPTY_BUFFER;
	};

	/**
	 * Serialize the message into a buffer.
	 *
	 * @returns{Buffer} the serialized message
	 */
	Message.prototype.serialize = function(network) {
	  $.checkArgument(network, 'Must specify network for serialization');
	  var commandBuf = new Buffer(this.command, 'ascii');
	  $.checkState(commandBuf.length <= 12, 'Command name too long');
	  var magic = network.networkMagic;

	  var payload = this.getPayload();
	  var checksum = Hash.sha256sha256(payload).slice(0, 4);

	  // -- HEADER --
	  var message = new Put();
	  message.put(magic);
	  message.put(commandBuf);
	  message.pad(12 - commandBuf.length); // zero-padded
	  message.word32le(payload.length);
	  message.put(checksum);

	  // -- BODY --
	  message.put(payload);

	  return message.buffer();
	};

	/**
	 * check if parser has no more extra data
	 */
	Message.prototype._checkFinished = function(parser) {
	  $.checkState(parser.finished(), 'data still available after parsing ' + this.constructor.name);
	};

	module.exports.Message = Message;

	/**
	 * The version message(`ver`) is used on connection creation, to advertise
	 * the type of node.The remote node will respond with its version, and no
	 * communication is possible until both peers have exchanged their versions.
	 * By default, bitcore advertises itself as named `bitcore:0.8`.
	 *
	 * @name P2P.Message.Version
	 * @param{string} subversion - version of the client
	 * @param{Buffer} nonce - a random 8 bytes buffer
	 */
	function Version(subversion, nonce, relay) {
	  var packageInfo = __webpack_require__(258);
	  this.command = 'version';
	  this.version = PROTOCOL_VERSION;
	  this.subversion = subversion || '/bitcore:' + packageInfo.version + '/';
	  this.nonce = nonce || CONNECTION_NONCE;
	  this.relay = relay === false ? false : true;
	}
	util.inherits(Version, Message);

	Version.prototype.fromBuffer = function(payload) {
	  var parser = new BufferReader(payload);

	  /**
	   * @type {number}
	   * @desc The version of the bitcoin protocol
	   */
	  this.version = parser.readUInt32LE();
	  /**
	   * @type {BN}
	   * @desc A mapbit with service bits: what features are supported by the peer
	   */
	  this.services = parser.readUInt64LEBN();
	  /**
	   * @type {BN}
	   * @desc The time this message was sent
	   */
	  this.timestamp = new Date(parser.readUInt64LEBN().toNumber() * 1000);
	  /**
	   * @type {object}
	   * @desc IPv4/6 address of the interface used to connect to this peer
	   */
	  var me_services = parser.readUInt64LEBN();
	  var me_ip = Addresses.parseIP(parser);
	  var me_port = parser.readUInt16BE();
	  this.addr_me = {
	    services: me_services,
	    ip: me_ip,
	    port: me_port
	  };
	  /**
	   * @type {object}
	   * @desc IPv4/6 address of the peer
	   */
	  var your_services = parser.readUInt64LEBN();
	  var your_ip = Addresses.parseIP(parser);
	  var your_port = parser.readUInt16BE();
	  this.addr_you = {
	    services: your_services,
	    ip: your_ip,
	    port: your_port
	  };
	  /**
	   * @type {Buffer}
	   * @desc A random number
	   */
	  this.nonce = parser.read(8);
	  /**
	   * @desc The node's user agent / subversion
	   * @type {string}
	   */
	  this.subversion = parser.readVarLengthBuffer().toString();
	  /**
	   * @desc The height of the last block accepted in the blockchain by this peer
	   * @type {number}
	   */
	  this.start_height = parser.readUInt32LE();

	  /**
	   * @desc Whether the remote peer should announce relayed transactions or not, see BIP 0037
	   * @type {boolean}
	   */
	  // This field is optional, so should not always be read
	  if(parser.finished()) {
	    this.relay = true;
	  } else {
	    this.relay = !!parser.readUInt8();
	  }

	  this._checkFinished(parser);
	  return this;
	};

	Version.prototype.getPayload = function() {
	  var put = new Put();
	  put.word32le(this.version);
	  put.word64le(1); // services
	  put.word64le(Math.round(new Date().getTime() / 1000)); // timestamp
	  Addresses.writeAddr(this.addr_me, put);
	  Addresses.writeAddr(this.addr_you, put);
	  put.put(this.nonce);
	  put.varint(this.subversion.length);
	  put.put(new Buffer(this.subversion, 'ascii'));
	  put.word32le(this.start_height);
	  put.word8(this.relay);

	  return put.buffer();
	};

	module.exports.Version = Message.COMMANDS.version = Version;

	/**
	 * From the bitcoin protocol spec: "Allows a node to advertise its knowledge of
	 * one or more objects. It can be received unsolicited, or in reply to
	 * getblocks.".
	 *
	 * @name P2P.Message.Inventory
	 * @param{Array} inventory - reported elements
	 */
	function Inventory(inventory) {
	  $.checkArgument(_.isUndefined(inventory) ||
	    _.isArray(inventory), 'Inventory for ' +
	    this.constructor.name + ' must be an array of objects');
	  $.checkArgument(_.isUndefined(inventory) ||
	    inventory.length === 0 ||
	    (inventory[0] && !_.isUndefined(inventory[0].type) && !_.isUndefined(inventory[0].hash)),
	    'Inventory for ' + this.constructor.name + ' must be an array of objects');
	  this.command = 'inv';
	  /**
	   * @name P2P.Message.Inventory.inventory
	   * @desc An array of objects with `{type: int, hash: Buffer}` signature
	   * @type {Array.Buffer}
	   */
	  this.inventory = inventory || [];
	}
	util.inherits(Inventory, Message);

	// https://en.bitcoin.it/wiki/Protocol_specification#Inventory_Vectors 
	Inventory.TYPE = {};
	Inventory.TYPE.ERROR = 0;
	Inventory.TYPE.TX = 1;
	Inventory.TYPE.BLOCK = 2;
	Inventory.TYPE.FILTERED_BLOCK = 3;
	Inventory.TYPE_NAME = [
	  'ERROR',
	  'TX',
	  'BLOCK',
	  'FILTERED_BLOCK'
	];

	Inventory.forItem = function(type, hash) {
	  $.checkArgument(hash);
	  if (_.isString(hash)) {
	    hash = new Buffer(hash, 'hex');
	    hash = BufferUtil.reverse(hash);
	  }
	  return {
	    type: type,
	    typeName: Inventory.TYPE_NAME[type],
	    hash: hash
	  };
	};

	Inventory.prototype.fromBuffer = function(payload) {
	  var parser = new BufferReader(payload);
	  var count = parser.readVarintNum();
	  for (var i = 0; i < count; i++) {
	    var type = parser.readUInt32LE();
	    var hash = parser.read(32);
	    this.inventory.push(Inventory.forItem(type, hash));
	  }

	  this._checkFinished(parser);
	  return this;
	};

	Inventory.prototype.getPayload = function() {
	  var put = new Put();

	  put.varint(this.inventory.length);
	  this.inventory.forEach(function(value) {
	    put.word32le(value.type);
	    put.put(value.hash);
	  });

	  return put.buffer();
	};

	var creatorForItem = function(clazz, type) {
	  return function(hash) {
	    return new clazz([Inventory.forItem(type, hash)]);
	  };
	};

	module.exports.Inventory = Message.COMMANDS.inv = Inventory;

	/**
	 * notfound is a response to a getdata, sent if any requested data
	 * items could not be relayed, for example, because the requested
	 * transaction was not in the memory pool or relay set.
	 *
	 * (from bitcoin's protocol spec)
	 *
	 * @name P2P.Message.NotFound
	 * @param{Array} inventory - not found elements
	 */
	function NotFound(inventory) {
	  Inventory.call(this, inventory);
	  this.command = 'notfound';
	}

	util.inherits(NotFound, Inventory);
	module.exports.NotFound = Message.COMMANDS.notfound = NotFound;

	/**
	 * getdata is used in response to inv, to retrieve the content of a specific
	 * object, and is usually sent after receiving an inv packet, after filtering
	 * known elements. It can be used to retrieve transactions, but only if they
	 * are in the memory pool or relay set - arbitrary access to transactions in the
	 * chain is not allowed to avoid having clients start to depend on nodes having
	 * full transaction indexes (which modern nodes do not).
	 *
	 * (from bitcoin's protocol spec)
	 *
	 * @name P2P.Message.GetData
	 * @param{Array} inventory - requested elements
	 */
	function GetData(inventory) {
	  Inventory.call(this, inventory);
	  this.command = 'getdata';
	  this.inventory = inventory || [];
	}


	util.inherits(GetData, Inventory);
	module.exports.GetData = Message.COMMANDS.getdata = GetData;

	/**
	 * Sent to another peer mainly to check the connection is still alive.
	 *
	 * @name P2P.Message.Ping
	 * @param{Buffer} nonce - a random 8 bytes buffer
	 */
	function Ping(nonce) {
	  this.command = 'ping';
	  /**
	   * @desc A random number that should be returned by the peer in a pong message
	   * @type {number}
	   */
	  this.nonce = nonce || CONNECTION_NONCE;
	}
	util.inherits(Ping, Message);

	Ping.prototype.fromBuffer = function(payload) {
	  var parser = new BufferReader(payload);
	  this.nonce = parser.read(8);

	  this._checkFinished(parser);
	  return this;
	};

	Ping.prototype.getPayload = function() {
	  return this.nonce;
	};

	module.exports.Ping = Message.COMMANDS.ping = Ping;

	/**
	 * Sent in response to a Ping message
	 *
	 * @name P2P.Message.Pong
	 * @param{Buffer} nonce - a random 8 bytes buffer
	 */
	function Pong(nonce) {
	  this.command = 'pong';
	  /**
	   * @desc A random number that must match the one sent in the corresponding `ping` message
	   * @type {number}
	   */
	  this.nonce = nonce || CONNECTION_NONCE;
	}

	util.inherits(Pong, Ping);
	module.exports.Pong = Message.COMMANDS.pong = Pong;

	/**
	 * Message used to notify about known addresses.
	 *
	 * @name P2P.Message.Addressess
	 * @param{Array} addresses - array of know addresses
	 */
	function Addresses(addresses) {
	  this.command = 'addr';
	  /**
	   * @type {Array.Buffer}
	   * @desc An array of ipv4/6 addresses
	   */
	  this.addresses = addresses || [];
	}
	util.inherits(Addresses, Message);

	Addresses.writeAddr = function(addr, put) {
	  if (_.isUndefined(addr)) {
	    put.pad(26);
	    return;
	  }
	  put.word64le(addr.services);
	  Addresses.writeIP(addr.ip, put);
	  put.word16be(addr.port);
	};

	Addresses.writeIP = function(ip, put) {
	  $.checkArgument(ip.v6, 'Need ipv6 to write IP');
	  var words = ip.v6.split(':').map(function(s) {
	    return new Buffer(s, 'hex');
	  });
	  for (var i = 0; i < words.length; i++) {
	    var word = words[i];
	    put.put(word);
	  }
	};

	// http://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses
	Addresses.parseIP = function(parser) {
	  var ipv6 = [];
	  var ipv4 = [];
	  for (var a = 0; a < 8; a++) {
	    var word = parser.read(2);
	    ipv6.push(word.toString('hex'));
	    if (a >= 6) {
	      ipv4.push(word[0]);
	      ipv4.push(word[1]);
	    }
	  }
	  ipv6 = ipv6.join(':');
	  ipv4 = ipv4.join('.');

	  return {
	    v6: ipv6,
	    v4: ipv4
	  };
	};

	Addresses.parseAddr = function(parser) {
	  var services = parser.readUInt64LEBN();
	  var ip = Addresses.parseIP(parser);
	  var port = parser.readUInt16BE();
	  return {
	    services: services,
	    ip: ip,
	    port: port
	  };
	};

	Addresses.prototype.fromBuffer = function(payload) {
	  var parser = new BufferReader(payload);
	  var addrCount = Math.min(parser.readVarintNum(), 1000);

	  this.addresses = [];
	  for (var i = 0; i < addrCount; i++) {
	    // TODO: Time actually depends on the version of the other peer (>=31402)
	    var time = new Date(parser.readUInt32LE() * 1000);

	    var addr = Addresses.parseAddr(parser);
	    addr.time = time;

	    this.addresses.push(addr);
	  }

	  this._checkFinished(parser);
	  return this;
	};

	Addresses.prototype.getPayload = function() {
	  var put = new Put();
	  put.varint(this.addresses.length);

	  for (var i = 0; i < this.addresses.length; i++) {
	    var addr = this.addresses[i];
	    put.word32le(addr.time);
	    Addresses.writeAddr(addr, put);
	    break;
	  }

	  return put.buffer();
	};

	module.exports.Addresses = Message.COMMANDS.addr = Addresses;

	/**
	 * Query another node for known IPV4/6 addresses.
	 *
	 * @name P2P.Message.GetAddresses
	 */
	function GetAddresses() {
	  this.command = 'getaddr';
	}

	util.inherits(GetAddresses, Message);
	module.exports.GetAddresses = Message.COMMANDS.getaddr = GetAddresses;

	/**
	 * Finishes the connection handshake started by the `ver` message.
	 *
	 * @name P2P.Message.VerAck
	 */
	function VerAck() {
	  this.command = 'verack';
	}

	util.inherits(VerAck, Message);
	module.exports.VerAck = Message.COMMANDS.verack = VerAck;

	/**
	 * A reject message should be sent when a message is not supported or
	 * interpreted as invalid.
	 *
	 * @name P2P.Message.Reject
	 */
	function Reject() {
	  this.command = 'reject';
	}
	util.inherits(Reject, Message);

	// TODO: Parse REJECT message

	module.exports.Reject = Message.COMMANDS.reject = Reject;

	/**
	 * Used to send a message signed by a developer of the bitcoin project.
	 *
	 * @name P2P.Message.Alert
	 */
	function Alert(payload, signature) {
	  this.command = 'alert';
	  this.payload = payload || new Buffer(32);
	  this.signature = signature || new Buffer(32);
	}
	util.inherits(Alert, Message);

	Alert.prototype.fromBuffer = function(payload) {
	  var parser = new BufferReader(payload);
	  this.payload = parser.readVarLengthBuffer();
	  this.signature = parser.readVarLengthBuffer();
	  this._checkFinished(parser);
	  return this;
	};

	Alert.prototype.getPayload = function() {
	  var put = new Put();
	  put.varint(this.payload.length);
	  put.put(this.payload);

	  put.varint(this.signature.length);
	  put.put(this.signature);

	  return put.buffer();
	};

	module.exports.Alert = Message.COMMANDS.alert = Alert;

	/**
	 * Sent in response to a `getheaders` message. It contains information about
	 * block headers.
	 *
	 * @name P2P.Message.Headers
	 * @param{Array} blockheaders - array of block headers
	 */
	function Headers(blockheaders) {
	  this.command = 'headers';
	  /**
	   * @type {Array.BlockHeader}
	   * @desc An array of `BlockHeader`
	   */
	  this.headers = blockheaders || [];
	}
	util.inherits(Headers, Message);

	Headers.prototype.fromBuffer = function(payload) {
	  $.checkArgument(payload && payload.length > 0, 'No data found to create Headers message');
	  var parser = new BufferReader(payload);
	  var count = parser.readVarintNum();

	  this.headers = [];
	  for (var i = 0; i < count; i++) {
	    var header = BlockHeaderModel.fromBufferReader(parser);
	    this.headers.push(header);
	    var txn_count = parser.readUInt8();
	    $.checkState(txn_count === 0, 'txn_count should always be 0');

	  }
	  this._checkFinished(parser);
	  return this;
	};

	Headers.prototype.getPayload = function() {
	  var put = new Put();
	  put.varint(this.headers.length);

	  for (var i = 0; i < this.headers.length; i++) {
	    var buffer = this
	      .headers[i]
	      .toBuffer();
	    put.put(buffer);
	    put.varint(0);
	  }

	  return put.buffer();
	};

	module.exports.Headers = Message.COMMANDS.headers = Headers;

	/**
	 * Contains information about a Block
	 *
	 * @name P2P.Message.Block
	 * @param {Block} block
	 */
	function Block(block) {
	  $.checkArgument(_.isUndefined(block) || block instanceof BlockModel);
	  this.command = 'block';

	  /**
	   * @type {Block}
	   * @desc The block received
	   */
	  this.block = block;
	}
	util.inherits(Block, Message);

	Block.prototype.fromBuffer = function(payload) {
	  $.checkArgument(BufferUtil.isBuffer(payload));
	  var block = BlockModel(payload);
	  return new Block(block);
	};

	Block.prototype.getPayload = function() {
	  return this.block ? this.block.toBuffer() : new Buffer(0);
	};

	module.exports.Block = Message.COMMANDS.block = Block;

	/**
	 * Contains information about a MerkleBlock
	 *
	 * @name P2P.Message.MerkleBlock
	 * @param {MerkleBlock} block
	 */
	function MerkleBlock(block) {
	  $.checkArgument(_.isUndefined(block) || block instanceof MerkleBlockModel);
	  this.command = 'merkleblock';

	  /**
	   * @type {Block}
	   * @desc The block received
	   */
	  this.merkleBlock = block;
	}
	util.inherits(MerkleBlock, Message);

	MerkleBlock.prototype.fromBuffer = function(payload) {
	  $.checkArgument(BufferUtil.isBuffer(payload));
	  var block = MerkleBlockModel(payload);
	  return new MerkleBlock(block);
	};

	MerkleBlock.prototype.getPayload = function() {
	  return this.merkleBlock ? this.merkleBlock.toBuffer() : new Buffer(0);
	};

	module.exports.MerkleBlock = Message.COMMANDS.merkleblock = MerkleBlock;


	/**
	 * Contains information about a transaction
	 *
	 * @name P2P.Message.Transaction
	 * @param{Transaction} transaction
	 */
	function Transaction(transaction) {
	  $.checkArgument(_.isUndefined(transaction) || transaction instanceof TransactionModel);
	  this.command = 'tx';
	  /**
	   * @type {Transaction}
	   */
	  this.transaction = transaction;
	}
	util.inherits(Transaction, Message);

	Transaction.prototype.fromBuffer = function(payload) {
	  this.transaction = TransactionModel(payload);
	  return this;
	};

	Transaction.prototype.getPayload = function() {
	  return this.transaction ? this.transaction.toBuffer() : new Buffer(0);
	};

	module.exports.Transaction = Message.COMMANDS.tx = Transaction;

	/**
	 * Query another peer about blocks. It can query for multiple block hashes,
	 * and the response will contain all the chains of blocks starting from those
	 * hashes.
	 *
	 * @name P2P.Message.GetBlocks
	 * @param{Array} starts - array of buffers or strings with the starting block hashes
	 * @param{Buffer} [stop] - hash of the last block
	 */
	function GetBlocks(starts, stop) {
	  $.checkArgument(_.isUndefined(starts) || _.isArray(starts));
	  this.command = 'getblocks';
	  /**
	   * @type {number}
	   */
	  this.version = PROTOCOL_VERSION;

	  starts = starts ? starts.map(function(hash) {
	    return _.isString(hash) ? BufferUtil.reverse(new Buffer(hash, 'hex')) : hash;
	  }) : undefined;
	  /**
	   * @type {Array.Buffer}
	   */
	  this.starts = starts || [];

	  for (var i = 0; i < this.starts.length; i++) {
	    if (this.starts[i].length !== 32) {
	      throw new Error('Invalid hash ' + i + ' length: ' + this.starts[i].length);
	    }
	  }
	  /**
	   * @type {Array.Buffer}
	   * @desc Hashes to limit the amount of blocks to be sent
	   */
	  this.stop = (_.isString(stop) ? BufferUtil.reverse(new Buffer(stop, 'hex')) : stop) || BufferUtil.NULL_HASH;
	}
	util.inherits(GetBlocks, Message);

	GetBlocks.prototype.fromBuffer = function(payload) {
	  var parser = new BufferReader(payload);
	  $.checkArgument(!parser.finished(), 'No data received in payload');
	  this.version = parser.readUInt32LE();

	  var startCount = Math.min(parser.readVarintNum(), 500);
	  this.starts = [];
	  for (var i = 0; i < startCount; i++) {
	    this.starts.push(parser.read(32));
	  }
	  this.stop = parser.read(32);
	  this._checkFinished(parser);

	  return this;
	};

	GetBlocks.prototype.getPayload = function() {
	  var put = new Put();
	  put.word32le(this.version);
	  put.varint(this.starts.length);

	  for (var i = 0; i < this.starts.length; i++) {
	    put.put(this.starts[i]);
	  }

	  if (this.stop.length !== 32) {
	    throw new Error('Invalid hash length: ' + this.stop.length);
	  }
	  put.put(this.stop);

	  return put.buffer();
	};

	module.exports.GetBlocks = Message.COMMANDS.getblocks = GetBlocks;

	/**
	 * Request block headers starting from a hash
	 *
	 * @name P2P.Message.GetHeaders
	 * @param{Array} starts - array of buffers with the starting block hashes
	 * @param{Buffer} [stop] - hash of the last block
	 */
	function GetHeaders(starts, stop) {
	  GetBlocks.call(this, starts, stop);
	  this.command = 'getheaders';
	}

	util.inherits(GetHeaders, GetBlocks);
	module.exports.GetHeaders = Message.COMMANDS.getheaders = GetHeaders;

	/**
	 * Request peer to apply a bloom filter to 'inv' messages sent back
	 *
	 * @name P2P.Message.filterload
	 * @param{BloomFilter} filter - a BloomFilter object
	 */
	function FilterLoad(filter) {
	  this.command = 'filterload';
	  $.checkArgument(_.isUndefined(filter) || filter instanceof BloomFilter,
	    'BloomFilter object  or undefined required for FilterLoad');
	  this.filter = filter;
	  return this;
	}
	util.inherits(FilterLoad, Message);

	FilterLoad.prototype.fromBuffer = function(payload) {
	  this.filter = BloomFilter.fromBuffer(payload);
	  return this;
	};

	FilterLoad.prototype.getPayload = function() {
	  if(this.filter) {
	    return this.filter.toBuffer()
	  } else {
	    return BufferUtil.EMPTY_BUFFER;
	  }
	};

	module.exports.FilterLoad = Message.COMMANDS.filterload = FilterLoad;

	/**
	 * Request peer to add data to a bloom filter already set by 'filterload'
	 *
	 * @name P2P.Message.filteradd
	 * @param{Buffer} data - Array of bytes representing bloom filter data
	 */
	function FilterAdd(data) {
	  this.command = 'filteradd';
	  this.data = data || new Buffer(0,'hex');
	  return this;
	}
	util.inherits(FilterAdd, Message);

	FilterAdd.prototype.fromBuffer = function(payload) {
	  $.checkArgument(payload);
	  var parser = new BufferReader(payload);
	  this.data = parser.readVarLengthBuffer();
	  $.checkState(this.data.length <= BloomFilter.MAX_BLOOM_FILTER_SIZE,
	    'FilterAdd data must be <= 520 bytes');
	  this._checkFinished(parser);
	  return this;
	};

	FilterAdd.prototype.getPayload = function() {
	  var bw = new BufferWriter();
	  bw.writeVarintNum(this.data.length);
	  bw.write(this.data);
	  return bw.concat();
	};

	module.exports.FilterAdd = Message.COMMANDS.filterload = FilterAdd;

	/**
	 * Request peer to apply a bloom filter to 'inv' messages sent back
	 *
	 * @name P2P.Message.filterclear
	 */
	function FilterClear() {
	  this.command = 'filterclear';
	}
	util.inherits(FilterClear, Message);

	module.exports.FilterClear = Message.COMMANDS.filterclear = FilterClear;

	/**
	 * Request for transactions on the mempool
	 *
	 * @name P2P.Message.GetMempool
	 */
	function GetMempool() {
	  this.command = 'mempool';
	}

	util.inherits(GetMempool, Message);
	module.exports.GetMempool = Message.COMMANDS.mempool = GetMempool;

	// TODO: Remove this PATCH (yemel)
	Buffers.prototype.skip = function(i) {
	  if (i === 0) return;

	  if (i === this.length) {
	    this.buffers = [];
	    this.length = 0;
	    return;
	  }

	  var pos = this.pos(i);
	  this.buffers = this.buffers.slice(pos.buf);
	  this.buffers[0] = new Buffer(this.buffers[0].slice(pos.offset));
	  this.length -= i;
	};



	[Inventory, GetData, NotFound].forEach(function(clazz) {
	  clazz.forBlock = creatorForItem(clazz, Inventory.TYPE.BLOCK);
	  clazz.forFilteredBlock = creatorForItem(clazz, Inventory.TYPE.FILTERED_BLOCK);
	  clazz.forTransaction = creatorForItem(clazz, Inventory.TYPE.TX);
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Buffers = __webpack_require__(119);
	var EventEmitter = __webpack_require__(23).EventEmitter;
	var Net = __webpack_require__(132);
	var Socks5Client = __webpack_require__(205);
	var util = __webpack_require__(17);

	var bitcore = __webpack_require__(24);
	var $ = bitcore.util.preconditions;
	var Networks = bitcore.Networks;
	var Messages = __webpack_require__(117);

	var MAX_RECEIVE_BUFFER = 10000000;

	/**
	 * A Peer instance represents a remote bitcoin node and allows to communicate
	 * with it using the standard messages of the bitcoin p2p protocol.
	 *
	 * @example
	 * ```javascript
	 *
	 * var peer = new Peer('127.0.0.1').setProxy('127.0.0.1', 9050);
	 * peer.on('tx', function(tx) {
	 *  console.log('New transaction: ', tx.id);
	 * });
	 * peer.connect();
	 * ```
	 *
	 * @param {String} host - IP address of the remote host
	 * @param {Number} [port] - Port number of the remote host
	 * @param {Network} [network] - The context for this communication
	 * @returns {Peer} A new instance of Peer.
	 * @constructor
	 */
	function Peer(host, port, network, relay) {
	  if (!(this instanceof Peer)) {
	    return new Peer(host, port, network);
	  }

	  // overloading stuff
	  if (port instanceof Object && !network) {
	    network = port;
	    port = undefined;
	  }

	  this.host = host || 'localhost';
	  this.status = Peer.STATUS.DISCONNECTED;
	  this.network = network || Networks.defaultNetwork;
	  this.port = port || this.network.port;
	  this.relay = relay === false ? false : true;

	  this.dataBuffer = new Buffers();

	  this.version = 0;
	  this.bestHeight = 0;
	  this.subversion = null;

	  // set message handlers
	  var self = this;
	  this.on('verack', function() {
	    self.status = Peer.STATUS.READY;
	    self.emit('ready');
	  });

	  this.on('version', function(message) {
	    self.version = message.version;
	    self.subversion = message.subversion;
	    self.bestHeight = message.start_height;
	  });

	  this.on('ping', function(message) {
	    self._sendPong(message.nonce);
	  });

	}
	util.inherits(Peer, EventEmitter);

	Peer.STATUS = {
	  DISCONNECTED: 'disconnected',
	  CONNECTING: 'connecting',
	  CONNECTED: 'connected',
	  READY: 'ready'
	};

	/**
	 * Set a socks5 proxy for the connection. Enables the use of the TOR network.
	 *
	 * @param {String} host - IP address of the proxy
	 * @param {Number} port - Port number of the proxy
	 * @returns {Peer} The same Peer instance.
	 */
	Peer.prototype.setProxy = function(host, port) {
	  $.checkState(this.status === Peer.STATUS.DISCONNECTED);

	  this.proxy = {
	    host: host,
	    port: port
	  };
	  return this;
	};

	/**
	 * Init the connection with the remote peer.
	 *
	 * @returns {Socket} The same peer instance.
	 */
	Peer.prototype.connect = function() {
	  this.socket = this._getSocket();
	  this.status = Peer.STATUS.CONNECTING;

	  var self = this;
	  this.socket.on('connect', function(ev) {
	    self.status = Peer.STATUS.CONNECTED;
	    self.emit('connect');
	    self._sendVersion();
	  });

	  this.socket.on('error', self._onError.bind(this));
	  this.socket.on('end', self.disconnect.bind(this));

	  this.socket.on('data', function(data) {
	    self.dataBuffer.push(data);

	    if (self.dataBuffer.length > MAX_RECEIVE_BUFFER) {
	      // TODO: handle this case better
	      return self.disconnect();
	    }
	    self._readMessage();
	  });

	  this.socket.connect(this.port, this.host);
	  return this;
	};

	Peer.prototype._onError = function(e) {
	  this.emit('error', e);
	};

	/**
	 * Disconnects the remote connection.
	 *
	 * @returns {Socket} The same peer instance.
	 */
	Peer.prototype.disconnect = function() {
	  this.status = Peer.STATUS.DISCONNECTED;
	  this.socket.destroy();
	  this.emit('disconnect');
	  return this;
	};

	/**
	 * Send a Message to the remote peer.
	 *
	 * @param {Message} message - A message instance
	 */
	Peer.prototype.sendMessage = function(message) {
	  this.socket.write(message.serialize(this.network));
	};

	/**
	 * Internal function that sends VERSION message to the remote peer.
	 */
	Peer.prototype._sendVersion = function() {
	  var message = new Messages.Version(null, null, this.relay);
	  this.sendMessage(message);
	};

	/**
	 * Send a PONG message to the remote peer.
	 */
	Peer.prototype._sendPong = function(nonce) {
	  var message = new Messages.Pong(nonce);
	  this.sendMessage(message);
	};

	/**
	 * Internal function that tries to read a message from the data buffer
	 */
	Peer.prototype._readMessage = function() {
	  var message = Messages.parseMessage(this.network, this.dataBuffer);

	  if (message) {
	    this.emit(message.command, message);
	    this._readMessage();
	  }
	};

	/**
	 * Internal function that creates a socket using a proxy if neccesary.
	 *
	 * @returns {Socket} A Socket instance not yet connected.
	 */
	Peer.prototype._getSocket = function() {
	  if (this.proxy) {
	    return new Socks5Client(this.proxy.host, this.proxy.port);
	  }

	  return new Net.Socket();
	};

	module.exports = Peer;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = Buffers;

	function Buffers (bufs) {
	    if (!(this instanceof Buffers)) return new Buffers(bufs);
	    this.buffers = bufs || [];
	    this.length = this.buffers.reduce(function (size, buf) {
	        return size + buf.length
	    }, 0);
	}

	Buffers.prototype.push = function () {
	    for (var i = 0; i < arguments.length; i++) {
	        if (!Buffer.isBuffer(arguments[i])) {
	            throw new TypeError('Tried to push a non-buffer');
	        }
	    }
	    
	    for (var i = 0; i < arguments.length; i++) {
	        var buf = arguments[i];
	        this.buffers.push(buf);
	        this.length += buf.length;
	    }
	    return this.length;
	};

	Buffers.prototype.unshift = function () {
	    for (var i = 0; i < arguments.length; i++) {
	        if (!Buffer.isBuffer(arguments[i])) {
	            throw new TypeError('Tried to unshift a non-buffer');
	        }
	    }
	    
	    for (var i = 0; i < arguments.length; i++) {
	        var buf = arguments[i];
	        this.buffers.unshift(buf);
	        this.length += buf.length;
	    }
	    return this.length;
	};

	Buffers.prototype.copy = function (dst, dStart, start, end) {
	    return this.slice(start, end).copy(dst, dStart, 0, end - start);
	};

	Buffers.prototype.splice = function (i, howMany) {
	    var buffers = this.buffers;
	    var index = i >= 0 ? i : this.length - i;
	    var reps = [].slice.call(arguments, 2);
	    
	    if (howMany === undefined) {
	        howMany = this.length - index;
	    }
	    else if (howMany > this.length - index) {
	        howMany = this.length - index;
	    }
	    
	    for (var i = 0; i < reps.length; i++) {
	        this.length += reps[i].length;
	    }
	    
	    var removed = new Buffers();
	    var bytes = 0;
	    
	    var startBytes = 0;
	    for (
	        var ii = 0;
	        ii < buffers.length && startBytes + buffers[ii].length < index;
	        ii ++
	    ) { startBytes += buffers[ii].length }
	    
	    if (index - startBytes > 0) {
	        var start = index - startBytes;
	        
	        if (start + howMany < buffers[ii].length) {
	            removed.push(buffers[ii].slice(start, start + howMany));
	            
	            var orig = buffers[ii];
	            //var buf = new Buffer(orig.length - howMany);
	            var buf0 = new Buffer(start);
	            for (var i = 0; i < start; i++) {
	                buf0[i] = orig[i];
	            }
	            
	            var buf1 = new Buffer(orig.length - start - howMany);
	            for (var i = start + howMany; i < orig.length; i++) {
	                buf1[ i - howMany - start ] = orig[i]
	            }
	            
	            if (reps.length > 0) {
	                var reps_ = reps.slice();
	                reps_.unshift(buf0);
	                reps_.push(buf1);
	                buffers.splice.apply(buffers, [ ii, 1 ].concat(reps_));
	                ii += reps_.length;
	                reps = [];
	            }
	            else {
	                buffers.splice(ii, 1, buf0, buf1);
	                //buffers[ii] = buf;
	                ii += 2;
	            }
	        }
	        else {
	            removed.push(buffers[ii].slice(start));
	            buffers[ii] = buffers[ii].slice(0, start);
	            ii ++;
	        }
	    }
	    
	    if (reps.length > 0) {
	        buffers.splice.apply(buffers, [ ii, 0 ].concat(reps));
	        ii += reps.length;
	    }
	    
	    while (removed.length < howMany) {
	        var buf = buffers[ii];
	        var len = buf.length;
	        var take = Math.min(len, howMany - removed.length);
	        
	        if (take === len) {
	            removed.push(buf);
	            buffers.splice(ii, 1);
	        }
	        else {
	            removed.push(buf.slice(0, take));
	            buffers[ii] = buffers[ii].slice(take);
	        }
	    }
	    
	    this.length -= removed.length;
	    
	    return removed;
	};
	 
	Buffers.prototype.slice = function (i, j) {
	    var buffers = this.buffers;
	    if (j === undefined) j = this.length;
	    if (i === undefined) i = 0;
	    
	    if (j > this.length) j = this.length;
	    
	    var startBytes = 0;
	    for (
	        var si = 0;
	        si < buffers.length && startBytes + buffers[si].length <= i;
	        si ++
	    ) { startBytes += buffers[si].length }
	    
	    var target = new Buffer(j - i);
	    
	    var ti = 0;
	    for (var ii = si; ti < j - i && ii < buffers.length; ii++) {
	        var len = buffers[ii].length;
	        
	        var start = ti === 0 ? i - startBytes : 0;
	        var end = ti + len >= j - i
	            ? Math.min(start + (j - i) - ti, len)
	            : len
	        ;
	        
	        buffers[ii].copy(target, ti, start, end);
	        ti += end - start;
	    }
	    
	    return target;
	};

	Buffers.prototype.pos = function (i) {
	    if (i < 0 || i >= this.length) throw new Error('oob');
	    var l = i, bi = 0, bu = null;
	    for (;;) {
	        bu = this.buffers[bi];
	        if (l < bu.length) {
	            return {buf: bi, offset: l};
	        } else {
	            l -= bu.length;
	        }
	        bi++;
	    }
	};

	Buffers.prototype.get = function get (i) {
	    var pos = this.pos(i);

	    return this.buffers[pos.buf].get(pos.offset);
	};

	Buffers.prototype.set = function set (i, b) {
	    var pos = this.pos(i);

	    return this.buffers[pos.buf].set(pos.offset, b);
	};

	Buffers.prototype.indexOf = function (needle, offset) {
	    if ("string" === typeof needle) {
	        needle = new Buffer(needle);
	    } else if (needle instanceof Buffer) {
	        // already a buffer
	    } else {
	        throw new Error('Invalid type for a search string');
	    }

	    if (!needle.length) {
	        return 0;
	    }

	    if (!this.length) {
	        return -1;
	    }

	    var i = 0, j = 0, match = 0, mstart, pos = 0;

	    // start search from a particular point in the virtual buffer
	    if (offset) {
	        var p = this.pos(offset);
	        i = p.buf;
	        j = p.offset;
	        pos = offset;
	    }

	    // for each character in virtual buffer
	    for (;;) {
	        while (j >= this.buffers[i].length) {
	            j = 0;
	            i++;

	            if (i >= this.buffers.length) {
	                // search string not found
	                return -1;
	            }
	        }

	        var char = this.buffers[i][j];

	        if (char == needle[match]) {
	            // keep track where match started
	            if (match == 0) {
	                mstart = {
	                    i: i,
	                    j: j,
	                    pos: pos
	                };
	            }
	            match++;
	            if (match == needle.length) {
	                // full match
	                return mstart.pos;
	            }
	        } else if (match != 0) {
	            // a partial match ended, go back to match starting position
	            // this will continue the search at the next character
	            i = mstart.i;
	            j = mstart.j;
	            pos = mstart.pos;
	            match = 0;
	        }

	        j++;
	        pos++;
	    }
	};

	Buffers.prototype.toBuffer = function() {
	    return this.slice();
	}

	Buffers.prototype.toString = function(encoding, start, end) {
	    return this.slice(start, end).toString(encoding);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var BlockHeader = __webpack_require__(121);
	var BN = __webpack_require__(12);
	var BufferUtil = __webpack_require__(6);
	var BufferReader = __webpack_require__(39);
	var BufferWriter = __webpack_require__(29);
	var Hash = __webpack_require__(14);
	var JSUtil = __webpack_require__(10);
	var Transaction = __webpack_require__(82);
	var $ = __webpack_require__(8);

	/**
	 * Instantiate a Block from a Buffer, JSON object, or Object with
	 * the properties of the Block
	 *
	 * @param {*} - A Buffer, JSON string, or Object
	 * @returns {Block}
	 * @constructor
	 */
	function Block(arg) {
	  if (!(this instanceof Block)) {
	    return new Block(arg);
	  }
	  _.extend(this, Block._from(arg));
	  return this;
	}

	// https://github.com/bitcoin/bitcoin/blob/b5fa132329f0377d787a4a21c1686609c2bfaece/src/primitives/block.h#L14
	Block.MAX_BLOCK_SIZE = 1000000;

	/**
	 * @param {*} - A Buffer, JSON string or Object
	 * @returns {Object} - An object representing block data
	 * @throws {TypeError} - If the argument was not recognized
	 * @private
	 */
	Block._from = function _from(arg) {
	  var info = {};
	  if (BufferUtil.isBuffer(arg)) {
	    info = Block._fromBufferReader(BufferReader(arg));
	  } else if (JSUtil.isValidJSON(arg)) {
	    info = Block._fromJSON(arg);
	  } else if (_.isObject(arg)) {
	    info = {
	      /**
	       * @name Block#header
	       * @type {BlockHeader}
	       */
	      header: arg.header,
	      /**
	       * @name Block#transactions
	       * @type {Transaction[]}
	       */
	      transactions: arg.transactions
	    };
	  } else {
	    throw new TypeError('Unrecognized argument for Block');
	  }
	  return info;
	};

	/**
	 * @param {String|Object} - A JSON string or object
	 * @returns {Object} - An object representing block data
	 * @private
	 */
	Block._fromJSON = function _fromJSON(data) {
	  if (JSUtil.isValidJSON(data)) {
	    data = JSON.parse(data);
	  }
	  var transactions = [];
	  data.transactions.forEach(function(data) {
	    transactions.push(Transaction().fromJSON(data));
	  });
	  var info = {
	    header: BlockHeader.fromJSON(data.header),
	    transactions: transactions
	  };
	  return info;
	};

	/**
	 * @param {String|Object} - A JSON string or object
	 * @returns {Block} - An instance of block
	 */
	Block.fromJSON = function fromJSON(json) {
	  var info = Block._fromJSON(json);
	  return new Block(info);
	};

	/**
	 * @param {BufferReader} - Block data
	 * @returns {Object} - An object representing the block data
	 * @private
	 */
	Block._fromBufferReader = function _fromBufferReader(br) {
	  var info = {};
	  $.checkState(!br.finished(), 'No block data received');
	  info.header = BlockHeader.fromBufferReader(br);
	  var transactions = br.readVarintNum();
	  info.transactions = [];
	  for (var i = 0; i < transactions; i++) {
	    info.transactions.push(Transaction().fromBufferReader(br));
	  }
	  return info;
	};

	/**
	 * @param {BufferReader} - A buffer reader of the block
	 * @returns {Block} - An instance of block
	 */
	Block.fromBufferReader = function fromBufferReader(br) {
	  var info = Block._fromBufferReader(br);
	  return new Block(info);
	};

	/**
	 * @param {Buffer} - A buffer of the block
	 * @returns {Block} - An instance of block
	 */
	Block.fromBuffer = function fromBuffer(buf) {
	  return Block.fromBufferReader(BufferReader(buf));
	};

	/**
	 * @param {String} - str - A hex encoded string of the block
	 * @returns {Block} - A hex encoded string of the block
	 */
	Block.fromString = function fromString(str) {
	  var buf = new Buffer(str, 'hex');
	  return Block.fromBuffer(buf);
	};

	/**
	 * @param {Binary} - Raw block binary data or buffer
	 * @returns {Block} - An instance of block
	 */
	Block.fromRawBlock = function fromRawBlock(data) {
	  if (!BufferUtil.isBuffer(data)) {
	    data = new Buffer(data, 'binary');
	  }
	  var br = BufferReader(data);
	  br.pos = Block.Values.START_OF_BLOCK;
	  var info = Block._fromBufferReader(br);
	  return new Block(info);
	};

	/**
	 * @returns {Object} - A plain object with the block properties
	 */
	Block.prototype.toObject = function toObject() {
	  var transactions = [];
	  this.transactions.forEach(function(tx) {
	    transactions.push(tx.toObject());
	  });
	  return {
	    header: this.header.toObject(),
	    transactions: transactions
	  };
	};

	/**
	 * @returns {String} - A JSON string
	 */
	Block.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * @returns {Buffer} - A buffer of the block
	 */
	Block.prototype.toBuffer = function toBuffer() {
	  return this.toBufferWriter().concat();
	};

	/**
	 * @returns {String} - A hex encoded string of the block
	 */
	Block.prototype.toString = function toString() {
	  return this.toBuffer().toString('hex');
	};

	/**
	 * @param {BufferWriter} - An existing instance of BufferWriter
	 * @returns {BufferWriter} - An instance of BufferWriter representation of the Block
	 */
	Block.prototype.toBufferWriter = function toBufferWriter(bw) {
	  if (!bw) {
	    bw = new BufferWriter();
	  }
	  bw.write(this.header.toBuffer());
	  bw.writeVarintNum(this.transactions.length);
	  for (var i = 0; i < this.transactions.length; i++) {
	    this.transactions[i].toBufferWriter(bw);
	  }
	  return bw;
	};

	/**
	 * Will iterate through each transaction and return an array of hashes
	 * @returns {Array} - An array with transaction hashes
	 */
	Block.prototype.getTransactionHashes = function getTransactionHashes() {
	  var hashes = [];
	  if (this.transactions.length === 0) {
	    return [Block.Values.NULL_HASH];
	  }
	  for (var t = 0; t < this.transactions.length; t++) {
	    hashes.push(this.transactions[t]._getHash());
	  }
	  return hashes;
	};

	/**
	 * Will build a merkle tree of all the transactions, ultimately arriving at
	 * a single point, the merkle root.
	 * @link https://en.bitcoin.it/wiki/Protocol_specification#Merkle_Trees
	 * @returns {Array} - An array with each level of the tree after the other.
	 */
	Block.prototype.getMerkleTree = function getMerkleTree() {

	  var tree = this.getTransactionHashes();

	  var j = 0;
	  for (var size = this.transactions.length; size > 1; size = Math.floor((size + 1) / 2)) {
	    for (var i = 0; i < size; i += 2) {
	      var i2 = Math.min(i + 1, size - 1);
	      var buf = Buffer.concat([tree[j + i], tree[j + i2]]);
	      tree.push(Hash.sha256sha256(buf));
	    }
	    j += size;
	  }

	  return tree;
	};

	/**
	 * Calculates the merkleRoot from the transactions.
	 * @returns {Buffer} - A buffer of the merkle root hash
	 */
	Block.prototype.getMerkleRoot = function getMerkleRoot() {
	  var tree = this.getMerkleTree();
	  return tree[tree.length - 1];
	};

	/**
	 * Verifies that the transactions in the block match the header merkle root
	 * @returns {Boolean} - If the merkle roots match
	 */
	Block.prototype.validMerkleRoot = function validMerkleRoot() {

	  var h = new BN(this.header.merkleRoot.toString('hex'), 'hex');
	  var c = new BN(this.getMerkleRoot().toString('hex'), 'hex');

	  if (h.cmp(c) !== 0) {
	    return false;
	  }

	  return true;
	};

	/**
	 * @returns {Buffer} - The little endian hash buffer of the header
	 */
	Block.prototype._getHash = function() {
	  return this.header._getHash();
	};

	var idProperty = {
	  configurable: false,
	  writeable: false,
	  /**
	   * @returns {string} - The big endian hash buffer of the header
	   */
	  get: function() {
	    if (!this._id) {
	      this._id = this.header.id;
	    }
	    return this._id;
	  },
	  set: _.noop
	};
	Object.defineProperty(Block.prototype, 'id', idProperty);
	Object.defineProperty(Block.prototype, 'hash', idProperty);

	/**
	 * @returns {String} - A string formated for the console
	 */
	Block.prototype.inspect = function inspect() {
	  return '<Block ' + this.id + '>';
	};

	Block.Values = {
	  START_OF_BLOCK: 8, // Start of block in raw block data
	  NULL_HASH: new Buffer('0000000000000000000000000000000000000000000000000000000000000000', 'hex')
	};

	module.exports = Block;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var BN = __webpack_require__(12);
	var BufferUtil = __webpack_require__(6);
	var BufferReader = __webpack_require__(39);
	var BufferWriter = __webpack_require__(29);
	var Hash = __webpack_require__(14);
	var JSUtil = __webpack_require__(10);

	/**
	 * Instantiate a BlockHeader from a Buffer, JSON object, or Object with
	 * the properties of the BlockHeader
	 *
	 * @param {*} - A Buffer, JSON string, or Object
	 * @returns {BlockHeader} - An instance of block header
	 * @constructor
	 */
	var BlockHeader = function BlockHeader(arg) {
	  if (!(this instanceof BlockHeader)) {
	    return new BlockHeader(arg);
	  }
	  _.extend(this, BlockHeader._from(arg));
	  return this;
	};

	/**
	 * @param {*} - A Buffer, JSON string or Object
	 * @returns {Object} - An object representing block header data
	 * @throws {TypeError} - If the argument was not recognized
	 * @private
	 */
	BlockHeader._from = function _from(arg) {
	  var info = {};
	  if (BufferUtil.isBuffer(arg)) {
	    info = BlockHeader._fromBufferReader(BufferReader(arg));
	  } else if (JSUtil.isValidJSON(arg)) {
	    info = BlockHeader._fromJSON(arg);
	  } else if (_.isObject(arg)) {
	    info = {
	      version: arg.version,
	      prevHash: arg.prevHash,
	      merkleRoot: arg.merkleRoot,
	      time: arg.time,
	      bits: arg.bits,
	      nonce: arg.nonce
	    };
	  } else {
	    throw new TypeError('Unrecognized argument for BlockHeader');
	  }
	  return info;
	};

	/**
	 * @param {String|Object} - A JSON string or object
	 * @returns {Object} - An object representing block header data
	 * @private
	 */
	BlockHeader._fromJSON = function _fromJSON(data) {
	  if (JSUtil.isValidJSON(data)) {
	    data = JSON.parse(data);
	  }
	  var info = {
	    version: data.version,
	    prevHash: new Buffer(data.prevHash, 'hex'),
	    merkleRoot: new Buffer(data.merkleRoot, 'hex'),
	    time: data.time,
	    timestamp: data.time,
	    bits: data.bits,
	    nonce: data.nonce
	  };
	  return info;
	};

	/**
	 * @param {String|Object} - A JSON string or object
	 * @returns {BlockHeader} - An instance of block header
	 */
	BlockHeader.fromJSON = function fromJSON(json) {
	  var info = BlockHeader._fromJSON(json);
	  return new BlockHeader(info);
	};

	/**
	 * @param {Binary} - Raw block binary data or buffer
	 * @returns {BlockHeader} - An instance of block header
	 */
	BlockHeader.fromRawBlock = function fromRawBlock(data) {
	  if (!BufferUtil.isBuffer(data)) {
	    data = new Buffer(data, 'binary');
	  }
	  var br = BufferReader(data);
	  br.pos = BlockHeader.Constants.START_OF_HEADER;
	  var info = BlockHeader._fromBufferReader(br);
	  return new BlockHeader(info);
	};

	/**
	 * @param {Buffer} - A buffer of the block header
	 * @returns {BlockHeader} - An instance of block header
	 */
	BlockHeader.fromBuffer = function fromBuffer(buf) {
	  var info = BlockHeader._fromBufferReader(BufferReader(buf));
	  return new BlockHeader(info);
	};

	/**
	 * @param {String} - A hex encoded buffer of the block header
	 * @returns {BlockHeader} - An instance of block header
	 */
	BlockHeader.fromString = function fromString(str) {
	  var buf = new Buffer(str, 'hex');
	  return BlockHeader.fromBuffer(buf);
	};

	/**
	 * @param {BufferReader} - A BufferReader of the block header
	 * @returns {Object} - An object representing block header data
	 * @private
	 */
	BlockHeader._fromBufferReader = function _fromBufferReader(br) {
	  var info = {};
	  info.version = br.readUInt32LE();
	  info.prevHash = br.read(32);
	  info.merkleRoot = br.read(32);
	  info.time = br.readUInt32LE();
	  info.bits = br.readUInt32LE();
	  info.nonce = br.readUInt32LE();
	  return info;
	};

	/**
	 * @param {BufferReader} - A BufferReader of the block header
	 * @returns {BlockHeader} - An instance of block header
	 */
	BlockHeader.fromBufferReader = function fromBufferReader(br) {
	  var info = BlockHeader._fromBufferReader(br);
	  return new BlockHeader(info);
	};

	/**
	 * @returns {Object} - A plain object of the BlockHeader
	 */
	BlockHeader.prototype.toObject = function toObject() {
	  return {
	    version: this.version,
	    prevHash: this.prevHash.toString('hex'),
	    merkleRoot: this.merkleRoot.toString('hex'),
	    time: this.time,
	    bits: this.bits,
	    nonce: this.nonce
	  };
	};

	/**
	 * @returns {String} - A JSON string
	 */
	BlockHeader.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * @returns {Buffer} - A Buffer of the BlockHeader
	 */
	BlockHeader.prototype.toBuffer = function toBuffer() {
	  return this.toBufferWriter().concat();
	};

	/**
	 * @returns {String} - A hex encoded string of the BlockHeader
	 */
	BlockHeader.prototype.toString = function toString() {
	  return this.toBuffer().toString('hex');
	};

	/**
	 * @param {BufferWriter} - An existing instance BufferWriter
	 * @returns {BufferWriter} - An instance of BufferWriter representation of the BlockHeader
	 */
	BlockHeader.prototype.toBufferWriter = function toBufferWriter(bw) {
	  if (!bw) {
	    bw = new BufferWriter();
	  }
	  bw.writeUInt32LE(this.version);
	  bw.write(this.prevHash);
	  bw.write(this.merkleRoot);
	  bw.writeUInt32LE(this.time);
	  bw.writeUInt32LE(this.bits);
	  bw.writeUInt32LE(this.nonce);
	  return bw;
	};

	/**
	 * @link https://en.bitcoin.it/wiki/Difficulty
	 * @returns {BN} - An instance of BN with the decoded difficulty bits
	 */
	BlockHeader.prototype.getTargetDifficulty = function getTargetDifficulty(info) {
	  var target = new BN(this.bits & 0xffffff);
	  var mov = 8 * ((this.bits >>> 24) - 3);
	  while (mov-- > 0) {
	    target = target.mul(new BN(2));
	  }
	  return target;
	};

	/**
	 * @returns {Buffer} - The little endian hash buffer of the header
	 */
	BlockHeader.prototype._getHash = function hash() {
	  var buf = this.toBuffer();
	  return Hash.sha256sha256(buf);
	};

	var idProperty = {
	  configurable: false,
	  writeable: false,
	  enumerable: true,
	  /**
	  * @returns {string} - The big endian hash buffer of the header
	  */
	  get: function() {
	    if (!this._id) {
	      this._id = BufferReader(this._getHash()).readReverse().toString('hex');
	    }
	    return this._id;
	  },
	  set: _.noop
	};
	Object.defineProperty(BlockHeader.prototype, 'id', idProperty);
	Object.defineProperty(BlockHeader.prototype, 'hash', idProperty);

	/**
	 * @returns {Boolean} - If timestamp is not too far in the future
	 */
	BlockHeader.prototype.validTimestamp = function validTimestamp() {
	  var currentTime = Math.round(new Date().getTime() / 1000);
	  if (this.time > currentTime + BlockHeader.Constants.MAX_TIME_OFFSET) {
	    return false;
	  }
	  return true;
	};

	/**
	 * @returns {Boolean} - If the proof-of-work hash satisfies the target difficulty
	 */
	BlockHeader.prototype.validProofOfWork = function validProofOfWork() {
	  var pow = new BN(this.id, 'hex');
	  var target = this.getTargetDifficulty();

	  if (pow.cmp(target) > 0) {
	    return false;
	  }
	  return true;
	};

	/**
	 * @returns {String} - A string formated for the console
	 */
	BlockHeader.prototype.inspect = function inspect() {
	  return '<BlockHeader ' + this.id + '>';
	};

	BlockHeader.Constants = {
	  START_OF_HEADER: 8, // Start buffer position in raw block data
	  MAX_TIME_OFFSET: 2 * 60 * 60, // The max a timestamp can be in the future
	  LARGEST_HASH: new BN('10000000000000000000000000000000000000000000000000000000000000000', 'hex')
	};

	module.exports = BlockHeader;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var BN = __webpack_require__(12);
	var Point = __webpack_require__(47);
	var Signature = __webpack_require__(28);
	var PublicKey = __webpack_require__(25);
	var Random = __webpack_require__(64);
	var Hash = __webpack_require__(14);
	var BufferUtil = __webpack_require__(6);
	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);

	var ECDSA = function ECDSA(obj) {
	  if (!(this instanceof ECDSA)) {
	    return new ECDSA(obj);
	  }
	  if (obj) {
	    this.set(obj);
	  }
	};

	/* jshint maxcomplexity: 9 */
	ECDSA.prototype.set = function(obj) {
	  this.hashbuf = obj.hashbuf || this.hashbuf;
	  this.endian = obj.endian || this.endian; //the endianness of hashbuf
	  this.privkey = obj.privkey || this.privkey;
	  this.pubkey = obj.pubkey || (this.privkey ? this.privkey.publicKey : this.pubkey);
	  this.sig = obj.sig || this.sig;
	  this.k = obj.k || this.k;
	  this.verified = obj.verified || this.verified;
	  return this;
	};

	ECDSA.prototype.privkey2pubkey = function() {
	  this.pubkey = this.privkey.toPublicKey();
	};

	ECDSA.prototype.calci = function() {
	  for (var i = 0; i < 4; i++) {
	    this.sig.i = i;
	    var Qprime;
	    try {
	      Qprime = this.toPublicKey();
	    } catch (e) {
	      console.error(e);
	      continue;
	    }

	    if (Qprime.point.eq(this.pubkey.point)) {
	      this.sig.compressed = this.pubkey.compressed;
	      return this;
	    }
	  }

	  this.sig.i = undefined;
	  throw new Error('Unable to find valid recovery factor');
	};

	ECDSA.fromString = function(str) {
	  var obj = JSON.parse(str);
	  return new ECDSA(obj);
	};

	ECDSA.prototype.randomK = function() {
	  var N = Point.getN();
	  var k;
	  do {
	    k = BN.fromBuffer(Random.getRandomBuffer(32));
	  } while (!(k.lt(N) && k.gt(BN.Zero)));
	  this.k = k;
	  return this;
	};


	// https://tools.ietf.org/html/rfc6979#section-3.2
	ECDSA.prototype.deterministicK = function(badrs) {
	  /* jshint maxstatements: 25 */
	  // if r or s were invalid when this function was used in signing,
	  // we do not want to actually compute r, s here for efficiency, so,
	  // we can increment badrs. explained at end of RFC 6979 section 3.2
	  if (_.isUndefined(badrs)) {
	    badrs = 0;
	  }
	  var v = new Buffer(32);
	  v.fill(0x01);
	  var k = new Buffer(32);
	  k.fill(0x00);
	  var x = this.privkey.bn.toBuffer({
	    size: 32
	  });
	  k = Hash.sha256hmac(Buffer.concat([v, new Buffer([0x00]), x, this.hashbuf]), k);
	  v = Hash.sha256hmac(v, k);
	  k = Hash.sha256hmac(Buffer.concat([v, new Buffer([0x01]), x, this.hashbuf]), k);
	  v = Hash.sha256hmac(v, k);
	  v = Hash.sha256hmac(v, k);
	  var T = BN.fromBuffer(v);
	  var N = Point.getN();

	  // also explained in 3.2, we must ensure T is in the proper range (0, N)
	  for (var i = 0; i < badrs || !(T.lt(N) && T.gt(BN.Zero)); i++) {
	    k = Hash.sha256hmac(Buffer.concat([v, new Buffer([0x00])]), k);
	    v = Hash.sha256hmac(v, k);
	    v = Hash.sha256hmac(v, k);
	    T = BN.fromBuffer(v);
	  }

	  this.k = T;
	  return this;
	};

	// Information about public key recovery:
	// https://bitcointalk.org/index.php?topic=6430.0
	// http://stackoverflow.com/questions/19665491/how-do-i-get-an-ecdsa-public-key-from-just-a-bitcoin-signature-sec1-4-1-6-k
	ECDSA.prototype.toPublicKey = function() {
	  /* jshint maxstatements: 25 */
	  var i = this.sig.i;
	  $.checkArgument(i === 0 || i === 1 || i === 2 || i === 3, new Error('i must be equal to 0, 1, 2, or 3'));

	  var e = BN.fromBuffer(this.hashbuf);
	  var r = this.sig.r;
	  var s = this.sig.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = i & 1;

	  // The more significant bit specifies whether we should use the
	  // first or second candidate key.
	  var isSecondKey = i >> 1;

	  var n = Point.getN();
	  var G = Point.getG();

	  // 1.1 Let x = r + jn
	  var x = isSecondKey ? r.add(n) : r;
	  var R = Point.fromX(isYOdd, x);

	  // 1.4 Check that nR is at infinity
	  var nR = R.mul(n);

	  if (!nR.isInfinity()) {
	    throw new Error('nR is not a valid curve point');
	  }

	  // Compute -e from e
	  var eNeg = e.neg().mod(n);

	  // 1.6.1 Compute Q = r^-1 (sR - eG)
	  // Q = r^-1 (sR + -eG)
	  var rInv = r.invm(n);

	  //var Q = R.multiplyTwo(s, G, eNeg).mul(rInv);
	  var Q = R.mul(s).add(G.mul(eNeg)).mul(rInv);

	  var pubkey = PublicKey.fromPoint(Q, this.sig.compressed);

	  return pubkey;
	};

	ECDSA.prototype.sigError = function() {
	  /* jshint maxstatements: 25 */
	  if (!BufferUtil.isBuffer(this.hashbuf) || this.hashbuf.length !== 32) {
	    return 'hashbuf must be a 32 byte buffer';
	  }

	  var r = this.sig.r;
	  var s = this.sig.s;
	  if (!(r.gt(BN.Zero) && r.lt(Point.getN())) || !(s.gt(BN.Zero) && s.lt(Point.getN()))) {
	    return 'r and s not in range';
	  }

	  var e = BN.fromBuffer(this.hashbuf, this.endian ? {
	    endian: this.endian
	  } : undefined);
	  var n = Point.getN();
	  var sinv = s.invm(n);
	  var u1 = sinv.mul(e).mod(n);
	  var u2 = sinv.mul(r).mod(n);

	  var p = Point.getG().mulAdd(u1, this.pubkey.point, u2);
	  if (p.isInfinity()) {
	    return 'p is infinity';
	  }

	  if (p.getX().mod(n).cmp(r) !== 0) {
	    return 'Invalid signature';
	  } else {
	    return false;
	  }
	};

	ECDSA.toLowS = function(s) {
	  //enforce low s
	  //see BIP 62, "low S values in signatures"
	  if (s.gt(BN.fromBuffer(new Buffer('7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0', 'hex')))) {
	    s = Point.getN().sub(s);
	  }
	  return s;
	};

	ECDSA.prototype._findSignature = function(d, e) {
	  var N = Point.getN();
	  var G = Point.getG();
	  // try different values of k until r, s are valid
	  var badrs = 0;
	  var k, Q, r, s;
	  do {
	    if (!this.k || badrs > 0) {
	      this.deterministicK(badrs);
	    }
	    badrs++;
	    k = this.k;
	    Q = G.mul(k);
	    r = Q.x.mod(N);
	    s = k.invm(N).mul(e.add(d.mul(r))).mod(N);
	  } while (r.cmp(BN.Zero) <= 0 || s.cmp(BN.Zero) <= 0);

	  s = ECDSA.toLowS(s);
	  return {
	    s: s,
	    r: r
	  };

	};

	ECDSA.prototype.sign = function() {
	  var hashbuf = this.hashbuf;
	  var privkey = this.privkey;
	  var d = privkey.bn;

	  $.checkState(hashbuf && privkey && d, new Error('invalid parameters'));
	  $.checkState(BufferUtil.isBuffer(hashbuf) && hashbuf.length === 32, new Error('hashbuf must be a 32 byte buffer'));

	  var e = BN.fromBuffer(hashbuf, this.endian ? {
	    endian: this.endian
	  } : undefined);

	  var obj = this._findSignature(d, e);
	  obj.compressed = this.pubkey.compressed;

	  this.sig = new Signature(obj);
	  return this;
	};

	ECDSA.prototype.signRandomK = function() {
	  this.randomK();
	  return this.sign();
	};

	ECDSA.prototype.toString = function() {
	  var obj = {};
	  if (this.hashbuf) {
	    obj.hashbuf = this.hashbuf.toString('hex');
	  }
	  if (this.privkey) {
	    obj.privkey = this.privkey.toString();
	  }
	  if (this.pubkey) {
	    obj.pubkey = this.pubkey.toString();
	  }
	  if (this.sig) {
	    obj.sig = this.sig.toString();
	  }
	  if (this.k) {
	    obj.k = this.k.toString();
	  }
	  return JSON.stringify(obj);
	};

	ECDSA.prototype.verify = function() {
	  if (!this.sigError()) {
	    this.verified = true;
	  } else {
	    this.verified = false;
	  }
	  return this;
	};

	ECDSA.sign = function(hashbuf, privkey, endian) {
	  return ECDSA().set({
	    hashbuf: hashbuf,
	    endian: endian,
	    privkey: privkey
	  }).sign().sig;
	};

	ECDSA.verify = function(hashbuf, sig, pubkey, endian) {
	  return ECDSA().set({
	    hashbuf: hashbuf,
	    endian: endian,
	    sig: sig,
	    pubkey: pubkey
	  }).verify().verified;
	};

	module.exports = ECDSA;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';


	var assert = __webpack_require__(15);
	var buffer = __webpack_require__(1);
	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);

	var BN = __webpack_require__(12);
	var Base58 = __webpack_require__(65);
	var Base58Check = __webpack_require__(55);
	var Hash = __webpack_require__(14);
	var Network = __webpack_require__(40);
	var HDKeyCache = __webpack_require__(80);
	var Point = __webpack_require__(47);
	var PrivateKey = __webpack_require__(66);
	var Random = __webpack_require__(64);

	var errors = __webpack_require__(30);
	var hdErrors = errors.HDPrivateKey;
	var BufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);

	var MINIMUM_ENTROPY_BITS = 128;
	var BITS_TO_BYTES = 1 / 8;
	var MAXIMUM_ENTROPY_BITS = 512;


	/**
	 * Represents an instance of an hierarchically derived private key.
	 *
	 * More info on https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
	 *
	 * @constructor
	 * @param {string|Buffer|Object} arg
	 */
	function HDPrivateKey(arg) {
	  /* jshint maxcomplexity: 10 */
	  if (arg instanceof HDPrivateKey) {
	    return arg;
	  }
	  if (!(this instanceof HDPrivateKey)) {
	    return new HDPrivateKey(arg);
	  }
	  if (!arg) {
	    return this._generateRandomly();
	  }

	  if (Network.get(arg)) {
	    return this._generateRandomly(arg);
	  } else if (_.isString(arg) || BufferUtil.isBuffer(arg)) {
	    if (HDPrivateKey.isValidSerialized(arg)) {
	      this._buildFromSerialized(arg);
	    } else if (JSUtil.isValidJSON(arg)) {
	      this._buildFromJSON(arg);
	    } else if (BufferUtil.isBuffer(arg) && HDPrivateKey.isValidSerialized(arg.toString())) {
	      this._buildFromSerialized(arg.toString());
	    } else {
	      throw HDPrivateKey.getSerializedError(arg);
	    }
	  } else if (_.isObject(arg)) {
	    this._buildFromObject(arg);
	  } else {
	    throw new hdErrors.UnrecognizedArgument(arg);
	  }
	}

	/**
	 * Verifies that a given path is valid.
	 *
	 * @param {string|number} arg
	 * @param {boolean?} hardened
	 * @return {boolean}
	 */
	HDPrivateKey.isValidPath = function(arg, hardened) {
	  if (_.isString(arg)) {
	    var indexes = HDPrivateKey._getDerivationIndexes(arg);
	    return indexes !== null && _.all(indexes, HDPrivateKey.isValidPath);
	  }

	  if (_.isNumber(arg)) {
	    if (arg < HDPrivateKey.Hardened && hardened === true) {
	      arg += HDPrivateKey.Hardened;
	    }
	    return arg >= 0 && arg < HDPrivateKey.MaxIndex;
	  }

	  return false;
	};

	/**
	 * Internal function that splits a string path into a derivation index array.
	 * It will return null if the string path is malformed.
	 * It does not validate if indexes are in bounds.
	 *
	 * @param {string} path
	 * @return {Array}
	 */
	HDPrivateKey._getDerivationIndexes = function(path) {
	  var steps = path.split('/');

	  // Special cases:
	  if (_.contains(HDPrivateKey.RootElementAlias, path)) {
	    return [];
	  }

	  if (!_.contains(HDPrivateKey.RootElementAlias, steps[0])) {
	    return null;
	  }

	  var indexes = steps.slice(1).map(function(step) {
	    var isHardened = step.slice(-1) === '\'';
	    if (isHardened) {
	      step = step.slice(0, -1);
	    }
	    if (!step || step[0] === '-') {
	      return NaN;
	    }
	    var index = +step; // cast to number
	    if (isHardened) {
	      index += HDPrivateKey.Hardened;
	    }

	    return index;
	  });

	  return _.any(indexes, isNaN) ? null : indexes;
	};

	/**
	 * Get a derivated child based on a string or number.
	 *
	 * If the first argument is a string, it's parsed as the full path of
	 * derivation. Valid values for this argument include "m" (which returns the
	 * same private key), "m/0/1/40/2'/1000", where the ' quote means a hardened
	 * derivation.
	 *
	 * If the first argument is a number, the child with that index will be
	 * derived. If the second argument is truthy, the hardened version will be
	 * derived. See the example usage for clarification.
	 *
	 * @example
	 * ```javascript
	 * var parent = new HDPrivateKey('xprv...');
	 * var child_0_1_2h = parent.derive(0).derive(1).derive(2, true);
	 * var copy_of_child_0_1_2h = parent.derive("m/0/1/2'");
	 * assert(child_0_1_2h.xprivkey === copy_of_child_0_1_2h);
	 * ```
	 *
	 * @param {string|number} arg
	 * @param {boolean?} hardened
	 */
	HDPrivateKey.prototype.derive = function(arg, hardened) {
	  if (_.isNumber(arg)) {
	    return this._deriveWithNumber(arg, hardened);
	  } else if (_.isString(arg)) {
	    return this._deriveFromString(arg);
	  } else {
	    throw new hdErrors.InvalidDerivationArgument(arg);
	  }
	};

	HDPrivateKey.prototype._deriveWithNumber = function(index, hardened) {
	  /* jshint maxstatements: 20 */
	  /* jshint maxcomplexity: 10 */
	  if (!HDPrivateKey.isValidPath(index, hardened)) {
	    throw new hdErrors.InvalidPath(index);
	  }

	  hardened = index >= HDPrivateKey.Hardened ? true : hardened;
	  if (index < HDPrivateKey.Hardened && hardened === true) {
	    index += HDPrivateKey.Hardened;
	  }

	  var cached = HDKeyCache.get(this.xprivkey, index, hardened);
	  if (cached) {
	    return cached;
	  }

	  var indexBuffer = BufferUtil.integerAsBuffer(index);
	  var data;
	  if (hardened) {
	    data = BufferUtil.concat([new buffer.Buffer([0]), this.privateKey.toBuffer(), indexBuffer]);
	  } else {
	    data = BufferUtil.concat([this.publicKey.toBuffer(), indexBuffer]);
	  }
	  var hash = Hash.sha512hmac(data, this._buffers.chainCode);
	  var leftPart = BN.fromBuffer(hash.slice(0, 32), {
	    size: 32
	  });
	  var chainCode = hash.slice(32, 64);

	  var privateKey = leftPart.add(this.privateKey.toBigNumber()).mod(Point.getN()).toBuffer({
	    size: 32
	  });

	  var derived = new HDPrivateKey({
	    network: this.network,
	    depth: this.depth + 1,
	    parentFingerPrint: this.fingerPrint,
	    childIndex: index,
	    chainCode: chainCode,
	    privateKey: privateKey
	  });
	  HDKeyCache.set(this.xprivkey, index, hardened, derived);
	  return derived;
	};

	HDPrivateKey.prototype._deriveFromString = function(path) {
	  if (!HDPrivateKey.isValidPath(path)) {
	    throw new hdErrors.InvalidPath(path);
	  }

	  var indexes = HDPrivateKey._getDerivationIndexes(path);
	  var derived = indexes.reduce(function(prev, index) {
	    return prev._deriveWithNumber(index);
	  }, this);

	  return derived;
	};

	/**
	 * Verifies that a given serialized private key in base58 with checksum format
	 * is valid.
	 *
	 * @param {string|Buffer} data - the serialized private key
	 * @param {string|Network=} network - optional, if present, checks that the
	 *     network provided matches the network serialized.
	 * @return {boolean}
	 */
	HDPrivateKey.isValidSerialized = function(data, network) {
	  return !HDPrivateKey.getSerializedError(data, network);
	};

	/**
	 * Checks what's the error that causes the validation of a serialized private key
	 * in base58 with checksum to fail.
	 *
	 * @param {string|Buffer} data - the serialized private key
	 * @param {string|Network=} network - optional, if present, checks that the
	 *     network provided matches the network serialized.
	 * @return {errors.InvalidArgument|null}
	 */
	HDPrivateKey.getSerializedError = function(data, network) {
	  /* jshint maxcomplexity: 10 */
	  if (!(_.isString(data) || BufferUtil.isBuffer(data))) {
	    return new hdErrors.UnrecognizedArgument('Expected string or buffer');
	  }
	  if (!Base58.validCharacters(data)) {
	    return new errors.InvalidB58Char('(unknown)', data);
	  }
	  try {
	    data = Base58Check.decode(data);
	  } catch (e) {
	    return new errors.InvalidB58Checksum(data);
	  }
	  if (data.length !== HDPrivateKey.DataLength) {
	    return new hdErrors.InvalidLength(data);
	  }
	  if (!_.isUndefined(network)) {
	    var error = HDPrivateKey._validateNetwork(data, network);
	    if (error) {
	      return error;
	    }
	  }
	  return null;
	};

	HDPrivateKey._validateNetwork = function(data, networkArg) {
	  var network = Network.get(networkArg);
	  if (!network) {
	    return new errors.InvalidNetworkArgument(networkArg);
	  }
	  var version = data.slice(0, 4);
	  if (BufferUtil.integerFromBuffer(version) !== network.xprivkey) {
	    return new errors.InvalidNetwork(version);
	  }
	  return null;
	};

	HDPrivateKey.fromJSON = function(arg) {
	  $.checkArgument(JSUtil.isValidJSON(arg), 'No valid JSON string was provided');
	  return new HDPrivateKey(arg);
	};

	HDPrivateKey.fromString = function(arg) {
	  $.checkArgument(_.isString(arg), 'No valid string was provided');
	  return new HDPrivateKey(arg);
	};

	HDPrivateKey.fromObject = function(arg) {
	  $.checkArgument(_.isObject(arg), 'No valid argument was provided');
	  return new HDPrivateKey(arg);
	};

	HDPrivateKey.prototype._buildFromJSON = function(arg) {
	  return this._buildFromObject(JSON.parse(arg));
	};

	HDPrivateKey.prototype._buildFromObject = function(arg) {
	  /* jshint maxcomplexity: 12 */
	  // TODO: Type validation
	  var buffers = {
	    version: arg.network ? BufferUtil.integerAsBuffer(Network.get(arg.network).xprivkey) : arg.version,
	    depth: _.isNumber(arg.depth) ? BufferUtil.integerAsSingleByteBuffer(arg.depth) : arg.depth,
	    parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? BufferUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,
	    childIndex: _.isNumber(arg.childIndex) ? BufferUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,
	    chainCode: _.isString(arg.chainCode) ? BufferUtil.hexToBuffer(arg.chainCode) : arg.chainCode,
	    privateKey: (_.isString(arg.privateKey) && JSUtil.isHexa(arg.privateKey)) ? BufferUtil.hexToBuffer(arg.privateKey) : arg.privateKey,
	    checksum: arg.checksum ? (arg.checksum.length ? arg.checksum : BufferUtil.integerAsBuffer(arg.checksum)) : undefined
	  };
	  return this._buildFromBuffers(buffers);
	};

	HDPrivateKey.prototype._buildFromSerialized = function(arg) {
	  var decoded = Base58Check.decode(arg);
	  var buffers = {
	    version: decoded.slice(HDPrivateKey.VersionStart, HDPrivateKey.VersionEnd),
	    depth: decoded.slice(HDPrivateKey.DepthStart, HDPrivateKey.DepthEnd),
	    parentFingerPrint: decoded.slice(HDPrivateKey.ParentFingerPrintStart,
	      HDPrivateKey.ParentFingerPrintEnd),
	    childIndex: decoded.slice(HDPrivateKey.ChildIndexStart, HDPrivateKey.ChildIndexEnd),
	    chainCode: decoded.slice(HDPrivateKey.ChainCodeStart, HDPrivateKey.ChainCodeEnd),
	    privateKey: decoded.slice(HDPrivateKey.PrivateKeyStart, HDPrivateKey.PrivateKeyEnd),
	    checksum: decoded.slice(HDPrivateKey.ChecksumStart, HDPrivateKey.ChecksumEnd),
	    xprivkey: arg
	  };
	  return this._buildFromBuffers(buffers);
	};

	HDPrivateKey.prototype._generateRandomly = function(network) {
	  return HDPrivateKey.fromSeed(Random.getRandomBuffer(64), network);
	};

	/**
	 * Generate a private key from a seed, as described in BIP32
	 *
	 * @param {string|Buffer} hexa
	 * @param {*} network
	 * @return HDPrivateKey
	 */
	HDPrivateKey.fromSeed = function(hexa, network) {
	  /* jshint maxcomplexity: 8 */
	  if (JSUtil.isHexaString(hexa)) {
	    hexa = BufferUtil.hexToBuffer(hexa);
	  }
	  if (!Buffer.isBuffer(hexa)) {
	    throw new hdErrors.InvalidEntropyArgument(hexa);
	  }
	  if (hexa.length < MINIMUM_ENTROPY_BITS * BITS_TO_BYTES) {
	    throw new hdErrors.InvalidEntropyArgument.NotEnoughEntropy(hexa);
	  }
	  if (hexa.length > MAXIMUM_ENTROPY_BITS * BITS_TO_BYTES) {
	    throw new hdErrors.InvalidEntropyArgument.TooMuchEntropy(hexa);
	  }
	  var hash = Hash.sha512hmac(hexa, new buffer.Buffer('Bitcoin seed'));

	  return new HDPrivateKey({
	    network: Network.get(network) || Network.defaultNetwork,
	    depth: 0,
	    parentFingerPrint: 0,
	    childIndex: 0,
	    privateKey: hash.slice(0, 32),
	    chainCode: hash.slice(32, 64)
	  });
	};

	/**
	 * Receives a object with buffers in all the properties and populates the
	 * internal structure
	 *
	 * @param {Object} arg
	 * @param {buffer.Buffer} arg.version
	 * @param {buffer.Buffer} arg.depth
	 * @param {buffer.Buffer} arg.parentFingerPrint
	 * @param {buffer.Buffer} arg.childIndex
	 * @param {buffer.Buffer} arg.chainCode
	 * @param {buffer.Buffer} arg.privateKey
	 * @param {buffer.Buffer} arg.checksum
	 * @param {string=} arg.xprivkey - if set, don't recalculate the base58
	 *      representation
	 * @return {HDPrivateKey} this
	 */
	HDPrivateKey.prototype._buildFromBuffers = function(arg) {
	  /* jshint maxcomplexity: 8 */
	  /* jshint maxstatements: 20 */

	  HDPrivateKey._validateBufferArguments(arg);

	  JSUtil.defineImmutable(this, {
	    _buffers: arg
	  });

	  var sequence = [
	    arg.version, arg.depth, arg.parentFingerPrint, arg.childIndex, arg.chainCode,
	    BufferUtil.emptyBuffer(1), arg.privateKey
	  ];
	  var concat = buffer.Buffer.concat(sequence);
	  if (!arg.checksum || !arg.checksum.length) {
	    arg.checksum = Base58Check.checksum(concat);
	  } else {
	    if (arg.checksum.toString() !== Base58Check.checksum(concat).toString()) {
	      throw new errors.InvalidB58Checksum(concat);
	    }
	  }

	  var xprivkey;
	  xprivkey = Base58Check.encode(buffer.Buffer.concat(sequence));
	  arg.xprivkey = new Buffer(xprivkey);

	  var privateKey = new PrivateKey(BN.fromBuffer(arg.privateKey));
	  var publicKey = privateKey.toPublicKey();
	  var size = HDPrivateKey.ParentFingerPrintSize;
	  var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);

	  JSUtil.defineImmutable(this, {
	    xprivkey: xprivkey,
	    network: Network.get(BufferUtil.integerFromBuffer(arg.version)),
	    depth: BufferUtil.integerFromSingleByteBuffer(arg.depth),
	    privateKey: privateKey,
	    publicKey: publicKey,
	    fingerPrint: fingerPrint
	  });

	  var HDPublicKey = __webpack_require__(124);
	  var hdPublicKey = new HDPublicKey(this);

	  JSUtil.defineImmutable(this, {
	    hdPublicKey: hdPublicKey,
	    xpubkey: hdPublicKey.xpubkey
	  });

	  return this;
	};

	HDPrivateKey._validateBufferArguments = function(arg) {
	  var checkBuffer = function(name, size) {
	    var buff = arg[name];
	    assert(BufferUtil.isBuffer(buff), name + ' argument is not a buffer');
	    assert(
	      buff.length === size,
	      name + ' has not the expected size: found ' + buff.length + ', expected ' + size
	    );
	  };
	  checkBuffer('version', HDPrivateKey.VersionSize);
	  checkBuffer('depth', HDPrivateKey.DepthSize);
	  checkBuffer('parentFingerPrint', HDPrivateKey.ParentFingerPrintSize);
	  checkBuffer('childIndex', HDPrivateKey.ChildIndexSize);
	  checkBuffer('chainCode', HDPrivateKey.ChainCodeSize);
	  checkBuffer('privateKey', HDPrivateKey.PrivateKeySize);
	  if (arg.checksum && arg.checksum.length) {
	    checkBuffer('checksum', HDPrivateKey.CheckSumSize);
	  }
	};

	/**
	 * Returns the string representation of this private key (a string starting
	 * with "xprv..."
	 *
	 * @return string
	 */
	HDPrivateKey.prototype.toString = function() {
	  return this.xprivkey;
	};

	/**
	 * Returns the console representation of this extended private key.
	 * @return string
	 */
	HDPrivateKey.prototype.inspect = function() {
	  return '<HDPrivateKey: ' + this.xprivkey + '>';
	};

	/**
	 * Returns a plain object with a representation of this private key.
	 *
	 * Fields include:<ul>
	 * <li> network: either 'livenet' or 'testnet'
	 * <li> depth: a number ranging from 0 to 255
	 * <li> fingerPrint: a number ranging from 0 to 2^32-1, taken from the hash of the
	 * <li>     associated public key
	 * <li> parentFingerPrint: a number ranging from 0 to 2^32-1, taken from the hash
	 * <li>     of this parent's associated public key or zero.
	 * <li> childIndex: the index from which this child was derived (or zero)
	 * <li> chainCode: an hexa string representing a number used in the derivation
	 * <li> privateKey: the private key associated, in hexa representation
	 * <li> xprivkey: the representation of this extended private key in checksum
	 * <li>     base58 format
	 * <li> checksum: the base58 checksum of xprivkey
	 * </ul>
	 *  @return {Object}
	 */
	HDPrivateKey.prototype.toObject = function toObject() {
	  return {
	    network: Network.get(BufferUtil.integerFromBuffer(this._buffers.version)).name,
	    depth: BufferUtil.integerFromSingleByteBuffer(this._buffers.depth),
	    fingerPrint: BufferUtil.integerFromBuffer(this.fingerPrint),
	    parentFingerPrint: BufferUtil.integerFromBuffer(this._buffers.parentFingerPrint),
	    childIndex: BufferUtil.integerFromBuffer(this._buffers.childIndex),
	    chainCode: BufferUtil.bufferToHex(this._buffers.chainCode),
	    privateKey: this.privateKey.toBuffer().toString('hex'),
	    checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),
	    xprivkey: this.xprivkey
	  };
	};

	/**
	 * Returns a JSON representation of the HDPrivateKey
	 *
	 * @return {string}
	 */
	HDPrivateKey.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Build a HDPrivateKey from a buffer
	 *
	 * @param {Buffer} arg
	 * @return {HDPrivateKey}
	 */
	HDPrivateKey.fromBuffer = function(arg) {
	  return new HDPrivateKey(arg.toString());
	};

	/**
	 * Returns a buffer representation of the HDPrivateKey
	 *
	 * @return {string}
	 */
	HDPrivateKey.prototype.toBuffer = function() {
	  return BufferUtil.copy(this._buffers.xprivkey);
	};

	HDPrivateKey.DefaultDepth = 0;
	HDPrivateKey.DefaultFingerprint = 0;
	HDPrivateKey.DefaultChildIndex = 0;
	HDPrivateKey.Hardened = 0x80000000;
	HDPrivateKey.MaxIndex = 2 * HDPrivateKey.Hardened;

	HDPrivateKey.RootElementAlias = ['m', 'M', 'm\'', 'M\''];

	HDPrivateKey.VersionSize = 4;
	HDPrivateKey.DepthSize = 1;
	HDPrivateKey.ParentFingerPrintSize = 4;
	HDPrivateKey.ChildIndexSize = 4;
	HDPrivateKey.ChainCodeSize = 32;
	HDPrivateKey.PrivateKeySize = 32;
	HDPrivateKey.CheckSumSize = 4;

	HDPrivateKey.DataLength = 78;
	HDPrivateKey.SerializedByteSize = 82;

	HDPrivateKey.VersionStart = 0;
	HDPrivateKey.VersionEnd = HDPrivateKey.VersionStart + HDPrivateKey.VersionSize;
	HDPrivateKey.DepthStart = HDPrivateKey.VersionEnd;
	HDPrivateKey.DepthEnd = HDPrivateKey.DepthStart + HDPrivateKey.DepthSize;
	HDPrivateKey.ParentFingerPrintStart = HDPrivateKey.DepthEnd;
	HDPrivateKey.ParentFingerPrintEnd = HDPrivateKey.ParentFingerPrintStart + HDPrivateKey.ParentFingerPrintSize;
	HDPrivateKey.ChildIndexStart = HDPrivateKey.ParentFingerPrintEnd;
	HDPrivateKey.ChildIndexEnd = HDPrivateKey.ChildIndexStart + HDPrivateKey.ChildIndexSize;
	HDPrivateKey.ChainCodeStart = HDPrivateKey.ChildIndexEnd;
	HDPrivateKey.ChainCodeEnd = HDPrivateKey.ChainCodeStart + HDPrivateKey.ChainCodeSize;
	HDPrivateKey.PrivateKeyStart = HDPrivateKey.ChainCodeEnd + 1;
	HDPrivateKey.PrivateKeyEnd = HDPrivateKey.PrivateKeyStart + HDPrivateKey.PrivateKeySize;
	HDPrivateKey.ChecksumStart = HDPrivateKey.PrivateKeyEnd;
	HDPrivateKey.ChecksumEnd = HDPrivateKey.ChecksumStart + HDPrivateKey.CheckSumSize;

	assert(HDPrivateKey.ChecksumEnd === HDPrivateKey.SerializedByteSize);

	module.exports = HDPrivateKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);

	var BN = __webpack_require__(12);
	var Base58 = __webpack_require__(65);
	var Base58Check = __webpack_require__(55);
	var Hash = __webpack_require__(14);
	var HDPrivateKey = __webpack_require__(123);
	var HDKeyCache = __webpack_require__(80);
	var Network = __webpack_require__(40);
	var Point = __webpack_require__(47);
	var PublicKey = __webpack_require__(25);

	var bitcoreErrors = __webpack_require__(30);
	var errors = bitcoreErrors;
	var hdErrors = bitcoreErrors.HDPublicKey;
	var assert = __webpack_require__(15);

	var JSUtil = __webpack_require__(10);
	var BufferUtil = __webpack_require__(6);

	/**
	 * The representation of an hierarchically derived public key.
	 *
	 * See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki
	 *
	 * @constructor
	 * @param {Object|string|Buffer} arg
	 */
	function HDPublicKey(arg) {
	  /* jshint maxcomplexity: 12 */
	  /* jshint maxstatements: 20 */
	  if (arg instanceof HDPublicKey) {
	    return arg;
	  }
	  if (!(this instanceof HDPublicKey)) {
	    return new HDPublicKey(arg);
	  }
	  if (arg) {
	    if (_.isString(arg) || BufferUtil.isBuffer(arg)) {
	      var error = HDPublicKey.getSerializedError(arg);
	      if (!error) {
	        return this._buildFromSerialized(arg);
	      } else if (JSUtil.isValidJSON(arg)) {
	        return this._buildFromJSON(arg);
	      } else if (BufferUtil.isBuffer(arg) && !HDPublicKey.getSerializedError(arg.toString())) {
	        return this._buildFromSerialized(arg.toString());
	      } else {
	        if (error instanceof hdErrors.ArgumentIsPrivateExtended) {
	          return new HDPrivateKey(arg).hdPublicKey;
	        }
	        throw error;
	      }
	    } else {
	      if (_.isObject(arg)) {
	        if (arg instanceof HDPrivateKey) {
	          return this._buildFromPrivate(arg);
	        } else {
	          return this._buildFromObject(arg);
	        }
	      } else {
	        throw new hdErrors.UnrecognizedArgument(arg);
	      }
	    }
	  } else {
	    throw new hdErrors.MustSupplyArgument();
	  }
	}

	/**
	 * Verifies that a given path is valid.
	 *
	 * @param {string|number} arg
	 * @return {boolean}
	 */
	HDPublicKey.isValidPath = function(arg) {
	  if (_.isString(arg)) {
	    var indexes = HDPrivateKey._getDerivationIndexes(arg);
	    return indexes !== null && _.all(indexes, HDPublicKey.isValidPath);
	  }

	  if (_.isNumber(arg)) {
	    return arg >= 0 && arg < HDPublicKey.Hardened;
	  }

	  return false;
	};

	/**
	 * Get a derivated child based on a string or number.
	 *
	 * If the first argument is a string, it's parsed as the full path of
	 * derivation. Valid values for this argument include "m" (which returns the
	 * same public key), "m/0/1/40/2/1000".
	 *
	 * Note that hardened keys can't be derived from a public extended key.
	 *
	 * If the first argument is a number, the child with that index will be
	 * derived. See the example usage for clarification.
	 *
	 * @example
	 * ```javascript
	 * var parent = new HDPublicKey('xpub...');
	 * var child_0_1_2 = parent.derive(0).derive(1).derive(2);
	 * var copy_of_child_0_1_2 = parent.derive("m/0/1/2");
	 * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);
	 * ```
	 *
	 * @param {string|number} arg
	 */
	HDPublicKey.prototype.derive = function (arg) {
	  if (_.isNumber(arg)) {
	    return this._deriveWithNumber(arg);
	  } else if (_.isString(arg)) {
	    return this._deriveFromString(arg);
	  } else {
	    throw new hdErrors.InvalidDerivationArgument(arg);
	  }
	};

	HDPublicKey.prototype._deriveWithNumber = function (index) {
	  if (index >= HDPublicKey.Hardened) {
	    throw new hdErrors.InvalidIndexCantDeriveHardened();
	  }
	  if (index < 0) {
	    throw new hdErrors.InvalidPath(index);
	  }
	  var cached = HDKeyCache.get(this.xpubkey, index, false);
	  if (cached) {
	    return cached;
	  }

	  var indexBuffer = BufferUtil.integerAsBuffer(index);
	  var data = BufferUtil.concat([this.publicKey.toBuffer(), indexBuffer]);
	  var hash = Hash.sha512hmac(data, this._buffers.chainCode);
	  var leftPart = BN.fromBuffer(hash.slice(0, 32), {size: 32});
	  var chainCode = hash.slice(32, 64);

	  var publicKey = PublicKey.fromPoint(Point.getG().mul(leftPart).add(this.publicKey.point));

	  var derived = new HDPublicKey({
	    network: this.network,
	    depth: this.depth + 1,
	    parentFingerPrint: this.fingerPrint,
	    childIndex: index,
	    chainCode: chainCode,
	    publicKey: publicKey
	  });
	  HDKeyCache.set(this.xpubkey, index, false, derived);
	  return derived;
	};

	HDPublicKey.prototype._deriveFromString = function (path) {
	  /* jshint maxcomplexity: 8 */
	  if (_.contains(path, "'")) {
	    throw new hdErrors.InvalidIndexCantDeriveHardened();
	  } else if (!HDPublicKey.isValidPath(path)) {
	    throw new hdErrors.InvalidPath(path);
	  }

	  var indexes = HDPrivateKey._getDerivationIndexes(path);
	  var derived = indexes.reduce(function(prev, index) {
	    return prev._deriveWithNumber(index);
	  }, this);

	  return derived;
	};

	/**
	 * Verifies that a given serialized public key in base58 with checksum format
	 * is valid.
	 *
	 * @param {string|Buffer} data - the serialized public key
	 * @param {string|Network=} network - optional, if present, checks that the
	 *     network provided matches the network serialized.
	 * @return {boolean}
	 */
	HDPublicKey.isValidSerialized = function (data, network) {
	  return _.isNull(HDPublicKey.getSerializedError(data, network));
	};

	/**
	 * Checks what's the error that causes the validation of a serialized public key
	 * in base58 with checksum to fail.
	 *
	 * @param {string|Buffer} data - the serialized public key
	 * @param {string|Network=} network - optional, if present, checks that the
	 *     network provided matches the network serialized.
	 * @return {errors|null}
	 */
	HDPublicKey.getSerializedError = function (data, network) {
	  /* jshint maxcomplexity: 10 */
	  /* jshint maxstatements: 20 */
	  if (!(_.isString(data) || BufferUtil.isBuffer(data))) {
	    return new hdErrors.UnrecognizedArgument('expected buffer or string');
	  }
	  if (!Base58.validCharacters(data)) {
	    return new errors.InvalidB58Char('(unknown)', data);
	  }
	  try {
	    data = Base58Check.decode(data);
	  } catch (e) {
	    return new errors.InvalidB58Checksum(data);
	  }
	  if (data.length !== HDPublicKey.DataSize) {
	    return new errors.InvalidLength(data);
	  }
	  if (!_.isUndefined(network)) {
	    var error = HDPublicKey._validateNetwork(data, network);
	    if (error) {
	      return error;
	    }
	  }
	  var version = BufferUtil.integerFromBuffer(data.slice(0, 4));
	  if (version === Network.livenet.xprivkey || version === Network.testnet.xprivkey ) {
	    return new hdErrors.ArgumentIsPrivateExtended();
	  }
	  return null;
	};

	HDPublicKey._validateNetwork = function (data, networkArg) {
	  var network = Network.get(networkArg);
	  if (!network) {
	    return new errors.InvalidNetworkArgument(networkArg);
	  }
	  var version = data.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd);
	  if (BufferUtil.integerFromBuffer(version) !== network.xpubkey) {
	    return new errors.InvalidNetwork(version);
	  }
	  return null;
	};

	HDPublicKey.prototype._buildFromJSON = function (arg) {
	  return this._buildFromObject(JSON.parse(arg));
	};

	HDPublicKey.prototype._buildFromPrivate = function (arg) {
	  var args = _.clone(arg._buffers);
	  var point = Point.getG().mul(BN.fromBuffer(args.privateKey));
	  args.publicKey = Point.pointToCompressed(point);
	  args.version = BufferUtil.integerAsBuffer(Network.get(BufferUtil.integerFromBuffer(args.version)).xpubkey);
	  args.privateKey = undefined;
	  args.checksum = undefined;
	  args.xprivkey = undefined;
	  return this._buildFromBuffers(args);
	};

	HDPublicKey.prototype._buildFromObject = function (arg) {
	  /* jshint maxcomplexity: 10 */
	  // TODO: Type validation
	  var buffers = {
	    version: arg.network ? BufferUtil.integerAsBuffer(Network.get(arg.network).xpubkey) : arg.version,
	    depth: _.isNumber(arg.depth) ? BufferUtil.integerAsSingleByteBuffer(arg.depth) : arg.depth,
	    parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? BufferUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,
	    childIndex: _.isNumber(arg.childIndex) ? BufferUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,
	    chainCode: _.isString(arg.chainCode) ? BufferUtil.hexToBuffer(arg.chainCode) : arg.chainCode,
	    publicKey: _.isString(arg.publicKey) ? BufferUtil.hexToBuffer(arg.publicKey) :
	      BufferUtil.isBuffer(arg.publicKey) ? arg.publicKey : arg.publicKey.toBuffer(),
	    checksum: _.isNumber(arg.checksum) ? BufferUtil.integerAsBuffer(arg.checksum) : arg.checksum
	  };
	  return this._buildFromBuffers(buffers);
	};

	HDPublicKey.prototype._buildFromSerialized = function (arg) {
	  var decoded = Base58Check.decode(arg);
	  var buffers = {
	    version: decoded.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd),
	    depth: decoded.slice(HDPublicKey.DepthStart, HDPublicKey.DepthEnd),
	    parentFingerPrint: decoded.slice(HDPublicKey.ParentFingerPrintStart,
	                                     HDPublicKey.ParentFingerPrintEnd),
	    childIndex: decoded.slice(HDPublicKey.ChildIndexStart, HDPublicKey.ChildIndexEnd),
	    chainCode: decoded.slice(HDPublicKey.ChainCodeStart, HDPublicKey.ChainCodeEnd),
	    publicKey: decoded.slice(HDPublicKey.PublicKeyStart, HDPublicKey.PublicKeyEnd),
	    checksum: decoded.slice(HDPublicKey.ChecksumStart, HDPublicKey.ChecksumEnd),
	    xpubkey: arg
	  };
	  return this._buildFromBuffers(buffers);
	};

	/**
	 * Receives a object with buffers in all the properties and populates the
	 * internal structure
	 *
	 * @param {Object} arg
	 * @param {buffer.Buffer} arg.version
	 * @param {buffer.Buffer} arg.depth
	 * @param {buffer.Buffer} arg.parentFingerPrint
	 * @param {buffer.Buffer} arg.childIndex
	 * @param {buffer.Buffer} arg.chainCode
	 * @param {buffer.Buffer} arg.publicKey
	 * @param {buffer.Buffer} arg.checksum
	 * @param {string=} arg.xpubkey - if set, don't recalculate the base58
	 *      representation
	 * @return {HDPublicKey} this
	 */
	HDPublicKey.prototype._buildFromBuffers = function (arg) {
	  /* jshint maxcomplexity: 8 */
	  /* jshint maxstatements: 20 */

	  HDPublicKey._validateBufferArguments(arg);

	  JSUtil.defineImmutable(this, {
	    _buffers: arg
	  });

	  var sequence = [
	    arg.version, arg.depth, arg.parentFingerPrint, arg.childIndex, arg.chainCode,
	    arg.publicKey
	  ];
	  var concat = BufferUtil.concat(sequence);
	  var checksum = Base58Check.checksum(concat);
	  if (!arg.checksum || !arg.checksum.length) {
	    arg.checksum = checksum;
	  } else {
	    if (arg.checksum.toString('hex') !== checksum.toString('hex')) {
	      throw new errors.InvalidB58Checksum(concat, checksum);
	    }
	  }

	  var xpubkey;
	  xpubkey = Base58Check.encode(BufferUtil.concat(sequence));
	  arg.xpubkey = new Buffer(xpubkey);

	  var publicKey = PublicKey.fromString(arg.publicKey);
	  var size = HDPublicKey.ParentFingerPrintSize;
	  var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);

	  JSUtil.defineImmutable(this, {
	    xpubkey: xpubkey,
	    network: Network.get(BufferUtil.integerFromBuffer(arg.version)),
	    depth: BufferUtil.integerFromSingleByteBuffer(arg.depth),
	    publicKey: publicKey,
	    fingerPrint: fingerPrint
	  });

	  return this;
	};

	HDPublicKey._validateBufferArguments = function (arg) {
	  var checkBuffer = function(name, size) {
	    var buff = arg[name];
	    assert(BufferUtil.isBuffer(buff), name + ' argument is not a buffer, it\'s ' + typeof buff);
	    assert(
	      buff.length === size,
	      name + ' has not the expected size: found ' + buff.length + ', expected ' + size
	    );
	  };
	  checkBuffer('version', HDPublicKey.VersionSize);
	  checkBuffer('depth', HDPublicKey.DepthSize);
	  checkBuffer('parentFingerPrint', HDPublicKey.ParentFingerPrintSize);
	  checkBuffer('childIndex', HDPublicKey.ChildIndexSize);
	  checkBuffer('chainCode', HDPublicKey.ChainCodeSize);
	  checkBuffer('publicKey', HDPublicKey.PublicKeySize);
	  if (arg.checksum && arg.checksum.length) {
	    checkBuffer('checksum', HDPublicKey.CheckSumSize);
	  }
	};

	HDPublicKey.fromJSON = function(arg) {
	  $.checkArgument(JSUtil.isValidJSON(arg), 'No valid JSON string was provided');
	  return new HDPublicKey(arg);
	};

	HDPublicKey.fromObject = function(arg) {
	  $.checkArgument(_.isObject(arg), 'No valid argument was provided');
	  return new HDPublicKey(arg);
	};

	HDPublicKey.fromString = function(arg) {
	  $.checkArgument(_.isString(arg), 'No valid string was provided');
	  return new HDPublicKey(arg);
	};

	/**
	 * Returns the base58 checked representation of the public key
	 * @return {string} a string starting with "xpub..." in livenet
	 */
	HDPublicKey.prototype.toString = function () {
	  return this.xpubkey;
	};

	/**
	 * Returns the console representation of this extended public key.
	 * @return string
	 */
	HDPublicKey.prototype.inspect = function() {
	  return '<HDPublicKey: ' + this.xpubkey + '>';
	};

	/**
	 * Returns a plain javascript object with information to reconstruct a key.
	 *
	 * Fields are: <ul>
	 *  <li> network: 'livenet' or 'testnet'
	 *  <li> depth: a number from 0 to 255, the depth to the master extended key
	 *  <li> fingerPrint: a number of 32 bits taken from the hash of the public key
	 *  <li> fingerPrint: a number of 32 bits taken from the hash of this key's
	 *  <li>     parent's public key
	 *  <li> childIndex: index with which this key was derived
	 *  <li> chainCode: string in hexa encoding used for derivation
	 *  <li> publicKey: string, hexa encoded, in compressed key format
	 *  <li> checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),
	 *  <li> xpubkey: the string with the base58 representation of this extended key
	 *  <li> checksum: the base58 checksum of xpubkey
	 * </ul>
	 */
	HDPublicKey.prototype.toObject = function toObject() {
	  return {
	    network: Network.get(BufferUtil.integerFromBuffer(this._buffers.version)).name,
	    depth: BufferUtil.integerFromSingleByteBuffer(this._buffers.depth),
	    fingerPrint: BufferUtil.integerFromBuffer(this.fingerPrint),
	    parentFingerPrint: BufferUtil.integerFromBuffer(this._buffers.parentFingerPrint),
	    childIndex: BufferUtil.integerFromBuffer(this._buffers.childIndex),
	    chainCode: BufferUtil.bufferToHex(this._buffers.chainCode),
	    publicKey: this.publicKey.toString(),
	    checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),
	    xpubkey: this.xpubkey
	  };
	};

	/**
	 * Serializes this object into a JSON string
	 * @return {string}
	 */
	HDPublicKey.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Create a HDPublicKey from a buffer argument
	 *
	 * @param {Buffer} arg
	 * @return {HDPublicKey}
	 */
	HDPublicKey.fromBuffer = function(arg) {
	  return new HDPublicKey(arg);
	};

	/**
	 * Return a buffer representation of the xpubkey
	 *
	 * @return {Buffer}
	 */
	HDPublicKey.prototype.toBuffer = function() {
	  return BufferUtil.copy(this._buffers.xpubkey);
	};

	HDPublicKey.Hardened = 0x80000000;
	HDPublicKey.RootElementAlias = ['m', 'M'];

	HDPublicKey.VersionSize = 4;
	HDPublicKey.DepthSize = 1;
	HDPublicKey.ParentFingerPrintSize = 4;
	HDPublicKey.ChildIndexSize = 4;
	HDPublicKey.ChainCodeSize = 32;
	HDPublicKey.PublicKeySize = 33;
	HDPublicKey.CheckSumSize = 4;

	HDPublicKey.DataSize = 78;
	HDPublicKey.SerializedByteSize = 82;

	HDPublicKey.VersionStart           = 0;
	HDPublicKey.VersionEnd             = HDPublicKey.VersionStart + HDPublicKey.VersionSize;
	HDPublicKey.DepthStart             = HDPublicKey.VersionEnd;
	HDPublicKey.DepthEnd               = HDPublicKey.DepthStart + HDPublicKey.DepthSize;
	HDPublicKey.ParentFingerPrintStart = HDPublicKey.DepthEnd;
	HDPublicKey.ParentFingerPrintEnd   = HDPublicKey.ParentFingerPrintStart + HDPublicKey.ParentFingerPrintSize;
	HDPublicKey.ChildIndexStart        = HDPublicKey.ParentFingerPrintEnd;
	HDPublicKey.ChildIndexEnd          = HDPublicKey.ChildIndexStart + HDPublicKey.ChildIndexSize;
	HDPublicKey.ChainCodeStart         = HDPublicKey.ChildIndexEnd;
	HDPublicKey.ChainCodeEnd           = HDPublicKey.ChainCodeStart + HDPublicKey.ChainCodeSize;
	HDPublicKey.PublicKeyStart         = HDPublicKey.ChainCodeEnd;
	HDPublicKey.PublicKeyEnd           = HDPublicKey.PublicKeyStart + HDPublicKey.PublicKeySize;
	HDPublicKey.ChecksumStart          = HDPublicKey.PublicKeyEnd;
	HDPublicKey.ChecksumEnd            = HDPublicKey.ChecksumStart + HDPublicKey.CheckSumSize;

	assert(HDPublicKey.PublicKeyEnd === HDPublicKey.DataSize);
	assert(HDPublicKey.ChecksumEnd === HDPublicKey.SerializedByteSize);

	module.exports = HDPublicKey;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';


	var Address = __webpack_require__(38);
	var BufferReader = __webpack_require__(39);
	var BufferWriter = __webpack_require__(29);
	var Hash = __webpack_require__(14);
	var Opcode = __webpack_require__(81);
	var PublicKey = __webpack_require__(25);
	var Signature = __webpack_require__(28);
	var Networks = __webpack_require__(40);

	var $ = __webpack_require__(8);
	var _ = __webpack_require__(4);
	var errors = __webpack_require__(30);
	var buffer = __webpack_require__(1);
	var BufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);

	/**
	 * A bitcoin transaction script. Each transaction's inputs and outputs
	 * has a script that is evaluated to validate it's spending.
	 *
	 * See https://en.bitcoin.it/wiki/Script
	 *
	 * @constructor
	 * @param {Object|string|Buffer} [from] optional data to populate script
	 */
	var Script = function Script(from) {
	  if (!(this instanceof Script)) {
	    return new Script(from);
	  }

	  this.chunks = [];

	  if (BufferUtil.isBuffer(from)) {
	    return Script.fromBuffer(from);
	  } else if (from instanceof Address) {
	    return Script.fromAddress(from);
	  } else if (from instanceof Script) {
	    return Script.fromBuffer(from.toBuffer());
	  } else if (typeof from === 'string') {
	    return Script.fromString(from);
	  } else if (typeof from !== 'undefined') {
	    this.set(from);
	  }
	};

	Script.prototype.set = function(obj) {
	  this.chunks = obj.chunks || this.chunks;
	  return this;
	};

	Script.fromBuffer = function(buffer) {
	  var script = new Script();
	  script.chunks = [];

	  var br = new BufferReader(buffer);
	  while (!br.finished()) {
	    var opcodenum = br.readUInt8();

	    var len, buf;
	    if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {
	      len = opcodenum;
	      script.chunks.push({
	        buf: br.read(len),
	        len: len,
	        opcodenum: opcodenum
	      });
	    } else if (opcodenum === Opcode.OP_PUSHDATA1) {
	      len = br.readUInt8();
	      buf = br.read(len);
	      script.chunks.push({
	        buf: buf,
	        len: len,
	        opcodenum: opcodenum
	      });
	    } else if (opcodenum === Opcode.OP_PUSHDATA2) {
	      len = br.readUInt16LE();
	      buf = br.read(len);
	      script.chunks.push({
	        buf: buf,
	        len: len,
	        opcodenum: opcodenum
	      });
	    } else if (opcodenum === Opcode.OP_PUSHDATA4) {
	      len = br.readUInt32LE();
	      buf = br.read(len);
	      script.chunks.push({
	        buf: buf,
	        len: len,
	        opcodenum: opcodenum
	      });
	    } else {
	      script.chunks.push({
	        opcodenum: opcodenum
	      });
	    }
	  }

	  return script;
	};

	Script.prototype.toBuffer = function() {
	  var bw = new BufferWriter();

	  for (var i = 0; i < this.chunks.length; i++) {
	    var chunk = this.chunks[i];
	    var opcodenum = chunk.opcodenum;
	    bw.writeUInt8(chunk.opcodenum);
	    if (chunk.buf) {
	      if (opcodenum < Opcode.OP_PUSHDATA1) {
	        bw.write(chunk.buf);
	      } else if (opcodenum === Opcode.OP_PUSHDATA1) {
	        bw.writeUInt8(chunk.len);
	        bw.write(chunk.buf);
	      } else if (opcodenum === Opcode.OP_PUSHDATA2) {
	        bw.writeUInt16LE(chunk.len);
	        bw.write(chunk.buf);
	      } else if (opcodenum === Opcode.OP_PUSHDATA4) {
	        bw.writeUInt32LE(chunk.len);
	        bw.write(chunk.buf);
	      }
	    }
	  }

	  return bw.concat();
	};

	Script.fromString = function(str) {
	  if (JSUtil.isHexa(str) || str.length === 0) {
	    return new Script(new buffer.Buffer(str, 'hex'));
	  }
	  var script = new Script();
	  script.chunks = [];

	  var tokens = str.split(' ');
	  var i = 0;
	  while (i < tokens.length) {
	    var token = tokens[i];
	    var opcode = Opcode(token);
	    var opcodenum = opcode.toNumber();

	    if (_.isUndefined(opcodenum)) {
	      opcodenum = parseInt(token);
	      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {
	        script.chunks.push({
	          buf: new Buffer(tokens[i + 1].slice(2), 'hex'),
	          len: opcodenum,
	          opcodenum: opcodenum
	        });
	        i = i + 2;
	      } else {
	        throw new Error('Invalid script: ' + JSON.stringify(str));
	      }
	    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||
	      opcodenum === Opcode.OP_PUSHDATA2 ||
	      opcodenum === Opcode.OP_PUSHDATA4) {
	      if (tokens[i + 2].slice(0, 2) !== '0x') {
	        throw new Error('Pushdata data must start with 0x');
	      }
	      script.chunks.push({
	        buf: new Buffer(tokens[i + 2].slice(2), 'hex'),
	        len: parseInt(tokens[i + 1]),
	        opcodenum: opcodenum
	      });
	      i = i + 3;
	    } else {
	      script.chunks.push({
	        opcodenum: opcodenum
	      });
	      i = i + 1;
	    }
	  }
	  return script;
	};

	Script.prototype.toString = function() {
	  var str = '';
	  for (var i = 0; i < this.chunks.length; i++) {
	    var chunk = this.chunks[i];
	    var opcodenum = chunk.opcodenum;
	    if (!chunk.buf) {
	      if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {
	        str = str + ' ' + Opcode(opcodenum).toString();
	      } else {
	        var numstr = opcodenum.toString(16);
	        if (numstr.length % 2 !== 0) {
	          numstr = '0' + numstr;
	        }
	        str = str + ' ' + '0x' + numstr;
	      }
	    } else {
	      if (opcodenum === Opcode.OP_PUSHDATA1 ||
	        opcodenum === Opcode.OP_PUSHDATA2 ||
	        opcodenum === Opcode.OP_PUSHDATA4) {
	        str = str + ' ' + Opcode(opcodenum).toString();
	      }
	      str = str + ' ' + chunk.len;
	      if (chunk.len > 0) {
	        str = str + ' ' + '0x' + chunk.buf.toString('hex');
	      }
	    }
	  }

	  return str.substr(1);
	};

	Script.prototype.toHex = function() {
	  return this.toBuffer().toString('hex');
	};

	Script.prototype.inspect = function() {
	  return '<Script: ' + this.toString() + '>';
	};

	// script classification methods

	/**
	 * @returns {boolean} if this is a pay to pubkey hash output script
	 */
	Script.prototype.isPublicKeyHashOut = function() {
	  return !!(this.chunks.length === 5 &&
	    this.chunks[0].opcodenum === Opcode.OP_DUP &&
	    this.chunks[1].opcodenum === Opcode.OP_HASH160 &&
	    this.chunks[2].buf &&
	    this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY &&
	    this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);
	};

	/**
	 * @returns {boolean} if this is a pay to public key hash input script
	 */
	Script.prototype.isPublicKeyHashIn = function() {
	  return this.chunks.length === 2 &&
	    this.chunks[0].buf &&
	    this.chunks[0].buf.length >= 0x47 &&
	    this.chunks[0].buf.length <= 0x49 &&
	    PublicKey.isValid(this.chunks[1].buf);
	};

	Script.prototype.getPublicKeyHash = function() {
	  $.checkState(this.isPublicKeyHashOut(), 'Can\'t retrieve PublicKeyHash from a non-PKH output');
	  return this.chunks[2].buf;
	};

	/**
	 * @returns {boolean} if this is a public key output script
	 */
	Script.prototype.isPublicKeyOut = function() {
	  return this.chunks.length === 2 &&
	    BufferUtil.isBuffer(this.chunks[0].buf) &&
	    PublicKey.isValid(this.chunks[0].buf) &&
	    this.chunks[1].opcodenum === Opcode.OP_CHECKSIG;
	};

	/**
	 * @returns {boolean} if this is a pay to public key input script
	 */
	Script.prototype.isPublicKeyIn = function() {
	  return this.chunks.length === 1 &&
	    BufferUtil.isBuffer(this.chunks[0].buf) &&
	    this.chunks[0].buf.length === 0x47;
	};


	/**
	 * @returns {boolean} if this is a p2sh output script
	 */
	Script.prototype.isScriptHashOut = function() {
	  var buf = this.toBuffer();
	  return (buf.length === 23 &&
	    buf[0] === Opcode.OP_HASH160 &&
	    buf[1] === 0x14 &&
	    buf[buf.length - 1] === Opcode.OP_EQUAL);
	};

	/** 
	 * @returns {boolean} if this is a p2sh input script
	 * Note that these are frequently indistinguishable from pubkeyhashin
	 */
	Script.prototype.isScriptHashIn = function() {
	  if (this.chunks.length === 0) {
	    return false;
	  }
	  var chunk = this.chunks[this.chunks.length - 1];
	  if (!chunk) {
	    return false;
	  }
	  var scriptBuf = chunk.buf;
	  if (!scriptBuf) {
	    return false;
	  }
	  var redeemScript = new Script(scriptBuf);
	  var type = redeemScript.classify();
	  return type !== Script.types.UNKNOWN;
	};

	/**
	 * @returns {boolean} if this is a mutlsig output script
	 */
	Script.prototype.isMultisigOut = function() {
	  return (this.chunks.length > 3 &&
	    Opcode.isSmallIntOp(this.chunks[0].opcodenum) &&
	    this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {
	      return obj.buf && BufferUtil.isBuffer(obj.buf);
	    }) &&
	    Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) &&
	    this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG);
	};


	/**
	 * @returns {boolean} if this is a multisig input script
	 */
	Script.prototype.isMultisigIn = function() {
	  return this.chunks.length >= 2 &&
	    this.chunks[0].opcodenum === 0 &&
	    this.chunks.slice(1, this.chunks.length).every(function(obj) {
	      return obj.buf &&
	        BufferUtil.isBuffer(obj.buf) &&
	        obj.buf.length === 0x47;
	    });
	};

	/**
	 * @returns {boolean} true if this is a valid standard OP_RETURN output
	 */
	Script.prototype.isDataOut = function() {
	  return this.chunks.length >= 1 &&
	    this.chunks[0].opcodenum === Opcode.OP_RETURN &&
	    (this.chunks.length === 1 ||
	      (this.chunks.length === 2 &&
	        this.chunks[1].buf &&
	        this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE &&
	        this.chunks[1].length === this.chunks.len));
	};

	/**
	 * Retrieve the associated data for this script.
	 * In the case of a pay to public key hash or P2SH, return the hash.
	 * In the case of a standard OP_RETURN, return the data
	 * @returns {Buffer}
	 */
	Script.prototype.getData = function() {
	  if (this.isDataOut() || this.isScriptHashOut()) {
	    return new Buffer(this.chunks[1].buf);
	  }
	  if (this.isPublicKeyHashOut()) {
	    return new Buffer(this.chunks[2].buf);
	  }
	  throw new Error('Unrecognized script type to get data from');
	};

	/**
	 * @returns {boolean} if the script is only composed of data pushing
	 * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)
	 */
	Script.prototype.isPushOnly = function() {
	  return _.every(this.chunks, function(chunk) {
	    return chunk.opcodenum <= Opcode.OP_16;
	  });
	};


	Script.types = {};
	Script.types.UNKNOWN = 'Unknown';
	Script.types.PUBKEY_OUT = 'Pay to public key';
	Script.types.PUBKEY_IN = 'Spend from public key';
	Script.types.PUBKEYHASH_OUT = 'Pay to public key hash';
	Script.types.PUBKEYHASH_IN = 'Spend from public key hash';
	Script.types.SCRIPTHASH_OUT = 'Pay to script hash';
	Script.types.SCRIPTHASH_IN = 'Spend from script hash';
	Script.types.MULTISIG_OUT = 'Pay to multisig';
	Script.types.MULTISIG_IN = 'Spend from multisig';
	Script.types.DATA_OUT = 'Data push';

	Script.OP_RETURN_STANDARD_SIZE = 80;

	Script.identifiers = {};
	Script.identifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;
	Script.identifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;
	Script.identifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;
	Script.identifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;
	Script.identifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;
	Script.identifiers.MULTISIG_IN = Script.prototype.isMultisigIn;
	Script.identifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;
	Script.identifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;
	Script.identifiers.DATA_OUT = Script.prototype.isDataOut;

	/**
	 * @returns {object} The Script type if it is a known form,
	 * or Script.UNKNOWN if it isn't
	 */
	Script.prototype.classify = function() {
	  for (var type in Script.identifiers) {
	    if (Script.identifiers[type].bind(this)()) {
	      return Script.types[type];
	    }
	  }
	  return Script.types.UNKNOWN;
	};


	/**
	 * @returns {boolean} if script is one of the known types
	 */
	Script.prototype.isStandard = function() {
	  // TODO: Add BIP62 compliance
	  return this.classify() !== Script.types.UNKNOWN;
	};


	// Script construction methods

	/**
	 * Adds a script element at the start of the script.
	 * @param {*} obj a string, number, Opcode, Bufer, or object to add
	 * @returns {Script} this script instance
	 */
	Script.prototype.prepend = function(obj) {
	  this._addByType(obj, true);
	  return this;
	};

	/**
	 * Compares a script with another script
	 */
	Script.prototype.equals = function(script) {
	  $.checkState(script instanceof Script, 'Must provide another script');
	  if (this.chunks.length !== script.chunks.length) {
	    return false;
	  }
	  var i;
	  for (i = 0; i < this.chunks.length; i++) {
	    if (BufferUtil.isBuffer(this.chunks[i]) && !BufferUtil.isBuffer(script.chunks[i])) {
	      return false;
	    } else if (this.chunks[i] instanceof Opcode && !(script.chunks[i] instanceof Opcode)) {
	      return false;
	    }
	    if (BufferUtil.isBuffer(this.chunks[i]) && !BufferUtil.equals(this.chunks[i], script.chunks[i])) {
	      return false;
	    } else if (this.chunks[i].num !== script.chunks[i].num) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Adds a script element to the end of the script.
	 *
	 * @param {*} obj a string, number, Opcode, Bufer, or object to add
	 * @returns {Script} this script instance
	 *
	 */
	Script.prototype.add = function(obj) {
	  this._addByType(obj, false);
	  return this;
	};

	Script.prototype._addByType = function(obj, prepend) {
	  if (typeof obj === 'string') {
	    this._addOpcode(obj, prepend);
	  } else if (typeof obj === 'number') {
	    this._addOpcode(obj, prepend);
	  } else if (obj instanceof Opcode) {
	    this._addOpcode(obj, prepend);
	  } else if (BufferUtil.isBuffer(obj)) {
	    this._addBuffer(obj, prepend);
	  } else if (typeof obj === 'object') {
	    this._insertAtPosition(obj, prepend);
	  } else if (obj instanceof Script) {
	    this.chunks = this.chunks.concat(obj.chunks);
	  } else {
	    throw new Error('Invalid script chunk');
	  }
	};

	Script.prototype._insertAtPosition = function(op, prepend) {
	  if (prepend) {
	    this.chunks.unshift(op);
	  } else {
	    this.chunks.push(op);
	  }
	};

	Script.prototype._addOpcode = function(opcode, prepend) {
	  var op;
	  if (typeof opcode === 'number') {
	    op = opcode;
	  } else if (opcode instanceof Opcode) {
	    op = opcode.toNumber();
	  } else {
	    op = Opcode(opcode).toNumber();
	  }
	  this._insertAtPosition({
	    opcodenum: op
	  }, prepend);
	  return this;
	};

	Script.prototype._addBuffer = function(buf, prepend) {
	  var opcodenum;
	  var len = buf.length;
	  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {
	    opcodenum = len;
	  } else if (len < Math.pow(2, 8)) {
	    opcodenum = Opcode.OP_PUSHDATA1;
	  } else if (len < Math.pow(2, 16)) {
	    opcodenum = Opcode.OP_PUSHDATA2;
	  } else if (len < Math.pow(2, 32)) {
	    opcodenum = Opcode.OP_PUSHDATA4;
	  } else {
	    throw new Error('You can\'t push that much data');
	  }
	  this._insertAtPosition({
	    buf: buf,
	    len: len,
	    opcodenum: opcodenum
	  }, prepend);
	  return this;
	};

	Script.prototype.removeCodeseparators = function() {
	  var chunks = [];
	  for (var i = 0; i < this.chunks.length; i++) {
	    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {
	      chunks.push(this.chunks[i]);
	    }
	  }
	  this.chunks = chunks;
	  return this;
	};

	// high level script builder methods

	/**
	 * @returns {Script} a new Multisig output script for given public keys,
	 * requiring m of those public keys to spend
	 * @param {PublicKey[]} publicKeys - list of all public keys controlling the output
	 * @param {number} threshold - amount of required signatures to spend the output
	 * @param {Object} [opts] - Several options:
	 *        - noSorting: defaults to false, if true, don't sort the given
	 *                      public keys before creating the script
	 */
	Script.buildMultisigOut = function(publicKeys, threshold, opts) {
	  $.checkArgument(threshold <= publicKeys.length,
	                  'Number of required signatures must be less than or equal to the number of public keys');
	  opts = opts || {};
	  var script = new Script();
	  script.add(Opcode.smallInt(threshold));
	  publicKeys = _.map(publicKeys, PublicKey);
	  var sorted = publicKeys;
	  if (!opts.noSorting) {
	    sorted = _.sortBy(publicKeys, function(publicKey) {
	      return publicKey.toString('hex');
	    });
	  }
	  for (var i = 0; i < sorted.length; i++) {
	    var publicKey = sorted[i];
	    script.add(publicKey.toBuffer());
	  }
	  script.add(Opcode.smallInt(publicKeys.length));
	  script.add(Opcode.OP_CHECKMULTISIG);
	  return script;
	};

	/**
	 * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend
	 *
	 * @param {PublicKey[]} pubkeys list of all public keys controlling the output
	 * @param {number} threshold amount of required signatures to spend the output
	 * @param {Array} signatures signatures to append to the script
	 * @param {Object=} opts
	 * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)
	 * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript
	 *
	 * @returns {Script}
	 */
	Script.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {
	  $.checkArgument(_.isArray(pubkeys));
	  $.checkArgument(_.isNumber(threshold));
	  $.checkArgument(_.isArray(signatures));
	  opts = opts || {};
	  var s = new Script();
	  s.add(Opcode.OP_0);
	  _.each(signatures, function(signature) {
	    s.add(signature);
	  });
	  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());
	  return s;
	};

	/**
	 * @returns {Script} a new pay to public key hash output for the given
	 * address or public key
	 * @param {(Address|PublicKey)} to - destination address or public key
	 */
	Script.buildPublicKeyHashOut = function(to) {
	  $.checkArgument(!_.isUndefined(to));
	  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));
	  if (to instanceof PublicKey) {
	    to = to.toAddress();
	  } else if (_.isString(to)) {
	    to = new Address(to);
	  }
	  var s = new Script();
	  s.add(Opcode.OP_DUP)
	    .add(Opcode.OP_HASH160)
	    .add(to.hashBuffer)
	    .add(Opcode.OP_EQUALVERIFY)
	    .add(Opcode.OP_CHECKSIG);
	  s._network = to.network;
	  return s;
	};

	/**
	 * @returns {Script} a new pay to public key output for the given
	 *  public key
	 */
	Script.buildPublicKeyOut = function(pubkey) {
	  $.checkArgument(pubkey instanceof PublicKey);
	  var s = new Script();
	  s.add(pubkey.toBuffer())
	    .add(Opcode.OP_CHECKSIG);
	  return s;
	};

	/**
	 * @returns {Script} a new OP_RETURN script with data
	 * @param {(string|Buffer)} to - the data to embed in the output
	 */
	Script.buildDataOut = function(data) {
	  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));
	  if (typeof data === 'string') {
	    data = new Buffer(data);
	  }
	  var s = new Script();
	  s.add(Opcode.OP_RETURN);
	  if (!_.isUndefined(data)) {
	    s.add(data);
	  }
	  return s;
	};

	/**
	 * @param {Script|Address} script - the redeemScript for the new p2sh output.
	 *    It can also be a p2sh address
	 * @returns {Script} new pay to script hash script for given script
	 */
	Script.buildScriptHashOut = function(script) {
	  $.checkArgument(script instanceof Script ||
	    (script instanceof Address && script.isPayToScriptHash()));
	  var s = new Script();
	  s.add(Opcode.OP_HASH160)
	    .add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer()))
	    .add(Opcode.OP_EQUAL);

	  s._network =  script._network || script.network;
	  return s;
	};

	/**
	 * Builds a scriptSig (a script for an input) that signs a public key hash
	 * output script.
	 *
	 * @param {Buffer|string|PublicKey} publicKey
	 * @param {Signature|Buffer} signature - a Signature object, or the signature in DER cannonical encoding
	 * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)
	 */
	Script.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {
	  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));
	  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));
	  if (signature instanceof Signature) {
	    signature = signature.toBuffer();
	  }
	  var script = new Script()
	    .add(BufferUtil.concat([
	      signature,
	      BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)
	    ]))
	    .add(new PublicKey(publicKey).toBuffer());
	  return script;
	};

	/**
	 * @returns {Script} an empty script
	 */
	Script.empty = function() {
	  return new Script();
	};

	/**
	 * @returns {Script} a new pay to script hash script that pays to this script
	 */
	Script.prototype.toScriptHashOut = function() {
	  return Script.buildScriptHashOut(this);
	};

	/**
	 * @return {Script} a script built from the address
	 */
	Script.fromAddress = function(address) {
	  address = Address(address);
	  if (address.isPayToScriptHash()) {
	    return Script.buildScriptHashOut(address);
	  } else if (address.isPayToPublicKeyHash()) {
	    return Script.buildPublicKeyHashOut(address);
	  }
	  throw new errors.Script.UnrecognizedAddress(address);
	};

	/**
	 * @param {Network} [network]
	 * @return {Address} the associated address for this script
	 */
	Script.prototype.toAddress = function(network) {
	  network = Networks.get(network) || this._network || Networks.defaultNetwork;
	  if (this.isPublicKeyHashOut() || this.isScriptHashOut()) {
	    return new Address(this, network);
	  }
	  throw new Error('The script type needs to be PayToPublicKeyHash or PayToScriptHash');
	};

	/**
	 * @return {Script}
	 */
	Script.prototype.toScriptHashOut = function() {
	  return Script.buildScriptHashOut(this);
	};

	/**
	 * Analagous to bitcoind's FindAndDelete. Find and delete equivalent chunks,
	 * typically used with push data chunks.  Note that this will find and delete
	 * not just the same data, but the same data with the same push data op as
	 * produced by default. i.e., if a pushdata in a tx does not use the minimal
	 * pushdata op, then when you try to remove the data it is pushing, it will not
	 * be removed, because they do not use the same pushdata op.
	 */
	Script.prototype.findAndDelete = function(script) {
	  var buf = script.toBuffer();
	  var hex = buf.toString('hex');
	  for (var i = 0; i < this.chunks.length; i++) {
	    var script2 = Script({
	      chunks: [this.chunks[i]]
	    });
	    var buf2 = script2.toBuffer();
	    var hex2 = buf2.toString('hex');
	    if (hex === hex2) {
	      this.chunks.splice(i, 1);
	    }
	  }
	  return this;
	};

	/**
	 * Comes from bitcoind's script interpreter CheckMinimalPush function
	 * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.
	 */
	Script.prototype.checkMinimalPush = function(i) {
	  var chunk = this.chunks[i];
	  var buf = chunk.buf;
	  var opcodenum = chunk.opcodenum;
	  if (!buf) {
	    return true;
	  }
	  if (buf.length === 0) {
	    // Could have used OP_0.
	    return opcodenum === Opcode.OP_0;
	  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {
	    // Could have used OP_1 .. OP_16.
	    return opcodenum === Opcode.OP_1 + (buf[0] - 1);
	  } else if (buf.length === 1 && buf[0] === 0x81) {
	    // Could have used OP_1NEGATE
	    return opcodenum === Opcode.OP_1NEGATE;
	  } else if (buf.length <= 75) {
	    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).
	    return opcodenum === buf.length;
	  } else if (buf.length <= 255) {
	    // Could have used OP_PUSHDATA.
	    return opcodenum === Opcode.OP_PUSHDATA1;
	  } else if (buf.length <= 65535) {
	    // Could have used OP_PUSHDATA2.
	    return opcodenum === Opcode.OP_PUSHDATA2;
	  }
	  return true;
	};

	module.exports = Script;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var buffer = __webpack_require__(1);

	var errors = __webpack_require__(30);
	var BufferUtil = __webpack_require__(6);
	var JSUtil = __webpack_require__(10);
	var BufferReader = __webpack_require__(39);
	var BufferWriter = __webpack_require__(29);
	var Hash = __webpack_require__(14);
	var Signature = __webpack_require__(28);
	var Sighash = __webpack_require__(56);

	var Address = __webpack_require__(38);
	var UnspentOutput = __webpack_require__(127);
	var Input = __webpack_require__(83);
	var PublicKeyHashInput = Input.PublicKeyHash;
	var MultiSigScriptHashInput = Input.MultiSigScriptHash;
	var Output = __webpack_require__(48);
	var Script = __webpack_require__(19);
	var PrivateKey = __webpack_require__(66);
	var Block = __webpack_require__(120);
	var BN = __webpack_require__(12);

	var CURRENT_VERSION = 1;
	var DEFAULT_NLOCKTIME = 0;
	var DEFAULT_SEQNUMBER = 0xFFFFFFFF;

	/**
	 * Represents a transaction, a set of inputs and outputs to change ownership of tokens
	 *
	 * @param {*} serialized
	 * @constructor
	 */
	function Transaction(serialized) {
	  if (!(this instanceof Transaction)) {
	    return new Transaction(serialized);
	  }
	  this.inputs = [];
	  this.outputs = [];
	  this._inputAmount = 0;
	  this._outputAmount = 0;

	  if (serialized) {
	    if (serialized instanceof Transaction) {
	      return Transaction.shallowCopy(serialized);
	    } else if (JSUtil.isHexa(serialized)) {
	      this.fromString(serialized);
	    } else if (JSUtil.isValidJSON(serialized)) {
	      this.fromJSON(serialized);
	    } else if (BufferUtil.isBuffer(serialized)) {
	      this.fromBuffer(serialized);
	    } else if (_.isObject(serialized)) {
	      this.fromObject(serialized);
	    } else {
	      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');
	    }
	  } else {
	    this._newTransaction();
	  }
	}

	// max amount of satoshis in circulation
	Transaction.MAX_MONEY = 21000000 * 1e8;

	// nlocktime limit to be considered block height rather than a timestamp
	Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;

	// Max value for an unsigned 32 bit value 
	Transaction.NLOCKTIME_MAX_VALUE = 4294967295;

	/* Constructors and Serialization */

	/**
	 * Create a 'shallow' copy of the transaction, by serializing and deserializing
	 * it dropping any additional information that inputs and outputs may have hold
	 *
	 * @param {Transaction} transaction
	 * @return {Transaction}
	 */
	Transaction.shallowCopy = function(transaction) {
	  var copy = new Transaction(transaction.toBuffer());
	  return copy;
	};

	var hashProperty = {
	  configurable: false,
	  writeable: false,
	  enumerable: true,
	  get: function() {
	    return new BufferReader(this._getHash()).readReverse().toString('hex');
	  }
	};
	Object.defineProperty(Transaction.prototype, 'hash', hashProperty);
	Object.defineProperty(Transaction.prototype, 'id', hashProperty);

	/**
	 * Retrieve the little endian hash of the transaction (used for serialization)
	 * @return {Buffer}
	 */
	Transaction.prototype._getHash = function() {
	  return Hash.sha256sha256(this.toBuffer());
	};

	/**
	 * Retrieve a hexa string that can be used with bitcoind's CLI interface
	 * (decoderawtransaction, sendrawtransaction)
	 *
	 * @param {boolean=} unsafe if true, skip testing for fees that are too high
	 * @return {string}
	 */
	Transaction.prototype.serialize = function(unsafe) {
	  if (unsafe) {
	    return this.uncheckedSerialize();
	  } else {
	    return this.checkedSerialize();
	  }
	};

	Transaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {
	  return this.toBuffer().toString('hex');
	};

	Transaction.prototype.checkedSerialize = function() {
	  var feeError = this._validateFees();
	  var missingChange = this._missingChange();
	  if (feeError && missingChange) {
	    throw new errors.Transaction.ChangeAddressMissing();
	  }
	  if (feeError && !missingChange) {
	    throw new errors.Transaction.FeeError(feeError);
	  }
	  if (this._hasDustOutputs()) {
	    throw new errors.Transaction.DustOutputs();
	  }
	  return this.uncheckedSerialize();
	};

	Transaction.FEE_SECURITY_MARGIN = 15;

	Transaction.prototype._validateFees = function() {
	  if (this._getUnspentValue() > Transaction.FEE_SECURITY_MARGIN * this._estimateFee()) {
	    return 'Fee is more than ' + Transaction.FEE_SECURITY_MARGIN + ' times the suggested amount';
	  }
	  if (this._getUnspentValue() < this._estimateFee() / Transaction.FEE_SECURITY_MARGIN) {
	    return 'Fee is less than ' + Transaction.FEE_SECURITY_MARGIN + ' times the suggested amount';
	  }
	};

	Transaction.prototype._missingChange = function() {
	  return !this._changeScript;
	};

	Transaction.DUST_AMOUNT = 5460;

	Transaction.prototype._hasDustOutputs = function() {
	  var index, output;
	  for (index in this.outputs) {
	    output = this.outputs[index];
	    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {
	      return true;
	    }
	  }
	  return false;
	};

	Transaction.prototype.inspect = function() {
	  return '<Transaction: ' + this.uncheckedSerialize() + '>';
	};

	Transaction.prototype.toBuffer = function() {
	  var writer = new BufferWriter();
	  return this.toBufferWriter(writer).toBuffer();
	};

	Transaction.prototype.toBufferWriter = function(writer) {
	  writer.writeUInt32LE(this.version);
	  writer.writeVarintNum(this.inputs.length);
	  _.each(this.inputs, function(input) {
	    input.toBufferWriter(writer);
	  });
	  writer.writeVarintNum(this.outputs.length);
	  _.each(this.outputs, function(output) {
	    output.toBufferWriter(writer);
	  });
	  writer.writeUInt32LE(this.nLockTime);
	  return writer;
	};

	Transaction.prototype.fromBuffer = function(buffer) {
	  var reader = new BufferReader(buffer);
	  return this.fromBufferReader(reader);
	};

	Transaction.prototype.fromBufferReader = function(reader) {
	  $.checkArgument(!reader.finished(), 'No transaction data received');
	  var i, sizeTxIns, sizeTxOuts;

	  this.version = reader.readUInt32LE();
	  sizeTxIns = reader.readVarintNum();
	  for (i = 0; i < sizeTxIns; i++) {
	    var input = Input.fromBufferReader(reader);
	    this.inputs.push(input);
	  }
	  sizeTxOuts = reader.readVarintNum();
	  for (i = 0; i < sizeTxOuts; i++) {
	    this.outputs.push(Output.fromBufferReader(reader));
	  }
	  this.nLockTime = reader.readUInt32LE();
	  return this;
	};

	Transaction.prototype.fromJSON = function(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  return this.fromObject(json);
	};

	Transaction.prototype.toObject = function toObject() {
	  var inputs = [];
	  this.inputs.forEach(function(input) {
	    inputs.push(input.toObject());
	  });
	  var outputs = [];
	  this.outputs.forEach(function(output) {
	    outputs.push(output.toObject());
	  });
	  var obj = {
	    version: this.version,
	    inputs: inputs,
	    outputs: outputs,
	    nLockTime: this.nLockTime
	  };
	  if (this._changeScript) {
	    obj.changeScript = this._changeScript.toString();
	  }
	  if (!_.isUndefined(this._changeIndex)) {
	    obj.changeIndex = this._changeIndex;
	  }
	  if (!_.isUndefined(this._fee)) {
	    obj.fee = this._fee;
	  }
	  return obj;
	};

	Transaction.prototype.fromObject = function(transaction) {
	  var self = this;
	  _.each(transaction.inputs, function(input) {
	    if (!input.output || !input.output.script) {
	      self.uncheckedAddInput(new Input(input));
	      return;
	    }
	    input.output.script = new Script(input.output.script);
	    var txin;
	    if (input.output.script.isPublicKeyHashOut()) {
	      txin = new Input.PublicKeyHash(input);
	    } else if (input.output.script.isScriptHashOut() && input.publicKeys && input.threshold) {
	      txin = new Input.MultiSigScriptHash(
	        input, input.publicKeys, input.threshold, input.signatures
	      );
	    } else {
	      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);
	    }
	    self.addInput(txin);
	  });
	  _.each(transaction.outputs, function(output) {
	    self.addOutput(new Output(output));
	  });
	  if (transaction.changeIndex) {
	    this._changeIndex = transaction.changeIndex;
	  }
	  if (transaction.changeScript) {
	    this._changeScript = new Script(transaction.changeScript);
	  }
	  if (transaction.fee) {
	    this.fee(transaction.fee);
	  }
	  this.nLockTime = transaction.nLockTime;
	  this.version = transaction.version;
	  this._checkConsistency();
	  return this;
	};

	Transaction.prototype._checkConsistency = function() {
	  if (!_.isUndefined(this._changeIndex)) {
	    $.checkState(this._changeScript);
	    $.checkState(this.outputs[this._changeIndex]);
	    $.checkState(this.outputs[this._changeIndex].script.toString() ===
	      this._changeScript.toString());
	  }
	  // TODO: add other checks
	};

	/**
	 * Sets nLockTime so that transaction is not valid until the desired date(a
	 * timestamp in seconds since UNIX epoch is also accepted)
	 *
	 * @param {Date | Number} time
	 * @return {Transaction} this
	 */
	Transaction.prototype.lockUntilDate = function(time) {
	  $.checkArgument(time);
	  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {
	    throw new errors.Transaction.LockTimeTooEarly();
	  }
	  if (_.isDate(time)) {
	    time = time.getTime() / 1000;
	  }
	  this.nLockTime = time;
	  return this;
	};

	/**
	 * Sets nLockTime so that transaction is not valid until the desired block
	 * height.
	 *
	 * @param {Number} height
	 * @return {Transaction} this
	 */
	Transaction.prototype.lockUntilBlockHeight = function(height) {
	  $.checkArgument(_.isNumber(height));
	  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {
	    throw new errors.Transaction.BlockHeightTooHigh();
	  }
	  if (height < 0) {
	    throw new errors.Transaction.NLockTimeOutOfRange();
	  }
	  this.nLockTime = height;
	  return this;
	};

	/**
	 *  Returns a semantic version of the transaction's nLockTime.
	 *  @return {Number|Date}
	 *  If nLockTime is 0, it returns null,
	 *  if it is < 500000000, it returns a block height (number)
	 *  else it returns a Date object.
	 */
	Transaction.prototype.getLockTime = function() {
	  if (!this.nLockTime) {
	    return null;
	  }
	  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {
	    return this.nLockTime;
	  }
	  return new Date(1000 * this.nLockTime);
	};

	Transaction.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	Transaction.prototype.fromString = function(string) {
	  this.fromBuffer(new buffer.Buffer(string, 'hex'));
	};

	Transaction.prototype._newTransaction = function() {
	  this.version = CURRENT_VERSION;
	  this.nLockTime = DEFAULT_NLOCKTIME;
	};

	/* Transaction creation interface */

	/**
	 * Add an input to this transaction. This is a high level interface
	 * to add an input, for more control, use @{link Transaction#addInput}.
	 *
	 * Can receive, as output information, the output of bitcoind's `listunspent` command,
	 * and a slightly fancier format recognized by bitcore:
	 *
	 * ```
	 * {
	 *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',
	 *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',
	 *  outputIndex: 0,
	 *  script: Script.empty(),
	 *  satoshis: 1020000
	 * }
	 * ```
	 * Where `address` can be either a string or a bitcore Address object. The
	 * same is true for `script`, which can be a string or a bitcore Script.
	 *
	 * Beware that this resets all the signatures for inputs (in further versions,
	 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
	 *
	 * @example
	 * ```javascript
	 * var transaction = new Transaction();
	 *
	 * // From a pay to public key hash output from bitcoind's listunspent
	 * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});
	 *
	 * // From a pay to public key hash output
	 * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});
	 *
	 * // From a multisig P2SH output
	 * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},
	 *                  ['03000...', '02000...'], 2);
	 * ```
	 *
	 * @param {Object} utxo
	 * @param {Array=} pubkeys
	 * @param {number=} threshold
	 */
	Transaction.prototype.from = function(utxo, pubkeys, threshold) {
	  if (_.isArray(utxo)) {
	    var self = this;
	    _.each(utxo, function(utxo) {
	      self.from(utxo, pubkeys, threshold);
	    });
	    return this;
	  }
	  var exists = _.any(this.inputs, function(input) {
	    // TODO: Maybe prevTxId should be a string? Or defined as read only property?
	    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;
	  });
	  if (exists) {
	    return;
	  }
	  if (pubkeys && threshold) {
	    this._fromMultisigUtxo(utxo, pubkeys, threshold);
	  } else {
	    this._fromNonP2SH(utxo);
	  }
	  return this;
	};

	Transaction.prototype._fromNonP2SH = function(utxo) {
	  var clazz;
	  utxo = new UnspentOutput(utxo);
	  if (utxo.script.isPublicKeyHashOut()) {
	    clazz = PublicKeyHashInput;
	  } else {
	    clazz = Input;
	  }
	  this.addInput(new clazz({
	    output: new Output({
	      script: utxo.script,
	      satoshis: utxo.satoshis
	    }),
	    prevTxId: utxo.txId,
	    outputIndex: utxo.outputIndex,
	    sequenceNumber: DEFAULT_SEQNUMBER,
	    script: Script.empty()
	  }));
	};

	Transaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold) {
	  $.checkArgument(threshold <= pubkeys.length,
	                  'Number of required signatures must be greater than the number of public keys');
	  utxo = new UnspentOutput(utxo);
	  this.addInput(new MultiSigScriptHashInput({
	    output: new Output({
	      script: utxo.script,
	      satoshis: utxo.satoshis
	    }),
	    prevTxId: utxo.txId,
	    outputIndex: utxo.outputIndex,
	    sequenceNumber: DEFAULT_SEQNUMBER,
	    script: Script.empty()
	  }, pubkeys, threshold));
	};

	/**
	 * Add an input to this transaction. The input must be an instance of the `Input` class.
	 * It should have information about the Output that it's spending, but if it's not already
	 * set, two additional parameters, `outputScript` and `satoshis` can be provided.
	 *
	 * @param {Input} input
	 * @param {String|Script} outputScript
	 * @param {number} satoshis
	 * @return Transaction this, for chaining
	 */
	Transaction.prototype.addInput = function(input, outputScript, satoshis) {
	  $.checkArgumentType(input, Input, 'input');
	  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {
	    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');
	  }
	  if (!input.output && outputScript && !_.isUndefined(satoshis)) {
	    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);
	    $.checkArgumentType(satoshis, 'number', 'satoshis');
	    input.output = new Output({
	      script: outputScript,
	      satoshis: satoshis
	    });
	  }
	  return this.uncheckedAddInput(input);
	};

	/**
	 * Add an input to this transaction, without checking that the input has information about
	 * the output that it's spending.
	 *
	 * @param {Input} input
	 * @return Transaction this, for chaining
	 */
	Transaction.prototype.uncheckedAddInput = function(input) {
	  $.checkArgumentType(input, Input, 'input');
	  this.inputs.push(input);
	  if (input.output) {
	    this._inputAmount += input.output.satoshis;
	  }
	  this._updateChangeOutput();
	  return this;
	};

	/**
	 * Returns true if the transaction has enough info on all inputs to be correctly validated
	 *
	 * @return {boolean}
	 */
	Transaction.prototype.hasAllUtxoInfo = function() {
	  return _.all(this.inputs.map(function(input) {
	    return !!input.output;
	  }));
	};

	/**
	 * Manually set the fee for this transaction. Beware that this resets all the signatures
	 * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not
	 * be reset).
	 *
	 * @param {number} amount satoshis to be sent
	 * @return {Transaction} this, for chaining
	 */
	Transaction.prototype.fee = function(amount) {
	  this._fee = amount;
	  this._updateChangeOutput();
	  return this;
	};

	/* Output management */

	/**
	 * Set the change address for this transaction
	 *
	 * Beware that this resets all the signatures for inputs (in further versions,
	 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
	 *
	 * @param {address} An address for change to be sent to.
	 * @return {Transaction} this, for chaining
	 */
	Transaction.prototype.change = function(address) {
	  this._changeScript = Script.fromAddress(address);
	  this._updateChangeOutput();
	  return this;
	};


	/**
	 * @return {Output} change output, if it exists
	 */
	Transaction.prototype.getChangeOutput = function() {
	  if (!_.isUndefined(this._changeIndex)) {
	    return this.outputs[this._changeIndex];
	  }
	  return null;
	};

	/**
	 * Add an output to the transaction.
	 *
	 * Beware that this resets all the signatures for inputs (in further versions,
	 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
	 *
	 * @param {string|Address} address
	 * @param {number} amount in satoshis
	 * @return {Transaction} this, for chaining
	 */
	Transaction.prototype.to = function(address, amount) {
	  this.addOutput(new Output({
	    script: Script(new Address(address)),
	    satoshis: amount
	  }));
	  return this;
	};

	/**
	 * Add an OP_RETURN output to the transaction.
	 *
	 * Beware that this resets all the signatures for inputs (in further versions,
	 * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).
	 *
	 * @param {Buffer|string} value the data to be stored in the OP_RETURN output.
	 *    In case of a string, the UTF-8 representation will be stored
	 * @return {Transaction} this, for chaining
	 */
	Transaction.prototype.addData = function(value) {
	  this.addOutput(new Output({
	    script: Script.buildDataOut(value),
	    satoshis: 0
	  }));
	  return this;
	};

	Transaction.prototype.addOutput = function(output) {
	  $.checkArgumentType(output, Output, 'output');
	  this._addOutput(output);
	  this._updateChangeOutput();
	};

	Transaction.prototype._addOutput = function(output) {
	  this.outputs.push(output);
	  this._outputAmount += output.satoshis;
	};

	Transaction.prototype._updateChangeOutput = function() {
	  if (!this._changeScript) {
	    return;
	  }
	  this._clearSignatures();
	  if (!_.isUndefined(this._changeIndex)) {
	    this._removeOutput(this._changeIndex);
	  }
	  var available = this._getUnspentValue();
	  var fee = this.getFee();
	  var changeAmount = available - fee;
	  if (changeAmount > 0) {
	    this._changeIndex = this.outputs.length;
	    this._addOutput(new Output({
	      script: this._changeScript,
	      satoshis: changeAmount
	    }));
	  } else {
	    this._changeIndex = undefined;
	  }
	};
	/**
	 * Calculates the fees for the transaction.
	 *
	 * If there is no change output set, the fee will be the
	 * output amount minus the input amount.
	 * If there's a fixed fee set, return that
	 * If there's no fee set, estimate it based on size
	 * @return {Number} miner fee for this transaction in satoshis
	 */
	Transaction.prototype.getFee = function() {
	  // if no change output is set, fees should equal all the unspent amount
	  if (!this._changeScript) {
	    return this._getUnspentValue();
	  }
	  return _.isUndefined(this._fee) ? this._estimateFee() : this._fee;
	};

	/**
	 * Estimates fee from serialized transaction size in bytes.
	 */
	Transaction.prototype._estimateFee = function() {
	  var estimatedSize = this._estimateSize();
	  var available = this._getUnspentValue();
	  return Transaction._estimateFee(estimatedSize, available);
	};

	Transaction.prototype._getUnspentValue = function() {
	  return this._inputAmount - this._outputAmount;
	};

	Transaction.prototype._clearSignatures = function() {
	  _.each(this.inputs, function(input) {
	    input.clearSignatures();
	  });
	};

	Transaction.FEE_PER_KB = 10000;
	// Safe upper bound for change address script
	Transaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;

	Transaction._estimateFee = function(size, amountAvailable) {
	  var fee = Math.ceil(size / Transaction.FEE_PER_KB);
	  if (amountAvailable > fee) {
	    size += Transaction.CHANGE_OUTPUT_MAX_SIZE;
	  }
	  return Math.ceil(size / 1000) * Transaction.FEE_PER_KB;
	};

	Transaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;

	Transaction.prototype._estimateSize = function() {
	  var result = Transaction.MAXIMUM_EXTRA_SIZE;
	  _.each(this.inputs, function(input) {
	    result += input._estimateSize();
	  });
	  _.each(this.outputs, function(output) {
	    result += output.script.toBuffer().length + 9;
	  });
	  return result;
	};

	Transaction.prototype._removeOutput = function(index) {
	  var output = this.outputs[index];
	  this._outputAmount -= output.satoshis;
	  this.outputs = _.without(this.outputs, output);
	};

	Transaction.prototype.removeOutput = function(index) {
	  this._removeOutput(index);
	  this._updateChangeOutput();
	};

	Transaction.prototype.removeInput = function(txId, outputIndex) {
	  var index;
	  if (!outputIndex && _.isNumber(txId)) {
	    index = txId;
	  } else {
	    index = _.findIndex(this.inputs, function(input) {
	      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;
	    });
	  }
	  if (index < 0 || index >= this.inputs.length) {
	    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);
	  }
	  var input = this.inputs[index];
	  this._inputAmount -= input.output.satoshis;
	  this.inputs = _.without(this.inputs, input);
	  this._updateChangeOutput();
	};

	/* Signature handling */

	/**
	 * Sign the transaction using one or more private keys.
	 *
	 * It tries to sign each input, verifying that the signature will be valid
	 * (matches a public key).
	 *
	 * @param {Array|String|PrivateKey} privateKey
	 * @param {number} sigtype
	 * @return {Transaction} this, for chaining
	 */
	Transaction.prototype.sign = function(privateKey, sigtype) {
	  $.checkState(this.hasAllUtxoInfo());
	  var self = this;
	  if (_.isArray(privateKey)) {
	    _.each(privateKey, function(privateKey) {
	      self.sign(privateKey, sigtype);
	    });
	    return this;
	  }
	  _.each(this.getSignatures(privateKey, sigtype), function(signature) {
	    self.applySignature(signature);
	  });
	  return this;
	};

	Transaction.prototype.getSignatures = function(privKey, sigtype) {
	  privKey = new PrivateKey(privKey);
	  sigtype = sigtype || Signature.SIGHASH_ALL;
	  var transaction = this;
	  var results = [];
	  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());
	  _.each(this.inputs, function forEachInput(input, index) {
	    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData), function(signature) {
	      results.push(signature);
	    });
	  });
	  return results;
	};

	/**
	 * Add a signature to the transaction
	 *
	 * @param {Object} signature
	 * @param {number} signature.inputIndex
	 * @param {number} signature.sigtype
	 * @param {PublicKey} signature.publicKey
	 * @param {Signature} signature.signature
	 * @return {Transaction} this, for chaining
	 */
	Transaction.prototype.applySignature = function(signature) {
	  this.inputs[signature.inputIndex].addSignature(this, signature);
	  return this;
	};

	Transaction.prototype.isFullySigned = function() {
	  _.each(this.inputs, function(input) {
	    if (input.isFullySigned === Input.prototype.isFullySigned) {
	      throw new errors.Transaction.UnableToVerifySignature(
	        'Unrecognized script kind, or not enough information to execute script.' +
	        'This usually happens when creating a transaction from a serialized transaction'
	      );
	    }
	  });
	  return _.all(_.map(this.inputs, function(input) {
	    return input.isFullySigned();
	  }));
	};

	Transaction.prototype.isValidSignature = function(signature) {
	  var self = this;
	  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {
	    throw new errors.Transaction.UnableToVerifySignature(
	      'Unrecognized script kind, or not enough information to execute script.' +
	      'This usually happens when creating a transaction from a serialized transaction'
	    );
	  }
	  return this.inputs[signature.inputIndex].isValidSignature(self, signature);
	};

	/**
	 * @returns {bool} whether the signature is valid for this transaction input
	 */
	Transaction.prototype.verifySignature = function(sig, pubkey, nin, subscript) {
	  return Sighash.verify(this, sig, pubkey, nin, subscript);
	};

	/**
	 * Check that a transaction passes basic sanity tests. If not, return a string
	 * describing the error. This function contains the same logic as
	 * CheckTransaction in bitcoin core.
	 */
	Transaction.prototype.verify = function() {
	  // Basic checks that don't depend on any context
	  if (this.inputs.length === 0) {
	    return 'transaction txins empty';
	  }

	  if (this.outputs.length === 0) {
	    return 'transaction txouts empty';
	  }

	  // Size limits
	  if (this.toBuffer().length > Block.MAX_BLOCK_SIZE) {
	    return 'transaction over the maximum block size';
	  }

	  // Check for negative or overflow output values
	  var valueoutbn = new BN(0);
	  for (var i = 0; i < this.outputs.length; i++) {
	    var txout = this.outputs[i];
	    var valuebn = txout._satoshisBN;
	    if (valuebn.lt(BN.Zero)) {
	      return 'transaction txout ' + i + ' negative';
	    }
	    if (valuebn.gt(new BN(Transaction.MAX_MONEY, 10))) {
	      return 'transaction txout ' + i + ' greater than MAX_MONEY';
	    }
	    valueoutbn = valueoutbn.add(valuebn);
	    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {
	      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';
	    }
	  }

	  // Check for duplicate inputs
	  var txinmap = {};
	  for (i = 0; i < this.inputs.length; i++) {
	    var txin = this.inputs[i];

	    var inputid = txin.prevTxId + ':' + txin.outputIndex;
	    if (!_.isUndefined(txinmap[inputid])) {
	      return 'transaction input ' + i + ' duplicate input';
	    }
	    txinmap[inputid] = true;
	  }

	  var isCoinbase = this.isCoinbase();
	  if (isCoinbase) {
	    var buf = this.inputs[0]._script.toBuffer();
	    if (buf.length < 2 || buf.length > 100) {
	      return 'coinbase trasaction script size invalid';
	    }
	  } else {
	    for (i = 0; i < this.inputs.length; i++) {
	      if (this.inputs[i].isNull()) {
	        return 'tranasction input ' + i + ' has null input';
	      }
	    }
	  }
	  return true;
	};

	/**
	 * Analagous to bitcoind's IsCoinBase function in transaction.h
	 */
	Transaction.prototype.isCoinbase = function() {
	  return (this.inputs.length === 1 && this.inputs[0].isNull());
	};


	module.exports = Transaction;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);
	var $ = __webpack_require__(8);
	var JSUtil = __webpack_require__(10);

	var Script = __webpack_require__(19);
	var Address = __webpack_require__(38);
	var Unit = __webpack_require__(86);

	/**
	 * Represents an unspent output information: its script, associated amount and address,
	 * transaction id and output index.
	 *
	 * @constructor
	 * @param {object} data
	 * @param {string} data.txid the previous transaction id
	 * @param {string=} data.txId alias for `txid`
	 * @param {number} data.vout the index in the transaction
	 * @param {number=} data.outputIndex alias for `vout`
	 * @param {string|Script} data.scriptPubKey the script that must be resolved to release the funds
	 * @param {string|Script=} data.script alias for `scriptPubKey`
	 * @param {number} data.amount amount of bitcoins associated
	 * @param {number=} data.satoshis alias for `amount`, but expressed in satoshis (1 BTC = 1e8 satoshis)
	 * @param {string|Address=} data.address the associated address to the script, if provided
	 */
	function UnspentOutput(data) {
	  /* jshint maxcomplexity: 20 */
	  /* jshint maxstatements: 20 */
	  if (!(this instanceof UnspentOutput)) {
	    return new UnspentOutput(data);
	  }
	  $.checkArgument(_.isObject(data), 'Must provide an object from where to extract data');
	  var address = data.address ? new Address(data.address) : undefined;
	  var txId = data.txid ? data.txid : data.txId;
	  if (!txId || !JSUtil.isHexaString(txId) || txId.length > 64) {
	    // TODO: Use the errors library
	    throw new Error('Invalid TXID in object', data);
	  }
	  var outputIndex = _.isUndefined(data.vout) ? data.outputIndex : data.vout;
	  if (!_.isNumber(outputIndex)) {
	    throw new Error('Invalid outputIndex, received ' + outputIndex);
	  }
	  $.checkArgument(!_.isUndefined(data.scriptPubKey) || !_.isUndefined(data.script),
	                  'Must provide the scriptPubKey for that output!');
	  var script = new Script(data.scriptPubKey || data.script);
	  $.checkArgument(!_.isUndefined(data.amount) || !_.isUndefined(data.satoshis),
	                  'Must provide an amount for the output');
	  var amount = !_.isUndefined(data.amount) ? new Unit.fromBTC(data.amount).toSatoshis() : data.satoshis;
	  $.checkArgument(_.isNumber(amount), 'Amount must be a number');
	  JSUtil.defineImmutable(this, {
	    address: address,
	    txId: txId,
	    outputIndex: outputIndex,
	    script: script,
	    satoshis: amount
	  });
	}

	/**
	 * Provide an informative output when displaying this object in the console
	 * @returns string
	 */
	UnspentOutput.prototype.inspect = function() {
	  return '<UnspentOutput: ' + this.txId + ':' + this.outputIndex +
	         ', satoshis: ' + this.satoshis + ', address: ' + this.address + '>';
	};

	/**
	 * String representation: just "txid:index"
	 * @returns string
	 */
	UnspentOutput.prototype.toString = function() {
	  return this.txId + ':' + this.outputIndex;
	};

	/**
	 * Deserialize an UnspentOutput from an object or JSON string
	 * @param {object|string} data
	 * @return UnspentOutput
	 */
	UnspentOutput.fromJSON = UnspentOutput.fromObject = function(data) {
	  if (JSUtil.isValidJSON(data)) {
	    data = JSON.parse(data);
	  }
	  return new UnspentOutput(data);
	};

	/**
	 * Retrieve a string representation of this object
	 * @return {string}
	 */
	UnspentOutput.prototype.toJSON = function() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Returns a plain object (no prototype or methods) with the associated infor for this output
	 * @return {object}
	 */
	UnspentOutput.prototype.toObject = function() {
	  return {
	    address: this.address ? this.address.toString() : undefined,
	    txid: this.txId,
	    vout: this.outputIndex,
	    scriptPubKey: this.script.toBuffer().toString('hex'),
	    amount: Unit.fromSatoshis(this.satoshis).toBTC()
	  };
	};

	module.exports = UnspentOutput;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	// Base58 encoding/decoding
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc

	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	var ALPHABET_MAP = {}
	for(var i = 0; i < ALPHABET.length; i++) {
	  ALPHABET_MAP[ALPHABET.charAt(i)] = i
	}
	var BASE = 58

	function encode(buffer) {
	  if (buffer.length === 0) return ''

	  var i, j, digits = [0]
	  for (i = 0; i < buffer.length; i++) {
	    for (j = 0; j < digits.length; j++) digits[j] <<= 8

	    digits[0] += buffer[i]

	    var carry = 0
	    for (j = 0; j < digits.length; ++j) {
	      digits[j] += carry

	      carry = (digits[j] / BASE) | 0
	      digits[j] %= BASE
	    }

	    while (carry) {
	      digits.push(carry % BASE)

	      carry = (carry / BASE) | 0
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0)

	  return digits.reverse().map(function(digit) { return ALPHABET[digit] }).join('')
	}

	function decode(string) {
	  if (string.length === 0) return []

	  var i, j, bytes = [0]
	  for (i = 0; i < string.length; i++) {
	    var c = string[i]
	    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')

	    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE
	    bytes[0] += ALPHABET_MAP[c]

	    var carry = 0
	    for (j = 0; j < bytes.length; ++j) {
	      bytes[j] += carry

	      carry = bytes[j] >> 8
	      bytes[j] &= 0xff
	    }

	    while (carry) {
	      bytes.push(carry & 0xff)

	      carry >>= 8
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0)

	  return bytes.reverse()
	}

	module.exports = {
	  encode: encode,
	  decode: decode
	}


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	
	var Hasher = __webpack_require__(233).Hasher 

	var C_x64 = __webpack_require__(236)
	var X64Word = C_x64.Word;
	var X64WordArray = C_x64.WordArray;

	// Constants
	var K = [
	  X64Word(0x428a2f98, 0xd728ae22), X64Word(0x71374491, 0x23ef65cd),
	  X64Word(0xb5c0fbcf, 0xec4d3b2f), X64Word(0xe9b5dba5, 0x8189dbbc),
	  X64Word(0x3956c25b, 0xf348b538), X64Word(0x59f111f1, 0xb605d019),
	  X64Word(0x923f82a4, 0xaf194f9b), X64Word(0xab1c5ed5, 0xda6d8118),
	  X64Word(0xd807aa98, 0xa3030242), X64Word(0x12835b01, 0x45706fbe),
	  X64Word(0x243185be, 0x4ee4b28c), X64Word(0x550c7dc3, 0xd5ffb4e2),
	  X64Word(0x72be5d74, 0xf27b896f), X64Word(0x80deb1fe, 0x3b1696b1),
	  X64Word(0x9bdc06a7, 0x25c71235), X64Word(0xc19bf174, 0xcf692694),
	  X64Word(0xe49b69c1, 0x9ef14ad2), X64Word(0xefbe4786, 0x384f25e3),
	  X64Word(0x0fc19dc6, 0x8b8cd5b5), X64Word(0x240ca1cc, 0x77ac9c65),
	  X64Word(0x2de92c6f, 0x592b0275), X64Word(0x4a7484aa, 0x6ea6e483),
	  X64Word(0x5cb0a9dc, 0xbd41fbd4), X64Word(0x76f988da, 0x831153b5),
	  X64Word(0x983e5152, 0xee66dfab), X64Word(0xa831c66d, 0x2db43210),
	  X64Word(0xb00327c8, 0x98fb213f), X64Word(0xbf597fc7, 0xbeef0ee4),
	  X64Word(0xc6e00bf3, 0x3da88fc2), X64Word(0xd5a79147, 0x930aa725),
	  X64Word(0x06ca6351, 0xe003826f), X64Word(0x14292967, 0x0a0e6e70),
	  X64Word(0x27b70a85, 0x46d22ffc), X64Word(0x2e1b2138, 0x5c26c926),
	  X64Word(0x4d2c6dfc, 0x5ac42aed), X64Word(0x53380d13, 0x9d95b3df),
	  X64Word(0x650a7354, 0x8baf63de), X64Word(0x766a0abb, 0x3c77b2a8),
	  X64Word(0x81c2c92e, 0x47edaee6), X64Word(0x92722c85, 0x1482353b),
	  X64Word(0xa2bfe8a1, 0x4cf10364), X64Word(0xa81a664b, 0xbc423001),
	  X64Word(0xc24b8b70, 0xd0f89791), X64Word(0xc76c51a3, 0x0654be30),
	  X64Word(0xd192e819, 0xd6ef5218), X64Word(0xd6990624, 0x5565a910),
	  X64Word(0xf40e3585, 0x5771202a), X64Word(0x106aa070, 0x32bbd1b8),
	  X64Word(0x19a4c116, 0xb8d2d0c8), X64Word(0x1e376c08, 0x5141ab53),
	  X64Word(0x2748774c, 0xdf8eeb99), X64Word(0x34b0bcb5, 0xe19b48a8),
	  X64Word(0x391c0cb3, 0xc5c95a63), X64Word(0x4ed8aa4a, 0xe3418acb),
	  X64Word(0x5b9cca4f, 0x7763e373), X64Word(0x682e6ff3, 0xd6b2b8a3),
	  X64Word(0x748f82ee, 0x5defb2fc), X64Word(0x78a5636f, 0x43172f60),
	  X64Word(0x84c87814, 0xa1f0ab72), X64Word(0x8cc70208, 0x1a6439ec),
	  X64Word(0x90befffa, 0x23631e28), X64Word(0xa4506ceb, 0xde82bde9),
	  X64Word(0xbef9a3f7, 0xb2c67915), X64Word(0xc67178f2, 0xe372532b),
	  X64Word(0xca273ece, 0xea26619c), X64Word(0xd186b8c7, 0x21c0c207),
	  X64Word(0xeada7dd6, 0xcde0eb1e), X64Word(0xf57d4f7f, 0xee6ed178),
	  X64Word(0x06f067aa, 0x72176fba), X64Word(0x0a637dc5, 0xa2c898a6),
	  X64Word(0x113f9804, 0xbef90dae), X64Word(0x1b710b35, 0x131c471b),
	  X64Word(0x28db77f5, 0x23047d84), X64Word(0x32caab7b, 0x40c72493),
	  X64Word(0x3c9ebe0a, 0x15c9bebc), X64Word(0x431d67c4, 0x9c100d4c),
	  X64Word(0x4cc5d4be, 0xcb3e42b6), X64Word(0x597f299c, 0xfc657e2a),
	  X64Word(0x5fcb6fab, 0x3ad6faec), X64Word(0x6c44198c, 0x4a475817)
	];

	// Reusable objects
	var W = [];
	(function () {
	  for (var i = 0; i < 80; i++) {
	    W[i] = X64Word();
	  }
	}());

	/**
	 * SHA-512 hash algorithm.
	 */
	var SHA512 = Hasher.extend({
	  _doReset: function () {
	    this._hash = new X64WordArray([
	      X64Word(0x6a09e667, 0xf3bcc908), X64Word(0xbb67ae85, 0x84caa73b),
	      X64Word(0x3c6ef372, 0xfe94f82b), X64Word(0xa54ff53a, 0x5f1d36f1),
	      X64Word(0x510e527f, 0xade682d1), X64Word(0x9b05688c, 0x2b3e6c1f),
	      X64Word(0x1f83d9ab, 0xfb41bd6b), X64Word(0x5be0cd19, 0x137e2179)
	    ]);
	  },

	  _doProcessBlock: function (M, offset) {
	    // Shortcuts
	    var H = this._hash.words;

	    var H0 = H[0]; var H1 = H[1]; var H2 = H[2];
	    var H3 = H[3]; var H4 = H[4]; var H5 = H[5];
	    var H6 = H[6]; var H7 = H[7];

	    var H0h = H0.high; var H0l = H0.low;
	    var H1h = H1.high; var H1l = H1.low;
	    var H2h = H2.high; var H2l = H2.low;
	    var H3h = H3.high; var H3l = H3.low;
	    var H4h = H4.high; var H4l = H4.low;
	    var H5h = H5.high; var H5l = H5.low;
	    var H6h = H6.high; var H6l = H6.low;
	    var H7h = H7.high; var H7l = H7.low;

	    // Working variables
	    var ah = H0h; var al = H0l;
	    var bh = H1h; var bl = H1l;
	    var ch = H2h; var cl = H2l;
	    var dh = H3h; var dl = H3l;
	    var eh = H4h; var el = H4l;
	    var fh = H5h; var fl = H5l;
	    var gh = H6h; var gl = H6l;
	    var hh = H7h; var hl = H7l;

	    // Rounds
	    for (var i = 0; i < 80; i++) {
	      // Shortcut
	      var Wi = W[i];

	      // Extend message
	      if (i < 16) {
	        var Wih = Wi.high = M[offset + i * 2]     | 0;
	        var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	      } else {
	        // Gamma0
	        var gamma0x  = W[i - 15];
	        var gamma0xh = gamma0x.high;
	        var gamma0xl = gamma0x.low;
	        var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	        var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	        // Gamma1
	        var gamma1x  = W[i - 2];
	        var gamma1xh = gamma1x.high;
	        var gamma1xl = gamma1x.low;
	        var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	        var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[i - 7];
	        var Wi7h = Wi7.high;
	        var Wi7l = Wi7.low;

	        var Wi16  = W[i - 16];
	        var Wi16h = Wi16.high;
	        var Wi16l = Wi16.low;

	        var Wil = gamma0l + Wi7l;
	        var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	        var Wil = Wil + gamma1l;
	        var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	        var Wil = Wil + Wi16l;
	        var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	        Wi.high = Wih;
	        Wi.low  = Wil;
	      }

	      var chh  = (eh & fh) ^ (~eh & gh);
	      var chl  = (el & fl) ^ (~el & gl);
	      var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	      var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	      var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	      var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	      var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	      var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki  = K[i];
	      var Kih = Ki.high;
	      var Kil = Ki.low;

	      var t1l = hl + sigma1l;
	      var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	      var t1l = t1l + chl;
	      var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	      var t1l = t1l + Kil;
	      var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	      var t1l = t1l + Wil;
	      var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl;
	      var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	      // Update working variables
	      hh = gh; hl = gl;
	      gh = fh; gl = fl;
	      fh = eh; fl = el;
	      el = (dl + t1l) | 0;
	      eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	      dh = ch; dl = cl;
	      ch = bh; cl = bl;
	      bh = ah; bl = al;
	      al = (t1l + t2l) | 0;
	      ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	    }

	    // Intermediate hash value
	    H0l = H0.low  = (H0l + al);
	    H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	    H1l = H1.low  = (H1l + bl);
	    H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	    H2l = H2.low  = (H2l + cl);
	    H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	    H3l = H3.low  = (H3l + dl);
	    H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	    H4l = H4.low  = (H4l + el);
	    H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	    H5l = H5.low  = (H5l + fl);
	    H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	    H6l = H6.low  = (H6l + gl);
	    H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	    H7l = H7.low  = (H7l + hl);
	    H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	  },

	  _doFinalize: function () {
	    // Shortcuts
	    var data = this._data;
	    var dataWords = data.words;

	    var nBitsTotal = this._nDataBytes * 8;
	    var nBitsLeft = data.sigBytes * 8;

	    // Add padding
	    dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	    dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	    dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	    data.sigBytes = dataWords.length * 4;

	    // Hash final blocks
	    this._process();

	    // Convert hash to 32-bit word array before returning
	    var hash = this._hash.toX32();

	    // Return final computed hash
	    return hash;
	  },

	  clone: function () {
	    var clone = Hasher.clone.call(this);
	    clone._hash = this._hash.clone();

	    return clone;
	  },

	  blockSize: 1024/32
	});


	module.exports = Hasher._createHelper(SHA512);
	module.exports.sha512 = SHA512



/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {};
	module.exports = __webpack_require__(237);
	module.exports.MurmurHash3 = __webpack_require__(131);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * MurmurHash is a non-cryptographic hash function suitable for general hash-based lookup
	 *
	 * @see https://en.wikipedia.org/wiki/MurmurHash
	 * @see https://github.com/petertodd/python-bitcoinlib/blob/master/bitcoin/bloom.py
	 * @see https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/core/BloomFilter.java#L170
	 * @see https://github.com/bitcoin/bitcoin/blob/master/src/hash.cpp
	 * @see https://github.com/indutny/bcoin/blob/master/lib/bcoin/bloom.js
	 * @see https://github.com/garycourt/murmurhash-js
	 *
	 * @param {Buffer} data to be hashed
	 * @param {Number} seed Positive integer only
	 * @return {Number} a 32-bit positive integer hash
	*/
	function MurmurHash3(seed, data) {
	  /* jshint maxstatements: 32, maxcomplexity: 10 */

	  var c1 = 0xcc9e2d51;
	  var c2 = 0x1b873593;
	  var r1 = 15;
	  var r2 = 13;
	  var m = 5;
	  var n = 0x6b64e654;

	  var hash = seed;

	  function mul32(a, b) {
	    return (a & 0xffff) * b + (((a >>> 16) * b & 0xffff) << 16) & 0xffffffff;
	  }

	  function sum32(a, b) {
	    return (a & 0xffff) + (b >>> 16) + (((a >>> 16) + b & 0xffff) << 16) & 0xffffffff;
	  }

	  function rotl32(a, b) {
	    return (a << b) | (a >>> (32 - b));
	  }

	  var k1;

	  for (var i = 0; i + 4 <= data.length; i += 4) {
	    k1 = data[i] |
	      (data[i + 1] << 8) |
	      (data[i + 2] << 16) |
	      (data[i + 3] << 24);

	    k1 = mul32(k1, c1);
	    k1 = rotl32(k1, r1);
	    k1 = mul32(k1, c2);

	    hash ^= k1;
	    hash = rotl32(hash, r2);
	    hash = mul32(hash, m);
	    hash = sum32(hash, n);
	  }

	  k1 = 0;

	  switch(data.length & 3) {
	    case 3:
	      k1 ^= data[i + 2] << 16;
	      /* falls through */
	    case 2:
	      k1 ^= data[i + 1] << 8;
	      /* falls through */
	    case 1:
	      k1 ^= data[i];
	      k1 = mul32(k1, c1);
	      k1 = rotl32(k1, r1);
	      k1 = mul32(k1, c2);
	      hash ^= k1;
	  }

	  hash ^= data.length;
	  hash ^= hash >>> 16;
	  hash = mul32(hash, 0x85ebca6b);
	  hash ^= hash >>> 13;
	  hash = mul32(hash, 0xc2b2ae35);
	  hash ^= hash >>> 16;

	  return hash >>> 0;
	}

	module.exports = MurmurHash3;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {/*global chrome */

	/**
	 * net
	 * ===
	 *
	 * The net module provides you with an asynchronous network wrapper. It
	 * contains methods for creating both servers and clients (called streams).
	 * You can include this module with require('chrome-net')
	 */

	var EventEmitter = __webpack_require__(23).EventEmitter
	var inherits = __webpack_require__(244)
	var ipaddr = __webpack_require__(245)
	var is = __webpack_require__(243)
	var stream = __webpack_require__(63)

	// Track open servers and sockets to route incoming sockets (via onAccept and onReceive)
	// to the right handlers.
	var servers = {}
	var sockets = {}

	if (typeof chrome !== 'undefined') {
	  chrome.sockets.tcpServer.onAccept.addListener(onAccept)
	  chrome.sockets.tcpServer.onAcceptError.addListener(onAcceptError)
	  chrome.sockets.tcp.onReceive.addListener(onReceive)
	  chrome.sockets.tcp.onReceiveError.addListener(onReceiveError)
	}

	function onAccept (info) {
	  if (info.socketId in servers) {
	    servers[info.socketId]._onAccept(info.clientSocketId)
	  } else {
	    console.error('Unknown server socket id: ' + info.socketId)
	  }
	}

	function onAcceptError (info) {
	  if (info.socketId in servers) {
	    servers[info.socketId]._onAcceptError(info.resultCode)
	  } else {
	    console.error('Unknown server socket id: ' + info.socketId)
	  }
	}

	function onReceive (info) {
	  if (info.socketId in sockets) {
	    sockets[info.socketId]._onReceive(info.data)
	  } else {
	    console.error('Unknown socket id: ' + info.socketId)
	  }
	}

	function onReceiveError (info) {
	  if (info.socketId in sockets) {
	    sockets[info.socketId]._onReceiveError(info.resultCode)
	  } else {
	    if (info.resultCode === -100) // net::ERR_CONNECTION_CLOSED
	      return
	    console.error('Unknown socket id: ' + info.socketId)
	  }
	}

	/**
	 * Creates a new TCP server. The connectionListener argument is automatically
	 * set as a listener for the 'connection' event.
	 *
	 * @param  {Object} options
	 * @param  {function} listener
	 * @return {Server}
	 */
	exports.createServer = function (options, listener) {
	  return new Server(options, listener)
	}

	/**
	 * net.connect(options, [connectionListener])
	 * net.createConnection(options, [connectionListener])
	 *
	 * Constructs a new socket object and opens the socket to the given location.
	 * When the socket is established, the 'connect' event will be emitted.
	 *
	 * For TCP sockets, options argument should be an object which specifies:
	 *
	 *   port: Port the client should connect to (Required).
	 *   host: Host the client should connect to. Defaults to 'localhost'.
	 *   localAddress: Local interface to bind to for network connections.
	 *
	 * ===============================================================
	 *
	 * net.connect(port, [host], [connectListener])
	 * net.createConnection(port, [host], [connectListener])
	 *
	 * Creates a TCP connection to port on host. If host is omitted,
	 * 'localhost' will be assumed. The connectListener parameter will be
	 * added as an listener for the 'connect' event.
	 *
	 * @param {Object} options
	 * @param {function} listener
	 * @return {Socket}
	 */
	exports.connect = exports.createConnection = function () {
	  var args = normalizeConnectArgs(arguments)
	  var s = new Socket(args[0])
	  return Socket.prototype.connect.apply(s, args)
	}

	inherits(Server, EventEmitter)

	/**
	 * Class: net.Server
	 * =================
	 *
	 * This class is used to create a TCP server.
	 *
	 * Event: 'listening'
	 *   Emitted when the server has been bound after calling server.listen.
	 *
	 * Event: 'connection'
	 *   - Socket object The connection object
	 *   Emitted when a new connection is made. socket is an instance of net.Socket.
	 *
	 * Event: 'close'
	 *   Emitted when the server closes. Note that if connections exist, this event
	 *   is not emitted until all connections are ended.
	 *
	 * Event: 'error'
	 *   - Error Object
	 *   Emitted when an error occurs. The 'close' event will be called directly
	 *   following this event. See example in discussion of server.listen.
	 */
	function Server (/* [options], listener */) {
	  var self = this
	  if (!(self instanceof Server)) return new Server(arguments[0], arguments[1])
	  EventEmitter.call(self)

	  /*eslint-disable no-unused-vars*/
	  var options
	  /*eslint-enable no-unused-vars*/

	  if (is.isFunction(arguments[0])) {
	    options = {}
	    self.on('connection', arguments[0])
	  } else {
	    options = arguments[0] || {}

	    if (is.isFunction(arguments[1])) {
	      self.on('connection', arguments[1])
	    }
	  }

	  self._destroyed = false
	  self._connections = 0
	}
	exports.Server = Server

	/**
	 * server.listen(port, [host], [backlog], [callback])
	 *
	 * Begin accepting connections on the specified port and host. If the host is
	 * omitted, the server will accept connections directed to any IPv4 address
	 * (INADDR_ANY). A port value of zero will assign a random port.
	 *
	 * Backlog is the maximum length of the queue of pending connections. The
	 * actual length will be determined by your OS through sysctl settings such as
	 * tcp_max_syn_backlog and somaxconn on linux. The default value of this
	 * parameter is 511 (not 512).
	 *
	 * This function is asynchronous. When the server has been bound, 'listening'
	 * event will be emitted. The last parameter callback will be added as an
	 * listener for the 'listening' event.
	 *
	 * @return {Socket}
	 */
	Server.prototype.listen = function (/* variable arguments... */) {
	  var self = this

	  var lastArg = arguments[arguments.length - 1]
	  if (is.isFunction(lastArg)) {
	    self.once('listening', lastArg)
	  }

	  // If port is invalid or undefined, bind to a random port.
	  var port = toNumber(arguments[0]) || 0

	  var address
	  if (arguments[1] == null ||
	      is.isFunction(arguments[1]) ||
	      is.isNumber(arguments[1])) {
	    // The first argument is the port, no IP given.
	    address = '0.0.0.0'
	  } else {
	    address = arguments[1]
	  }

	  // The third optional argument is the backlog size.
	  // When the ip is omitted it can be the second argument.
	  var backlog = toNumber(arguments[1]) || toNumber(arguments[2]) || undefined

	  chrome.sockets.tcpServer.create(function (createInfo) {
	    self.id = createInfo.socketId

	    chrome.sockets.tcpServer.listen(self.id, address, port, backlog, function (result) {
	      if (result < 0) {
	        self.emit('error', new Error('Socket ' + self.id + ' failed to listen. ' +
	          chrome.runtime.lastError.message))
	        self._destroy()
	        return
	      }

	      servers[self.id] = self

	      chrome.sockets.tcpServer.getInfo(self.id, function (socketInfo) {
	        self._address = socketInfo.localAddress
	        self._port = socketInfo.localPort
	        self.emit('listening')
	      })
	    })
	  })

	  return self
	}

	Server.prototype._onAccept = function (clientSocketId) {
	  var self = this

	  // Set the `maxConnections` property to reject connections when the server's
	  // connection count gets high.
	  if (self.maxConnections && self._connections >= self.maxConnections) {
	    chrome.sockets.tcpServer.disconnect(clientSocketId)
	    chrome.sockets.tcpServer.close(clientSocketId)
	    console.warn('Rejected connection - hit `maxConnections` limit')
	    return
	  }

	  self._connections += 1

	  var acceptedSocket = new Socket({
	    server: self,
	    id: clientSocketId
	  })
	  acceptedSocket.on('connect', function () {
	    self.emit('connection', acceptedSocket)
	  })

	  chrome.sockets.tcp.setPaused(clientSocketId, false)
	}

	Server.prototype._onAcceptError = function (resultCode) {
	  var self = this
	  self.emit('error', new Error('Socket ' + self.id + ' failed to accept (' +
	    resultCode + ')'))
	  self._destroy()
	}

	/**
	 * Stops the server from accepting new connections and keeps existing
	 * connections. This function is asynchronous, the server is finally closed
	 * when all connections are ended and the server emits a 'close' event.
	 * Optionally, you can pass a callback to listen for the 'close' event.
	 * @param  {function} callback
	 */
	Server.prototype.close = function (callback) {
	  var self = this
	  self._destroy(callback)
	}

	Server.prototype._destroy = function (exception, cb) {
	  var self = this

	  if (self._destroyed)
	    return

	  if (cb)
	    this.once('close', cb)

	  this._destroyed = true
	  this._connections = 0
	  delete servers[self.id]

	  chrome.sockets.tcpServer.disconnect(self.id, function () {
	    chrome.sockets.tcpServer.close(self.id, function () {
	      self.emit('close')
	    })
	  })
	}

	/**
	 * Returns the bound address, the address family name and port of the socket
	 * as reported by the operating system. Returns an object with three
	 * properties, e.g. { port: 12346, family: 'IPv4', address: '127.0.0.1' }
	 *
	 * @return {Object} information
	 */
	Server.prototype.address = function () {
	  var self = this
	  return {
	    address: self._address,
	    port: self._port,
	    family: 'IPv4'
	  }
	}

	Server.prototype.unref = function () {
	  // No chrome.socket equivalent
	}

	Server.prototype.ref = function () {
	  // No chrome.socket equivalent
	}

	/**
	 * Asynchronously get the number of concurrent connections on the server.
	 * Works when sockets were sent to forks.
	 *
	 * Callback should take two arguments err and count.
	 *
	 * @param  {function} callback
	 */
	Server.prototype.getConnections = function (callback) {
	  var self = this
	  process.nextTick(function () {
	    callback(null, self._connections)
	  })
	}

	inherits(Socket, stream.Duplex)

	/**
	 * Class: net.Socket
	 * =================
	 *
	 * This object is an abstraction of a TCP or UNIX socket. net.Socket instances
	 * implement a duplex Stream interface. They can be created by the user and
	 * used as a client (with connect()) or they can be created by Node and passed
	 * to the user through the 'connection' event of a server.
	 *
	 * Construct a new socket object.
	 *
	 * options is an object with the following defaults:
	 *
	 *   { fd: null // NO CHROME EQUIVALENT
	 *     type: null
	 *     allowHalfOpen: false // NO CHROME EQUIVALENT
	 *   }
	 *
	 * `type` can only be 'tcp4' (for now).
	 *
	 * Event: 'connect'
	 *   Emitted when a socket connection is successfully established. See
	 *   connect().
	 *
	 * Event: 'data'
	 *   - Buffer object
	 *   Emitted when data is received. The argument data will be a Buffer or
	 *   String. Encoding of data is set by socket.setEncoding(). (See the Readable
	 *   Stream section for more information.)
	 *
	 *   Note that the data will be lost if there is no listener when a Socket
	 *   emits a 'data' event.
	 *
	 * Event: 'end'
	 *   Emitted when the other end of the socket sends a FIN packet.
	 *
	 *   By default (allowHalfOpen == false) the socket will destroy its file
	 *   descriptor once it has written out its pending write queue. However,
	 *   by setting allowHalfOpen == true the socket will not automatically
	 *   end() its side allowing the user to write arbitrary amounts of data,
	 *   with the caveat that the user is required to end() their side now.
	 *
	 * Event: 'timeout'
	 *   Emitted if the socket times out from inactivity. This is only to notify
	 *   that the socket has been idle. The user must manually close the connection.
	 *
	 *   See also: socket.setTimeout()
	 *
	 * Event: 'drain'
	 *   Emitted when the write buffer becomes empty. Can be used to throttle
	 *   uploads.
	 *
	 *   See also: the return values of socket.write()
	 *
	 * Event: 'error'
	 *   - Error object
	 *   Emitted when an error occurs. The 'close' event will be called directly
	 *   following this event.
	 *
	 * Event: 'close'
	 *   - had_error Boolean true if the socket had a transmission error
	 *   Emitted once the socket is fully closed. The argument had_error is a
	 *   boolean which says if the socket was closed due to a transmission error.
	 */
	function Socket (options) {
	  var self = this
	  if (!(self instanceof Socket)) return new Socket(options)

	  if (is.isUndefined(options))
	    options = {}

	  stream.Duplex.call(self, options)

	  self.destroyed = false
	  self.errorEmitted = false
	  self.readable = self.writable = false

	  // The amount of received bytes.
	  self.bytesRead = 0

	  self._bytesDispatched = 0
	  self._connecting = false

	  self.ondata = null
	  self.onend = null

	  if (options.server) {
	    self.server = options.server
	    self.id = options.id

	    // For incoming sockets (from server), it's already connected.
	    self._connecting = true
	    self._onConnect()
	  }
	}
	exports.Socket = Socket

	/**
	 * socket.connect(port, [host], [connectListener])
	 * socket.connect(options, [connectListener])
	 *
	 * Opens the connection for a given socket. If port and host are given, then
	 * the socket will be opened as a TCP socket, if host is omitted, localhost
	 * will be assumed. If a path is given, the socket will be opened as a unix
	 * socket to that path.
	 *
	 * Normally this method is not needed, as net.createConnection opens the
	 * socket. Use this only if you are implementing a custom Socket.
	 *
	 * This function is asynchronous. When the 'connect' event is emitted the
	 * socket is established. If there is a problem connecting, the 'connect'
	 * event will not be emitted, the 'error' event will be emitted with the
	 * exception.
	 *
	 * The connectListener parameter will be added as an listener for the
	 * 'connect' event.
	 *
	 * @param  {Object} options
	 * @param  {function} cb
	 * @return {Socket}   this socket (for chaining)
	 */
	Socket.prototype.connect = function () {
	  var self = this
	  var args = normalizeConnectArgs(arguments)
	  var options = args[0]
	  var cb = args[1]

	  if (self._connecting)
	    return
	  self._connecting = true

	  var port = Number(options.port)

	  if (is.isFunction(cb)) {
	    self.once('connect', cb)
	  }

	  chrome.sockets.tcp.create(function (createInfo) {
	    if (self.destroyed) {
	      chrome.sockets.tcp.close(createInfo.socketId)
	      return
	    }

	    self.id = createInfo.socketId

	    chrome.sockets.tcp.connect(self.id, options.host, port, function (result) {
	      if (result < 0) {
	        self.destroy(new Error('Socket ' + self.id + ' connect error ' + result +
	          ': ' + chrome.runtime.lastError.message))
	        return
	      }

	      self._onConnect()
	    })
	  })

	  return self
	}

	Socket.prototype._onConnect = function () {
	  var self = this

	  sockets[self.id] = self
	  chrome.sockets.tcp.getInfo(self.id, function (result) {
	    self.remoteAddress = result.peerAddress
	    self.remotePort = result.peerPort
	    self.localAddress = result.localAddress
	    self.localPort = result.localPort

	    self._connecting = false
	    self.readable = self.writable = true

	    self.emit('connect')
	    // start the first read, or get an immediate EOF.
	    // this doesn't actually consume any bytes, because len=0
	    self.read(0)
	  })
	}

	/**
	 * The number of characters currently buffered to be written.
	 * @type {number}
	 */
	Object.defineProperty(Socket.prototype, 'bufferSize', {
	  get: function () {
	    var self = this
	    if (self._pendingData)
	      return self._pendingData.length
	    else
	      return 0 // Unfortunately, chrome.socket does not make this info available
	  }
	})

	/**
	 * Sends data on the socket. The second parameter specifies the encoding in
	 * the case of a string--it defaults to UTF8 encoding.
	 *
	 * Returns true if the entire data was flushed successfully to the kernel
	 * buffer. Returns false if all or part of the data was queued in user memory.
	 * 'drain' will be emitted when the buffer is again free.
	 *
	 * The optional callback parameter will be executed when the data is finally
	 * written out - this may not be immediately.
	 *
	 * @param  {Buffer|Arrayish|string} chunk
	 * @param  {string} [encoding]
	 * @param  {function} [callback]
	 * @return {boolean}             flushed to kernel completely?
	 */
	Socket.prototype.write = function (chunk, encoding, callback) {
	  var self = this
	  if (!Buffer.isBuffer(chunk))
	    chunk = new Buffer(chunk, encoding)

	  return stream.Duplex.prototype.write.call(self, chunk, encoding, callback)
	}

	Socket.prototype._write = function (buffer, encoding, callback) {
	  var self = this
	  if (!callback) callback = function () {}

	  if (!self.writable) {
	    self._pendingData = buffer
	    self._pendingEncoding = encoding
	    self.once('connect', function () {
	      self._write(buffer, encoding, callback)
	    })
	    return
	  }
	  self._pendingData = null
	  self._pendingEncoding = null

	  // assuming buffer is browser implementation (`buffer` package on npm)
	  var buf = buffer.buffer
	  if (buffer.byteOffset || buffer.byteLength !== buf.byteLength)
	    buf = buf.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength)

	  chrome.sockets.tcp.send(self.id, buf, function (sendInfo) {
	    if (sendInfo.resultCode < 0) {
	      var err = new Error('Socket ' + self.id + ' write error: ' + sendInfo.resultCode)
	      callback(err)
	      self.destroy(err)
	    } else {
	      self._resetTimeout()
	      callback(null)
	    }
	  })

	  self._bytesDispatched += buffer.length
	}

	Socket.prototype._read = function (bufferSize) {
	  var self = this
	  if (self._connecting || !self.id) {
	    self.once('connect', self._read.bind(self, bufferSize))
	    return
	  }

	  chrome.sockets.tcp.setPaused(self.id, false)
	}

	Socket.prototype._onReceive = function (data) {
	  var self = this
	  var buffer = new Buffer(new Uint8Array(data))
	  var offset = self.bytesRead

	  self.bytesRead += buffer.length
	  self._resetTimeout()

	  if (self.ondata) self.ondata(buffer, offset, self.bytesRead)
	  if (!self.push(buffer)) { // if returns false, then apply backpressure
	    chrome.sockets.tcp.setPaused(self.id, true)
	  }
	}

	Socket.prototype._onReceiveError = function (resultCode) {
	  var self = this
	  if (resultCode === -100) {
	    if (self.onend) self.once('end', self.onend)
	    self.push(null)
	    self.destroy()
	  } else if (resultCode < 0) {
	    self.destroy(new Error('Socket ' + self.id + ' receive error ' + resultCode))
	  }
	}

	/**
	 * The amount of bytes sent.
	 * @return {number}
	 */
	Object.defineProperty(Socket.prototype, 'bytesWritten', {
	  get: function () {
	    var self = this
	    var bytes = self._bytesDispatched

	    self._writableState.toArrayBuffer().forEach(function (el) {
	      if (Buffer.isBuffer(el.chunk))
	        bytes += el.chunk.length
	      else
	        bytes += new Buffer(el.chunk, el.encoding).length
	    })

	    if (self._pendingData) {
	      if (Buffer.isBuffer(self._pendingData))
	        bytes += self._pendingData.length
	      else
	        bytes += Buffer.byteLength(self._pendingData, self._pendingEncoding)
	    }

	    return bytes
	  }
	})

	Socket.prototype.destroy = function (exception) {
	  var self = this
	  self._destroy(exception)
	}

	Socket.prototype._destroy = function (exception, cb) {
	  var self = this

	  function fireErrorCallbacks () {
	    if (cb) cb(exception)
	    if (exception && !self.errorEmitted) {
	      process.nextTick(function () {
	        self.emit('error', exception)
	      })
	      self.errorEmitted = true
	    }
	  }

	  if (self.destroyed) {
	    // already destroyed, fire error callbacks
	    fireErrorCallbacks()
	    return
	  }

	  if (this.server) {
	    this.server._connections -= 1
	  }

	  self._connecting = false
	  this.readable = this.writable = false
	  self.destroyed = true
	  delete sockets[self.id]

	  // if _destroy() has been called before chrome.sockets.tcp.create()
	  // callback, we don't have an id. Therefore we don't need to close
	  // or disconnect
	  if (self.id) {
	    chrome.sockets.tcp.disconnect(self.id, function () {
	      chrome.sockets.tcp.close(self.id, function () {
	        self.emit('close', !!exception)
	        fireErrorCallbacks()
	      })
	    })
	  }
	}

	Socket.prototype.destroySoon = function () {
	  var self = this

	  if (self.writable)
	    self.end()

	  if (self._writableState.finished)
	    self.destroy()
	  else
	    self.once('finish', self._destroy.bind(self))
	}

	/**
	 * Sets the socket to timeout after timeout milliseconds of inactivity on the socket.
	 * By default net.Socket do not have a timeout. When an idle timeout is triggered the
	 * socket will receive a 'timeout' event but the connection will not be severed. The
	 * user must manually end() or destroy() the socket.
	 *
	 * If timeout is 0, then the existing idle timeout is disabled.
	 *
	 * The optional callback parameter will be added as a one time listener for the 'timeout' event.
	 *
	 * @param {number}   timeout
	 * @param {function} callback
	 */
	Socket.prototype.setTimeout = function (timeout, callback) {
	  var self = this
	  if (callback) self.once('timeout', callback)
	  self._timeoutMs = timeout
	  self._resetTimeout()
	}

	Socket.prototype._onTimeout = function () {
	  var self = this
	  self._timeout = null
	  self._timeoutMs = 0
	  self.emit('timeout')
	}

	Socket.prototype._resetTimeout = function () {
	  var self = this
	  if (self._timeout) {
	    clearTimeout(self._timeout)
	  }
	  if (self._timeoutMs) {
	    self._timeout = setTimeout(self._onTimeout.bind(self), self._timeoutMs)
	  }
	}

	/**
	 * Disables the Nagle algorithm. By default TCP connections use the Nagle
	 * algorithm, they buffer data before sending it off. Setting true for noDelay
	 * will immediately fire off data each time socket.write() is called. noDelay
	 * defaults to true.
	 *
	 * NOTE: The Chrome version of this function is async, whereas the node
	 * version is sync. Keep this in mind.
	 *
	 * @param {boolean} [noDelay] Optional
	 * @param {function} callback CHROME-SPECIFIC: Called when the configuration
	 *                            operation is done.
	 */
	Socket.prototype.setNoDelay = function (noDelay, callback) {
	  var self = this
	  // backwards compatibility: assume true when `enable` is omitted
	  noDelay = is.isUndefined(noDelay) ? true : !!noDelay
	  if (!callback) callback = function () {}
	  chrome.sockets.tcp.setNoDelay(self.id, noDelay, callback)
	}

	/**
	 * Enable/disable keep-alive functionality, and optionally set the initial
	 * delay before the first keepalive probe is sent on an idle socket. enable
	 * defaults to false.
	 *
	 * Set initialDelay (in milliseconds) to set the delay between the last data
	 * packet received and the first keepalive probe. Setting 0 for initialDelay
	 * will leave the value unchanged from the default (or previous) setting.
	 * Defaults to 0.
	 *
	 * NOTE: The Chrome version of this function is async, whereas the node
	 * version is sync. Keep this in mind.
	 *
	 * @param {boolean} [enable] Optional
	 * @param {number} [initialDelay]
	 * @param {function} callback CHROME-SPECIFIC: Called when the configuration
	 *                            operation is done.
	 */
	Socket.prototype.setKeepAlive = function (enable, initialDelay, callback) {
	  var self = this
	  if (!callback) callback = function () {}
	  chrome.sockets.tcp.setKeepAlive(self.id, !!enable, ~~(initialDelay / 1000),
	      callback)
	}

	/**
	 * Returns the bound address, the address family name and port of the socket
	 * as reported by the operating system. Returns an object with three
	 * properties, e.g. { port: 12346, family: 'IPv4', address: '127.0.0.1' }
	 *
	 * @return {Object} information
	 */
	Socket.prototype.address = function () {
	  var self = this
	  return {
	    address: self.localAddress,
	    port: self.localPort,
	    family: 'IPv4'
	  }
	}

	Object.defineProperty(Socket.prototype, 'readyState', {
	  get: function () {
	    var self = this
	    if (self._connecting) {
	      return 'opening'
	    } else if (self.readable && self.writable) {
	      return 'open'
	    } else {
	      return 'closed'
	    }
	  }
	})

	Socket.prototype.unref = function () {
	  // No chrome.socket equivalent
	}

	Socket.prototype.ref = function () {
	  // No chrome.socket equivalent
	}

	//
	// EXPORTED HELPERS
	//

	exports.isIP = function (input) {
	  try {
	    ipaddr.parse(input)
	  } catch (e) {
	    return false
	  }
	  return true
	}

	exports.isIPv4 = function (input) {
	  try {
	    var parsed = ipaddr.parse(input)
	    return (parsed.kind() === 'ipv4')
	  } catch (e) {
	    return false
	  }
	}

	exports.isIPv6 = function (input) {
	  try {
	    var parsed = ipaddr.parse(input)
	    return (parsed.kind() === 'ipv6')
	  } catch (e) {
	    return false
	  }
	}

	//
	// HELPERS
	//

	/**
	 * Returns an array [options] or [options, cb]
	 * It is the same as the argument of Socket.prototype.connect().
	 */
	function normalizeConnectArgs (args) {
	  var options = {}

	  if (is.isObject(args[0])) {
	    // connect(options, [cb])
	    options = args[0]
	  } else {
	    // connect(port, [host], [cb])
	    options.port = args[0]
	    if (is.isString(args[1])) {
	      options.host = args[1]
	    } else {
	      options.host = '127.0.0.1'
	    }
	  }

	  var cb = args[args.length - 1]
	  return is.isFunction(cb) ? [options, cb] : [options]
	}

	function toNumber (x) {
	  return (x = Number(x)) >= 0 ? x : false
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1).Buffer))

/***/ },
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(371)

	var md5 = toConstructor(__webpack_require__(364))
	var rmd160 = toConstructor(__webpack_require__(369))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen/8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if(addmd++ > 0) {
	       md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if(keyLen > 0) {
	      while(true) {
	        if(keyLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	       }
	    }
	    if(ivLen > 0 && i !== md_buf.length) {
	      while(true) {
	        if(ivLen === 0) {
	          break;
	        }
	        if(i === md_buf.length) {
	          break;
	        }
	       iv[ii++] = md_buf[i];
	       ivLen--;
	       i++;
	     }
	   }
	   if(keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for(i=0;i<md_buf.length;i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var xor = __webpack_require__(79);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(79);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt?data:out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(79);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(79);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(108);
	var Transform = __webpack_require__(109);
	var inherits = __webpack_require__(78);

	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(111);

	/*<replacement>*/
	var util = __webpack_require__(61);
	util.inherits = __webpack_require__(62);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(382);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(1).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(23).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(63);

	/*<replacement>*/
	var util = __webpack_require__(61);
	util.inherits = __webpack_require__(62);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(390);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(46);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(184).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(46);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(184).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(1).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Pool   = __webpack_require__(190);
	var Wallet = __webpack_require__(191);

	module.exports = {
	  Pool: Pool,
	  Wallet: Wallet
	};


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use script';
	var EventEmitter = __webpack_require__(23).EventEmitter,
	    bitcore = __webpack_require__(24),
	    BlockHeader = bitcore.BlockHeader,
	    bufferUtil = bitcore.util.buffer,
	    util = __webpack_require__(17);

	var constants = __webpack_require__(115),
	    data = __webpack_require__(189);

	function Chain(options) {
	  if (!(this instanceof Chain))
	    return new Chain(options);

	  this.options = options || {};
	  // TODO: Force the Chain to do a full sync from the genesis block, even
	  // if it has stored state/indexes
	  this.forceFullSync = this.options.forceFullSync !== false;
	  this.network = this.options.network || bitcore.Networks.defaultNetwork;
	  this.blocks = {
	    list: [],
	    last: null
	  };
	  this.index = {
	    hashes: [],
	    heights: [],
	    ts: [],
	    lastHash: null,
	    lastTs: 0,
	    lastHeight: 0,
	  };
	  this.lastTsAtLoad = 0;
	  this.orphans = [];
	  this.loaded = false;

	  this._load();
	}
	util.inherits(Chain, EventEmitter);

	Chain.prototype._load = function() {
	  this.fromJSON(data);
	  this.index.lastHash = this.index.hashes[this.index.hashes.length-1];
	  this.index.lastHeight = this.index.heights[this.index.heights.length-1];
	  this.index.lastTs = this.index.ts[this.index.ts.length-1];
	  this.lastTsAtLoad = this.index.lastTs;
	  this.loaded = true;
	  this.emit('load');
	}

	Chain.prototype.add = function(block) {
	  if(!this.loaded) {
	    this.once('load', function() { this.add(block) });
	  }
	  // TODO: This won't handle chain forks, it'll just accept the first
	  // valid proof on top of the current chain.  It won't be able to find
	  // another chain that grows longer than the first one seen.
	  if(block.validProofOfWork()) {
	    var prevHash = bufferUtil.reverse(block.prevHash).toString('hex');
	    if (prevHash == this.index.lastHash) {
	      this.blocks.list.push(block);
	      this.blocks.last = block;

	      // TODO: this is inaccurate, but works for now, will need to be refactored
	      this.index.hashes.push(block.id);
	      this.index.ts.push(block.time);
	      this.index.heights
	        .push(this.index.heights[this.index.heights.length-1] + 1);

	      this.index.lastHash = this.index.hashes[this.index.hashes.length-1];
	      this.index.lastHeight = this.index.heights[this.index.heights.length-1];
	      this.index.lastTs = this.index.ts[this.index.ts.length-1];
	    } else {
	      this.orphans.push(block)
	    }
	  }
	}

	Chain.prototype.estimatedBlockHeight = function() {
	  // Estimate 10 minutes per block
	  return this.index.lastHeight +
	    Math.floor((+new Date() / 1000 - this.index.lastTs)/(10*60));
	}

	Chain.prototype.fillPercent = function() {
	  // Simpler way?
	  //return this.index.lastHeight / this.estimatedBlockHeight();
	  // from bcoin
	  var total = (+new Date() / 1000 - 40 * 60) - this.lastTsAtLoad;
	  var current = this.index.lastTs - this.lastTsAtLoad;
	  return Math.max(0, Math.min(current / total, 1));
	}

	Chain.prototype.timestampForBlockHeight = function(blockHeight) {
	  // TODO:
	  //if (blockHeight > this.syncedBlockHeight()) {
	  //// future block, assume 10 minutes per block after last block
	  //return this.lastBlock.timestamp + (blockHeight - this.lastBlockHeight)*10*60;
	  //}
	}

	// This is from bcoin
	Chain.prototype.toJSON = function() {
	  var keep = 1000;

	  // Keep only last 1000 consequent blocks, dilate others at:
	  // 7 day range for blocks before 2013
	  // 12 hour for blocks before 2014
	  // 6 hour for blocks in 2014 and after it
	  // (or at maximum 250 block range)
	  var last = {
	    hashes: this.index.hashes.slice(-keep),
	    ts: this.index.ts.slice(-keep),
	    heights: this.index.heights.slice(-keep)
	  };

	  var first = {
	    hashes: [],
	    ts: [],
	    heights: []
	  };

	  var delta1 = 7 * 24 * 3600;
	  var delta2 = 12 * 3600;
	  var delta3 = 6 * 3600;

	  var lastTs = 0;
	  var lastHeight = -1000;
	  for (var i = 0; i < this.index.ts.length - keep; i++) {
	    var ts = this.index.ts[i];
	    var delta = ts < 1356984000 ? delta1 :
	                ts < 1388520000 ? delta2 : delta3;
	    var hdelta = this.index.heights[i] - lastHeight;
	    if (ts - lastTs < delta && hdelta < 250)
	      continue;

	    lastTs = ts;
	    lastHeight = this.index.heights[i];
	    first.hashes.push(this.index.hashes[i]);
	    first.ts.push(this.index.ts[i]);
	    first.heights.push(this.index.heights[i]);
	  }

	  return {
	    hashes: first.hashes.concat(last.hashes),
	    ts: first.ts.concat(last.ts),
	    heights: first.heights.concat(last.heights)
	  };
	};

	Chain.prototype.fromJSON = function fromJSON(json) {
	  this.index.hashes = json.hashes.slice();
	  this.index.ts = json.ts.slice();
	  this.index.heights = json.heights.slice();

	  if (this.index.hashes.length === 0) {
	    var genesisBlock = BlockHeader.fromJSON(constants.GENESIS_BLOCK);
	    this.blocks.list.push(genesisBlock);
	    this.blocks.last = genesisBlock;
	    this.index.hashes.push(genesisBlock.id);
	    this.index.ts.push(genesisBlock.time);
	    this.index.heights.push(0);
	  }
	};


	Chain.Events = [ 'load' ];


	module.exports = Chain;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  { height: 0,
	    version: 1,
	    time: 1231006505,
	    bits: 486604799,
	    nonce: 2083236893,
	    hash: '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f',
	    prevHash: '0000000000000000000000000000000000000000000000000000000000000000',
	    merkleRoot: '3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a' },
	  { height: 20160,
	    version: 1,
	    time: 1248481816,
	    bits: 486604799,
	    nonce: 77026265,
	    hash: '000000000f1aef56190aee63d33a373e6487132d522ff4cd98ccfc96566d461e',
	    prevHash: '2f82b87670845faadde3fedd0dbf5040db62ba2b25c23e2c8408c17400000000',
	    merkleRoot: 'ed73df5023c8e8f477fb965fe4c3cbfe5ee34b7d8b56c3efa3f3f9c0b275c913' },
	  { height: 40320,
	    version: 1,
	    time: 1266191579,
	    bits: 476399191,
	    nonce: 404824782,
	    hash: '0000000045861e169b5a961b7034f8de9e98022e7a39100dde3ae3ea240d7245',
	    prevHash: '1a231097b6ab6279c80f24674a2c8ee5b9a848e1d45715ad89b6358100000000',
	    merkleRoot: 'a822bafe6ed8600e3ffce6d61d10df1927eafe9bbf677cb44c4d209f143c6ba8' },
	  { height: 60480,
	    version: 1,
	    time: 1276298786,
	    bits: 470727268,
	    nonce: 79831892,
	    hash: '000000000632e22ce73ed38f46d5b408ff1cff2cc9e10daaf437dfd655153837',
	    prevHash: '934c2bd5a456180b404341a380d20f51d0862b38311deb4d9505450900000000',
	    merkleRoot: '299a1702e49cf69bc3d0a6eee27510cc3cca5a427e1d000b2ccaf907116aaf48' },
	  { height: 80640,
	    version: 1,
	    time: 1284861847,
	    bits: 457664237,
	    nonce: 62591483,
	    hash: '0000000000307c80b87edf9f6a0697e2f01db67e518c8a4d6065d1d859a3a659',
	    prevHash: '0e860de65c35a94d2e335be7d79aabb6e3ddf3918e6d65c61e5b230000000000',
	    merkleRoot: 'e36abc2127229d3a94ae0e2067a0a75cab61629d5b2f01b927df43b6c0025a08' },
	  { height: 100800,
	    version: 1,
	    time: 1294031411,
	    bits: 453248203,
	    nonce: 4161067556,
	    hash: '000000000000e383d43cc471c64a9a4a46794026989ef4ff9611d5acb704e47a',
	    prevHash: 'ddf75090bebe04fd00bd5d54945a7e775ff21a012374e284fe5a020000000000',
	    merkleRoot: '7a71100da32b454f15e1863b6dda148c830f92c0e99806c10f69ac6392ea3cb9' },
	  { height: 120960,
	    version: 1,
	    time: 1304131980,
	    bits: 453023994,
	    nonce: 1421383768,
	    hash: '0000000000002c920cf7e4406b969ae9c807b5c4f271f490ca3de1b0770836fc',
	    prevHash: '3d03ef67e92310f1f1161fcf6e3631bcd25a93e5e422b5ac84a3000000000000',
	    merkleRoot: '7096173096e73db173c4b21ae76bbbbf655ebb5bd9662e91da721144c54eeada' },
	  { height: 141120,
	    version: 1,
	    time: 1313451894,
	    bits: 436816518,
	    nonce: 3976845853,
	    hash: '00000000000002d214e1af085eda0a780a8446698ab5c0128b6392e189886114',
	    prevHash: '0a5d88ccd0c56b9bbe4c84acae7250a2d4dc5ba92f52783dd307000000000000',
	    merkleRoot: '2c92030e6281be57bec776b084dc316febfcb2487ab96ec71708af36531955e9' },
	  { height: 161280,
	    version: 1,
	    time: 1326047176,
	    bits: 437086679,
	    nonce: 3046705461,
	    hash: '00000000000005911fe26209de7ff510a8306475b75ceffd434b68dc31943b99',
	    prevHash: 'c48381c43b1d2ebd386c70971289aa69e974ff281fedd27f1b03000000000000',
	    merkleRoot: 'fcec0145025b8ac811b486fc91f07f5a39a2170c2eee1066238dda4545af70b6' },
	  { height: 181440,
	    version: 1,
	    time: 1337883029,
	    bits: 436898655,
	    nonce: 2809617698,
	    hash: '00000000000000e527fc19df0992d58c12b98ef5a17544696bbba67812ef0e64',
	    prevHash: 'b807c2dec8b735f71bba13196f69dc26d2c75ea831862bd7b404000000000000',
	    merkleRoot: '9061c7196a009b9616b0cbc1a93e70c6334e1bd6efe27908850ab034c659fef2' },
	  { height: 201600,
	    version: 1,
	    time: 1349226660,
	    bits: 436567560,
	    nonce: 4152174980,
	    hash: '00000000000003a5e28bef30ad31f1f9be706e91ae9dda54179a95c9f9cd9ad0',
	    prevHash: '9d6f4e09d579c93015a83e9081fee83a5c8b1ba3c86516b61f04000000000000',
	    merkleRoot: '25399317bb5c7c4daefe8fe2c4dfac0cea7e4e85913cd667030377240cadfe93' },
	  { height: 221760,
	    version: 1,
	    time: 1361148470,
	    bits: 436508764,
	    nonce: 4279069987,
	    hash: '00000000000000fc85dd77ea5ed6020f9e333589392560b40908d3264bd1f401',
	    prevHash: '747ccc507cb0be8b458daaaf94c168f48a555fda0995a84cb303000000000000',
	    merkleRoot: '1460f2f1855d75fc1be8aaf21b58b004fecaae04ffc681b9c6cfda641f6221d7' },
	  { height: 241920,
	    version: 2,
	    time: 1371418654,
	    bits: 436264469,
	    nonce: 3979416716,
	    hash: '00000000000000b79f259ad14635739aaf0cc48875874b6aeecc7308267b50fa',
	    prevHash: '410abeabf007c1247961d2acd133393fafea89af19ee6fb6d900000000000000',
	    merkleRoot: '37eb13c117f5099289a43abbd5a173fef04047db980c0cb84c6a1930f3b9c614' },
	  { height: 262080,
	    version: 2,
	    time: 1381070552,
	    bits: 420917450,
	    nonce: 1988117787,
	    hash: '000000000000000aa77be1c33deac6b8d3b7b0757d02ce72fffddc768235d0e2',
	    prevHash: 'c1ff84e95f9a73d760b37e444056b74867fcd8a382e13cc11000000000000000',
	    merkleRoot: '3998741bf1f6806b26bc8496f4efbccd52ca36b27b827c2dfb6f1f055e72c3a4' },
	  { height: 282240,
	    version: 2,
	    time: 1390570126,
	    bits: 419558700,
	    nonce: 895994530,
	    hash: '0000000000000000ef9ee7529607286669763763e0c46acfdefd8a2306de5ca8',
	    prevHash: 'e03f401bd7d2484a323ecd4b6bf9945a1a35de61a44235510200000000000000',
	    merkleRoot: '3eb2df22382e43f5b527c0a6b8b230bccb93947043b7f9357ad3f6591f289749' },
	  { height: 302400,
	    version: 2,
	    time: 1400928750,
	    bits: 409544770,
	    nonce: 4079278699,
	    hash: '0000000000000000472132c4daaf358acaf461ff1c3e96577a74e5ebf91bb170',
	    prevHash: '6653331789442da38ff405a9f3807c7d3407a7e085b5e90e0000000000000000',
	    merkleRoot: 'c5652bd21f27a0873515c5a538fc741ee61201d72413c1856e0986707ce3604d' },
	  { height: 322560,
	    version: 2,
	    time: 1411680080,
	    bits: 404732051,
	    nonce: 728819049,
	    hash: '000000000000000002df2dd9d4fe0578392e519610e341dd09025469f101cfa1',
	    prevHash: '0f6af938320a7efb354df9da98f3e5c0a1de0715a2d107160000000000000000',
	    merkleRoot: 'baba50a2116b65022b437a9c912c83d18c39a161d88d5d261011413c79570b73' },
	  { height: 342720,
	    version: 2,
	    time: 1423496415,
	    bits: 404274055,
	    nonce: 1383767140,
	    hash: '00000000000000000f9cfece8494800d3dcbf9583232825da640c8703bcd27e7',
	    prevHash: 'dc0ae15cad873162f27db2ff33d9fbe2193aa492e1e9d1050000000000000000',
	    merkleRoot: '339167c2bdf04f5aa7aa56b1ab8925619e7d851e2586d771c519402c640ed5e7' }
	];


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  [      0, "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943", 1296688602, '0x1d00ffffu' ],
	  [  20160, "000000001cf5440e7c9ae69f655759b17a32aad141896defd55bb895b7cfc44e", 1345001466, '0x1c4d1756u' ],
	  [  40320, "000000008011f56b8c92ff27fb502df5723171c5374673670ef0eee3696aee6d", 1355980158, '0x1d00ffffu' ],
	  [  60480, "00000000130f90cda6a43048a58788c0a5c75fa3c32d38f788458eb8f6952cee", 1363746033, '0x1c1eca8au' ],
	  [  80640, "00000000002d0a8b51a9c028918db3068f976e3373d586f08201a4449619731c", 1369042673, '0x1c011c48u' ],
	  [ 100800, "0000000000a33112f86f3f7b0aa590cb4949b84c2d9c673e9e303257b3be9000", 1376543922, '0x1c00d907u' ],
	  [ 120960, "00000000003367e56e7f08fdd13b85bbb31c5bace2f8ca2b0000904d84960d0c", 1382025703, '0x1c00df4cu' ],
	  [ 141120, "0000000007da2f551c3acd00e34cc389a4c6b6b3fad0e4e67907ad4c7ed6ab9f", 1384495076, '0x1c0ffff0u' ],
	  [ 161280, "0000000001d1b79a1aec5702aaa39bad593980dfe26799697085206ef9513486", 1388980370, '0x1c03fffcu' ],
	  [ 181440, "00000000002bb4563a0ec21dc4136b37dcd1b9d577a75a695c8dd0b861e1307e", 1392304311, '0x1b336ce6u' ],
	  [ 201600, "0000000000376bb71314321c45de3015fe958543afcbada242a3b1b072498e38", 1393813869, '0x1b602ac0u' ]
	];


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// Autogenerated by scripts/spvnode.js
	module.exports = {
	  "hashes": [
	    "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
	    "0000000002d5f429a2e3a9d9f82b777469696deb64038803c87833aa8ee9c08e",
	    "000000006c6d02760d64950b1ef3565fc9195fd758c4f9b3cf1037c055c95dcc",
	    "000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6",
	    "00000000b5c41fc778883bb00fe535d3510d8c01209e1201151d819795740b0e",
	    "00000000b1d92d801eb3385f605ddcb314bf3d2cdd94940dd47f6585f41fb749",
	    "000000009a4aed3e8ba7a978c6b50fea886fb496d66e696090a91d527200b002",
	    "000000005fb1187e0f421479738db9c7fa205f633a74b988f338ea84d7212dd1",
	    "00000000e655a6b283f0b716725fd5681aa41b08a679d65b1564ec8515ef45f0",
	    "00000000faff9b6900e995e98f7d7817b6eb7563361bfc2c4577c39d27ad94ae",
	    "0000000007df4a6e603db155f76ea469131b1ba6c8e1aed5179ef5c29108c92a",
	    "000000009b28503a1755e120cb2ef8c744fd45961bea18af2d3c4e43492eb20f",
	    "00000000906cef1ee0cca07b30a9db422d481536ca22cc61cbc31fd66da7d3f4",
	    "000000004716dcc15195dc344aa7bfe1df816d21509424e930cb7b94413b4b10",
	    "000000005e77d434e55f6e6cbde60cd5b829fba71b09859232e7dc7198884e40",
	    "0000000040206949827272f209db87fd3362556c93562864433b85d97c52aaf0",
	    "00000000ee581151a4d182af021c376bf71d7fea4e10d892550ddeb1d1645161",
	    "00000000260d3161f60c4d23b6f8b2f7d19c4f9eae2c354003c74c6e19a2bdf1",
	    "0000000061c6e5cce6587e39921c2b77e2925c71367bd2efb68b0d7098e685a1",
	    "00000000b1c0f27f337a92679c51785af544fe98ac6e1f2fa92edb5fa79c3c75",
	    "00000000ddff5bc44604c75c4b0115d6fd3da3ef3adf0addd773fb8b40673e8b",
	    "000000005265d22a7f5676ec1fd450cd10085497482439630530abec39c5d2d6",
	    "00000000427e457ae1d44c88e78ac0685f2dbbc192dc2318728053e8b77a7603",
	    "000000009373ab8cf912050e3d9a3a7933b0ac1d3069ccca1a11efa6bbd9f4a5",
	    "00000000e0bb8c9569709a55dbb9e36ee754534ec28fd438fab74312d60533a9",
	    "000000000c73f0d5da07174f87d554a5d9379332e59d28a3eef798dd33dccc24",
	    "000000004dc7e0fd5f7b7e694df8a2ada39f5263b0facdb37c5d6027eca50ef3",
	    "0000000042ec50926bc6e547e89a2bcc339fa4104a321437dbb79d58cbe19da8",
	    "00000000fdfa6c237d959076bb37ff2826d176641395fee32b917c66bae09375",
	    "000000004f012d3deeb53ea9bad75ac1b9d421522c4bcb84f41c4429265594b4",
	    "0000000054937164d49eaaf404730c7c35377f2815f917a2ef9a7ef717737ff4",
	    "000000005e26f8f08a61a29b7465f2caa5f6cdabedc9acf740f9075c77041c85",
	    "00000000514198be63643dfa4290fcf008a64b4550b08695016802848f872feb",
	    "00000000ca9c0a2d6b297c9569d1d8d0be7154fa5cbc2a3aa3289d50765498bd",
	    "00000000f4d669b83791d914f8d23fac895f1e248da856082078bcad41669b0e",
	    "0000000022b36223df8e83bce330ecbb286c92021230bcc616c5cc74660b29e9",
	    "000000008b5d5ae3e29c1c7f40ee90672eed5f6f27f85d5bbfcaea9d333f791a",
	    "00000000a9f7951b94c788d7e5b96e1f606bae29cb7439b3b2f357411b2f7cd6",
	    "00000000ad2347640191fb915c0329933e87d7204d86594c06fff363103e9344",
	    "00000000fa1c0eeb4d57aa23609edf276a0d38f7895a37f33e969b9b04fba236",
	    "000000000ca08faf922f8cd81502787e39cc3c8669ed202e6bb4149264d9de21",
	    "00000000ffc8f2beb8c54d552bf7e0322dd3b70e7901085ed081b78b06a38567",
	    "00000000b2388fd50f0bb223e36d65ad4026880fd948397d5d653a4845405cf8",
	    "000000001bfd4407a1ed6f4e769d7866a99b410fe515e3645a674e07d1ea1df6",
	    "000000006878cffc9b4b13525b7365e251fa86fa8405388f60afc7a16535f147",
	    "000000003046448b8a2e09195d977a6a11a7ed3329589dced9a852730f6c5b67",
	    "00000000dfa50ab5751e4941097ed043bdcf599a18a8473ab572195ece213caa",
	    "0000000099958f8b02bec36b2e0efe7686be7fdc088008115328c97af549dc7f",
	    "000000001e88c14637e8785d5d2671fc6a63f7437ffab8a5b2b036a64ab599bf",
	    "000000005469eb776541dd396e3d3aa46eb480f3518abf345ae7bec3c241816d",
	    "00000000c40a960ea4df0fe56c87b45ef2eb76c393954b26f28f48e92bc4c52a",
	    "00000000345e3221e310129e82a45c7ad1d178d7cff9f364551e5ea7de75f0be",
	    "00000000ca892c76d4087c625e922b5f29cd2d86a28ade5837400fd4cd2bc70f",
	    "000000008bde50df2b0a0250a296089599b2a55969ad2ed8805ebb541f1a606a",
	    "00000000076c0fc4d3dc4bdf766dbfc7288f887655ba87b4da978ea117ae6165",
	    "00000000dba3dafe372c2f79a7a29efc538ad5ce1d1836bc3b7bc91fac362716",
	    "0000000039af039628a68869bd8852e3b9a5912bc6ce1c24466a3ec440461853",
	    "00000000fd3407a46434690daa578a7076308f554f291a548d0197275ec300cf",
	    "00000000e6804129b9dcf57c19cb1f36f664681f0a7b7aa75ffcc968676dcf67",
	    "000000005243e4641ef0de16a24fadb8dcd10c4900e68d68d241a47c5447f576",
	    "00000000ea8165b5378cec5e8103665f093a9b39af8f2cd97cda8bade1204901",
	    "000000009b9895bf7df7f2c85048b8354fd7a385553ad4eff2a4243dee76b959",
	    "0000000016b984699422959f1c0d7efede323c3bcc7de7168a0cbc53d5c069d6",
	    "0000000071e3e79790f06722ecdc862d11de28b10a6a2e4822a4b78f2dae1a19",
	    "00000000a82a0bbfe7acccc33d78100361c94f74217a6e1326cae66bb268ea72",
	    "0000000030d8364545a0994c1a6e8eee17ff2e6ffa5d46af008511ce0368dc64",
	    "00000000d728bacba6fc16d78e98d4063c8ca582ef7d59d8c67b6c133ba60f41",
	    "000000001183e1aed087b6c8a47076e8494c32fe289c0b8f161b9ea1f9bbc9fc",
	    "0000000045f0caa20c24a64a6a29d2b25a4b3147871eb13924465ce4e981eadb",
	    "000000002ee85e8d96b73b3693dd75341819988665aef2c1d25d71e395e87818",
	    "00000000fb7b903367cf6a0a5d8748c90fb5e6b5b29b7166efdd4ef6a64facea",
	    "00000000e7e5cfffabaffbfea0771acf98196b6e071b5e4c26d20853c334e0a4",
	    "0000000068621423073517c83634ff1349dd9bf56b15b7135dc8b335a06c360e",
	    "00000000319d18d183f249fea4ca31ba36bc242b3032ae9b4b8674a93066e16a",
	    "00000000329f79a5cc69c426e1ba7c2fbaafd9849d78badae135d415ebe88784",
	    "000000006565d54602835431e9049b07c38767da966a761ca59684d4bac41af5",
	    "00000000ef9d254b5a6bb4154bc137339bfe859f53a512f9d107e3030872131c",
	    "000000008a763c6906e51833cd12c66abf8967f8f1564fa9925eb2b857e1b89c",
	    "00000000221de5ac65f61eb67fa845b7d5f332a3ff6e008f089c4af5fbd55e1d",
	    "000000006ebcf4811f8229bbcf265e92b6030e2257afe8cc742123173a09298d",
	    "000000003ff25712b60c4546d8113a2e3d59fbc040db6dbf248306382588aa8d",
	    "000000009c5d6ed76c7d39d4e327f79b377b0f43c37d399068acba7745089bf5",
	    "0000000089c8e6f8edb35930937c6dbf2baa7bd662ce24cd9103b05fda634941",
	    "0000000080c4ccd9fc2b23a96d36f5de27576c18792a0c92177dfa4ecc187ab8",
	    "000000008e2ec49ecf5158b9b51d1d4971b5d7276406dd4b3b9f4f8d1a32a8fd",
	    "000000007db8510fc06a07436c360d3a527901e9c67ede54af78cae65deeb2b0",
	    "00000000b6560b8b61a0358f16d09b9fb243b83e1900ac531c30803fe49ec86c",
	    "0000000045b85a4d4b01637c31ddca4415ead681cffe3f2a25ef2b08b1949ed5",
	    "00000000a7598111d0595321d2399d2b6f02ae7e61d1db8f46e45de6292c0481",
	    "000000000eae92d4633020fecde2fedb7bce0c2f37a8bd4865a987cdce6e13cd",
	    "000000008a07cb55e376984ad072eba2a9f5825ca1d2f2b1522d216d98f7fbc1",
	    "00000000a8b5b26129386e54cbf76cfcd1cb40503d235108d47671a171428480",
	    "000000008dc40a46b3fcfb31cf1115583b39e444f615efe4af42ff5b33c4e384",
	    "00000000598a041f2c2f7ff1075e57424d678dc0802c13624a281ac654a73a18",
	    "0000000028f6a3d279c5452a456ae571002e185c3bb72b8615d6df8387ffa157",
	    "000000007f6eb749f34dad3205f3c2696ae4346b8d005f71a3b439168684d444",
	    "00000000ebb969344ef894d66a9d7dcf3776ce2ad8fbb07c993e4a30f1874f2d",
	    "000000001711a3638de4d21de19518e6c8945b51e042c530a147967fb4408b04",
	    "000000001f43b8d5fef810474ed7fecca20a6eb516394b7172ec585f03d0a797",
	    "00000000e9c06b32caa623e2bd62b8756fb01a10168b05fefe04059e3c05b22f",
	    "00000000b481ea425d2d7fb7cf78f78e9a564cd925ae1533d50b41d7ba3078da",
	    "00000000ab8f089817e23c63c914e98860974a5a320ff3b5e695358b5cda5ae7",
	    "00000000433d805d5e92d12f4979bf58308ce78c22892af441bde2f1e21b84e2",
	    "00000000b28891532c51faf2456dc7344114ac8f03d8e56b17011e2439b17989",
	    "00000000220afb5b0d61851a2a67c0c570ea81e85aa7b6ba62f5913128219cd5",
	    "00000000767528eefc49c29418e9dc6455e5c90ab92c10b366129701b9507f25",
	    "0000000090abdd2ad8b3fddc0e1ec3a18fd67374637a55d803cb05c760ed2dfe",
	    "0000000057cd1aceb5b31ddc38f853aed5813ab7902723d4ff4c74eddcf56961",
	    "000000001abc2503dbe1a020f8603500e711590f2008d9d0a407642cd9070d07",
	    "000000004ceb8f463f42f624a924c73d65505672282f05884ce760a1bbfb0abc",
	    "0000000018fd5e0140817f274d9d1d6ee7ab412bd00e8b183bfb501e67fc5ed3",
	    "00000000b203b7f6b07fa499118acf133b0eac176cf35c6147a1f1859913b81d",
	    "00000000b642fa3a0a517c103f842176fb7c9d9135c6b31cd74d600fc91bbcc0",
	    "000000001eb37bb2e8b3b06535d941dbdc6455895efb9581dbc26e4ab5319717",
	    "00000000e818049dbf415246a1f4518cfce6fd59b6c7ca50af5429b13bd462e4",
	    "0000000029c1c36fe2af02df0e41cfa06cd80c2ce4d8912e0c1eedc1263cb979",
	    "000000003936ef749b3b84bd296838f1f661e4d7356704187a4e29604a4932fc",
	    "00000000192f97fcfbbb0cb3ed703007734e39a15c438937e1a0f672037f4407",
	    "000000008901b6bf1e1add2a53133cf467f01ac6d7deffaf75ff3e95b0153c52",
	    "000000008a53e7a0c4009d9be6f55183605280e8dbe169bad7e57d45bd6b5c75",
	    "0000000072a1e2ca11784c36e962037cf0ba9e3b1fbcaa9bdad42dad3d284f91",
	    "00000000ef66f617024ad4dff16575173f3e4547007abe7d108e1821127d140a",
	    "00000000d6957440795876c3984dcb6612eb3d00a8286e73f4a225887c1695d7",
	    "0000000059523722c5384ee994d81e957fe381f77176793d4ec1b1a58d609d7c",
	    "0000000017cc73d2a21f3a4f92c7a8523c3cf713349b67c0c6cdc58b84089a10",
	    "000000009e3dfdb1c4b95ee406d950e4d1af007cd05716a71efad7bbaead90df",
	    "000000005805347320aa0a3da659867b41b6d3f9c9f998ad159ad922c79c8f75",
	    "000000003404b5e9690d6e60f5b9c110cabd86559d3cbc5873bccf671ca1a80b",
	    "000000005fc8f15c3ec247407f3e70815694ca6a712613bec04aa950c826b660",
	    "00000000bef53fb454820d8c45d94aa071b055353d3bcb43b4794c53fb954f3b",
	    "000000009d8ae5558f22026e2db8596c9260ee5be8f43ef7ac9d635df1479cb9",
	    "000000005fbd2f5fb23171450051143f395d2dadd497a7eee1d1c30bc2521dcf",
	    "0000000051acd5ca9d0e227362069011634afef2b15734e739f7d6a8922d35cb",
	    "000000009d72148b6765cd1146f9db1335111d89109a37ed7669a3ad296ad887",
	    "000000000c42f1e9c5fadf25220aa8a2c02d7e6dde46e5e26d05e4f8b3c621e3",
	    "00000000c9e959f1852f1b3ce41f3bb08f902f5bf90247a61fc03b94b10087ce",
	    "000000003084d9cd22d26e7ebc5b979334b54e89a87edb473fe8f00990cbaa79",
	    "0000000003aa5f04ac5ea5571c975b39e907d8ea75a8a3ea0b695744c028a934",
	    "000000006259ef7a38fb8c6e794eb8b1a914e3630ff8b07f97c7ddc8cd00452e",
	    "000000007c2af5098b699106a6b7578a34514ef7ef6aaab11d08db4a5692b195",
	    "00000000451896bc92cd0061a9979d6c415ef2d80464059d74d66348d3524a73",
	    "000000004b42ee8d9cc5e493011beb9ad4789c69af27efdeb6e3339cea96849e",
	    "0000000096c9bf9554813c987e7becf6f1c7ea87d3ac3a3b8b499f4c8b44d1ce",
	    "000000008e2b81165ae5369ca3e7703c03f87714136525e2223ab29a652facc5",
	    "0000000064149ec6b3ccab2019c4ebcfd69f4568f4311f43fc7e883a5f8784f4",
	    "0000000093c66e2f09c0ab352a4be8945a98ce8c9f593fcfce56ae2464e4cfcc",
	    "000000002b0fa0e74d995d7d22b6b20889c651452aeb9fe11e308fc300d25e08",
	    "00000000b76abe87a27fbdc4d9f922985e82b47e57ceadd993b1623aa573269f",
	    "0000000029f704ae96653c55d94baeda1587b98afebaf2bdf7fe888dd2af93e4",
	    "0000000096e6bf4adf9f3ccd423169ec34c6a4f17e46a4a540d439949b9ef822",
	    "00000000491d74fed6eb7ae36c7c218853cc12e7ade0f4b9d8ad2a5686c85541",
	    "00000000bc714cfdb4fcd814782b5ec16b3ca400840ad9e236a4c77ba2a300bc",
	    "0000000073d2672eef6cdab50c06c5f6e38ec4f017304ec8721398a74838fd14",
	    "000000009c790957a312bb00a672c9f901630710fcbd7174f78f60abe6625275",
	    "000000000b4567d4fe3770b289b95714bbb69e30067f4bc261fa55da31ddc65f",
	    "000000000726d3a5cf1a236025a8dc63b53b652abc45faccca87670202cc7d9e",
	    "00000000614a69fda2abd8db14a69820bd8d553089f897e3611984eb8ef47e81",
	    "00000000108a44c004f9ca424ef1c446d5d98c619bd5f110fbd509bf4542a20d",
	    "0000000005aafdec0978d943e21c92f37ec7fcfd51c67a75a0cde83d29b0ab17",
	    "0000000079704c97b02632553bca598c457eed19973e364598668b697f965107",
	    "000000002895c3c0d5c5ca3d4329a56041560cc67327e6d9d85fd3eac793e38c",
	    "0000000054f43782b1c024902df90938c09df2fef26fd1aacbfd18df06e3f7b4",
	    "000000006b1c7278e129a588883de4f20adbef225a7f28bad6c3a7af7f2ede1e",
	    "0000000057f905b5ebc96022aed1f80153251f5723d59ab880b55dc3781d0c87",
	    "0000000052fc0beef538e41848ae5ad9d023936f05e97a912fe6aa55dc7e4c6e",
	    "000000002158d0ff2e91262ca85961040a7226992f00adf127103a9addec01c3",
	    "0000000031475abe43a3c24d66fd23207dcdac1c5a8a89267786d2e09ddb2a86",
	    "000000002f3cf075b4a1f7c07a84c48376f6192ad2410328f94d36928d8dbf22",
	    "0000000016726e31044ed5ed4fda1155e5a00c05e1f2588eee31e956188f2630",
	    "00000000112cd8a57c7dc7b6cb8d9efdf24e5d36d073e1033e404e3e87404ca1",
	    "0000000017f8bc41394745f490029ce09a4545996512e0f95743a1c2a1763bb0",
	    "000000001d1fff92dcc88e9f8b25eb6d7f93939c50daba539e524fbe757de28d",
	    "000000001b42f2d5074f299a8cf68536f2968d6dfea8d20c9f745db68a6efd03",
	    "00000000401eaa32b451f1fa5e37a11165c0fb7a434e8a53830626eb3d33a488",
	    "000000002940b9058975f96e67b98ff7f52a5f34177b081a83de0e2812065fcd",
	    "000000000615e11d58505b57f0bd812674086ea27d302ead6d7106ab20edea35",
	    "00000000001405242e1df26b0558469846998f5ee64bf71c83f21ee194e0455a",
	    "000000003c7df30796f499ad32ab6a096f2cb2e8d34f2bfa1ef75b0c405270e8",
	    "000000003bc939876516ea1f370392a39b65334681fa4cf49b69352507b69b9e",
	    "00000000336515b8ee654c3eb855cc459e695b7bb5f9ab5d86da2c893a51c931",
	    "0000000029c0cc4e5fd2fe15a7d0f913389f8915a17c5b3b32b214a68216cad5",
	    "0000000019ec103feed5ca1f4a5341fdcdd2019b844bbd2a11d9e49ae44d51cc",
	    "000000001cd7e15e71116756a096e12a975be5be40046a71bee506f1e30286a2",
	    "000000000949f6d0bc1eddfa171a1f74178b857e1fc59f9f472de45a73a83c6f",
	    "000000001c16088bab6c0cbe79088c31c206ca1d2e099c0c0c967281f0d6e437",
	    "000000000243a8964788fa9b6c10af03c352bd7c2e3756c1c359dc995f7ab6f6",
	    "0000000015691a0bb1a1299848ae450229db7d76f63ff291500b72bda9b15604",
	    "0000000027e66a6a28e0c9fc714d6413c581cec784d2dfcc99aa29cf6747f96f",
	    "0000000014292bbd96849657d8a18c1781fb073c2f44cb07408331d974c85182",
	    "000000002b3ac37dfe9df658a0cb3cf9c3fad2c433ccb5506967f74f6d02d485",
	    "0000000016eea9b85e8baca48ca7d8af939536c1bcf71fbd6160728f58140f76",
	    "000000000d3e7c314a44dd48f99619491c6dc7f11a537c93a6774738ff345053",
	    "0000000003bb14b99043321f5879ef81d5e2d837e53b40c347f65578bdff2a4f",
	    "000000002e6dce7a41f162480190ce11b7fc579e4cc91f4027bc3d25563e9e4f",
	    "0000000024d91f3e2634cd86b83162c656452f1a1fc8c374a7e9f129e8689c9a",
	    "00000000155d4c02bdc9770e663a2ee2fd94d109463e82db16d187cf364fad22",
	    "0000000013695c61d0cdbbc217c5c550e6ef28501bd271d50d09c7f676d91900",
	    "00000000255dbd3350943ecd5ff573e40c808d21ac884e88638d700c05032693",
	    "000000001f71e7d7ef11175823e01b59c8c53886538aaaf03db67dcaca79731c",
	    "000000001d93e45c46748da91dc08bf82c17b994c803cb26a06111de704ba002",
	    "000000000e7c302d1b15f013b62e96b74f1498e70760ad089480cb31d288f9c0",
	    "000000001500b926a8c4bf42a7e15bb021eea4279213ccc9d9ef80d2c02c9518",
	    "000000000417f08b22866e4db75abf3ca9d907977252c512023cc5c1ea0b0bc7",
	    "00000000197162ae38aa8c0c0959467b076a91c46a1391e6d9254f76a63f1e4d",
	    "000000001f19a835ebac1801f838dbe80b86e7f72915b37d339903ba692a8947",
	    "000000001092b12bb6fc9cb248e2d5e9b2b024bd46c780d9944eb4f16193cc41",
	    "000000001120ea98788e772442229cc5106c1b60a0d21e6b135dbdeb8b1de940",
	    "000000001894817a751678928c38597c0c9c910d8f154e254d622dbda2efe0ed",
	    "0000000008308bcf1ecbfab0e15fc9074939aa3cc85cdaee2afbf15ed88269de",
	    "0000000017224307727885b5a606e9e07498019f54edcd618dff47ede48b96f7",
	    "000000001e8a2d26a61f4826678134e20b0d739967ff6c580e763132e3d638bb",
	    "00000000080236123d70e011faeccf172cb806a5847084e74bc3172d3a9ff453",
	    "0000000012cbc4dcd3f721103ac2ea11c47143819254157dda26b8d61f30b952",
	    "000000000daf52dc721a91c0b54ee439304c6dd2cca9169eb1651c133f69b740",
	    "0000000003ac06907bc55cabb587f36ae38332ce3fe68972ebeddc7414fd60f5",
	    "0000000003681b8896641de82fe962a63e70a90066c1bda53609909cb5500001",
	    "0000000009f0eb5a0aeb7536c0edf21bce515b9d415b976e0bb5ddb9d4de5ed2",
	    "0000000005360268eac1d4b68537f3a1f642479c2d45baa52397b99e8b9e8fe2",
	    "000000000ea74eb79c379eff8485ee4d49aec72418461a5bd06201eab87aa8be",
	    "00000000146c92692b5d42ccfcf337a5907d98e780227cd1dd409f58fa59671f",
	    "000000000820dba18748c342e0d98542868dd89d00daf1e72ec4a6be061a1e86",
	    "00000000095d210ecc9f4ebc4e4dc7c3e01c291e624131e0aa1ac0fabaf6e6d6",
	    "000000000cae4f0b852725c3230471af6c637cda78909c8b34c7915676407f64",
	    "0000000001e2542fe57f65cda4e4d3eeac72529899e7d19edaf0a6c9dd217e39",
	    "00000000003f0f1c44be76a82aead8d53b3f97bc90b9bfab58b759f51321e1de",
	    "000000000cd8a347cee327d61916998e78f39f403882636ba75ccccda3c2390a",
	    "000000000ccc71c0f3e080eadfc66b4a5d51b3b83e107fe5455ebd61bd7e8b5b",
	    "0000000001e530ad2aa47f5ff6c66ea70633b840384c6041057b225b8df4345a",
	    "00000000087773c5bfbac1c2aca249e3a827510527dfb80c4a5a4e191596dbfc",
	    "00000000092cab38870384315813cd2ca72801397f1d4135b6057156c2db64d6",
	    "000000000448badcf0cee96a572337d37f794e4bd486272b4fb2af88de94d66d",
	    "0000000005be2479828ab8d0d06a7d45489d207e02f787971b9ab7cb44cc2b0f",
	    "0000000007fb68e417ed1c1d03ba39fb91536b717502098a25a25de9f6769612",
	    "000000000e2e95846e3a0c44442da893a513c29c1458b6a30eee8b85daa9a579",
	    "0000000009c022347ec0b1405bf404405358a4c6e7a904a84a091e25694bf271",
	    "0000000009d6705ad938ae0102c8876102cde476d77d88c44518af4446059526",
	    "00000000008890496d8d73a45419cd55ba19279d0c171afbe4e8a0f524cce9b1",
	    "000000000c20e359594da266b3206cf2c4bcff6732633bd26d1976e8661b4e9c",
	    "00000000007bf886a01b696ad6089042a4d445ad4f5deb577bd3054132a662c0",
	    "0000000000c149bf2a53213b03046e822862771686d64f5d8b6e2145d743d22a",
	    "000000000d86ffc06bc5c01a8d508ad01265a4aa920e12a974d21aa25aa5aabe",
	    "000000000f01d558521bcb066eaad0f4d8af87aea74e6240ef08d4b45b5b3d54",
	    "00000000074d134ea7fe162447392d33bb8b83ea86921de94bf7aadb87bd0124",
	    "0000000008c68fa00e9fb574d6812fdaaa044c6eb89f72ede7988b8d2f3d70db",
	    "000000000a7f2360044920bd6a0868f5f7f45b5a5dc2a7a2aa82583abd540db7",
	    "00000000060949cdd7b44e9cd7de122859d7ddd873571c64d671fd469b977680",
	    "000000000a1b9e6e4790c548fa89f70e5f5e88b50012ef3fa00c93a0215c9504",
	    "000000000e26ce71f992ac2639d4d72cf9597e09d2a6bca442bce421e093fb45",
	    "00000000001c51cc8180d9ebd1c0f3cb372efae3535a25d2ac474e3466e51a9a",
	    "000000000b2ed02152a7726c5cb22354e27e0be421114e6917c98e71a2af2cec",
	    "0000000007d9fa44244b183a58e788416fb67877931efb6fea5c4696c0b67205",
	    "0000000003c0ab8c251eeb8a7b31406be7555a62de8bb297b2510c8d871cd8ef",
	    "0000000000e4fad281ea79b51f6037963a9fd09fc2dce2a4e98dcb9c501889d9",
	    "000000000be9a4785bfd6ae099043a04a4fc6977ddbab717246e463787438a4e",
	    "000000000d083d7cdecc47911f23d6dc8a83e9598fd89eb915ee61e36c790be0",
	    "0000000003e7b77f1f4e270a0a70d064ea73232ab53b4924e6dc7a2d3a55d44e",
	    "000000000b06e5ce4904fba67ad1a1056d038d6f4872062132c91cc0de1b8de6",
	    "000000000ae9413c6ec2724311c38df41f3ebd79fa7c11a4f4ed74348c46ac4e",
	    "000000000bc7bba9579770dcb019236997409cb6d9ba91bcb2a06eb052ee31f5",
	    "00000000040c87697725d56e739ae50ab516909a082d7f7ad4b4614863242a96",
	    "000000000aa9116546d234f3b9c464922742bf499f6280a9a2498559d9cc8952",
	    "0000000009fb6f84976555f741af03b675c42b65dc73b3bf1b906f48eb4f12af",
	    "0000000000b0972884003720f0ff8e885fab92997e71a22c448e7caba4fc6d84",
	    "000000000a991a168c9d2137f7a6d3a9f4ed5a9fbbb2b77bc7a783f1365e0ea8",
	    "0000000002fe000694fefdae4a0503599e8693d690c66d9b2b52be4da05ccfd9",
	    "0000000007f4e531340d923fe2105cea7440c6bd9506c290dd8560ef90db6c22",
	    "000000000773725b7c33962928cfec815ea58d0d047db1eda03ff92c041591a0",
	    "0000000008032b56c64f3cb85c5ef544c16a3db19cb0a97fd8c52695c3588737",
	    "000000000595cc41a7c7a8314fa204b6c42edbd9793092d71b2e467f07a954f8",
	    "0000000002769fc6c6e73f3a615a1caff996b3f3b28bfb877259912283f4df88",
	    "0000000000bf30211e2695f2003f2830850be2f42081f01b4b87c28f247d9d7e",
	    "00000000058bd2da17c28ab57f5119d67de2af90bd3209b7fb0318a46b7971ab",
	    "0000000002e5824ab201cf9ddf354c0aed5d088641cca2cc728b94b484372c82",
	    "00000000053a4acd8b663a4702158419a588ffc8b5bcefcf4f4abd65c4de745e",
	    "0000000005838c5aa20a6a94df661a667d2b82bc2920847387959640ad1beb36",
	    "0000000001491b10937cbe36154e4eb4fb0fa2c0ab6caaf72a2ac7affadb9605",
	    "00000000006428d28170cdb8ee556ce3f7c65a568949682b6ff04724b5a915a0",
	    "0000000000cc4d194504e77d9794d52524373364aecb5a954d57afde56f378ab",
	    "0000000000141afc9381b06cafedb82b066902198189f583f8264018b3d2ab3c",
	    "000000000108d61ea09ae7ecbfc57d718ee4ed17c5da57ef432765f3dbd05d29",
	    "0000000000d09c21bd887f42972660b75747943d2589b1e8d7a223623a8b0968",
	    "00000000001323d2f32c53d6afe5e4b79eb756f2bb133226735f4e6b7b19a113",
	    "00000000005b68a86319d302ba28f810ed195af4b51ba0db9c718ae5f8ad9715",
	    "0000000000f5e3642529effa29fc067cf98b02c1e5f2cb0e8b84a3d7d878af5a",
	    "0000000000cfeeaf87b7451fae91a960de54f512c122f4af071a45fd96ef750b",
	    "00000000004f166fb96ef8036d9bf63ab6b6963c717d90598921a8e14cacba28",
	    "00000000001e4b20d34539a3fdcfe41e5fd2feb85d5c047887d6588db08b4b3b",
	    "00000000010b04a74c53b38e49f57a7b82ab4abe65cb296d94160c020ef351a5",
	    "0000000000e07a0b16d63b05f3d8b6dd4f3369e94cfe6f41dd67f19f885b728b",
	    "0000000001014f19e4004dd2ab6b50999b7dcbc2500438ff789a08ab996f1b54",
	    "00000000002c06dbdf9b5d93ae1f3407894592ce3176ba88130d15d4f1b96f2c",
	    "00000000003dac2e9d1294329b5be18c61513448be2ecc5361d06151ca2800fd",
	    "000000000023e5aa85b67869004ce9ce156cfb3f5100131fb0cc3d63643f1518",
	    "00000000002c600c568de2299e907f9694a2b10657ed069932fc31c27fe48428",
	    "0000000000220d3b2a428b53c07d3f60c9b557ed0a897b28face4f6a504687f4",
	    "0000000000532474acbe1f72f93ae1ea3670af224496d4b325921c5beea4968a",
	    "00000000001d5ac5b715a423770138a009454d3ea8d0dc8516312ba54ec91edd",
	    "0000000000a0140db1f7a338a4c390058162e8e327fdfe0995233438770c9720",
	    "0000000000947b501af34525852c9735a3d5899745130a8788db152262fdb802",
	    "00000000002deba5f2143f2eaa49cd7e5934da15cb0f85de09110bc6c6cd5de5",
	    "0000000000553aef5cb1e9e0faa495ba3f8964220a03f34d15c228f1abd75987",
	    "0000000000222ee9a60a2679fc4ab30fb08ac09ba0b8ef90c1fb4e22f18b59f6",
	    "000000000002494c8d0abfeac40381e9ff1b8d6188ac6f4bd5b987b73f2599ae",
	    "000000000069eddd6c8801cacd44ae072831a268ff046cdd74a7924c01957ada",
	    "0000000000290f002c7bf27453de77cba505ad6f4211c89ea0d1c7e39e71974f",
	    "000000000030e9aee27469a98730d2134a2f1618bbf2ef109cd7fdbd6a4f6230",
	    "000000000074c0c58eccc978bda0b785baad42ca88dff54d280862f425048f6d",
	    "00000000002ac6d7e20e8cd0b3cf590dd3ace60d5b0f26716ab8c81712af34f2",
	    "00000000005cd2bca975d46d05d638942137725fbb691a5a2f7f53e3a4e2b7ac",
	    "00000000000ef654bedcc4d434ed9e19190ea18ab07b9887e82c65877b8ee08a",
	    "000000000068b42ea9e1f28141b356c15d3186a6a4d5a256b6c9373b4de309b5",
	    "0000000000182e50763b30835754e3413857a9be7fdccce6e1d6c3506228a3e4",
	    "000000000062dbe9a2b1d47c59c5234318a2478f68efa83faf64ed4e0699ea43",
	    "0000000000295f10162805afa1b5479699b5a27c8e417483d39ec25f349959b2",
	    "00000000003ea590f9d0e769caf4421798a53abe7dea1efc11dbbdbeed9088a6",
	    "000000000044a02c9e03e561cda9871158a03fc9140f68e9881430ea8a6cf1a9",
	    "0000000000220ae8f4579845f47b3b3dc2763642ad1a89d0d292b07b5cff85f2",
	    "00000000004f24dc193e5bb413e309f5bd6ac179e917b63b511ef67f0a3fe4e3",
	    "00000000004618b4141acf7801ace3cd703e2bfcd6eaf42fa17906f2f4c0f707",
	    "000000000041b0163dd95dcf92182422eaff065e20cb7ba338bf4b4d63bd14d4",
	    "00000000002c5269a1a31468d1f08ce95caeab628a1b619e56617ae1f406bf85",
	    "00000000004dd1b4e8361e4b04ddceb3bf54cc37b92aeb1d5591c46d865216da",
	    "000000000043f0e626cb28161039c3cead06ff8151bb2df0ee931500b69b6629",
	    "000000000013f12ebb245baa2865edf2bc1e72d60e9141edc9be01a61d5d34b4",
	    "00000000002a33fff0004e81e75e4fccc652e4d7a0cfb5976d589ff315fdcbc4",
	    "00000000000247386405811fd86ad1186c4d96d86dc8d3087b0eeea20cb48bf6",
	    "0000000000314dd5868cc1705e98092eec2e8ff7f5d9517702aa704deca91d24",
	    "000000000008528884eda75e43ac56f262e05c83af39f5846c1a05730b2b2421",
	    "0000000000417152a0bac4eadb362269ea27379f61e5b89f2e9048c1019b4161",
	    "000000000035c52aac56785bb160834716e8783c83a35e1f9d0b02d11a70276e",
	    "000000000018901ae5a0e051d387383707be0f51d45e4a90794139714616c99f",
	    "0000000000405ef47c50c2ea882ed36833ee087bad4c17d8d533717dd9bfecce",
	    "0000000000078b68f1c95cb3fa441ccf8c3c3a7c2ee4d89b60ae66f23008a728",
	    "00000000002cb4cf493733acd747218aae00eba25d9d8a57e8b88d47cc5642f4",
	    "00000000000df762aff27f7e2d5a21c1abd9c6d336ece7e73be91133bdcac513",
	    "0000000000290192b0b4d78d6bb00c81e983b1be1b1200e80b20a422bab3d0d8",
	    "00000000000aa689a7477d7d4cdc98667bd397bdff052f13fdb2b579bfed167a",
	    "000000000001c883b3fa405d22ba481c9e8fc549101454e5c649d12c4c6143f7",
	    "000000000000530330f4d4f1562db9256f7afc7ba896059f86db663a0ecac8da",
	    "00000000000b458b558ef904c144c2acbfa2cc4965709784518f8b5af15b94d0",
	    "0000000000298e64507d0595ac5d413f77af84573523dfcac8acec7be8591d80",
	    "00000000000b95741193f761bf15347d3f89e8fa84ff87a5b7a9b1337ff6569f",
	    "000000000026ad89757b81495024c1d0d0859880718e80b42a8c0b2e9529e4d6",
	    "00000000000b7c9db8e3e4ec39fb1877c866ddc77e3aa95f43a9671b50368e95",
	    "00000000002e28291e1aea040368b29dfac08db8bad47faf6bda2fb6eba86a95",
	    "000000000004f99cfdb8ee32e5f8d76f1f6e474572e6763df2cc41ac8fe81259",
	    "00000000001ddc1581c24db8e0e032194f54afbea2e565437ae438f4e5be0b07",
	    "000000000016439dbd94561d7eb6ac66df685df03a3417bca2c4bcdd71c83f45",
	    "000000000022cf29db5f27601c6c63db013d548cd49355d728fa76c135475dd5",
	    "000000000007b67642ae991cc4356c11a7577dc85fba22d5c47369676a11800f",
	    "000000000003c85f10072110911e4fa1d151c69469250c0a9c0c8a8952c1112d",
	    "00000000001bc5649c4a234aeb2a6f25c13ab53c4fa609bf5e6dbc73e8e1b14d",
	    "00000000001d273cddb8799abd3a9be8cb8685d0a13c96454c9f93193d25bda4",
	    "0000000000139555b6fb1faf6f4ec20099ba6d452258ac572d71c0b043ec66c6",
	    "000000000011d6cae6be7c315d1656890b9734bea5d091921955833a04d5233c",
	    "0000000000166475f9139b9ff3fb0932dd4137e8e9c78d43003249d12b3f0965",
	    "0000000000093fee04c17474abadeb10e90b37c00c09e48cb915c4df39f81ef5",
	    "00000000000d53fdcc46584c0ac85027c1ef623ac63e5feb717531e7151bcadd",
	    "000000000014ecc2d680233fdd107659335928e7380c8924de5487b4d489d655",
	    "0000000000016a1967e03abb07f607861e849743bd556f9843f79412b032b784",
	    "00000000000f9cbe0e221ae6a2f81be0efbcfa9995e3ded1c5cf2d3134723211",
	    "0000000000093daf2cc58d6505186c8d48a4b7d3b23b3c129443dfb932fc8fc8",
	    "000000000005c99346c3702935f6119324c7a36219f66ba30cdba392429c732e",
	    "00000000000137ea6ef5d4ab57e4b2b014db98cd9a6829e4c88670e0f8eea031",
	    "000000000001e9881cb3fb86638e2d7d049865946e47b87c353971d9807262a9",
	    "00000000000c2b510a151a6cec8c4fa60ea1b11dd16902bb19924f01bbe06260",
	    "0000000000018e42d779dd911335318ae03b9e9938ea8c26ff35ceb437abe2fd",
	    "00000000000db1286079f50cd885b71e51f7b64694f6c394208fba63f2b0ef3d",
	    "000000000001d7582ebdcd30bee5e7a64cae6d1b33f951b147111609233bcd0d",
	    "00000000000da85d09e8f91cba7092eda1b23ac842c2f624a5f8a1eddd1ba511",
	    "0000000000035aeb75fdb6a67b4131f01393f7e4a30f6b5604e92dda46df9abd",
	    "000000000001535a21e42ce7958f2b017a4611aa914bc9c66df3980b95f49a36",
	    "00000000000af7e1f85e60d681a5c21bc85eb78f8f3975ee8584f0de96a72ce6",
	    "0000000000044f6d97197a2e4818d26aaa68cdb74f066b20d0993f8662195dc0",
	    "000000000003adffb5041dad6bccf4ccb71ec9a535c6e487d7c88dfd875221db",
	    "0000000000092136d0dc28783cd15068ff84e53928c617e66a11f91b9cf3f11a",
	    "00000000000389b50f52d2060b53edfc10e71de687d1574f6b5fe5d4368c04b5",
	    "000000000001c025346d8d726698af32425e1dc8d956050ebcf870e3acc3453f",
	    "0000000000086f2fc1b63e045c2d63566c04e998ca0dec3ae6061c5ff4d340b5",
	    "000000000006e6ad4293fb79df413d791c6d36e0a92861fb75de732d2fd68f0f",
	    "0000000000032be080b7d23fb45bd68fa7829b0f20603a85e408609b7949b86d",
	    "0000000000080150b97c35e906289d54daa48ec7479c500d8f6ee058df67821a",
	    "00000000000527f3c205a842c0a535d0cc9adf4aa0a4fb783ed812e8d4e74250",
	    "0000000000035cbc03153945ea7ae6fb8cb801dd12717f3f429435e912ee3239",
	    "000000000007b033ba714087659c5a87a2141cf5683400eedeb969e783c9ce0f",
	    "000000000002f63cd73bac93ef5e442f326a9b8c5ea2fc133f22f633b5441cef",
	    "0000000000043cb9ce343bc7fceda15b58680a3d5aba151b362f6bdbcc19ccf3",
	    "0000000000074e1a8173e88a6e6bd4616f5051ad11ce120f2235ba60c568417d",
	    "000000000004b2bfefcdfb5650d9a888be44f8e29759a7e2a299676230768b39",
	    "000000000003987f4a8feb265fb380d34d10d0b95eea59a4d143c3a8c364ded5",
	    "0000000000030a1e0be977a2798a04846bc091b9269a56832caeb91163283a9e",
	    "0000000000049616da74d8f0f8e9d271758a62b5f65b26228bcaa71c12558e5e",
	    "000000000000e0d9d98cd837f65f79e1c85a5574069ed32def3f52d7577e0aeb",
	    "000000000000dcaab612dcfd2a7b281c794a6da9006773dab55141ac608bfc86",
	    "0000000000040f97fa34328d2e29656c9711d41b9901fe0645c438447346e99b",
	    "000000000002bad0a808dd19cfeeb2f199732473691e98b8f0032fc378926f4f",
	    "000000000001886289adfae77f0cb7ddb217174ae30261f1e31f6a15cb7355dc",
	    "000000000002cef2359f69a27eb2accbedc4a13a8aa032424c6ab439b8c6600d",
	    "00000000000230272f310bbbac8c3ec913d89ff9d6a01e16c5f13494faa6f1e7",
	    "000000000002858a7ee2991ac68a8a08fc360ad40e45be7977bde4beff5fd332",
	    "0000000000016ef4c4ef649095621f115fb1dbdc81edca070bb29e1a521269f4",
	    "0000000000040620de0100ea0a8a25f1e76f45aba1bc42601c542bb46441fe73",
	    "0000000000024344c42a3be608019d0802ce5d4131a5b30cd5e0266d6acd75d4",
	    "000000000000f7d65ec9d2aea42472108f8cb621e47b0bda92691dc91dd9f00b",
	    "0000000000023c3c181cbde637b9b51237ff67cf96c5abaac9677f1cfa771c33",
	    "000000000002065566750a9b98452d0887cc4d33017e6b3c16c3f6bb583cc5e6",
	    "00000000000137db47e945d36eb1e5dc7365fd96e6e063375477760dd1ccd423",
	    "000000000002d4302e4d2f0da50290eb2d19ea84c6f346fedd8a7ad4830516e8",
	    "000000000002b44eadaae9bc9217541b3f73658b7f54fd77538c129f7b62d59f",
	    "00000000000325287b1992aa57a681f1d01bfa9dceeb4bb219199b41eca69409",
	    "0000000000007eeb93a5dbe911ac843be5020dc0142c6cd50443ea17b7a52eeb",
	    "00000000000128f25b130d2dbc8e155ee1ed0471783768a30996c3798022d916",
	    "0000000000026e0390323ed9e8a178cb92442efb121194032edef0e5cb3a774b",
	    "000000000000ba5c72025202912ac554d49adf87f3992f1681ea149d04fba9b5",
	    "000000000000897302f84075bba42bbd01c6fb6ced6b9efe965f9f4a074a2fb4",
	    "000000000000f0a265a64aa46e59bf51fcc9d85d1b11c9b1c42b11dfdfa70457",
	    "000000000001c67d89272c16eefacc9e11b980d249d434da50f8968115c53f8f",
	    "0000000000022cabbe867aecb49d3f7bc014e668e9e7a386a37e700e93240f58",
	    "000000000002f95efad8ad4d13c3a582999cb2d459ce2edfde75fdb2cb210d3d",
	    "000000000000b717176bb5c7961098760fba7fbccc1a671a433cc611003fd8ed",
	    "000000000003802884e8931116a57f8aaa691b0e6a0dc59bb5b26ffa1c7025f9",
	    "000000000001236bee8ae1358217b44382f0d817d9284ab5f816f6cd111fb229",
	    "0000000000004c2d2ad1ebb9270db61cc67024f0e725a0a439565b36e6871693",
	    "0000000000007aa748f3523abddc7b956d5d844e5c081187ee4faf1d9b704807",
	    "000000000001a55f29e1ec767004ef751416d8813966748792d86b8e913c5c3d",
	    "000000000002afb217894c9c85c44103e3286f402989d1e24e1fce880a5e0b5e",
	    "0000000000002f25d9cc3425ce1af41d460de77b47bd4bac20625faad7c6e649",
	    "00000000000120161773284a201731ad25e12acdaea1f7f792146a47c9d29f2e",
	    "0000000000008c812601c143e495df837a02daf632b7b41a38f0b4427faee027",
	    "00000000000263651ccf50465f1936c942ef06e54522344f5dfe483211da2fe6",
	    "000000000000fb28fa9a32f7a68ae1f0f3a12393fe7a12282fdb5ab3d03d2c78",
	    "00000000000123b433c120da5733a80e49a360da415ebb27e2457ba09a0cb820",
	    "0000000000026ad1e0658ac8fc26b6b77e828d8ce1ca8b9ab48a0e03fe1c1299",
	    "000000000001a2775e31a96520116bb3a1c6c2f8978b1f754909ea0f945e85d6",
	    "00000000000107f1f1588d50795d4845065440d60477c5a0f3ec205078027b78",
	    "0000000000023d0db069106169afd2ac8c291e0501225c79b2b541a08e266827",
	    "000000000000747f67cc1f1d8e75307da2841b32e46ba5c75356e66c65dfcf5c",
	    "000000000002512dfdd34416aef0522a99d7419318a4bc2a86578734cac819a5",
	    "00000000000133f5d8b7c24e85b5cf1f74c6c329bf51c150dd61166f1ab7664d",
	    "0000000000000135974bc75b175961b232775fdbc0419bd8b5ae2ddfef61cfe3",
	    "0000000000008e2e78f50a350636fa59d1ae24bccec4c8eae2d86ebf47dc0b5c",
	    "000000000001651f34b0fc7f645402d7b060dd87c02fe5f41d87a89e7a7a9704",
	    "0000000000018d671f3e2138ea2e403ee9eb5275d1cce04c209b210058a07f14",
	    "00000000000122b653563fc4e70c9bd7d30bf6e03e6c271dd4a39201dec611f1",
	    "00000000000173271716db343dbcfaceda543fa58ba014f26c8fb7c73d2270f1",
	    "00000000000134749faa2a1540a3b41fb71efa6656e7470e70c3599c924098ea",
	    "000000000001010c21128c9c0b104bb5e71c62c345b28a15ede2eef30e81e3f1",
	    "000000000000ba23649986a7d8e44b486155b333d53d03f52360b0cb24270d7f",
	    "0000000000005fa82e35e903eafc1f3bbe9bd27dae5181aac6d735a6d48491a5",
	    "00000000000067f09873276c18492594a368ba66c745b5645412917a9fd5bb77",
	    "000000000000877f162d285816fff056940104f14913bc5a7342231a2195402c",
	    "0000000000003637444280bbbee63bf0cc3356a07f93542aaf8194fadc0beb28",
	    "00000000000119fc92398a3b9adae3c879fc8e83b069db66876d3435e1f38091",
	    "0000000000010a705314f4b2117f4b333a6f44c459aa1548555e0b341bcb7958",
	    "0000000000003c91eed190b631a7c4c5ca1ead926c9479beb534f34d341b003a",
	    "0000000000009973118f3cf8c56b0efe12638fe492f3d7087d209855380933cc",
	    "000000000000acb3ba7a34872a9f90b4d286dab2545096d8fe66bfc1efee4765",
	    "000000000000b696db4fa8b8b8155584929bb818397b895b162c25727fa895bc",
	    "000000000000a6e844491fbedefccfb94c623c82c8f9302df07d165bf42897ba",
	    "0000000000007637ea6eae98dfc25c66e7b8604d5878d04664cdffde67ded0c9",
	    "0000000000003c48a086ff1d735965b8317452ac87082e1b3f7d3023f13d5d7b",
	    "000000000000cc248cc894f96ff61ed1097751902bd3c0b79bdc8d7c4cfe28b3",
	    "000000000000568628b70d7a6eacbd8043b16682de787ab53b75baedffc66c71",
	    "000000000000dd291c626d5c336b383c9608d463d3ce771aff85a62cd620edb7",
	    "000000000000eaa3383c315179384f7be705064ed869dcd92e9a2f1b9de42ac5",
	    "000000000000f01cae80a811e8a01f2a722ee677d38cfe36057bab4584b6d94e",
	    "0000000000001082bc662f892e1592d49f7b842184a9d663afbe5ccce2ff74ff",
	    "0000000000005f9476ee325ff485beb4c5cab26a84c15d8aabb9e87d3cee114d",
	    "000000000000330c59df9d736642f04c889ee496e3a35d8c6382b6cea12c6ce0",
	    "00000000000093941e4e8053ca16c000388c6df8e8fc57d69ebddd6fef50626f",
	    "000000000000b9e8bfdb5cdb9d79d66c691ec136212b60da85c2b8b97541a1db",
	    "0000000000008d01dc710a096d3afd1f08219a204973d624a7f19adfafe340ca",
	    "00000000000093dba8dd99da2edaeecec455f50eceb797b8056902cb8040890b",
	    "00000000000054a6144f1b5aa275438c293a5331fa9e21937e2bff8205a9a71e",
	    "0000000000008f39d8cbeb5032754a007ced3e2947e7cf1a1e6264acf9c78383",
	    "000000000000b036bf676e6de7fcf197ee2a7c1256ed221a7857c346739eac6d",
	    "00000000000008209c3df5f3be33acd04a20fa4393a9ee5be525387badf416a8",
	    "0000000000006b9932d54670a6ee6e97355f096fb21adb250dfeb65cd19a3270",
	    "000000000000900d28e817b63b522db1ce38d726fdbd6a58512c829c4099b9e0",
	    "0000000000004548153a1199becc8a1e7b60a5fe9294da69bc17435258824845",
	    "0000000000002533d6762b7cf99c6f78e4e4a9906005c6b5cb2b82a2482be9a9",
	    "0000000000009d3b73102fe7423fcc8984ae1395ada0dc805e5ce2dd1b077e49",
	    "0000000000008383ba4f6bafe877dc042d0e72d2bb754cee7ad9a5d5f896812c",
	    "000000000000196cc5bfc0da93328d1b74ee9c0413240eb6eb56ad8aa8b7b6d6",
	    "0000000000001f76f19d62590e2963ba3a30e734e00ef29e5a6a3592d16fa50f",
	    "00000000000088a15614eef704b28ed1354cec6dbd4f36cb0c17d09af1453c65",
	    "0000000000007d65cd99d0711480f26aba3ba5c02a4a40360eb0d4c09ef8b1ab",
	    "000000000000909875a153d5dc76312cdb350e2827fdbfec7e53497db8348d69",
	    "0000000000001b0ab05ee3f62d1fbc5f049de417f76d68f964e959c251699095",
	    "00000000000038ebbe3500266718e8f3b0054bae08695d15a52dbaa3a382c770",
	    "0000000000006a0259b09cdf23ac6076bc2c9a32599f4524c2a1547c172a1592",
	    "00000000000005a6510ed4f58b5076d9cdd57a2311a397dc2a1800ec07b3a4f3",
	    "0000000000003ff9ccc408f2bfff85f96329558496dc3da7ee97c5efc6ff5c6c",
	    "00000000000046248f121860a4bd2e097d8b58ac5ec17ae2b7fdda3c24c1eb7d",
	    "000000000000408990b3f80c12e4908cebf95b5d78866adcb37f7b0c9009362b",
	    "0000000000005536e49bfd9877934a9c23062f587f5033ed62bfe4a88dff29aa",
	    "0000000000004785ffcea3026fcfca29f69e59bfad8d11f6edad364cd51e8c62",
	    "00000000000017ec2432af5885d4f386ab80405fc41dba1b657ad4c012d0527e",
	    "0000000000001cd70bae9b67690bda09aad27edc399f92c339079712b7b2e9c9",
	    "000000000000550adc4e7b0a06fc331e487280ea6d92c5d2574c92e09e573dc0",
	    "000000000000203d1cb80f175275e04730e39ecb9318ba63c4341121e91dcdf1",
	    "0000000000002438a0cada239843dd65a0af7f21cb293e4c7fd4d16230647a2e",
	    "0000000000003c578a626a1a7f8673334433c6444466a445c38095c4c7a884c8",
	    "0000000000004056433ac12f03d052e141aec1b7e0c2109ffa148ffeaf0ca724",
	    "0000000000001f26931c3eba9c310b31200e6eecc3cddd037eba0f1739cb3845",
	    "00000000000020d817db226a75c6e902f9b3bdfc70464214a5460913b3372b86",
	    "00000000000034076ed3a6bfe9b08e6ce0be826973318eb15f66c7633cdb2dca",
	    "00000000000038ad196dd9e425f898022aff4ec92e03501522444b0cee5c4336",
	    "0000000000003d7446301df02056837cede8112b9c7db91140a20d2e3ec0e7ee",
	    "0000000000001a3193b2a833668c8d0716e62184bcf4cdfefa901ecd72afae3b",
	    "0000000000002049b7733eabe85e0aafa9a52da75d58c4627c6d0fab6f252471",
	    "00000000000008782e885541216410e5bb06a0fd50965c59cfe71f2877b22d96",
	    "00000000000002387db51246577cf2309b283376b439f0ca4328ab6f6c9480bc",
	    "0000000000001962363d180bbd40b183141f6045995954a0ee52c1aa9216bf85",
	    "0000000000000eb12411a043bf220e0e60a4d8c026604ad18098c9ae9145d9a4",
	    "0000000000001a266bceaa7913776466f38251e0f493558edb68a669c6da0670",
	    "0000000000002444527f5e18b809b35a0ee8fa48f32889ebc1906f6a5bf94397",
	    "0000000000002640e5ca9f089dd4ebabb7452da610ce97b94a94fedf041e8fba",
	    "00000000000017311781b58f1e2fe13d2b79c9a4c7a47185060cab692a735a78",
	    "0000000000000f3594e017f589c6a587ea1cb171f250a42287107b8ddf86973d",
	    "00000000000006a8fc85e94fdc2b8a4013683bcd4a52cc84d08e7d685feebd60",
	    "00000000000001f1b074a2c66233443778f40649532cf59efabf4b08990372fe",
	    "000000000000199913e99724818b37a7bd9f5bfa56fa3bb794ad3b52c59a9e30",
	    "0000000000001934194f50d7f1c9b2760bfcd707238b98fdf6c8441c2b2671f8",
	    "000000000000147bbed888761d7be4af8996801d694ab47ee9be0624e48bee68",
	    "0000000000000ef32e28667aa9fd030cd723cd70f68adf8f4a264bf69fcfc6af",
	    "00000000000012fa38f5b8ea67d09fc74ce38786d1fac9cc1c323900e84f32c9",
	    "0000000000000753ce60e25919ec7d5aa7f9a3d944be0dc3f0d4c40302948921",
	    "0000000000000b6285319e770fd4fa882e2ab743a416b022e290d9b51f172b8d",
	    "0000000000000d10ac21e3ca050b58201025e32eac276100eeffb754561e12e0",
	    "0000000000000e5e78ce8e80e2e82b33c9cb4ed9d33bdbaf511bcba950623a79",
	    "000000000000126f9eebb751dc4642bbac0f986b9219dacdc007f5daeb5e7569",
	    "0000000000000472a6ea17184519c7556afbce88bb0f32ed5865775b90de9049",
	    "0000000000001295b1707e1baa4414a0e6ec36667403ebf08842ab0bdc4da122",
	    "000000000000080a1c2829b8cca9242ad463e2c18f083fa3f81972db56d53874",
	    "00000000000001808bb2d170ebdb573906db0dd680be166edc658c7381b2a258",
	    "000000000000089725aa4a744b007eab366f4364e7cc8e832f60f68712baa7fc",
	    "000000000000075af58d17c6e7849f0bd25df180fb508ba645a32390123c69c4",
	    "00000000000007a5ca67e83f29bd9e2cd37042b36880fe7454949de57bae906b",
	    "00000000000007003fb47df9f520e292413501053b1e337a2349c093ffc6667e",
	    "000000000000078f6716d397e44ff6fa4727cb99d30a66dc36c5d8437a289be4",
	    "000000000000006b01c624b37a5d1c93ab81df9346e4de03aab685178ed82747",
	    "000000000000032d4fcff1eefc77cb42c58c38add84b51e5eea76954fe97f18d",
	    "00000000000009bb2369d756b22aee04b53556714fe580cc888f2c2e77c1ef89",
	    "000000000000015a2a8d449eea41a7b44af5bad5536c3bdeca43fd7f2ffab44f",
	    "00000000000002f38061773dd002f4084e2847a2d190dcac6011ab474483cb69",
	    "000000000000073dda261ff455ce8c5450fe789c0eac8e6dda53057f1c6b38ad",
	    "0000000000000755ed8765a7dcadd02dda860aaccafe0ecbc4cffb1d782cd409",
	    "000000000000035ac219a1a52dde48ccd7348deed858b1da47b0f16b7ac70ea2",
	    "0000000000000478fe446584997ed5df66b292eb1b6d99b713c1b4cfb258f0cd",
	    "0000000000000a05248d9377d445e4257eafb07f85cc6538b0e9ba31c5453aa5",
	    "000000000000045f868d8d1fef0fdd146f5a5860ed0e2079f1e41737e8ca33d8",
	    "00000000000009e4c02b32c97c10b8dd1ed69bd4c89a16450527850077bf0fa5",
	    "0000000000000253746d3843b48ffd156240fdbf944193319349d0186a051184",
	    "0000000000000405f05f004462aaba1c031f399941b2807e69a21e14ca7fde6b",
	    "00000000000002969b23b5f950d94643651b43d4d08449a263fb8fd0f1f58846",
	    "00000000000003bf30a2a3ee90269e648f8929611e38f24aa9bbbd5cff9e67d2",
	    "00000000000002fe8ff12a30d57854d973405c2489878bdc2a2a0ab7f3c67aef",
	    "00000000000000e7b27eff8543ec3debb8aee0e187a334b760898939fc1e5bd0",
	    "00000000000006039dddb288050d5dad1f222a3c6850fcd76e585a95ee2e0c57",
	    "0000000000000856423877e6461b95cc05f643d42edf25931004c76ef0e4c0aa",
	    "000000000000052b64713d0d3debcfb19005358512c6c623ca5a58e9ae31795a",
	    "00000000000001e0bf214d521e3d1bc191e525fdd734ce8d9d68c8d18d52187b",
	    "00000000000004bfc8d4d237ed23c471ad7e50a8a1eb8d7316730a76f5444816",
	    "00000000000002adc09f6fbf798138557926ac830b30414ef5d1c0bf923491cb",
	    "00000000000003ca5fb1f8bd949af0c11e9d5c94120abcb03781483374de2029",
	    "0000000000000205dbf966de130752f8f93c66ccf8210be03a577d0cfaf2cd7a",
	    "000000000000045ec66b162f3d2bc758e092ce2b5f6e441c0c133c4e1bff8be2",
	    "00000000000007137f4969b2a4c6c16947d48e6bd7675046d31005f37e123a51",
	    "00000000000005a8208a9d20affb7b92ef48f07048f1c74be56af3a1c9716087",
	    "000000000000039d976b1d072edca1e004a1edcb4d2068635010b1c38019edca",
	    "00000000000000456dd6cd6fe5a257bb48f54eeb54765ca817f57ebcdb12cc3f",
	    "00000000000004917d0a7120dc299cd796c8f3f306911a1ece2304517ecfdb53",
	    "000000000000040812fc287d82080d31b8413ae123914bacb006088012842434",
	    "00000000000003fd23de7822e709578d10c558b8b0c64705392992d7de616fc3",
	    "000000000000048321ca69e6bd2dcbcaaffa938650b149f4e2df0f0f7e2a0db4",
	    "00000000000002c4f701978b357bb5d367560152880a2b4b2dd6995d0e66ad8c",
	    "000000000000060dd5bede98254cf379cde24bd038792ad6245bfd449308fc9e",
	    "00000000000000c03d2aa0952b5c6c6b292ba48c97d44c773a19e7f5bb30432d",
	    "000000000000061b4115d89a12eb9b9b26893225c03649e007076b36964a405e",
	    "00000000000003412ff12ed668486c551e7c68a2223f7f2edcf6c9af0646686e",
	    "000000000000066277de7837f084473dfe221e77110f2f360bb05cc158045a08",
	    "000000000000094c29a798bc3aaa5b5cf94ea3e215671ff40569f1d66d0f95f9",
	    "00000000000002cf3ef4b1a9e13752f60f5d445d7afb6626154d537357edf5e4",
	    "000000000000007f08ae4fbfbafdfaf4b3df09620846a8fb14ab7b77bb431fb6",
	    "000000000000037dcefdefe238767f2eb3603a60779fb7fbbc30a7d0008aef37",
	    "000000000000080ca6ca95ca59219ae761e1270732b7da8ec35bd26b1a31c45c",
	    "00000000000003bc8d8804f80da4ff792d69b6e78e2e3191beef5f97743c473e",
	    "00000000000001f717904525c31d67e88a842df52a1571f651995d947f54267a",
	    "00000000000002584fb7f28620a2e2c3efcfd9948cfe653f704c10f9d9033611",
	    "00000000000006df1efd975eea27b59cce1f29682ed5d461c36967d26383bfeb",
	    "00000000000000ea9bdd8391ba18ea7a94c809dacd91042871729e36a25190ac",
	    "000000000000009ade7c2083b801f882ea38eac300386a6e4480099343c8fd77",
	    "000000000000081204b0a548820e96c133709996f2f061062a2e58b03d3d9778",
	    "00000000000009301d488d6c98cd8eda95ee5cbf8d1480b5d0e958656126ee4f",
	    "00000000000000cc61ec98acf28d0ef27d7d7fec901e33e59fb8bb1eca169fc2",
	    "00000000000007bb578b1b9f7f046dfb4eef0985a583c66b4f258c7294100292",
	    "00000000000006785c707b5689ef9eb290b36dbd9331b757d7c717a259e9a7c6",
	    "000000000000047f5cde1cf23cbb199bf948478bf87275f20a212539cbbac163",
	    "000000000000003736489f8485b9d809d5afb3b0739fa7a31d8d960892d1e885",
	    "00000000000004c6fd923d6daf47240d53e95c66a81abb14172e84a16706e0b5",
	    "00000000000004d352a2a20b8f80a7eca1320e8e3cf378948eb905bddd53f835",
	    "00000000000008420e9b51004741bd16e347695b213b23b946e0cea65c37e32a",
	    "0000000000000366efb2e13cc24b10cd6cd0b2b270c822e8c93ea15dc67cbe8b",
	    "00000000000000b23b9af9ab15859412a247978af2d274a100cfc64c30309dfd",
	    "00000000000008b03c1b6010b7f746d962f72fd149d37dd4d1949b19e23f3a4e",
	    "00000000000005bf62c8b6a68ea36ee1619d3d57e9a3efca18852c6be278be71",
	    "00000000000006d69c3b6c1dd48842881742d8c2d0fd4eeed03b55e815d43024",
	    "0000000000000964bc0c28efb74cf2aef9462867bc74e99f786340e28176fa11",
	    "00000000000000d1e2730332ac2441544224457ea06e38f4b7eef4eae05f4220",
	    "00000000000001aadae93ab0278f29c305b84019946af5237a932becccb17ca2",
	    "000000000000078afd27b9da666b3b044ddbbc41ae83ead1d8ac152406eeab11",
	    "00000000000009ad3b4f854c1034d3944b2ffbb81e5660ac5ebb6e3696fa3754",
	    "0000000000000449f3c699917ab3653f94922de33ece6b2eb35f91617f5cc7df",
	    "0000000000000a73f19f6a4a605c2ac330974c4a7ee5602f3705f00e32479a81",
	    "0000000000000534e04434464e6fe64560ee79a9b32c4619da97fd736c5d4dea",
	    "0000000000000a33d66ce51597056ede6cc80d6dc500fe47e2833ff0fc585e09",
	    "00000000000007aa42948eef8fd5cb02d6624b3968f8cdb4306a5ae561fac43e",
	    "00000000000002d202340ae794ff98c90b11677ab510f0ab335c154ead56c46b",
	    "0000000000000940a9b230e078b1b6f58e29950a38533927f5cc78aa693c79e9",
	    "0000000000000c66469fa33b32ab332548703ced4fdcd84e46007caaaae19dae",
	    "0000000000000b538f2e896697bfd7d24735ca956daab733aaa65c587ba00dc2",
	    "0000000000000bcca849be0eae03b11336ee36c79760a5013020004498b6d554",
	    "000000000000078bb646d21dbb9bee96b233b87fd0993f81ec45f1b35ab1ff62",
	    "000000000000068c864b5b3529de24cc9cac7b4d8ce902301fe9da81577522e0",
	    "00000000000005ab269be35e493d44068cab2e5bb3ba04cae0fc3ef173aa0045",
	    "0000000000000badb774f799bef8234bdebf699c1f6e32ad7e15a52b6a6baa8f",
	    "0000000000000c3f188b1ecb0d526829073844d1292df58bcd79dff424224b31",
	    "00000000000002472fae56b33945b51c30a73887690193ddc19f99d848d45127",
	    "0000000000000c55089a797a5d2622f99f4413762094243d81ba1c90c9621065",
	    "0000000000000abd235f2fc115f38852d218c62e94bb75044be204c91c761fb9",
	    "0000000000000878bfc4d100caccd5eec6eb3eadabac56e9ef50e5d1785d63ff",
	    "0000000000000e4f461cf1e26448750d2bdcdc3a8364ac8bf503e16aa93a5098",
	    "00000000000003985a5b409d1ac3330b7b282d0ae042cb1336d2a18d66ef396f",
	    "0000000000000b5fab9d5cc68ae06a46cfaa59eeadb424728252e9068f4dafd3",
	    "0000000000000384ca4c0eb24d3aed5d31893682e0371b4b63815c26d5059e44",
	    "0000000000000cc5f9d41efa07be0eb00b4d301d157bc44094f25972c4b03100",
	    "0000000000000dd6bc7da518de7358273e06a46c0b36869764b0a677dee2b61c",
	    "000000000000067fc6889ceeb73b69fd691c3edd1a3f5840b73da869deec6411",
	    "000000000000034af6bbec4fed50d8a8768cc21a1c367d58f75c4f8b818d32c5",
	    "0000000000000c130ccb30f32b2e8a91e60f9fd73b749689edc0f28ec19e89f4",
	    "0000000000000b4c8a4dc40732c85ea7625301151e537e7191a4567de0474284",
	    "0000000000000a1a19ea160516641f865c21ffdacc6cbb04aceffb6edf0ed251",
	    "0000000000000c2fe6763748993594fcdb949b223bd399fa1995d2a7d8a95b33",
	    "0000000000000463d65e25cf335d6d999e61ca6f10539c981a020c10cfb22ecf",
	    "0000000000000b19db0539d5bbb039ebcbda4abf18b4400b01e39f1c410aeb4f",
	    "00000000000007a0e2a86f8b505924c7cd37f0aa751c437b810679ee71b95471",
	    "000000000000077ff30a630bcc14572f367149148b817e6ac33aab4647de104a",
	    "000000000000092b977d012ece7cab94ef99ed6a8bda1440eeca860f15b8b173",
	    "0000000000000060ff290b1e863c4d8af703ee53d8c12ae29236d9605a9e8098",
	    "00000000000004bffbab40b456b696ab01b355210c158aa800404bab0f41a44a",
	    "00000000000001ec2848a93a15b0a60ac0927c4a9023fa95bfd6ee268346a052",
	    "0000000000000934362478911a7a6c74964f4bfc26c661281ecfa1bd0f424a18",
	    "00000000000003f893c27cd775b4417ac5536d7392c732bf095f61eab4b6acd6",
	    "000000000000098492f4616918d790cf168187fa94ca152607c5fd29bdf6fe30",
	    "0000000000000a39727407cafa4f8eaa6f3c84d431430ce7d61024d61e2c4c17",
	    "000000000000071e314139d908ee62582deecbf8e3f5d204228012fc8c20c5de",
	    "00000000000005209615a7bc9ab1e55663d1685f0c37c5967630738b2531594c",
	    "000000000000032a648c003821191e12c92fae413283a5442c397c68156a55a5",
	    "0000000000000401a5c939bbf679a4d6879cd695f89580089592deea0ff1b67d",
	    "0000000000000b527cb42f916b2f9d7fdd3b7b57a05878a214ee73bded97fb03",
	    "0000000000000bd008981efe72cc643ce4b706d7f81d5b6d7b92394fde8e48de",
	    "00000000000001ae0791dae000940110fd2ffa19a5721cacf696105d8fbf33da",
	    "000000000000034f5a1611711e019f698fe459c06c8360835d35da3e006e0137",
	    "000000000000036bce122e39f9353253daf62fd065148fe4efab4837898db48c",
	    "00000000000009813be7a051d97869c01354e19590189a057be5d4caae82daf1",
	    "00000000000005879bf126cdd435998d69661240a6442f0600913ff707e5f585",
	    "000000000000016d3e4a945d3466f30680c05a2d073740bcc777bdb32afe956e",
	    "0000000000000ad1f4e9879428e54b77eeaa6d79531c53c0509272fa97965906",
	    "000000000000013665636747c22bdb4e7f8d4d9910717c4bb81a7f8dcd6f2d82",
	    "00000000000009980accf286e8c90af192f0a10f7debc0d87bc420854c9a1a00",
	    "0000000000000bf43798ed33cf848364738096680da72a54ec1574bdcf819936",
	    "000000000000054204129619fc149ec086f5a992a243f6ff55cb913d42e03b8e",
	    "000000000000028bc8cfc80cd33cdcfb0a9910f739c2fbf53129a0e6091c93be",
	    "000000000000032541ad241330f52ae2880b3ccf33316b33b36e8b2e3bdb3446",
	    "00000000000006c66a6e90beb49134f2c9924a9863570e088f4228d934a4fd3c",
	    "0000000000000bf86e3f5e0585688878f88e671fc03249eb9c7767be169084da",
	    "00000000000008754df381c5168800d55c5c3832b8e9f99ff0d4adaef0811e22",
	    "00000000000002f7616dfb317e8d728034ca17ef9c0c937f67ae6c8e11b7f4c9",
	    "00000000000005a5eef6938a1d0e529295abdba906d9a70d4fcf448f24823140",
	    "00000000000008d4b172f52fd109a33a0fae6efab2d7c001a95999b2b621ff65",
	    "000000000000003cc669b158bc15c38e94c1d249393f24c8f17d803623ed8108",
	    "0000000000000583a710132c1f3ff39bdefa6cb593276231bb76521eb4c35c3e",
	    "00000000000002d8351a7a078e66c7b7d0d14537f1d7c1dfe97f1a33b1e2ec7e",
	    "00000000000007a7f207fafbdd08d6e6fb8eb4ec9451df4dcf9b0c36a764a037",
	    "000000000000024a3ff5107a99cdae77398026c8b0acbae4b060ea31e3027cc6",
	    "00000000000006eabe079d5bb60e471f69b9dc94a44d3c981f6e2edc67039b0e",
	    "0000000000000987388de8dda46b2011dac5f77c406f7d49637c0c2399935d9b",
	    "000000000000071b79ec8512a381fb21a9692be310fc70628639b4ca759bc269",
	    "0000000000000a6b3d3b690efa01eab53a177920e53b95f122fff9fa9010cfe0",
	    "00000000000000ec954eafd35645206fe8251085aeb2edffb0cf9723370fb98c",
	    "00000000000002d742fe123dfaa0354bf7706edf36f0fa6b6cef882f83745bc4",
	    "0000000000000088fd0174ee60612dc7d376fc3ea6f709db994dc640367bcb21",
	    "000000000000016c648f258ec404e7e4f9f1019f39b1fe6d98dd8ab8ac51b946",
	    "00000000000001f5bae0275b3fbeb343ec7fde2442ef5dd16ee92a03d886e0c2",
	    "00000000000008ea6c51c33ea8ced1369b7ec170e730dfbbb32772773c52e239",
	    "000000000000015b424a4519698dc0cb26cce2d1036c30fe42c32f2f66c87232",
	    "00000000000005adfec497ede7ef83c9627a3e260956beb3d160122c84fec0ba",
	    "00000000000000d7d42fd8dc29b6de802c88e8d385e15f32d2483a3837bfc13a",
	    "000000000000042c6bc4634e47ac2c18d4a0a5aba49a878a7f834ea5c51e376d",
	    "000000000000042983103ba7acaa2b34adee8b5366f085ec6eab7518ad1eac67",
	    "000000000000008ad3010900247c569cec4dd39850cf5f2c3452a0d20d6ba722",
	    "000000000000070767e12e10e31b01ccf2891ac8236985111550b66405241843",
	    "00000000000003585ac8bae3bd50d43ebd039004162ec9357c52a1506eeb71de",
	    "000000000000065c821924c4d6beab579014812e70f9f2179dfb0a432078eeb8",
	    "00000000000008fc7e6f2b492bb2c83659517066554169c5c857e3e723cda325",
	    "000000000000086f5e925684e2767573025cbf52cf307b8b5473438137f5571a",
	    "000000000000098f4994254ad8d93463cde371782eb6dbfe9ed6ed265989035e",
	    "00000000000004fc5a641ba151903950731ca797b2b7804d6d09e62030db0c38",
	    "000000000000036955b97ceaa5353994cc05c3967e83f14d161aaa2afc2b7b06",
	    "0000000000000a4ca2ce7783b14ee49251684044e39862d312543d5667bfbb13",
	    "0000000000000042173cbe664ee3f9f3c5226d5f907609cded7c22b0fd3c6d63",
	    "000000000000054c85ac95943101fb50d3801b09af57ea9c070425a67abfcc2f",
	    "0000000000000328be47e9cb1c51a8ac23984da3e7f3666ca32e12a63c9eadca",
	    "0000000000000a983ae5df0a0fa6dad5400d6f78f724e9e92ae75f2f0220965b",
	    "00000000000005e566a4e6fda95fdbe9090a568fdb75d59e5ba094f5e6a24c39",
	    "00000000000002abb224715d100aa48ad0239b0efa1cc7d4c634a98b17dd484e",
	    "00000000000003375b42d0b86abca40b7ae1a8d860fa0efd9f79f3e61c5a70ec",
	    "00000000000001be7fd570c036dbcdca2155dca3c7aedf24375fd8db464a0446",
	    "0000000000000746fc502e6f5733ad9f8bc51e965cbef088ee3651a183b5e1f0",
	    "00000000000007ad8bc87466f989eb3de1580163117d464e539b7bd2274c6e69",
	    "00000000000008ea1d821d5ad39b69df246ba04ab5f3d843e4e3fcadae6b80cf",
	    "0000000000000169076fddfeb9dd78f9553f682231e973a08cd99e8ac5be87fc",
	    "00000000000004abe522e0559dbbbb67a87f70a2cae7ed3321934ae9a24ed050",
	    "0000000000000731917efea34919300fd99e4178091e8a29fd3425aa789014ab",
	    "00000000000002deeb4e7caab32013d4f0d74cdb95739e998cb2b902a95c5335",
	    "000000000000031c6a6da880dd20f3f3c1d1bf49249738f19c8551d7b5595e23",
	    "000000000000067f65a19c58bed019eede2b35b19d44ae02aaaf7a3b73371ecc",
	    "000000000000073597f05525d63475d34ea79d2dae62f0888d6fb6dac3e28f08",
	    "000000000000040249de6005ee4562e7cc63cc7c2d61949ac29605d3217f9365",
	    "000000000000058968dfa59e68fca125f90b71e97da92fd9356e945617c770ee",
	    "000000000000031e226de80078b57458bf52de959393346f22b5f733191b11a9",
	    "00000000000004fff15f48be99114514d5119bb75b912e242b66db0404939087",
	    "00000000000003fa200d9fa0ab0d348f588ef40319fd1599d970cec479c4e3bb",
	    "0000000000000779f5c00b1754e37a41dec82a6458a9c18c14805e29f7717ea0",
	    "00000000000002e9e2356be8fdb5dd01b50509a9d75f53b0ae95f05aa30fce63",
	    "000000000000067d4a0b13151ee4a70b8b2bcbf46aef03390d3c2a21d3bb5b43",
	    "0000000000000122f747ce5b34cf8490c0d5a74d93bceee1f20ae9734ced8023",
	    "00000000000004c49597e3573fd7a520b643f2c91f9639ba7235d5c1a15f58db",
	    "0000000000000105662f4c86dfec6639c77fdb8a9369c6f7091dabd61806c30d",
	    "0000000000000539068dc04bcf65adc36fed9453f646938b5a3b7dea4067df55",
	    "0000000000000a8f33dec98a08e1cf005d8c7e4791ff203a0e4c6c655427857c",
	    "0000000000000620ca3a6aae871985851d87caa288d876d111daa25508aae368",
	    "00000000000003e41d9741355da7f80feef3088f9c74a2566bb73bf01852a0e4",
	    "00000000000001192aae2ed93e569acacfe0f33a25cd33cb5a17ddbee2aed1d9",
	    "000000000000079884965176a8af8f417151f23ddf8a0659b17c7ce936e533b2",
	    "0000000000000742c9f87c54bc449ed39669b6b81ea010d11fa247e01791f139",
	    "00000000000006e5cd708f7d0825b9c6b2746f36fc9045c4c0025c839a28cfc1",
	    "000000000000061bb055e3c51ff9110b945af2da8c0a4f2277821a824387b264",
	    "00000000000006f8df86bdb54b8b28f8868170cb77445ff9dcbc9aee697e94d2",
	    "00000000000001a64161015de457ba0d0d7ae0bca35d6d188a7b25ffe0b6987b",
	    "00000000000002322330a3772effd76b4f75ad2498233183545e067a4a6a59ab",
	    "000000000000006faba3ce3c779fa46e0fe29b7e3b93e076a19d19fc928f422b",
	    "0000000000000512df75382bfa0a441f1485b272420924b0bff48d0c1dc7ebfb",
	    "0000000000000918455121bf24fbfe76c685c573521cac475e5475b2d0423d2d",
	    "0000000000000397590476aaf74a619f1a57404fdba33a8d988f9495e4a47fd0",
	    "000000000000079c36784d6fb21247ea973337d973a8c42e1845e25969fa31b1",
	    "00000000000007f2a1099b62fed29d4c53235a7bd97dad58ff6667e9ed99eccc",
	    "00000000000008932f349ba22aed00eacb07c14f3edb642449e1be777eab4b7a",
	    "00000000000003f375641ac14736a457e2e92ec221a3facf2e1d031af11b8c34",
	    "00000000000002c3cdfe4c2b90b268aab6afc258ebb7030a5a2ee143d7eac6df",
	    "00000000000000630b554817bcc00d9959b10e5321701f7f6b893038c196901b",
	    "00000000000000932f58378308605b556d82da0f2621f87de79365ed3ac8fc85",
	    "000000000000018965e38df2357490269ed6d3b73be4b2adfff25529637d5610",
	    "00000000000004aa88935c47df3fa72e736bde3b561f58a518975203f8e72865",
	    "00000000000001ef2b3106e718229dc1dca59c0d1f90bc15f31bece5a2ba21ba",
	    "000000000000016b77659a90ceede43a36e6afae2beb65cb42629a62bb1e3aad",
	    "000000000000068e717f08fc9fcf7afaf9b0944b0a2f5192c773c2824e1c7353",
	    "00000000000004b8d2d1fb7880bfacb75a311f56b82fe0b7d67f610a1c0dedee",
	    "00000000000006d2908ae02df945b575cbb40c89ddcfacca40c4db6436c6af21",
	    "000000000000020d465147fd5917f711ebd3d99182a065993d0f2813a2d6da2b",
	    "000000000000067b14edb12078c287c6f4d62415882c0153c05f5c438fbd53cb",
	    "0000000000000646142b2258fa98bcabe7a9a52b338814ad4fb9cd905d7db9b0",
	    "000000000000003b9b7780614086d26484e29e4aafe54ebbc64406f6092b8d45",
	    "000000000000024a292955df190bbbe5e31621dfbdf683cc41ac6275f6900fb6",
	    "000000000000038254192dc1df0f3fc117b670a607913090a33b97124dbe6c4c",
	    "00000000000000de4829ddb5e11746beadd00c6f5c50fc9c0b0128b69584a763",
	    "00000000000002f881fe4ed1eb52f3292621642e10855b51ee1095d91d2019eb",
	    "000000000000012a8236fa6e9eeaffee8d8852443fba31af7b2ffd3b433e118f",
	    "00000000000002bda3bfe0688c542ff7e0f4596929502553bcb06003446e6e29",
	    "00000000000001ff8113d33dee1694fc0aa722e8d57a732193618de23524c44f",
	    "00000000000005c6df17da9cc6d41d37bfc32336c2f82656c631d4927dafd02c",
	    "00000000000001193bdc8e09807e5646702660658eb15c9e28bdec4df335723e",
	    "000000000000009437b35a157ce2575087c779a2cb93fdf388ea4192d8fc7e58",
	    "000000000000013db0b7e594c5e8c487a2b768bd53d172ae996787f80d51901f",
	    "0000000000000039626909b876e5f1307c92dd2a67de3641d2aa9f8ff3dc73f3",
	    "00000000000002b6342b4b06d37bf76bcae1611d7cc17143cbe4846b9950befb",
	    "00000000000000809115db3dfc2354775aac9928d10cde6e6624e5f692d6dd9c",
	    "000000000000025eaf2dfc73b8a02fadca09104fd8627e89977f65353a8d639a",
	    "000000000000062b6f8777a8da0348377acd5c90740d1d516a42de1ae13555e6",
	    "00000000000000612ee0848c2a43796d829481941fa187653662f0c13f907652",
	    "0000000000000594f91b10c21fda04571677b3b34e8ababb17ad5972fddf557e",
	    "0000000000000297a55c8de355fcbae26680b8f77db52df924ecd03b28aa8c6d",
	    "0000000000000469ccf942b1774ef616e632b927e93324340186583ec48987a3",
	    "00000000000003dbe6039a4191c68143c685e7a79dc9848e4ba2c76133e454a2",
	    "00000000000001684fce0a4dd277cec5e0b1d1e655f208d03e91d5f988cee536",
	    "00000000000003605c8c71a223d83140b45712b89d590aa4d5ae4b95bbf869ec",
	    "000000000000022395214f4ce13fa7f010241928b53b9bf5185c77d81ef619d8",
	    "00000000000002b64a846f8ce50dcdf55a8440eef28ab1b9c2063faf45d782b5",
	    "00000000000003916ca6a3e7d16103c260d3a542f832a60023ec79bb0caf531c",
	    "000000000000002e00a243fe9aa49c78f573091d17372c2ae0ae5e0f24f55b52",
	    "0000000000000213589d770ed446fcd64c7775be31f44c1113cc2d161d1ba71a",
	    "000000000000000d4b7453f028aaf2de98478014309a854f49a4a44b3f24ecbc",
	    "0000000000000381f99c3e77522b81477574ca979b844827eca42a100e72fa5d",
	    "000000000000031cc0f1025483a737dd3ddc0de10cfe5270ff55e715546f6cba",
	    "000000000000033168701a02580e95abe07fa5418c6ad5c64327bee1541c6bb4",
	    "000000000000002f1d7fa1663c2a66e0fb2925dc35e71ec8ebb4aebf93591ac1",
	    "000000000000045963fe32abfdc58b60543583ffb7eb95849717c8453072dfc4",
	    "00000000000004c2ada10dcfa250f8c6ba8cdbe94acc79cde8355a85a14fb598",
	    "00000000000000eab6219654cd9ae692a8efeb650c64acec6abf58504ef22a29",
	    "00000000000003de8836f1f400ee837148b605c02b59328d0ce26d538cf3bb36",
	    "00000000000002add1fd89d09baca15edd54cffe8d1c8ea3b0afb8600ebfae2e",
	    "0000000000000262edd1b6189e1a22637725079e2ded9ac655435d33197e3732",
	    "00000000000004ac079a357b4c5183134dd4d8d4037ea944f8745b065e696ff9",
	    "000000000000006602a9d19d3c68ce42506c540aeb6af0aff4f3e3aa8ab0c794",
	    "000000000000006bf44127a4ef197db3310f51912f105eb3f3b0e23c2c5b4bb7",
	    "000000000000030bec5b0d8a845a2e7d4cc5dbdab4e6ccbd1ae977996326b2ef",
	    "00000000000003a6a42e57230284865afa30ae178f3e46317240e786a1711864",
	    "000000000000035bec15d85a63bd321d9527c5b053beb96212a62fdf40c6591f",
	    "00000000000003bd4a6263bb5f786732d4c67c1494cb2c9b7ad8b7a0e8c31168",
	    "00000000000000e131945b5a9e120699597fccda58a845c1a3e18ba078371f7a",
	    "00000000000001fb44559aa9b7b080e9b1c8cd814eb9cd782fd597e4c9bdf656",
	    "0000000000000203b9742af08ca9b019c3b1a823e01c1f6fece07a751c7ecb4e",
	    "000000000000038b70c9c5acc1e5b6ea5422fdcf814c73a804b3e091f5d9fb24",
	    "00000000000002f569e91db8821c6476d614838d06ae481fd182a59076930331",
	    "000000000000010c3b6f30c7d804d8f120db7a6766b2a3b652e179286805df3d",
	    "00000000000004f2140f2498d897cd6162a8aa159dec44ec50ec9dc43d168292",
	    "0000000000000001f78072b87f74df67c0d8c3ed71cbfe12d3894fa17da67809",
	    "0000000000000473ba4e8e98eb4218d3093d544cce1a663640c3df4b76dde62d",
	    "00000000000002ec484a4f73a6954b4118bf1caa66f42b6b289ffba7207d8ab4",
	    "00000000000001953bea52d3e5fcb34f58ac8b14e10810909cd3b747d1cd7257",
	    "00000000000004a7fc72323142a315e95a2d7e6f6e427795b991fa39de4b2720",
	    "00000000000001903533243bdd58dcff7b3d7b9568539abe87e44db370417891",
	    "0000000000000086d933e29d659b79280e2af50e4c571edd83053403c35bd5d7",
	    "0000000000000145d9f533476e1c55f03cd230da602f822d398713b488bc286c",
	    "00000000000003b7534640445577cca947ed45f128f7d9c9e9dc0c8d400d8f3c",
	    "000000000000034e688d45dac2a1c21184fbae6d27f0024d0f0b0818985f139c",
	    "00000000000000daaaef4069daf088d0f0b90f93bae4f5218b48de94dcc5de25",
	    "000000000000019786bda3540270b7e73fe2bad4ff21669d71c841aa595d8a60",
	    "00000000000003d361c0166e8698c90d7b9e27dff258246ce49ee825d56dbde4",
	    "000000000000019daba0c5b458114ecebf64d7b986a3405e399b63bcbeba43ff",
	    "00000000000000d610eda6970a947990a6ae9498581ea824bedec1169596e78d",
	    "00000000000002a8d86f97878d3cd9030280ef7fee4d3a5ef243b272a1c40a10",
	    "00000000000001f37d37ba8233a63b0494557d41cb40a193ee1d6d24b7133a5d",
	    "00000000000002733946bb20905eb7ba338b701fe46f32e9d56b20437851ace5",
	    "000000000000019146b5a6aed67433776c68331b18b159f720601e7d968c38e9",
	    "0000000000000055eb5c07849bcc9b0e120cf7f569f4b42f8dbac185deb209a3",
	    "000000000000049379966ecd3bc4b98857d57f6f9a58ef5850a01d1ef480e29b",
	    "0000000000000023eaf1c7d7c3fc178385bc61bec84e0987140ecc6281c8da7d",
	    "00000000000003acfa257eb18bc969b0e3e4f7e771dd0c4fba21e5d1a98103fc",
	    "00000000000003146b75a1858519e422b3d45727df272894192b85da5416e7e6",
	    "00000000000000568d962c8cd7ccdd33954b753694e728c0221196e7729d748f",
	    "00000000000002dcde70ac3516a6fd87e8a6d4ae9dffcae1fcc076c32b238bf5",
	    "00000000000000192505626cfb4a67863218f253361cfcd2a7c95d35a88a4357",
	    "000000000000003241d7c4281440af76ccacb937f7477351d5f77d7842494600",
	    "00000000000001940cc809a9b4f3f28bca494032a2c073877af78cee4504c49c",
	    "000000000000000c10483c65947612113da612ea41559543f98b920c7748ac06",
	    "000000000000051654aaba28b68d3d97299a72dc6d98a81078aa9f63e43918da",
	    "00000000000001ec498435cb1206989b53c0abae481e427e0f15ffe4600d7312",
	    "00000000000000a137f0d0542e6285ae6c0f53782bdbcf5081f8c540a052c844",
	    "0000000000000066c2d1a474827cf3b48787667fcb59e8146759fd93a4328e52",
	    "00000000000001f60a1c0f5690c5cc4cef4c064347581e10fbd3a72e32a3b28a",
	    "00000000000004b45bd5d055caa6d32cf9dcd3c60dee104c9dc1edebfa956a14",
	    "0000000000000426585e6f1a4ecb2765d913eee26c18f7770ea091c102fb7b12",
	    "000000000000015260ecdb455d9c903cd289ededd829e1ae416a62214964f173",
	    "0000000000000031160c6811c27d9330745b9e97854ce7f7e1da6a1d3050c621",
	    "00000000000003434070bb3c0dc00687eea09840aa5dbb4f375b7a574b88ef10",
	    "0000000000000250265e25d8c8fcb25f56c8f017dcdc8bacbfae148b84ee4efd",
	    "00000000000002f51c59e508c09239ff2133f0f59ccd0b75ea47c343374de5db",
	    "00000000000000c9aa989faa933a35de04a59429d0f1767da11aecbe80252db1",
	    "00000000000004e2c7de5f2c586bedcb8e5d9a952104b5255e828e6607cd02c7",
	    "0000000000000410f45af1f5c65ebe91a606e889faa8d1d30ce978076490c21b",
	    "000000000000023df1f4e853cd3a67583eca3cfd0557a61df223453da7d27a30",
	    "00000000000004c627ac98680b4850c5b151a4c719097ee52ecb520863c5979c",
	    "000000000000021a6a19c8c18215039bdeadc6f7af17a40f14956e6c6380b272",
	    "00000000000004d5e7a5977e1f7817b5fcee90d8ab0dbf9d976375a1b8639c95",
	    "0000000000000377464efad50bdcae3c1d8974af185af869263bf876c9372304",
	    "000000000000002a35f5b1045a6db4a5939f8a7d5ea76e585086991c735bb7da",
	    "00000000000004e9733659678741a7e62b07de2af38ad4dbf997dd2a959fabe0",
	    "000000000000047b7942a14b01a4ac639adc8094d20ab9d4eb8136e90d0bd17a",
	    "00000000000003fa57e52ee4ae7ad964ae37c4884050f6a4707cca4d3a6d5e6d",
	    "0000000000000421a264b2a6b2535d5cd0e628f16ddf86f27f5fb34eb3667a7e",
	    "00000000000000f43ca9355a8fb72a12e47dd9c963eea6b6d04fcdb8d5ad64fa",
	    "000000000000007fc0494908f437f9068c1070803916829c24bdb87a189e8a1f",
	    "000000000000029d6c843c476748f3e6fc13f56f8795c1d020ac1cb7f084661a",
	    "000000000000016f610ba76a7c55c0e375ec56ba308bc3ab5bf6fcff1f8b8ed2",
	    "00000000000002355bf221d904502209416f2925cd7c0dee2ea6d2c4324609ec",
	    "0000000000000344e7bd43236f12bd57624fd4073d50cb2c29ffbaeb40128397",
	    "00000000000004d961f6a3694d134850a797b8a8120ecaf08382f2d52aef1a3c",
	    "00000000000000d858c73fa41e0ca6d32df118e3ca6327c0f1ec0ed5260648eb",
	    "00000000000000fd2073e68cd05e1f6080ecdfc14ac3ce81f6da0486d36db17f",
	    "00000000000002d3c54bdd5d25e167eb27f542795b693fbfd829deb31d731877",
	    "000000000000017cde09d00c90067e5ae0702d64715abe8f0e0f25630b1efc13",
	    "000000000000011cbf7efe67064c5a65d2edb2870eb3ec396d695fde0d6614ed",
	    "00000000000001c7ff350980c66598317f7e8dd2dd4dc3a3f4ef53784d99ed52",
	    "0000000000000128fed191d9fe77331d64f37fb71b10b998baf03e92bd7dc426",
	    "00000000000003e66bbe6a0bd6b002b003c3693b2f42c03dc774711ff5c02e8d",
	    "00000000000004f96053273dd8226c03d4b9e2ad87554e4d20f4a367b1d74a7e",
	    "00000000000000f9db6f08177b535887037f785db10d54f78b71ecc5c4d179b1",
	    "00000000000000001bfaa06e0d8c9aa94ce50ecf685d153e81f65e56546cf0bb",
	    "00000000000004fb84c84dda871a930b65723809e8d0bcf819fc026b674ea205",
	    "000000000000014a9ab984f3309fb695665a2eaff0c6b5d82142c5257e44cd18",
	    "000000000000016d18cc0d41f6c26d7d0149b1ef095fc7ce36176689d9c6fd16",
	    "00000000000003c26cfe00c2e6f6bcfde784b6ccf6c2ca550470db96fd67564e",
	    "000000000000029026bf231f3049a72c3aac68751a61f4a98aaa8d4a334e5163",
	    "0000000000000127a0c632c598b327f5d14bd14cbde340d5668d4480ce0e7aa4",
	    "0000000000000003e018ed8fbef8257359ef84cd9ddb8fefbeae9387b1c35b7c",
	    "00000000000004fe5e0816164672b24a5a176719e92ca39bb2c3040787bde581",
	    "0000000000000160fc97de987e73e7be6162fbd92e0249b077b5393ffbd43e5f",
	    "00000000000003a5d2f674b1d9a8d86f5b62c697fb7a3d42986a6b4d413baedf",
	    "000000000000042037dd81dd173da649dd7257dd2234d9e650a15bc2a63bc4e9",
	    "000000000000047834468d81bed73ad6e8eed2e185ba615540c3af6a90ded79e",
	    "0000000000000254adcdf18db2ac1ba4c8aea803df71e3444d24f94889bf2194",
	    "000000000000002ec923d417c853fd4fbe2b8cf7647c3cc33902aaf9f05d3201",
	    "000000000000004958a14713e4dded3d7f32de1a8e2804b95c80857aac81b916",
	    "0000000000000223e02bee28ce0b99a01a3fc3bbeb341f0a23e1719984d34a1a",
	    "000000000000044f3ca5a65427c71ceb30e564351f45151485123a88865a58f8",
	    "00000000000005672d24e5d8abd7bda4a8716237d703f5c61de88f0839c74945",
	    "0000000000000026c443dda5fcd891509b7df5e9948f70efbb0bacb14850f8b8",
	    "0000000000000161d7b7984c32de3a3622c6cf7aab867ef1c3a6a99b78a0e816",
	    "00000000000003cf8d1395965fb4d77e77b753a69c993fd0ec4952f8055b1105",
	    "00000000000000b610abd24af623a1369a1ab6f2e3233f85c8ba827b57fab75a",
	    "0000000000000294155cec291745cb12e6b8c5d45572236ef5ad32b9eaacfb82",
	    "00000000000001b061496da3b1457e01e48dc90423809c2ab256e7a3bcd0f891",
	    "000000000000013e90499d1c9c3d694f0f450f4dd27bad6a0180628e096e0403",
	    "00000000000003173625ba51482bb9549e7a4f3bffd7154522512f11309a4c72",
	    "000000000000009fd9ee9254ea00247d5a482273d41915309cc221f79cb2d13c",
	    "00000000000001d2113f053061382c4325f77db29f9a7615b142544b656ef5c1",
	    "00000000000005376ef6ab85c534bf3b8df4ee62c2dd40b229d96a6db628339e",
	    "0000000000000116551927c1f9f7d7ddfa5f98cb26210e357b8107240174bd63",
	    "000000000000021408c34fc16f6579639cd04951e7c3ee69f4c6a2783581a80e",
	    "00000000000003ee7cfa0178feb95e82cd0ef0e577da2afec1d89fb7a95a87e4",
	    "0000000000000025d531834fe4072a4aea16aae4676030a83a6863daa2c07208",
	    "00000000000002dffe491af093baafa71cd97bcf6d6dae8f822041c366e714e1",
	    "0000000000000486cb0c2ee10bfe714da1189dc2f2cb563d8db272f045c20c66",
	    "0000000000000025345a6b90b7dbff5ac8fa3db361f68ffd39b86c68842e1809",
	    "000000000000047e3ffc8a1a501ba4d540c32cee34d5a96c9b0784cf607d5bb5",
	    "000000000000034461ced0b0718517864a82c918061570dfe8fb1e258136c3a1",
	    "000000000000028be92c79679f87b15a4210735de16f24b2ab2b60f74191227c",
	    "00000000000000226757cf40cb5e0a9706d5974623b31343bc602a93486b1d69",
	    "00000000000003453b9cc15ca99e8ec5c88a2c6c841c36d28228b5731db36b17",
	    "0000000000000517e7254abe0a48aa8ab9a04ffcb2fb80d0679fd55ed0be6392",
	    "00000000000002bffc859bbb025c947f0e2dc2c4b7d7673fba66bd83662c33ce",
	    "00000000000003217fb1d715fc2fc7ece147ea27c6bdbcf6a996a723b8d64628",
	    "00000000000002316d154b5375109fe87307d6cc6878a14858320ea15fe81127",
	    "000000000000001d7ff7cd8e0b0dd99d98a240a3a46600542fa8d5971a88450c",
	    "0000000000000166990d15e0ed70fb2cd74dd0fee7648068a5a5a2d1d8e13d52",
	    "00000000000002036afabdcdb24679e962994802cc6821ece6fe313e387cee7e",
	    "0000000000000079602ab023bd91d080fea841067159ad2e61d2296ae52c7a61",
	    "00000000000000aabbe50c4dcad3c95375aabb76e0efe9e27c9d504fc9b8189a",
	    "000000000000013358a1fbd114477b97805337d95cc751edc9f94c9bf379bfdf",
	    "00000000000001c58c587ebb521477d1bc730e57804a743a432965cfb4870249",
	    "00000000000000c79b84278ae73aa046a84afbf190d75d52ee47fe72f7b947de",
	    "000000000000027c0b36969d767a2265e8150bd0b6fb4a4c514f0c522c991113",
	    "0000000000000236c210d0c71b9e3fcd2e8cc3aa591826300cb1087a2e6aae22",
	    "0000000000000378cee937cbd4927c1e6c6eb50f0e1f70fd33020ed02efd15f8",
	    "0000000000000287004ae86285b9fc90a73fbe7eafadb3459a6d45f15a58ec18",
	    "000000000000002d0521142eddc1f39683225e6e0e5997895865a43a1fc71eb1",
	    "0000000000000381962da36d5f7724468b9c211ad3ef722724f64d160df9ef09",
	    "0000000000000494c14757c41813565e062174541cd8a6907054429c1671689b",
	    "00000000000003d222f3b9c76120d931a67230cd74c4579435d5798a396d676a",
	    "00000000000002c303ec4fa8ad75ec262e554d969b2bbe77769fb6a26fbfc8e1",
	    "000000000000043e255819bc8f7bf9bcfb48afbaa6aaf124faec31ccd0bd4f24",
	    "0000000000000452dd38ebfc0d985373471b553fefbd90f8b388632d6b0fb953",
	    "00000000000000cb945db8d682840cd8f725e8f92d48222579fd95a1bd56feb5",
	    "00000000000002045173390fe1e1a5922d60b29f617c6328ca817724569a69a7",
	    "00000000000000d6876602cd029f2b73c59c2e67829893e69d383d62b6df5a3b",
	    "000000000000043fe2d8f7077237bb34a448110a0525dab42512ce8c4436ea71",
	    "00000000000002f4c5cad633ce715c3b2a6ef77339cb1a08e0a65744c17c13e3",
	    "000000000000014335976422914ecaae49f527e39932b38236ee9a62d62e1855",
	    "000000000000035ce6635a18fbbd68a6fa2efd7163e68696bb01e764eefd1e31",
	    "00000000000003c8586a03aedf944dde6c8c50e49197f6dc08664f5c23bb94fd",
	    "00000000000002f535dd48f597a96e38e4ebb1ffbd0a117331a6e516491b4208",
	    "00000000000003be7edf141b2ef8a705cf6975919d674f560eb2b3ab3cd3e8ca",
	    "000000000000019ec4f1b7bd88b6f9130a6bbf625cbf5cac5da7ee02aae1eff9",
	    "00000000000001119b2eeb7a781d12e29c3589ae2721fc204b6a9ea9f66e3368",
	    "00000000000001b55226cef2f00ee35986eedc05ee60c222df6ac4587023312e",
	    "000000000000032eef287bc4fe4c3fda13ae21bbf7801079736936a02d23a639",
	    "000000000000021510795e304968d6168788b324c6de215138ff1325cab0dcd6",
	    "00000000000000567c2b0b4ab1a8d89fa63f143dc56a73aae53570a218efc47e",
	    "000000000000015a3d463751eff2ae74cbad7f4c204f17a3f7bcad22d61ffe73",
	    "00000000000001f03fab249ef0785fd75107eb5951a63b2b169c46d168c35ef2",
	    "000000000000034823324f51ad8a82a1f85f4648a98fd3bee37bb93bc9eb9d51",
	    "00000000000002b1c4b73afc910260c03fd878a3b147ff071228c605e4af88fa",
	    "000000000000001dde2127c658b6e36c188343d1efaae43104409cdf4528b81b",
	    "00000000000002e91cb0f9eee20d798c050c89ff21234f632abc943d442d44aa",
	    "0000000000000050e16c467428c00c60235eea41417ae287faaad81231cca842",
	    "0000000000000241bb930f92a9d2c16cae2f87923168affac9d01262175ed6c5",
	    "00000000000002fdde342ac87a76741dd06c8a3fd3b72ea7e1d4943a47eb297d",
	    "000000000000038f9e919cd7c59704d022f3729a88928f07c74884d88fb0331c",
	    "00000000000002d28433a5a79c357a328d6e11994f1c16d789c9934a2b1c2f2f",
	    "00000000000000f846e121741588f54af78f6cd569d62370e18dbca31b84108e",
	    "0000000000000059a46c191871a10f35538c22cb22bd14e7550d83097d08e37c",
	    "000000000000002e231b4967fd3a60e667c0ba89703f13bc502acb945de98a43",
	    "000000000000036ab8c18228c6e2a181849eb27c01c149af88185cad4398af30",
	    "00000000000001a30afae8ebc3748643bc26d9aab554006819d3bd8a52578df3",
	    "00000000000002d6a267fc36c8865f197e2d5ad05ded8d6d849f166caa3523ec",
	    "0000000000000381f1d5066133a6881e2f3c5d1772364b91455e089ca2240f20",
	    "000000000000039a7e99d3ed53ec16743d9dc6caa759ce9ac55505af6faee0a4",
	    "0000000000000133ecdb94ba8017e2977aefe3e497c48c849e3f9c4c7a091564",
	    "0000000000000228b59b1e7fbc2338d4d8843acecf67a20363f1ec4ceb4bfb6b",
	    "00000000000001dd37241e1df56f6e0407f6b37cae920f2f7e797112a833f708",
	    "00000000000001ecdc16ff01f1d0cba57cb0f24f8d984a1fda85540d9c3e9c08",
	    "00000000000002dda66cb5267f88c732fa51846fba70b39347137b3d15d32922",
	    "00000000000001c5ec4c2cd8781fa20910bacc4c174e515b7b178845bc3d09b7",
	    "000000000000033e8d74a79426eedc1943a9ca02831cc531ff596867b04fe0f3",
	    "00000000000001ed3d9c95cdecb68d2be58d7c35fdcb2ff1aaed7fbb08ba9d35",
	    "0000000000000320b7cef17d9d7bde0a29785ca035e76fa218f3e0e12e9e14db",
	    "000000000000018f9c59bb0f1b6d72f1e7a1d6575c6d3d7545e4cd68811de5ca",
	    "00000000000002e7edf5da9e04201890f0519735f678a613bdd5e1a13c28a994",
	    "000000000000001da9ade188fc163238eb3a203d7179a541db26262d7654cc8f",
	    "000000000000009eb64e4d5a3dafc4cc97d86de4f90ccd37a50ab9081cf6d546",
	    "00000000000000d8bd10be712646f2ca6ce345200881fc9984da93e0f92413d8",
	    "00000000000000284c77bd6af4167e0a013ca0891ee49b52587f626aa5ea2dea",
	    "000000000000000a7abf8638714017bde562a77e774199e162c2af9f76137362",
	    "0000000000000211bf864d71bc126fb5f8c75302897b37867ec04bedf3bdcfd4",
	    "00000000000002b1be8cf99b3fc89f77e8fdee10deeb07a6d48c5a4f42eeaee7",
	    "0000000000000242d8eb7f6a02d312c901c98db6be9e4e31d4f64af63272429d",
	    "0000000000000088ff4c4d3d73762af22c89176e5d4d0567a33b0fa58e4e5b45",
	    "0000000000000242ca3aa6aa13ee141a58d78c8ee45ef342366170599fca0a7f",
	    "00000000000002742f1294c02a1b940c40b38338db8f52526476a0eb014ac81e",
	    "000000000000009818beac9bd78c31187f727c1f7086a8a30ccce9bae9328ed4",
	    "00000000000000fabd1e0d5a04e4a6497968b53954499957283d63a337fc8be9",
	    "00000000000002c9a97e479b5abc9ffa2b539a3130226d601f2b46f823b28025",
	    "0000000000000112ce894bbae1cfa75217d5d586a8f84347c6d9319de1ac8231",
	    "00000000000000d6c1a0672f8e136dc0f74a8de35973f07219a708125ca8fe7b",
	    "0000000000000091b276f41e586af5d6f841bc6f51173fa7a594fc6b93f36e76",
	    "00000000000000d9b0798a261b02e90eafeb62c405ac4042e0effdff32d3bea8",
	    "00000000000000fade471f1c07d6c983887cbc02d419c5786bc5aeec2a02756f",
	    "000000000000016b4ede30c11167cfbd14d8272f9c41ff18c828e7e710710474",
	    "000000000000009d2e3adc9b1fc7e07d49a62c56ce2577f3cc2fb3fc8fb85c86",
	    "000000000000027f9602ebaa6e7fb974e8303c5d9355d53e013e16a40ae7ef4c",
	    "000000000000016cc4141da22cb146cf148e4b5c358852845d870cd634a6b5e5",
	    "000000000000023d9a3ee2714f4365b2d312700ba113af23084104319133c6c0",
	    "00000000000001302e068bbf6d8a9097506f5395ffd695b9bd1e9f4dcd5a6e58",
	    "0000000000000190be6a8551b8a675bf8a3c9e3cb586753f916067f77d4a53f7",
	    "0000000000000177bab23db437e0b16fca7f43aa385ba7d61a14856f1ee3d301",
	    "00000000000001016750ad66f7b653f4b76e28f9bb237ab036d7d2b26d2950bb",
	    "00000000000001b44dd887ac652e1bc818850a1c6ec5962d6a8d1ed0959d747d",
	    "00000000000001706e8fd853e8d44646ba1b09aefd30287ade83058d8093c235",
	    "000000000000010194961754d3d0739a794b934559b63137201273f01cd0f14d",
	    "000000000000023284589c94c492acf469f9c585db2650fcf2a60092dae02da0",
	    "000000000000009befe4cc655682e5cd109f239c0b6509ea91f9a86e0abddf59",
	    "00000000000000c28bf60d04b9ded396f8e4d74e7bc010109e3f1715e7c7852c",
	    "000000000000027cb3a7c1804af5d759308e38a7a931f30781a2e06beb3a3ff7",
	    "000000000000017aa6e4ae88bcbf6b5f046be5c5b5c89516a97859138c66bab5",
	    "0000000000000100aad9914652e69c613cb29781c994e5c68ae977e96133d726",
	    "000000000000003adf5fd137647366e69f6c16fc01cf7e2cfb523d25fb316567",
	    "0000000000000169e42a0e3eb0bccd22739f1eea8443a86a02e5540d2fd85ac4",
	    "0000000000000024a019d7a1671e97142ab2a6b4f1f93a04fabe3032da7f0087",
	    "00000000000001517a416886baa47b2988fad7013223c7d33bb5970c5b9360d5",
	    "0000000000000174502f75eab120e86fca7456903a2f7e598ffa3b17fcbff19f",
	    "00000000000001f896a823bf008c5a7d43ad8f23e81d4d950f6b0c51c2229354",
	    "000000000000014d921734df7271e90afca545896ee4d9361cfe708a9c2d83cc",
	    "000000000000013f0b722f6f45addb2bc850eb90ed3e3c4a72e403667cb14004",
	    "0000000000000210524079600a96105342512424c2bf19f6ee8e61df7e1318ff",
	    "00000000000001eb1ea83a2ec5b698c01cf32ce4fbecea9632074d340cd22fbe",
	    "00000000000001975a8d5e5a2ab4277978b2fbbe59b23930305bcbe816423efa",
	    "0000000000000194db9b3a4243c4ef1134dd21d6b5a150993fd966ca7aa82368",
	    "000000000000008108fe7679b8daad016ccbb237cab1d80adfe9dc1a2efe1fee",
	    "0000000000000195324964bd4b90ca5907c02ce8405b853718d6245b2c97012e",
	    "000000000000010c430997dfa6af659959cbf4014124144254347525994e353e",
	    "00000000000001781b151c0fd9bf126650f5c7e50457a540c1c1f534d74ae39c",
	    "0000000000000059da5503bb39466607272a9a23dbe008e75fc04cda10151711",
	    "000000000000019d790c089d55a40cea885aac0f0da1b392816b6d1f9ebfe88d",
	    "00000000000001d6eeebb3fe19d1bfffeea4c2bdad478776601c73c14f852230",
	    "000000000000000e00d6df5ea6cbbb5ea12bc634668f18480c8e7eeb41c8af41",
	    "000000000000015b9da58d4fc08bdadef151b30eed395a219a983bc847e61344",
	    "0000000000000158e5e46a9f230750adf8e68c6468cc6fbcbe93dc9a58f28e66",
	    "0000000000000116fb4912f022a036f7519eab19624e55f52f5bc2b905e2d51f",
	    "000000000000018f979e129727f3e62123a78f74bea01c608f90b49f35914fbc",
	    "00000000000000f90163452dd9609e71269ccd0b79e948754ad9e199f9a18eda",
	    "00000000000001c0b010fa8e20b3f0f82bf18579d78eca4b6b2ff8728a10f330",
	    "00000000000000bd282e3cb26b35e3ca34a26c2a493bb705eba05b04529c0e3f",
	    "00000000000001a5b95f64f506aa7fb39d607b36e7f993bd5e0052986512ee94",
	    "000000000000001769d6cd877fd34a7713ea2c698b54a90c3956b5ac588013bf",
	    "00000000000001d84c841e5243e640133aaebd9c9447d8f30bea97b73ceb0ed1",
	    "00000000000000f99af4a59d3105cd411fd0adf42225f6857e6f75837c7ea97e",
	    "00000000000000894b4c26b8b0b4fbe0a4aff6121ab422145ce7be97406cc571",
	    "00000000000000a6ea631753a4f78ed65397de19aa7a2e0dfe44ba14ceaaf54e",
	    "00000000000001db16dee4abe5287f8816c701d502399688dff5e277295bb140",
	    "00000000000000d14db1b14c436ab16285ea7e38254c1355ea56d93b0ac55272",
	    "000000000000014f32c56f4633f7cb6cdac434235cc731fcb3944c5a1ab071fb",
	    "000000000000014697a524c6231001619cc1de5cdebf310b0e9c01a915e8b858",
	    "00000000000001261582b07fed3fb88ef6bb86449b945fcc425da459a9524381",
	    "000000000000019514d32fb4c81b34ec8cc14df69af1d212ef9c5c11c6b3b497",
	    "0000000000000023b276042e12b1a918ad4113751fe22f5957acb79ec03d7051",
	    "00000000000001b50692ab44ce4bf17038ffdcb09bc7533ab2547f1ed4f1a3b9",
	    "0000000000000151b614440ca2c3dc1154fda6ae5d465191760108f8e7246088",
	    "00000000000001a109fe1af3b97b3a578b4bc36481fa6ad444ca4465baff8414",
	    "00000000000001b4d16ab38468ad3cc4166b78ac60f3d0c59bd09c28466c1f9e",
	    "00000000000001cf5d04140c87b38c28343b03124571c116d778c74382ecfa69",
	    "0000000000000087b27f4403ae8c35b0298c6540cd613253a3e4172d361748bf",
	    "00000000000000aa82561943617de533d949dbcf5cf6a341f2978e384a8385b6",
	    "000000000000009cceed36305ad523b7b41bfb853096b45a4abfe4c28ef5488f",
	    "00000000000001849280c69c853d0d2571a82db4ba06a9e06cccebc68f2f09c4",
	    "000000000000000aba3e29473c9a678923c7321198828452abab397c71388d9a",
	    "000000000000017455aca75af609ef107c5ef0ebc74bafd7b033a05f24363433",
	    "000000000000001a1c2d2594573c07d97caaa7f62bb4eb2f9b67984605f19201",
	    "00000000000000bf4b1e3745c2615852c779063ca337acf91996fa632ed61f5d",
	    "000000000000002f5d51f39b591ef8b9bb65340b96c5cdbeeca063dab2229aad",
	    "000000000000003abcd0165e1852dd02da1eb54ca1a131668a8f82dc2d52a9e0",
	    "000000000000000f79d442c197f98a79942fe9567d80142feffaa42b1aef6fcc",
	    "000000000000006e046e66003fc89dde3e8ef098562b6b6ed90ab6f52b6af2da",
	    "0000000000000004e100a94c0df3d513f601bf5ad0692bf9b4a6e8fd76f329bf",
	    "000000000000019251db586a517640127138044cd81a906829f2264a885b6470",
	    "00000000000000f7fb169d0b573f1f363a1b2675655abd0a37e5cee19d0ee754",
	    "00000000000000d3e5cdfaef93a5156594b2a65b61ed30386262a696fb9c7b42",
	    "00000000000001782b3d1c57bbdc42aff4bf3a1ead7ed23a2038988238373c1f",
	    "0000000000000191f0daa8340c7ef5b0b270ac8d03441104f3a90a3c7e6368d0",
	    "000000000000005dc2bf40bcf69f9b741c7a8d9054fea4ba43393240a0dde002",
	    "000000000000003b46ac1e164252921fcbc8b3a083a8482e58425b823e9a972c",
	    "0000000000000099337367e140e3d4e08e3c966cd31e1462f96b09e09c7e4fda",
	    "000000000000017a4e93794a28af57797b19f4a754aee9ddb5d42467dfbcde1d",
	    "000000000000013183d475ed3308c92e353d98ad831298e042fc8b51a37cdf1d",
	    "0000000000000070782c38192cc7be27a9f26c72e0a663f9d229bcdc6881fec8",
	    "0000000000000111719ca0663d33be13892f5d518d7808809d5bb2906b532bbd",
	    "0000000000000044b1acc576c2abad7948ce276c02a5aa3fb09ef709aeb6f2f2",
	    "000000000000013a1452fe9702d9ea0c9b4dc76ad4e51ae9d41a9275467abc77",
	    "00000000000000a01988763973f9c55157965346bc31a7ab85b2a1c768bfca2e",
	    "0000000000000125f6a7a94614115a4c1c702534629d1d39e906cf898b0c8cf6",
	    "00000000000000ff6d89595635c75b20063dc5e2683dc68aec0b2d0f22ab31d4",
	    "0000000000000034ca96335f4bd3018a4cf2404ad7b06dc76909c5418d3cbdce",
	    "0000000000000106af699270b65006566d1790396055e8b2243bacfd1243a814",
	    "000000000000004443b3cd406d9e6894e9af7bf098d82f85d8e3a01ac6b1f5f4",
	    "0000000000000013b9efa409b459baf11b4ccb43a60f853bdd8d25fb9b867ec3",
	    "0000000000000023413588bd7889db8d4530c9207299886785f891f8788766a8",
	    "0000000000000167f0e9a626fa6cf7f96db2b0f04675dba7d1620bd3dfa892e1",
	    "000000000000014713683b9c1762574f40bd5cc323d0b5589a67c44e641f4ffa",
	    "0000000000000110f6f511a9daf010c001d866a598f919f41363625ced672973",
	    "000000000000004ae2a70241916cf33c1924089a1db9e380c71189fc782e6f06",
	    "000000000000001e796eedf20c1cf2f93f33b0f98b3ae81d6078bf4fcd9c91b6",
	    "000000000000010886e6275b2afa1671819cc5de06d66521a21ca1519832375c",
	    "00000000000000de17aef1a21e22eb3fddf2ced1dbdb52f197b4b50d13761bdd",
	    "00000000000000debed1fd2f414820cd283eedfbabcb4bf02c7ceebed2a7f40d",
	    "0000000000000122cba685163d711b232822f1c1110dbc8f07eb4c3c4faec47c",
	    "000000000000017fdb64ed21de7c720fd68bc1506a4ef910ae770ea4e8fc5a5e",
	    "0000000000000108a146991841bf9a611d7423c087e33aad741e1fd70156bd9b",
	    "0000000000000044fb80af602d5894ffe8d907b9d4fcdec98fd46b4060130caf",
	    "0000000000000125f0e9a55e1813b903ccd1bbe78c503e154fe3048222fdc468",
	    "00000000000000aad7c0b2dcc0c6c3c61feb6b880716edb8c29c67d70e5f27c5",
	    "00000000000000637d76ec4f30b743bf63716e08fc65b38af89df824e9cacd02",
	    "000000000000017ca71f61801ee5deea57a48c10c7deedc1cf42a41d472faf76",
	    "0000000000000179e0569de21645ccb174845f380c49f931542d30df4bd3f492",
	    "0000000000000005f9e4a7fc696addad9b1e4f1d790746eca826d961db4e74e2",
	    "00000000000000d42d6cec837bbe05c11c8337962ba467412bd9f709051d6f3d",
	    "000000000000012e31ecf63713445ab41a6e5e67a07e35041b8fd255fff20745",
	    "0000000000000040bf51f009d5254ffd6de97fefb60735b300d91486d8bc3d5e",
	    "00000000000000b5b12478539ab24a4951c074524b0b09c5bace4b339fd5562f",
	    "0000000000000087bf66d5d96f6dfcf8792592a294fdd31caed652c0e5563dce",
	    "00000000000000fcbdab85bad7467ad21dcb192926a4d339b9dd0bd175237a9f",
	    "0000000000000088dda7ed91e05376224849a63511f9a84d2ce7dce1e55dc572",
	    "00000000000000feae61a98ca0252801b3170cc6288638012f6ae025fc900ec3",
	    "000000000000005293a5974c126502976c489b1d31990f888663afebc12d1e2e",
	    "00000000000001156921706358b17f70b059c9a4578216ac37a92707b36c6b5f",
	    "00000000000000fb9c85575fa7249c090eb806ee0970bdd56e61677b5d35499b",
	    "000000000000015bc4b950725c0c2f9e4f7033961c39f2cb79309dc0a76066b4",
	    "000000000000002e60b7e2a1cc6f11f3d715610e5baea4bfba32cdf5078f8bbc",
	    "0000000000000118f0cbeb5ea893c4b6a9185af3b09d77ca0b81629e728a398d",
	    "000000000000002f4212c0880bed59dc4b263ffeaeb71f67f9aa853d11ce2e32",
	    "0000000000000123c8db917ea8f3fba02ef780424420940c391e2abd9397d487",
	    "000000000000008f2afb9b8b9000e08a36f2cb5019eb97c7b920179b74b7c7d9",
	    "000000000000000f24912767cb2f34a53fa8a4ec4946277a077efe9ad5ef3a6e",
	    "00000000000000a0e2d0e11e1430546e1e6047cd9e4bd02ab229c2aa80a7cd2a",
	    "000000000000015f1bceda6b2d314cdf26a51d6eee6437d64280253fc4a1df49",
	    "00000000000000cc6581b43bcb92aa2610cc63a148fac1f3824143a7f65487eb",
	    "00000000000000fe51a1f61786bd0e8b622622c1bfcf80a6deb4cbc63a128413",
	    "000000000000015e176de9e6e7074dcb5fa589a20d1afd514fd01a678d952dd0",
	    "000000000000001dd3d2bf6c75d8744c110262657c538eacdf7541d93241d65c",
	    "00000000000000f284fb98df3f80d12eb7e1b045f9e9a86b499c8b669e44ad58",
	    "000000000000001a84ea2756424ab273efd6915ac311702bbb0470afe682fdc4",
	    "00000000000000e7eb100453302be3def299b4bffc1b7996c8e904beb102a620",
	    "00000000000000d21490e77e971da5c401e8148ca4f03473e70ab35f9c57ab72",
	    "00000000000000c6d1c7a6821ccb8031b508c7e7d29a759d33aa9c8be628614e",
	    "00000000000000353b3540d505a718e7e7e1f27310d6ea4e91f644cec7939c8e",
	    "000000000000002bac88aa526ac590131dd2ffcbeadc7b35078dc713fb1b0d96",
	    "000000000000000788849e6542943ce7cdc33bd9ae36c2fe40d89b5e0f06f024",
	    "000000000000009e90f702ae7ace236d03f02a8574b7f3656519ebf56be75748",
	    "00000000000000056cdfa06c9fac37f6f912a76c95668a11ecdaa17211317b05",
	    "000000000000005eefa4ab2c18986ac2597115a90ee86d5fad73b839cc2cefa5",
	    "000000000000003aaf382e19d6971be8c3c8cf6d8c6db26635dc5d441670b665",
	    "0000000000000062e33609a6653b870f76f3f61e6f0aa3d9100ad12d78926a79",
	    "00000000000000f3af7df48d23fc05db0bc147e245bc4511e4d6485ebfb10930",
	    "0000000000000071766c8415fa547b1445adb1d30cc6988e6decd2f95ccaef05",
	    "000000000000009600b581712eb0b0895fbed41944f931462d627adcf1971db9",
	    "00000000000000a63e3f645c03cf413cddd2f326680acd90a02e4bf36a38e9c9",
	    "00000000000000c8df89856826794019befe06f3b5794b217d6d571a2d997094",
	    "000000000000005371ad2ac01b104f236be6b041eda9ca5806c84dc8a7b5cea8",
	    "00000000000000f4b1770b523ab06e59f90b8a78eb9cab7dcbae785010bf018a",
	    "00000000000000e7648a26393da5ad772fd6f523b0d9d47aff1dc1da5c40053a",
	    "00000000000000d3bb312d25a6c6fcd23ffee4efa714cfb326aca12c226d0be4",
	    "0000000000000050f7c1de1cb8c05d759fb55b2075cce16d5b06857adae7a674",
	    "000000000000005e06a477e58f52f8573c51ce6dbb8f2b52334ded2cb3c2d670",
	    "0000000000000062691c7df0cc4f688bdf4a512755bcca81b0c84460fa1879a4",
	    "000000000000001c702fa21d35f467d189b2af2cea799d328dde16033b8ca257",
	    "000000000000004a33ae562086c4b12d458ee45283329866e21cbdb75a217687",
	    "000000000000006db34d8e20dcc4b75ebc727ca2ad8489e615c18166b236665c",
	    "0000000000000069ad86ea88226324ea0d7b3d2a5a97ccfb0df1b3ebf627bb03",
	    "0000000000000072031952cdce58e6160e925a4790b521b9961fb4ccd8b94b1d",
	    "00000000000000241476e0d024a206a2e8555a97f0fc0b5ab522d492b5dab34f",
	    "0000000000000036da7fa7015e73445d238a22d345110182bd4dc0276e1fb212",
	    "0000000000000085b6ebb8a69ceae0a16d6769db3c7967216f1ce5765701583c",
	    "000000000000000b8c6bc65c349118f51f899abb0c510c227e7679649caa7608",
	    "00000000000000c89334f3af5706a47430fb3187be72072509363d0db1229b55",
	    "0000000000000000e71a81a21562ee9eb5000f6eaac60a4382c7e9f93779d031",
	    "00000000000000bb817d3169c462e2353be8fc99b3c88748d8ad615ad8a676b1",
	    "0000000000000039f60f4d827321b50c09e7ee2c6d5bc9ef57eb3b143a38bbf0",
	    "000000000000001180d7d9c8951dda179bbf29b607643b27bb72ad2d1ff6c46f",
	    "00000000000000bb45c3bc801381d7d5eac00c6819c54b43854ddd0db2d46345",
	    "00000000000000094f5a6d342390569f20f5363ab947fa1888bba06aa5defdc3",
	    "000000000000005247d964648adece7462e8dfeeaedbe51d4e90fa6ad592425b",
	    "000000000000004f1bf099f6e1d33aa8eeced0941a6d91b391cd73d1e8b6c902",
	    "00000000000000a20fd245305e8e0897fa502e0ed05d5de9f93735a685827a0f",
	    "000000000000008382e224d773d4aad6537b41ee82555d64aeba560e0a806d89",
	    "00000000000000763d0129abdf321303614db5bccf89f32f6ff676d1c02e0e6c",
	    "00000000000000844f73ba38e4ad4ccdf8ff5db7283c4f99dda84c0918bcf63b",
	    "0000000000000031b2f47fa84f266bca67c2684d5c6815b4073eaeb2081ff11b",
	    "000000000000004393a6ef584a74498c2dc1d94c002b09dd994e93e4abea0ae7",
	    "0000000000000023dbaed091f7976da5fb1ab17ed31c6173dc4742fd3d300e50",
	    "000000000000001b41ec2e1914ad206742ba7928b1b59515f8f36c9e616b732c",
	    "00000000000000180907f6ee7bcbee05ec1dcffb90633a37cbbc24e96552a283",
	    "0000000000000075c8c124703bad1daa0313fea0b73f669c74a5cd1c93947f6c",
	    "000000000000004ab8003c24ac126df7c084cf402629474691986e5bb25d9709",
	    "000000000000005a5d17222adb0b13dca0b6f072b63c11203581ee71f24b743c",
	    "000000000000000c7dfba3e91ec92945ad82062de89a0c89a3f29a03ef124abe",
	    "0000000000000080389d5bdec69a982952900f66a983d5d1dc26aae9aa3e3347",
	    "00000000000000b159c8c64e183bc3ad1e37aad28714f10538590204695086f9",
	    "00000000000000b7938541c98baf8bf74409a6a898f4cdc1d22ee11fae2acd0f",
	    "00000000000000320ad2114a8aaa7084382f6588fd10ee050c87d1a62c01ffcc",
	    "000000000000003deb15dfbc8875c8d8f03af68998d3bbaa15b4f7f42c18fe5d",
	    "000000000000004356158690d7f8e02d77f7957777e23ac3e2f56aeca443f5f6",
	    "00000000000000b068e0de0393d35ad9a99d71489344c17d77bc406f320b8210",
	    "0000000000000058581b776b16ebcd199b8f4f0432ca2ecd3bd1b9d75d3211f6",
	    "0000000000000065640863197907f4cbd30e256fa7c58d515db1fcaa03f64371",
	    "00000000000000bac22fa2033c97abc12bb7a451fc0ed70e1fb90f348df5bcbe",
	    "000000000000007911274a26710d4046015ec77e023950334976057b5b5d1e6b",
	    "0000000000000060ab173097418921de38adeef0d0feb1b3a516e4d547935c47",
	    "00000000000000a91d43712c0eca8a7ae5881c38b50a68420579898d6894b89f",
	    "000000000000003414bd6501f56a30e68274bc84681b380e5267c14c586ae1e5",
	    "000000000000000a7d468a950f9978257b2a5d911638eef3966ca6571c9ae985",
	    "000000000000009623184c335a0bf1c7b7e6c9c234639cf7b55f1b511b4924f8",
	    "0000000000000013b2f7ee77027f583b765ad9811dfe3d0adc801e295fd9acdf",
	    "000000000000001ff0252e40912d749597e2243e0308be823002773f9155a562",
	    "0000000000000066ed30008d01304a40fa796ea5bc5944fd0dbdbd84311dce1e",
	    "0000000000000044e360280c393a4a5745f5441eb4c3b27bbde2463d18e96b00",
	    "000000000000008e7d6fc710827c350b8e0d0f4c1f9a31c32ce4c39c01477ba2",
	    "0000000000000067f0d3b19ded1334f9811770746bb4ab136e5e882d755330b0",
	    "000000000000005f3494b378514ab762e3318f3e879a8bd8b3accfa3131396d1",
	    "000000000000007fac4c4d81cb9fda5b86f57491fe6c1830be8dc157160f4e35",
	    "0000000000000080a4813bd625eb12d1f3b3871067d1db7ab337b741a662a255",
	    "000000000000008d47d3f536cba3f970839f6b57060ceef30313858c2a8d1be9",
	    "0000000000000034da328b936c0fa2dc2daa7337eed96a405c8e77bfeaa583e8",
	    "0000000000000066b9300cb8bb40663c95ecd259a2d35b758ff7aae89162a563",
	    "00000000000000807ab1903799e315f36ea94e8aa6255f62cdb74d5f5cbff8ba",
	    "0000000000000008a1c3177305ca8eb4ec5eaec948d3db91f81327e2b5f8c8bb",
	    "0000000000000080e367b145c522185b810ff42502d47d6124f10104dd506e8a",
	    "00000000000000883985bbe09a6487096ad1c0364165f8ddc9ba9669dd70788c",
	    "00000000000000853c5ec727c924e5247f012296e0fef97207535218319fe132",
	    "000000000000009625ae340fc5021b417baa4ce04f9a47c075477a0f09004d65",
	    "00000000000000a3b19bb7918b4880d312111cdce42b907637c1717e37a5a606",
	    "00000000000000012927e646a370e8a6515fa597ce9fd70ce8cb04cde6e5def6",
	    "000000000000007d6d50ccf8c05415c9606e26eb469c8b4171439de3f1560cf6",
	    "000000000000004ec6bada0ba33fccc703bad71a64665f7b65ff79e7a6ad1d41",
	    "0000000000000007c93dd77693a532a424144f40e7631fba48a2554486f1e8e7",
	    "00000000000000821bf4fe85e617af602194ccb61a9651575c8f03aa32090ddd",
	    "00000000000000376f8a1122b65fa60e9b04697f1976a5410b0c8d2e4c85a89b",
	    "0000000000000021aa556e2e92350b510a221697648f16463ddcd1c7aff9388d",
	    "0000000000000009190b7fd57ba86f3a4e919be118266994d5d02d9a6747a3cd",
	    "0000000000000063e3823d3359fdc07b59007d336f4449943d81e92b8939c9ea",
	    "000000000000003266a05a0fae665c6523810669d4e9ddc61651607bdb475b98",
	    "0000000000000059adf051e6328152ce624a7e3af2763c26df1e0e22c6c481c5",
	    "00000000000000060da1e05099ba71590f2f88dfdf106e2c7720a74eee8693cd",
	    "0000000000000063f928a43a008c90ea1c672a4429daf7b9c0c343a84422c9b7",
	    "000000000000006456ca75ed06b45921795c00002a882f59049f75dde117d518",
	    "0000000000000073c442b7d91f1cf06740f38dabcac127b48b48840558eb884f",
	    "0000000000000045bea9971ebdd13b78db0c22eab3a1f7fb4c7daec86c91dd5d",
	    "0000000000000079ddcad9e7fa9c4ea8ed732dcde4dbd4e668b040e2dd85b050",
	    "0000000000000001ccdbfe696987ee8a779a21316ae988647bdfbf73f2765cf0",
	    "000000000000002bc5b98207a95eddbe73f62ffa92415b376fe77ab8578d2df6",
	    "000000000000007100ec61f56e28a8c76d1cda632f549c334905d528202b0757",
	    "000000000000006a8d7e58f680edfb1a395f2608a2e146e09cf86fd38be775e0",
	    "0000000000000079874eadfa8dbd92a4122851d3a43b8dc9bdc8dc09a3471cb3",
	    "00000000000000112a182f4f6f15cc4922d09cfbbd0dbf51dd03edac81dbd051",
	    "000000000000006b9e360498c13038bfc74bd78dedb335df9486ab9fe2a86a5c",
	    "00000000000000892183612635e14d8d15507eed0549a4e81129ac693fde15cd",
	    "00000000000000615b86fbd55c293cf9720183b02eebc0c728d23a73b14861c6",
	    "0000000000000047b973f48cd8fe5418da57606beebe73c0d5ef126d0e81d79f",
	    "000000000000003f3af23b188cccc5d1db81c5b5323a945bffac9025f4aa6f05",
	    "000000000000000a65a3dc1b8667f84edd80c93097d64f030a4360e02baffbe1",
	    "0000000000000071514801e13fcb088fa4fc2cfea987683797fd2db9f4799e37",
	    "000000000000006453c6a1aae41c14d64b13d3b396442e3a697933c627d8b067",
	    "000000000000000ab91e86448ae45b67e0d47fc95d9cc5deb1b67a56d5b7aefb",
	    "0000000000000031ae9b627e90ca850582101b98720e2caea5cf5983cb261aa6",
	    "00000000000000365e2338dbe7ee3d572ccc49d37551083da5b24fd84f1df5b0",
	    "00000000000000509e403e19ac764e723921bac32f63388150349d2d92aba044",
	    "0000000000000030d15cd06f01bb78cea11c69eb54d483c43b9e86f5df01a8de",
	    "00000000000000537b5b6c6689b2fb953e1bf092e5bf7957c3a9cd084e3313f5",
	    "000000000000002c5cb88507a43e34cf82542a3d38ab2f13afb0521e64eae184",
	    "0000000000000060bcdcbf3c7a0ca122d0fefe95c80a19f6314cb1b561c4282f",
	    "0000000000000036fda6942db9d1a95af1069ce98a957b431401fd3f9ec5202a",
	    "0000000000000010d2ef6951f9a5eaaee700ebcf8c29ffb82d65f347a13af26c",
	    "00000000000000593dd8fdd2010da9f233be486477856b5903b98664ccc2cba6",
	    "0000000000000029d493bc7caca68f25d7d16c919de9570158daea3054f46e61",
	    "000000000000002fff9680c910c8182c8c337babca43d4ccdc012c68607a63d1",
	    "000000000000006cec2c3aa272283c1c4a435ffb4dbffad0066cffac11cd0229",
	    "00000000000000494a4f89df72abeb3655bce2ab3eed975c792e18c0a252789f",
	    "0000000000000043f72af7ee1a546d66007c81aa6c4fb0fbfda1914d15595192",
	    "000000000000002789c632a79b49799ddeaa1511a20d8cfc39d2870d1cc5dfef",
	    "000000000000001d976e500e4e880c9d16a8e7a30eff2b4638f1ce8e8a3d29c4",
	    "000000000000003cece0b67b49309a87db901b0aada51d783f3652c971ba0c13",
	    "000000000000004826774ea8f4287014e0685f7af83038e49c58566efdfedce2",
	    "00000000000000140beae11d88794952f5921485310b2dafdf4f33eed8a35ffc",
	    "0000000000000036c4d3078ea2e51cb31638ad2812b0f2a9d88a75e46aece440",
	    "000000000000001a7bd91e2dc47eacf4374546c02d27e073f7c243eccb2122c5",
	    "00000000000000034303d7897e775a29683c59c6fcbf9df045ebbd82f0f0d93d",
	    "000000000000001ee744e65377fb9ae9fe3559b19e4efd0f77ff925e3bcfeb5d",
	    "00000000000000478d34b94a9370ccd1c14f81e2c83811c82ec68c4c76d1760f",
	    "000000000000002feb02ff51031828bf9606be35af0da72047fc04bb9014d671",
	    "000000000000001bfedfa1bc3453bad4f20e0fb3c90dd88dc428d904e1a4c62c",
	    "00000000000000247c0a14c32a9e480555e99e68405e8767fa6844893aa6182b",
	    "00000000000000008ec703208e9c95f79ff65b798789c4b007c3b6aedbfeca68",
	    "000000000000002b52a10f90aad86e3ddb042fbc14c6f87c5cdbb8091613879a",
	    "00000000000000528fb16c593e62b2042f830d991785e14aaba2a205376f45a0",
	    "0000000000000015086c8c19214f1ad4cad2a977cd3da2a01e3b979f182c363b",
	    "000000000000003694dc6aee5f58761183466b6bd3ae856581ed3910d2377b32",
	    "000000000000004057e73943fa1a7d08baa01f82ae20139f7957f3f8d4965778",
	    "000000000000001fc526a6af096322879fb4b2cf531b93df1909144a63fcc7f8",
	    "000000000000001f348cb0d38145c84312f4d13c8f123ffd5aeb0a9651f7388c",
	    "000000000000000ad7ad602fd78be4a4d219cf2b3f57063dadca4723c422927e",
	    "000000000000002b660d96975fcd2a64210ca12417c70f8a17b74075aa370472",
	    "0000000000000024593882cf59758b73160b79042731ea16f4c4963f4da5fa04",
	    "000000000000002962fb7bea343890bbf645a75681e8e3f3cd4ffd63335804c1",
	    "00000000000000322cc58d3ac7575b1ecc63d1d48fab781c3a5a81b3d5edf647",
	    "000000000000003d639c2bb461feb371be80402574091779841035b7f4c058c3",
	    "000000000000000ea681e0c2c447b6d6378c72de1dbd5d86f58b29ee98819184",
	    "0000000000000038cdd978f59dc0e83d815ae4ea10cee80a8e6aa55442006b55",
	    "000000000000000a5ca5c8d02ffde58190710eddaafecc504e4696ff1a94a29c",
	    "0000000000000009ccce187360a7f6186f52e20bbd2b985cb6541dc7ad430afb",
	    "0000000000000006fc7eb09709e8a6eb7d8aed464fcdab458a34f2a987cea59e",
	    "0000000000000000e1597c26fb1eb731de40bc8d183933e59563ef47241c6d3a",
	    "00000000000000264ba16411434a97633d6a5e9f3f5ac77ae6c53dbc00346875",
	    "000000000000000d9db729c3f3d836afdf87307a7bea035b9492a601ba5dc77b",
	    "0000000000000009a9988ea32542821f1c357e2a45c1d72698374c0e138e4423",
	    "0000000000000017a2c932d2a0f7731ca9185a9a7d7293e5794502869bb7eda8",
	    "000000000000001d0a7f7b233c4da1cd3c7b5b2d8d218c9067404e96fc6484cb",
	    "00000000000000021706a42795fd1e199d7c4303e134e007ce3c9db1ae459254",
	    "000000000000001eb317de07b88373e30086dbc185e276339abb881d91ee85bc",
	    "00000000000000048892cc190a861cd1f9ec33b8d1daaac644a4df34a623483c",
	    "00000000000000102d4a737f978b105cf78d59a191e769ad1ad10e49273f5bbf",
	    "00000000000000021266d5b8ec858ba86a04ea30af019b643bd74d94ab3affee",
	    "000000000000000159f4bd54cf3c54c2df34ddd6ff51c680e1b7d0622f5c8b43",
	    "000000000000001c585dee658d44a98a35c53b726eebd4e04533051e3a06c2a2",
	    "0000000000000003ac8d176fcb8f3ba741485b10513ad0f691a3ee6dcb55a7e1",
	    "000000000000002fc907ef2b481c469db42edfbbbd738c0da113a541cd72e6e6",
	    "000000000000000e9a146e8886cb1cdbef788baeddc6b3490612ed00db1f5454",
	    "000000000000000326e8d7e97010eb98814a02128ad58e0f7adf8d7e57485c16",
	    "0000000000000026a15756ce144796c723bc047b354a00df0f988f55fd25e3bf",
	    "000000000000001c658330f57e0148a1682f684b543d4b74e35fd4aa8c6b8270",
	    "000000000000000896049f0489656bdabca12bc1664f46c2be8023ae72a833bf",
	    "000000000000000916f8709e820054ae1439e6d261baf7ecf2a6e8d719bccf55",
	    "000000000000002be81db837f817c019177d0523e2732072a54e6cdaff09a4e0",
	    "0000000000000023511bd6f066b596a9002685dd504449e4ebdad27324e4c42f",
	    "000000000000002b98e7b6eb876a4d5e93f28ad52ea075e33f02854e03227b8f",
	    "0000000000000008490c05998f5d9a6aada36532c7f75b2799561383c8663881",
	    "000000000000001c0f8fa5e8b9a66de27701903754660868c88664f354a077af",
	    "00000000000000059eaba640d276482bdd24564d8014a005df856908eb535a89",
	    "000000000000002bc8fe509d88339fc3b3eaa5f9ffa46470c27fbe3852c1ae66",
	    "00000000000000134b9056e1dbfed45ea2b1d618f9ac78474eaf09a659507b44",
	    "000000000000001183517d87b558ab480635387041babc1bc59acd25467c493f",
	    "000000000000001059fbbbd59428ceee257d6ee77db88d2efedbcd1486308993",
	    "000000000000002234ff9939dd537b0f2098c586ae347d75c0cbe34d563fd69b",
	    "000000000000000594a560eb429ca3a384695630e299b85141363fc0278173f1",
	    "0000000000000025c701ae7848e792887f576cbd9326afc1eb8b3a086c0de36b",
	    "0000000000000014ed9068a05cb9f0db562699583a213056dac4472bd94d7667",
	    "0000000000000017b74ba3419a9a0f7e00a3c4a6cbef5625b76968099daab7a4",
	    "0000000000000004c759bbe9c3c960e64ee3e03565aede2a8bea27d1630be196",
	    "000000000000000e36e3f32e451eaaa38bb52743246e6e217ba5c04ac9f232c7",
	    "000000000000000e790f3e3d6280ae072d2718052a89bb1b6229c28ca7c98a09",
	    "000000000000000ae723eaeace03cc4567e2a874ac010faa19b26b9a028060dd",
	    "0000000000000005fcd1d62600f480b5037437ae91d36df27a771fedf3e8b783",
	    "00000000000000003d8f8a7531175782844689524111fd18134afc467f0230a7",
	    "0000000000000000bbf54a883bf887f87539a50e13f87de3bb7640874c69bf48",
	    "0000000000000021c498b3ccfb9752d74ab4fbbc04d82d03066bc86825c0929a",
	    "000000000000002297a73fbb065078fc070744751da6478dbedcac8792231a91",
	    "000000000000001e0c0e2fda15f09f1ca1658e3b0f623d68f2db03e3f277b118",
	    "0000000000000009463d7bc85acf2854710b71be4f22fb00026d03a271cb98a6",
	    "000000000000002372f31c0fb22f877020f7e94ae676abf5abdd99cddad1a429",
	    "00000000000000192f8c9c03ea63c0a382fefe68786a964bbdca8eda7d1c46ae",
	    "0000000000000001ad5996018269f17d9a360340134143cc908e75772c4bbbcc",
	    "000000000000001ec54f6fb1c492173a0773b369888ce51d10d19255332a076a",
	    "0000000000000001f98da70a427f9519c4bd111d560993281f89fc513c70c403",
	    "0000000000000010f80d432112a075572865ac1735808eb9ecfaaf6c31c8a347",
	    "000000000000000e4444b1cd47b382e14f6bb1a3891fd8122ada505679a841e2",
	    "00000000000000019af989f4034312c144e0544bf303c5b4dfc69d436de1c060",
	    "000000000000000bc5e6f9f18ea558a7c36c8ba56c8cb7ee4275752b37b634b7",
	    "00000000000000070beb057741568364a9f016aa01e45634f284a1e157ce710c",
	    "00000000000000163b863cd7b64eb5ddcf05ca0cf56e5f3f9fc1b84e9d2c77a6",
	    "00000000000000158b8e5cefadb4d7d4aad302507a94f4c709f68c65c1575368",
	    "000000000000000f9bc478deae6a3d56a0e88fdcc3fe0ec09761c29429597b2c",
	    "000000000000001a8a1f2f2aba19b066becbc701457bc563f795c9eeb6ce05e0",
	    "0000000000000009e3d3eaabbf90938ad1e235bbf07c58059849fc7dc863fa70",
	    "0000000000000013626a4373f9f8a5889afb5c0a0d81391e6290f2e8c8290a11",
	    "000000000000000a5924f780d040fa4a7b3ca0edf2e65db347d049970f36b9ba",
	    "000000000000000a77d5a81a7462347e89ee8b29e8626ac39de590147c3dcfe2",
	    "000000000000001a79ed107329e82bcd04435d2cb753466b1870dbe1c4e8d429",
	    "000000000000000a2b418085630e3294de6a8d672e93befbfb3ab4bc1c302f9c",
	    "0000000000000003d1a06e81364bd97f286b7bf19af0ddbbfc435e2b49cf44cf",
	    "000000000000000f7804fe9b88317e7f9b06f5e79b07ef8e6ceed83f1b983641",
	    "0000000000000003d322ab7cb9418de8f0fb34e2d158dbf40a035270b122ed43",
	    "000000000000000af150ffad3b65029c58e978a4dc8de6cc8d830ebab381f3b6",
	    "0000000000000008b67eeaba43c4b649e67d034fccc8924e2ddced31cb3e4575",
	    "0000000000000003c9cffcbf26bd6b18c8e732306ad1b70d7ee4d40c4e2aa80b",
	    "00000000000000018053b73d8e2929fcfaeb5a765e11d52a505eb7434bec2fe1",
	    "0000000000000011aef1b81747421dd8cc90c9b529c9590c1039bf9dd0112369",
	    "000000000000000dddf22c0abee53789f2df1fec8bf7c85712e4f36e76c8b48d",
	    "00000000000000166e69d1c618279078a87ba5e8fd9cd38d942bc23030143e50",
	    "000000000000000e5044cc53a743c47623c50b38527510576b79979b734c00bd",
	    "00000000000000157e4e2a665bf9e3f366c7df07aaee8bf347823ab86481a8c6",
	    "0000000000000003ee273911c546be3c8f010e47a5550cbf3a62caa5cfef6697",
	    "0000000000000013c1384c0049f989b8d85064eeea32703e0969941aca44ec0f",
	    "000000000000000c0d432d0269fe4aa3aa87294c1a95e48e05a6943acf2f80f3",
	    "0000000000000010c8169d177123075d22a336e71e519f449fe2b4f46943054a",
	    "000000000000000cffb09ae272b3de316d5d0cb3c678b5de666bd8005b9866f7",
	    "00000000000000007b9bca29aeac4d63679111439118bae732c929d8916a9e54",
	    "0000000000000007e23c36c67f218a4961b97a0c019f8528c424ba76899adabf",
	    "000000000000000080a9efba976e09c5fab655fadea80d6e33f320fc9c82a9c4",
	    "000000000000000be12b33609a758e8b6bf31cb11d9f22a4d20fb9a23fa0b663",
	    "000000000000000dc64af338bd5f3c32896502c0123098b32c6ff0a24f8ab015",
	    "000000000000001589fa844b870ef7ab1cd873110a06f59ba7426151efb0c372",
	    "00000000000000102c51dd7a9ffd12b7cdf5cfd9f7742116b9cb89eef2eefa7e",
	    "00000000000000074d4f0f6196648f19254e32b846a23ac348121ec46e0dac3b",
	    "0000000000000005987ebb0011fc4641927e49a47ee7fc54091bf07b421c3191",
	    "000000000000000555e64ca9d9f3c27dd87b39af42a33f1cf45b99e2d24cbd6e",
	    "0000000000000007dd2310bba4a115aa68367274122794f06620cf8a0b125734",
	    "000000000000000e98908529f576a929e09314ea882ff3c6c3601eb2f30cc52f",
	    "000000000000000575498851d0efad7f9ef4488e65832e5da6f409f48981cc78",
	    "0000000000000001e1eb4d43ea0fbfd0ca9a54cf602ff751a44f72383e5eac02",
	    "0000000000000003bea23640f79ec279c7d542676938e5565335425d2fb2ae0c",
	    "0000000000000007138278a036a9a92b017361b2748f2beab47e561ac0fd5c95",
	    "0000000000000001b4347c90cbff5cf3cdb9416c7dee07adae8f3e9540798337",
	    "00000000000000048a42ad56c3fbd563f4af441b1bec1e53ebbb3ba8981620ae",
	    "000000000000000e3379e4c33842fc25ddbf9eb12ef8223848f5872fb87acdf3",
	    "000000000000000b5a09cb74dcd6174dd3397db90b5d63e6af98b88d4e637114",
	    "000000000000000b8aaccc15d7bbf79c3b0cfb3110ee6ac9221e2c99a4f08de5",
	    "00000000000000053da3471eab534763ec1b9eec25851ccbc3e490d8d7ea6142",
	    "000000000000000d85c57912b76630e8ec785324a552b83e96de7b074def7e46",
	    "000000000000000b2e2451786fe40f569713d3d168b6c89991f619271938c359",
	    "000000000000000b08cb567baa4e96d0634db9a7cb2f945dbe32d0ad0860b66b",
	    "000000000000000caf97c438ea8db3c571e1d490f48ac03257377d68bcc52a0f",
	    "000000000000000caa6477fe0cb8da0b6d8bd9d9823f8f88a1e4d584ae7c6a2d",
	    "0000000000000004b2d00a15359cee329af271afa6879d61c61752cabc399dba",
	    "0000000000000005ca97ed54a9f8c3519f7f5b17a954ba2502d8056ab42cdfbe",
	    "000000000000000528e47c5a75922e342b6a9aa3fedd62a498f5e97994782b3a",
	    "0000000000000003a59764a7194d1b3470fe8fea34f6a0df65020c5d53713df0",
	    "000000000000000957027182b4e1c37c0c51038723567b665d591c6b0466fbd7",
	    "000000000000000859019ef81e77e7db3b3be63edc6f888b98635b34d15dd956",
	    "00000000000000047128274f9f8ff386408369cfe959657853e29c3db170f070",
	    "0000000000000003f5889478c28a179f5f5c21562c3405a8ae8b4c6ffb0f55bf",
	    "00000000000000043b472650a49e912971ebd5c585709df32935ede8825d08eb",
	    "00000000000000060ce5da9105990dc071928919354ca7497ea4054efc49ac10",
	    "000000000000000aac6cf4cb2365beee7cab7fb9c6ced85315dabfc62e41abdf",
	    "00000000000000088c1576eb81266ead98232c3085f6fc38b27a50e95b35330a",
	    "000000000000000705e1915dc097350e9b3b8f47cb5a98c0f485cc80e8c51bc2",
	    "0000000000000002cd988d627231ca03edef16e867c98d6fe33365cfda0136fe",
	    "0000000000000003816447471c39e3b7beeccb1f4f8c1dad296580196ddd2ff5",
	    "000000000000000088cc21b9b88578c769c3b98ec318a1db556de5ac86272eb0",
	    "0000000000000002064a2e2017d1d25812d54d9e01807a5fc26da73a4f837058",
	    "000000000000000adce8d994a9b2e90f35ee8afdb3dbb626dc2b4d97eec265d9",
	    "00000000000000029e449c7377574a7162ccb4ed16c4fb24797c5ec9c978f8ef",
	    "00000000000000079c8a642234cb452cbe261fcdb5885af604471c458c257956",
	    "000000000000000aaf36b4dbed1ce584f6cc10ed8e32f4db2f7b215b9f6ee62c",
	    "00000000000000097985d32c27603314cf52cf715c63c55aeeef3e73c0d18b75",
	    "000000000000000549a71e9ccc7ef1c47796bccad3113eee91475569369b0223",
	    "0000000000000002f8a73902432074b94e18235dd5d93255155146cc8b82d3bb",
	    "00000000000000045b8226e11c4be4a6fde57a74bbe2ca936e73f1e1c8ae192a",
	    "000000000000000682a9858f3fcfd0d8d68d43db6a570c6e35efc09774250f8d",
	    "00000000000000010f614ad7d60b94baba5d46ff15708867ca281fd49cd680c5",
	    "00000000000000062954fa4fc700336ec8a542d5f1f6db122ecbd55b77b57184",
	    "00000000000000029fbd9eb8054620011b1e60e444f51947c108329d2b06c948",
	    "0000000000000002228c10b4c940c972c24dba0b88c862dc00545c9eca36372e",
	    "0000000000000000f0af06233fc5d9e11ec771b1d7ad63be53e13a80c0da67c6",
	    "00000000000000028260e5f55c078c69568044e34361ab50c115a6956a78c6c4",
	    "000000000000000720e0698f1fe21e6b3b9c6ed22e706e4ef3c90290f95f7dc8",
	    "00000000000000020f994630b5e2a38f666d6813c18d7961c94144a1f19814b3",
	    "0000000000000005d09db70fef835c9b54af8dff898a86d5966d9b226cc8660e",
	    "00000000000000050a3f603aebeeb2f11e163c6994b0146b1246b7e1caf14ea1",
	    "0000000000000006262d6fde7422cfac8328a1ce67ac885d99f59af91338e1c4",
	    "00000000000000046ecff1fada9be8c94eb6e040463686eb647700d56692de73",
	    "000000000000000791e8cd1c10ca96fc8d354e69e4d3aa0991187eb6d48a1fc3",
	    "00000000000000016259ad6760cd01ecde591ebfd884f63bd7a52a2848ee666e",
	    "00000000000000076418fa24da96f37b5040871b81e7e3ca77f4feb8e506e6db",
	    "000000000000000533b00b2cd11b1280f033d3416291a5020d06957773f6dda7",
	    "0000000000000006d7e70fb3ebac4d0c34b864f02bfaa40863ee5c8c8e36e498",
	    "0000000000000008058a22fd3eae47bdaa5ebadf6a67f6e1fa6f7d2d78965c63",
	    "000000000000000567720d1f23931cea76782dd63181c5c65de4156c27f86d5e",
	    "00000000000000036182ccf3be116c6ca09e699513b20a56a7fb7acc12e6db1f",
	    "0000000000000006ac3eda43640c1d7005b6ca16a84dd28a93721de2afad22b6",
	    "00000000000000065df78bdccb85a8c0d9439f1b8e2b8ae9c462aecb10c681aa",
	    "00000000000000003fc6e2daaa7fd8b75eb4e9b271609e231401fbf45a1367bd",
	    "0000000000000004205908712f580fea034251412accc8dd7e025bb832cbc596",
	    "0000000000000000890e54988f4ebb693410a7f3c8b61524d589e3df52fee375",
	    "0000000000000001e2d785bffc864bb484c515348982ba31244c542a0f3d9904",
	    "00000000000000038164bf66aafc63f004af1e4ef25cf878e942e4fbdc83d2a1",
	    "000000000000000654a05974156f90e16aac30256fd1e7ac494ea81d5a5289d7",
	    "0000000000000002c7062db873809679f9fa9423a1abf3156601edc315f5be1e",
	    "0000000000000000b61a1a596fb3b843a778cc75258a049b23548f19ea220291",
	    "000000000000000102c8e5f3aafcce11baff0ae86612c2d76ebeef5eb1a3e50d",
	    "00000000000000009548b5482b17a496dca1aa1a737615ddca4fd7ae36633c38",
	    "000000000000000331313b3722049a91907cc524e2af373b10ed57129bfd390e",
	    "0000000000000002ddd69593ff6db272391ccf7124bdc72d4705571aa15800c6",
	    "00000000000000063d2f66aad2fa421907370967a5c9ffc798a513ac5f388d63",
	    "0000000000000006465c18bc49b5db7d3b22065c9aca0aa105c0ba0c67bbfa18",
	    "0000000000000004f3cc28d404aa133cdea637b03f35152b266622eb1cbc5107",
	    "0000000000000001e5673b127818af7800ff64eecea6ba3081004ab9d4165f90",
	    "0000000000000004eb0635208abcb0489f9662c2a569ab06430caf419ea1a323",
	    "000000000000000271d2dd9639ae0fad3709de5a313346dcd2b99011a436f1fb",
	    "0000000000000002554935412b81313e75efdbf794c59530df86050e38b2c167",
	    "0000000000000002511c220397ed25e36408e1552df8311a6fff887592c25911",
	    "00000000000000067aa42746356f76df26ca0ffed1fbd87280bf616e2c1898ca",
	    "0000000000000002e7c4cd9c10434d8145e963ffecf54d270fdc901f43b86537",
	    "0000000000000003600a1b797123038cf21882ca873e1afc205eedc32f0f8d0d",
	    "0000000000000001f4b0ba55d4a8355b30713b8729331af87ced517a8e1921fd",
	    "000000000000000249342c9c6fb37da301a32e39134850e8a26cb83595206abd",
	    "00000000000000032b06079a6cadcc14c4b01fe681bef6a09c31e8f10e149a2d",
	    "00000000000000000c05c1f4b3d7bb5668452dd0e38d42a8c428654019cfaadb",
	    "00000000000000022c767112b3fc6dbf7d2b73e28239a17afa0538a1f90a8480",
	    "00000000000000042360cd14179c4b0be356949af96f1eac084e783671746e12",
	    "00000000000000047c906811a1907b35e641050b3ac900cbeec56af77c624dcb",
	    "0000000000000003a19dcd25a4fac21a7ed9229fc373015f5012ad2ce3dbc712",
	    "0000000000000003892c1b85ba2325278221b9c91e0193d5d008f994dbe18e54",
	    "0000000000000004fc602dc8b66cfcd8fd057b197c2644f61964c4a4d9f77aa2",
	    "0000000000000001e8711d5cfb675eb1ec07b8838a71f39f780d261bb58d1320",
	    "0000000000000004f37d4578b111fb9350bf382df5723814730cea32d790fba5",
	    "0000000000000002d0085ace55ed049fe9d491f7f67ec83fa17d9dd3d660da68",
	    "00000000000000019cfe24b0188925b82939d73335dcad47f4dc16f61d31bb20",
	    "00000000000000020af256d34cbdf3344339e6ea5b140bd116536a51b79d9d8e",
	    "0000000000000005433af1c482288eabb72935f31569016a42ba9774360f2ecd",
	    "00000000000000009d879081c306eee3ac5096eb639c4a46f9ff1949689506f2",
	    "000000000000000372863a4954ff31a5f2f1fb401785fdd979de9caa102853d7",
	    "000000000000000375bdbe7864ef8a2a0606388eb75706260dcd72475109e469",
	    "0000000000000001b162a1648e02a789e00eaf0fc4a949db1f4f1a152f166c29",
	    "00000000000000011901bdc21a609bef349586bf9ac3f410aaebfa6b41e5ad3c",
	    "00000000000000000ff528f14baba0ec5e4ec64f09fadea4496829fe169e91da",
	    "0000000000000004493d6045d5dd5f000f9e8b339b17f0761eaedfaaa4a6459d",
	    "0000000000000004693321703b6d758f09b8cf96d61a9b361c5234de2e3b9597",
	    "00000000000000029e0a6a01914c5068e43a7f8ac0f624670f3a8c73470273b6",
	    "00000000000000023d9f3b4321fba79fc03294b3f81056ca0ec9a54cb51e8368",
	    "0000000000000003d326098b77cbfb4ba98b945071b1f2c85b29e2cb6134ad21",
	    "000000000000000069955e00c4f1c28709f04a6efd16c1f135edc357b5074c94",
	    "00000000000000044da216bf2a50dc0a64ced93db64a3faad6d1e733572fb36a",
	    "00000000000000001cfdd3cebbe20e043ce87bb39838b4e4d43c16929d0c976e",
	    "0000000000000000ada4255337065e515ae830fe4f432220d883f581f07e50f9",
	    "0000000000000001502c56724f59cf00650038f2c760466e4d4da02be55d0b81",
	    "0000000000000003e297990a3d6e2ef3e2daed683c8f73ea45480696684027f6",
	    "0000000000000002ff5d9b81ad568da4bc763ae48e11c4d4797f3dc46a3cd5fd",
	    "000000000000000092abe44524614bdc323feaa99372387b7bfae6632185d959",
	    "0000000000000000325a617b674b2ea49cdb27db2ca7d97a60b50e508e48da6f",
	    "00000000000000024120285136624534af3e9abf3c55290104a836ea8c14bed2",
	    "0000000000000003d9ae28d958f5229a532bd0264804e319fe38b8fde511eb9f",
	    "0000000000000000080e2d7bf4f502beba30a88588a5b4d5388c89122d66b95a",
	    "00000000000000014f02f97cde181c982d74e59d0976a0e1a3602c46c2b5c374",
	    "000000000000000390e14991429d55d122f0110fd3fdf2927432ca825c498d81",
	    "00000000000000028a88fda7e28f41e1af4fdbc9572b712ee5252171f70d0960",
	    "0000000000000000b7dd80b4cdca40c9f0a2ec95c4edb48f33542afd73b91923",
	    "0000000000000000d80068583b484026b3cf314451aca14abf18c5ce8d8e8452",
	    "00000000000000020b999d3f37394b86b55679af76adccce02d401ccf21270dd",
	    "0000000000000000900e9cd48f8242d885315969e11bc2eeec70083b8eff832a",
	    "0000000000000001e96d8a247ccf6cb92289b48db50aff09206ecea4389d4502",
	    "00000000000000014b0c2b1ac04da2defc3805de258235adf60bbfb4ca7bea37",
	    "00000000000000003a63833880193275858feae1c5ccd6b1aa1c2d4ec030459e",
	    "0000000000000003521d838126ca43cb8ac4dd6f4f5f5e290b8efbb6e11fd2c9",
	    "00000000000000010dfbd311d54963d0a5839c599a2ffa1ad644fe5273f17bd8",
	    "00000000000000013aa869f2d604bbf2548480c080809116dd7506f00031e680",
	    "0000000000000002f9aa6f79e0614f4471cef94fe2674deed4e0f823b0b6bafd",
	    "000000000000000295c74eae7d2e8e02b3097454318348e1cc8b9cf6aef15cd9",
	    "00000000000000021f929442c855f89f72359e11981903396332a82aa0f6242b",
	    "000000000000000274def9b5dfda7038d8c603e0620957dc07ebbadf1fe1fecd",
	    "0000000000000002021ca9989ea5e6bd1e3b3c0892b2b03e3cfb7033f779c611",
	    "0000000000000001c1df959475ac4b57c62076eb322d13b81b612f0cde5afca8",
	    "0000000000000001e20176e1224176f677ddc065831cf226a45cf47ff93ff948",
	    "000000000000000163db22e4d7a59916f9d04a039000cd178bf080fca216f9af",
	    "00000000000000003b3152877c398a2310f3933cc66ac3fb8e8f223f327597dd",
	    "0000000000000001e9b8d7d93b7ab030b0e14e6c6a83cbab77bd61abc4cfbc7e",
	    "000000000000000272d6925dcd3fbf05e624b6d0ad8418e25f8ba57730697a54",
	    "00000000000000004e994285264c745ab0d5aa14347d5e182b0e381a8841a4c8",
	    "000000000000000053e10f3acdb9b48a3235246b37f8eed5b0a5db7066376c19",
	    "0000000000000000a3829f0c8c96ef99eb41fb8b5f32361184b18a5a60fdc775",
	    "000000000000000046f2c369e72264ea52d2343873ef288389e663d68a068baf",
	    "0000000000000000f7b2c12e24f49f29d20bfe62913be18d923b1defeaa9c2aa",
	    "000000000000000024af300d10e90573a71a4fe9c89be21999f4596044fe5e6f",
	    "0000000000000002f473ae92c6c07a87dc28b2db929203a44b61d4f50d1caa5a",
	    "000000000000000164367d8bcd6bf620bb3b3a3527a301fdbd05a6eec4e9abd0",
	    "000000000000000019c60c22bd18a7e621663d5d6fa034b77dfd2a508a5a918c",
	    "0000000000000000f6b051ea4f9b0244163da6bdd471057b106ddd1dc9d1dd51",
	    "000000000000000238d73c9a721a1fbdc38c08ed1797011d17459fe62d275035",
	    "0000000000000002851b1af0ccabdc314fc4c4767ef2a5244f28aad87b68009f",
	    "00000000000000012ed359b30d0728142cd2cb3e071e4c1fc9ad7445852ab474",
	    "000000000000000117a974f0b875a343977fa2a72fe56eed1d30631c87ccfb28",
	    "0000000000000001fe63171693741e04749e0d14a039ad93c7779cbd940ca63b",
	    "0000000000000001aeafc81608aff858626f09c4a01ac163ead4bea0f5449b10",
	    "000000000000000007c7824b391cf7f52a25b7f7c84ba4650d3eb934a13a40d3",
	    "0000000000000002566104a44ff1d6f633fcc1a5b652a4cb351daa6db2804465",
	    "00000000000000022b2727d80864cc4aa0b0cacdc85cf709f0df862c7373fecc",
	    "0000000000000000e5afc93631c47fdcaf5849810d2da1e03026efba09ce90d6",
	    "00000000000000005eaa689396f916c42f884a8c73e2c67e49fae5932cc9826f",
	    "000000000000000260cb9281929e4ac48bb06ba2a4a9206f32aee058eebe34a9",
	    "0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40",
	    "0000000000000000b72c55a97bbd787a3185f497ab48cca27d859068d5d6a4fc",
	    "0000000000000002da467e4cb5a37e8509a8a12e4ba39831a6f46a4b52590fa1",
	    "0000000000000000594d97eb0df373a7df7dd13d2e75a80c6a98b14c6e6376ac",
	    "000000000000000215b7e4ba44533811b3833215eeb084d43edb38117176a5bf",
	    "0000000000000001801e3a9e489d8e1ced682ddfecfc85959dfc7429a302d54f",
	    "00000000000000014c7072284a92a2bd6350eb4d8165741e1b9a2aaad382fa46",
	    "000000000000000296b2c3612cb42f12c76ccdf84855c896f3065b2674dd8f4a",
	    "000000000000000204e0c78ec2f6a77601394423f328087e6b5c410595b85f6e",
	    "0000000000000000e1ed48022a08a7bd21580173ba4ef99cf090af4be21877fa",
	    "00000000000000018fd95dc15dc11613c9c8a52c5b10be424cd21bc7af27872c",
	    "0000000000000001b76cfea6e3dc41615637ea48d642978bec4119107bf437f7",
	    "00000000000000000102934b389867c664dc47d547497083272a09a8c598e743",
	    "000000000000000062a3bb35c254baf23e3df9ea63cdfa0233abef2467daff6d",
	    "0000000000000002d77a40fcdaf44d84a8ca101d5def50462b84172b4b16acaa",
	    "000000000000000055566402acddc579cf2b9c66da51d0a1ddea8b7d393c07f5",
	    "0000000000000000397761b41ddf7a2fda9bf59859d452fa88cd1bdbdf4cc0f6",
	    "0000000000000002b8b84978b873c065c067d45981061dd0b232cbe921ee9d5e",
	    "0000000000000002a9b2f918f30cf6c934bb0df4f71350898c5374ef55c87ed9",
	    "00000000000000006eceb73f3080c1e0d340f7e75a0ce5d51b18a89c67978611",
	    "0000000000000000f9174b3552f01f22e4a8195c6906ca8fe242c223ef244760",
	    "0000000000000002156d81132965abadab8d10871d9ede4e78b79abb3d849dfa",
	    "000000000000000214e0466941cffc40623d2e6abf1c692243c5de341d0b4bd9",
	    "00000000000000025ba55d43b155b8712d1ca0ab7f1a396b2e72ba111b53c17b",
	    "00000000000000011b581039b7a70b834248dae1eb39cb5100daa21e49f92630",
	    "00000000000000004c72f824429f16a323c551ae27d0d6f1fc9b01dda1b2cb27",
	    "0000000000000001a77fefc6627e4bd31203a488f7de8d672cb8ba01a0e8ac44",
	    "000000000000000102907ec6b7b1996ba610bf3463690e2d967bbf522eca8119",
	    "00000000000000014c1b4c71eb3998b3d1af6ecf9b0993dcb9cddedd7b8b6920",
	    "000000000000000232003440b5db2d85cb00fefef96698af862046125f023262",
	    "000000000000000199751730d681f93402dd8328e8495ca8d701d8bb27836f75",
	    "000000000000000237630c6aae1043cc0118087dc8b333903672d06fb3c37a47",
	    "0000000000000001476a70b542a4369ccd44a07e3eaf0ad3ad08f966e3a234b5",
	    "00000000000000003f56797d96c4af806babebff587acaa58db4a6f98a9f8681",
	    "0000000000000001428f84cfc47fd0f9b684e5ac23d0526ccda02e824a29f4aa",
	    "0000000000000000cd0c5acbe291cd39978551101f3929960afcbb7f60139efb",
	    "000000000000000173215f87c8b4ebbd188279483974f13a67b4be72d106b7f5",
	    "00000000000000023075118d26ce530a9f30ea63b1c8e463ad0cf6c69111cb05",
	    "00000000000000025db7d531578bf180e7993370538ca873185db333eb6afac5",
	    "0000000000000000d055d1927aed64adad4837f6eb98946ba73498f274034b4e",
	    "00000000000000004619e9095cb3347c75dcaf45a82da8fc5889c29b3c05d218",
	    "0000000000000002001dfbeaf7a89087854de6aa3928bbcbbd28a60d286a85c1",
	    "0000000000000000b94e914f9a27721e50792677af5a2e4295e702abed929ff5",
	    "00000000000000023356ffa21d7cb0652c0c4a295e844b24963fe288d0950d99",
	    "0000000000000000efa4e25d1a447d435b4cbe7e673d94e350422649152f2240",
	    "0000000000000000040c981ca6a5af2b571e22feccdad970b121196d0ef2dfe6",
	    "0000000000000000926bac747acb145033e9a3c087406d775c3fbc3c7d96cd05",
	    "000000000000000048664819a8fddb496606c575d4ef9c4fc679af2dace6bcdb",
	    "0000000000000000461d1b07942694a7f6c55004da2339fd38eca33e316d87e6",
	    "00000000000000025b28bfbcf3787efcc256c53ac354393a76e5b3c794cc158f",
	    "0000000000000001486297d227ac97740e36050e698bbced8c53d359dd520cd0",
	    "000000000000000123aecb2e9c246575eaec49d90f8b058c06422ab323a0d45d",
	    "000000000000000048628a30f0dd1aeb01f825c27b23dcd0c0f1b764fe44757d",
	    "0000000000000000a6d8b53d009db04bbcf5cab7778f27b1a3802ffadf3d8423",
	    "0000000000000001301e14f62047146d01136e53e81e601970850b7d416843ae",
	    "00000000000000009bfa3234b90a78e945431f51f003d2276c8dfd4c9111d3d5",
	    "0000000000000002168a1038e570c8c65fa4c97612ccd20e3bdb4dc6a0554df1",
	    "0000000000000000e65dd904575de54f42c4da22764bed7551f3d203b6ca2fdc",
	    "00000000000000001fe1588c9d1b63cc76e4c5eaa72613147bebd96a206acf47",
	    "000000000000000200e8e9cd4a7065c65ea1540da5cab9da1128b10aacd83058",
	    "00000000000000003b6044233e7229523ff51cdcae066cc02fbf70dd8fee5f66",
	    "0000000000000001474eb3842a5ade69863e1f5d2a21d1019a6e52827d2c38a8",
	    "000000000000000063c23ad6e3a238a7e42e5bdb54de0ac95a6420e49f9b93e6",
	    "000000000000000049ee4a4854c461a64db050e043e706d142dd4aa20d2e27a0",
	    "0000000000000001fe4140a0d365d61453e812ec0ff8e3b63ef39aa0462aacca",
	    "0000000000000000c9c9ef15ce5b655334509352b7129624818e1c7efa878301",
	    "00000000000000024905da5196bd2a088ddb98e7ca04716f059ffed0be1e62f8",
	    "0000000000000001e38057ce11b4511b51e1db6792158caa6bc759236f41a33d",
	    "0000000000000000ba1d046aa0301a1b48c051e204733e92d51b4c95c6b95f81",
	    "0000000000000000d18bf4244c8a0a403fe31e04a208062217e8abdb22e144f3",
	    "00000000000000000f394a061097b82af59c020c6d3d08fb8b361f0d1355ceb4",
	    "0000000000000001eb3059c9e0e8fe898ed965a74194c32fe73344e701ac7985",
	    "00000000000000007a0c824df9bd41ab35d1288e23567bf726bac2dd00dc0b5d",
	    "0000000000000001de61ebe0f20ac77ce111f405d16f23398b11595478148c2c",
	    "00000000000000019c6866b58a72fb314778982a0128a33d238e7afe10435c11",
	    "0000000000000001156ce5aba114b5dec955cbb990a3a07f73bf6009e82899e2",
	    "0000000000000000aa751bb6c48aefcc92e545c1db14cd1c3b2e489bab818812",
	    "000000000000000163aa89643ff859502f85261480ecb0865f350ac2b57c1142",
	    "00000000000000003c0c433cf783b3859ceeb895717346c69a9f60fb2bb6162c",
	    "00000000000000000fd70cc3713f03a70f614b6c0ff562ad7317e10cd777d72b",
	    "0000000000000001cd40bba5dbb358585a3846f0dec0a346d553614a66eee298",
	    "00000000000000001ce1b371048443bbee2cc998191819537cf3516622f24b83",
	    "000000000000000161228d406e2056d57e0d240d0ba644cdd06cc4341c9d8926",
	    "0000000000000000a2c6c067fca1c322261ca67ec7d228d2d49b02d1a4f1e7ab",
	    "00000000000000002ffd36fff27d85e9e55082e6b1653bd3c9aadb7bcb080ca2",
	    "0000000000000000d68ca32d69b71e65f7bac6c2d0a53d310d3cfac74f1a7d8d",
	    "0000000000000000c29254b9184dfc57f5002a01deb51bd2abe634d049d54374",
	    "00000000000000012d69867a1969ca788e8c2cf5ff99837b7f214b507570fee7",
	    "00000000000000019a13edc5619920464c56de72962879feb9f3f5793372f9e9",
	    "000000000000000083ca532b367ee439f40ce23375f9827cd15e7daf1062869e",
	    "0000000000000001adbfb306170ef3e66f54cec4a7016f361f3a2e6db492018b",
	    "0000000000000000aa691a13fa67a1b3fdc280c0b436725ec69062e7c494eec5",
	    "0000000000000000f0f8b02081fb163e464bb76f2699d2e78fb24db325edf2fe",
	    "0000000000000000149632141d5a348b3f2b93e80e31bda3bb2eb1a9521ea379",
	    "00000000000000015a42e47222c15710ac229a722fc14cf2325e2eb3ce0b3cfc",
	    "00000000000000017fca0d72f1312b32c6d4b3b694811f57c1598e5cc74ca47d",
	    "000000000000000165dc1bfb13b98a9f905f421c7881abdb5e49eb87957a38c8",
	    "00000000000000017966b42ce252662dae0fe68ee807591a436bfdb54d1a9166",
	    "0000000000000001f386e5282e2ce5c5b4c260b0ce926dd7474a2101af2cf01d",
	    "0000000000000000f81475ed43eea8bd85bfeccf36cd990bfbe24e7112beedd4",
	    "00000000000000016ee9d4c98983cf34f83daff20b5cb04f54a56ff9bb7d34d4",
	    "00000000000000018a49aa5e02d8e115bbb5aed236ce663103c71bf3ddb0bb41",
	    "000000000000000195b6358f52fc1e99a10f61a8e0746748c156ebcac96f430c",
	    "0000000000000000d8ad1a9bd41bf17d7afff8f3db72a627af3f5150263942f1",
	    "0000000000000001161501629f16b4d58acd4c6372642b1820402a52daadf3a7",
	    "0000000000000001f21437e1769a2de279ffaf94895a8ef96a964b957e0ce3f2",
	    "0000000000000001675caabf1f63f8312071d4e41c52693363518314587a0dab",
	    "0000000000000001e311e860051c1cd7cccba686f9aa0f01c098cb68047efc97",
	    "0000000000000000c6fe236e7b179988eade973e290871d799f71a3ab9663b95",
	    "000000000000000082afa17b5384b8949135ba28a157e6d9575902b1f0f6bbf5",
	    "00000000000000011f8a2129c684d928c7743313faa1eface22675dec3d7d7a5",
	    "00000000000000019d64430921a587a84f70f65ea3d0544d2152379883f29fc1",
	    "0000000000000000a10c8aac2353f3c81adf72894c7f0b4f1ddf72454d2f278b",
	    "0000000000000001a4d2e51678607b5ee0fcad0b24a924b171d63de8a5750ed8",
	    "000000000000000013a976ee2b2ad2062f35e80c4d03a078aa042bc96d3715ad",
	    "0000000000000000d7211469e6f72c4d0d952dfe06a642af362a6bd91876c59b",
	    "0000000000000000fce4bf5e0f5fa00b4413404c67b27cefb0ef73f52bdaad06",
	    "0000000000000001a10ac844a6fc7f7b19512d92e9c26f99a547238a05f7e7ee",
	    "00000000000000009be3ce6701d570a5e1e21b0073e94d2d89a5ed145271e9f2",
	    "00000000000000006ee9dc0d1226db4227bdd8d5994ec1fc5ad3aa3985e25289",
	    "00000000000000016dd36bd14934332f38f0a0340cd53fa21bc0239b1a5dd3e0",
	    "00000000000000002068e382f6af8945795fdeecf2b54779f45cd939d5928f76",
	    "0000000000000001163539b10665584030781a04e190f8f4ee256762f7410b02",
	    "00000000000000019fd10fc3136bb4bd3fd8a2806482b7049dd441e8d55fb258",
	    "00000000000000010c561ef23a62680fc48600ea55cba5184320d1cd4e39b1e8",
	    "0000000000000001514eff500298022e869b773a49ab31deb7012fcec1998c98",
	    "0000000000000000a93a87f97d790fddf75d6fd56ba00db444925f650efbd7d9",
	    "0000000000000000b806550d3f2c8370a5b6c48c80afea6004b8b66fb180620c",
	    "00000000000000010fa67bce4fde284b62f685d01652f9e78180ff9ad7dc4122",
	    "00000000000000003f6b7286251e55601879ab0e1e79264c22c39b4c1eba9724",
	    "0000000000000000c611868ea3c0f5d5c83148e6ec0b22e76671e406147b452b",
	    "000000000000000128f271f508b07aa6c78b283d73023fe848b165586280173f",
	    "000000000000000171edbce0ffa2b40099bbdacbf87f506fa61e0e7b028aebfc",
	    "000000000000000086e716707345913b564005e69185c89e1bf6f1bc64cec03e",
	    "00000000000000019e29df04392a335af9621c44651880f750f590d4f4e9f199",
	    "000000000000000009f2e328671844bd0fba9959f2e687a00d55694b71b873b7",
	    "00000000000000013e4465b81190a76feb2fb4b50afe2105b1ac9fd12a31f999",
	    "0000000000000000669caaf43ae02058e726d98d224d79c436d5b4b84450a801",
	    "00000000000000016b56f2579c2decce27d4ba0ce85a057cf16616c6fccbde61",
	    "00000000000000005ea4b3a1012a4401d3dd4d92f5047b7c0af6fb2efb4da955",
	    "0000000000000000ea7984d2eef34d494e5ec5c31607f396f4a2b1decb6a1ca7",
	    "000000000000000057c7cf2d0cbfa2cc221565924878e27ea27f4f4252902ac5",
	    "00000000000000018b6d33000ba3babbc911f5ebacf50c20f75b8d9278652fa0",
	    "0000000000000000f9c9ce8d53bc866161397430af06962dad1fa6bf640e3e6b",
	    "000000000000000111b70251fa184257d6298b1cbb0161d453180ea9887acaa9",
	    "000000000000000158823e16eb7b10438e789594b771a3424b5e7610678c59dc",
	    "000000000000000147903b4d4e656186d0bc189745bb38660818afb3ed2a0ff8",
	    "0000000000000001785e5a843075cf6ca20c4988410997e4c4faa5b94dad95ce",
	    "000000000000000164528aac51e2c5b48559876be790e57bd52d16ba60b23262",
	    "00000000000000017ad005b20d20a56764ccf8222d8ee319932c89b25e08b05e",
	    "00000000000000009ca579be8aca748cab97f02abd5cda18b14f22bb21965e8e",
	    "0000000000000000df30e8644922aa97de782a30f7ccb2ada783f4bd6fa1a924",
	    "00000000000000017b87ff1b7c649815c3a91ab07b7e6a4f7036e8c00bfa0807",
	    "00000000000000002a9396f8af6ac4c26b17c11b29224ea7c46f1e69a50be3c1",
	    "0000000000000000ce1ab05eeff5efa69b62198ccfc5ab11346952927b375504",
	    "000000000000000123f4b1343103bd3ab2a4f35818d058c52f934571a7bdb91a",
	    "0000000000000000fae35eb5af02fe48df7c1f99bf6395c22da4e74dd59a84ca",
	    "00000000000000000bdc3272b41f4c3624f4f229cec96aa21984c77db6383dcb",
	    "0000000000000000fa45dcbb7a316bb1da6966b8813933e12878f3bf2388f59f",
	    "0000000000000000e47e08a893c51cd58114b0241eb73feb73dfc0f3a77bda7e",
	    "000000000000000058f284457917a0a812dbde7cc6b52292c6f1ef15db5fc1c9",
	    "0000000000000000eb93ebe0872b0ce686dcf28adbd5e1230faed5df11faf6e8",
	    "0000000000000000d026b0eb90e1ec76790786ffe5e5428387e833a599ac3f21",
	    "0000000000000000b9ea7930b88dbd99cd076cd16b22c6b91ce637d91c684409",
	    "0000000000000001062077f676e40e022b67b1d42f43968f0cf7fc15004a4574",
	    "00000000000000001c0e22061f49f43b93ed45d03e58cc3d25968421b653d302",
	    "0000000000000000532fc68fe75fc63aa19cb436826ebee833738ab5d2776e02",
	    "0000000000000000d36411de7329ceefae45b6e454702d22cf30d5cace00d133",
	    "0000000000000000947a37f8d0240a8cabb1c9b4686e5b8543f00534f1513264",
	    "0000000000000000ffcd7723cf785c9bbba4ae9e3593e98fd29b40505af5527c",
	    "00000000000000015417ad05483338e723771c4f1153ae3180b92712b5e93611",
	    "00000000000000015881ed3abb96a3b9b15dd04b3cce73951b3951bc24a26947",
	    "0000000000000000308fc7414cbfa79667fdea8485528e0a788e2face6237d05",
	    "00000000000000012cffe57435e9df65b56396c058450b646ad566bd9dc73f4a",
	    "0000000000000000b6aa3e8de6980af4b65690082a1fafaf2c49cfc094b816c2",
	    "0000000000000001175d48cc8f1ec0d12751c099fdd6d4dddc353ea83016a0f9",
	    "0000000000000000fd87c76f7450307552e62da8dfbee5248a4323e95e7359cd",
	    "00000000000000006be0d8f2246eb7955c5e8a8c831cdf20a77ef7c8cb80eef4",
	    "00000000000000001ae0e910e55a3358b1219e77cfa252a12c50426dd19bad39",
	    "000000000000000058c038cefe23f73a9f3b5480de02929703e1b1c958669ace",
	    "0000000000000001450e46376bd5220c80cae94e9457ae8ebee751d3a4bab5ce",
	    "0000000000000000e027afedaa724d909d970f563e7a0a3044f369341fc45941",
	    "0000000000000000902d5f8796fa6818c4b77397cdb93129fd9bb2dc246c73b0",
	    "00000000000000004939b425ddebac8f17903463f81991629accddd87f8383e6",
	    "0000000000000001206d1b87a12fee2e4b3a8c3efb6873f5b622f5d89ab690ae",
	    "00000000000000014385a5d5538bdd26ea9fcca8ec94e7f1d08b19101d87c56e",
	    "0000000000000000f1311dec409ce94661cf06979a691dedb2e8cc49b801b836",
	    "0000000000000000fddc50fa0d2228dca918176ecd58906c52adc860329871c8",
	    "00000000000000001142365fc27f51b079d1ca0c177d26b34ade59034839fb56",
	    "0000000000000000b1998b819f5fb6b0f34a5eb2cfb02aa6f4a84fe03611c750",
	    "00000000000000001a2fd1ce1dd7dbb9408c34a6dd57175b6f09e273f9d479aa",
	    "000000000000000124f45c8ec7938a15e9a7acdf8413dbe9df88b3db27c6872b",
	    "00000000000000007fdcdf1078c3e050c94a31d5b604faa9af34a26dbdf7136b",
	    "000000000000000074603197bc3637c9683a0a7f772f2f51bda3cadaa4ef4691",
	    "00000000000000006c9cd7f7d95631fe6a72fa3ab7373e845efd848adcf2e667",
	    "0000000000000000487722b404dcc867a7643187971731ca52dbc0912b260747",
	    "000000000000000129c2e933b87d45ce9978f1893193e732bd9438fe690d2f3c",
	    "0000000000000000f30724a0520cfb24d769a76d30ed129eae1b27e965232c5c",
	    "0000000000000000d0fc8046b77c4c9d903b3a79e93b39cf984e4c711bbccca0",
	    "000000000000000060793005a0ba22a6ed497be2840f06fd2ee8e9acfd95be27",
	    "000000000000000142ff95bdad5fb99b0078a7f041f527ccebbfc1ee44521a2d",
	    "0000000000000000946a0b983a58b2bec19bf1aaf70fb360a9782ef48b3cfb64",
	    "0000000000000001076b119ee83eee9afaec00ec8de8bb1a9cb08031d421f062",
	    "00000000000000009b0ef36273ff5140eda0f52f2d30bcce8882d25ed18c4660",
	    "0000000000000000ff82cbb82c6caa2d00d060a9e4fa91dc8bba70fc8425f94b",
	    "0000000000000000ac6cb87fca7231b7530cd844e377c9a9d98eff4525b0dee4",
	    "00000000000000007c73802352cc9f84c4b434fc3614add4d60ba09b7dbf0503",
	    "00000000000000011fe282df81870097da9fd0bf4b27106ada20ee7b0e90aa70",
	    "0000000000000000b6379fdc099ee8a94d7b1a92510dbaa6fb73b71c954a0bdb",
	    "00000000000000002b94048daa26c64dd8edd9eca5c980efc5fd348c94c3a151",
	    "0000000000000000a9996c78fb02f84cf25959c7762ed11e27d91f45e6b8e2b9",
	    "00000000000000002ccd97525c32d92028ce7d19e6e968d203adfb69fdb6a843",
	    "00000000000000009ba9b1c70a66fd6c0eaa036986b3a6fe46c6922256061c10",
	    "000000000000000074953313ca30236fafe09ebd7b990f69e31778cf54c33de6",
	    "0000000000000000fd1ea84490d2118e1cc2e20a38af0797c2cb2c5c6282ecfe",
	    "00000000000000004a6a7cb97ef70ebd7f5b5b5d340a5b6bf96f8a08bffc9c22",
	    "000000000000000030acec29533b0c3896f9ceb9da5ef218c79c68840dacd934",
	    "0000000000000000fe99bfd493255da41bc0bf3b951eb1047fcb29a5b337ecce",
	    "000000000000000039d2b500007787254b22ddee871cc3f942a3a76bd846f4c3",
	    "00000000000000002ee2f910416e29fe2827454c46a8af05835822280ea24b2e",
	    "00000000000000008fda75f954993bd18c69529d08baf8d79f50d3ccdd287eba",
	    "00000000000000007d99bf5096ae8d30387425187fc20e68de2156ecbbbdffa9",
	    "000000000000000035a339ff4bc61076c0b045667c136c1611529a20926377d5",
	    "00000000000000009ee0846f21ba98c7e673b61d201aff53c402a5f97dd974bd",
	    "0000000000000000c6e20dca0c12c22a2ca80b7743d21ddc25857c54e9641849",
	    "0000000000000000abf19db1a2963c0bbc56cb3dd6148b0a0f6d37303d03bfcf",
	    "0000000000000000832751a7907ee1c8030ad3aa86b459e7e080a26b1a070beb",
	    "0000000000000001144fdd97a6a8da0a314f8bb44eb81b65712408a3ae8c33d3",
	    "000000000000000037f82586845bcaa6fe35044606619d7b8e2cc0d86c278c1f",
	    "000000000000000100aa7789e6278b78c5654712881b3ef3d738f17dd373b105",
	    "0000000000000000f9b5abce0b68e81f66de7f3ee5f52fa630841b416d5074fd",
	    "00000000000000001330b0127108a94c236c6a0560c5023e9fb8ce11bc4dce01",
	    "0000000000000000357704b1f13ff032f3e012798371d2741fcbc5c43d91b4cb",
	    "000000000000000114af226cd76f63aa9668f34b8cf990e7170214720ecccc01",
	    "0000000000000000bcac85bdd52a7c5a9b8d19d2d52f8265928da9d8dccfdd0c",
	    "0000000000000001180863f671029e3221bbcc428595e995a61ff4b366f85063",
	    "0000000000000000c1d266bee1f464e9cbe5052c84439c1c16732814e36f0602",
	    "0000000000000000617fc606e9278535d287d378bd533a1dd55759698b191fca",
	    "0000000000000000ec9555d72ffd77bd019ddd7a99b46e70ada33987659dcc39",
	    "0000000000000000dc05a18d815996cf1e80bd9c9a6f1da29c0dc5733cf0d731",
	    "0000000000000000076e171977da1a9249779da0e30835c23b5138d4ff0ca523",
	    "000000000000000015413f33e6799db277e58239a60c2995b62b7e30a14ee4d3",
	    "00000000000000010e08d9a7047466346116e66d258050f5194fe134b673ee0b",
	    "0000000000000000b43ebe87d7cbb43bee953f5caf41f889bc0acc2ff3dcf542",
	    "000000000000000102fc6819a6a9efaa8393236d81dab8ba38f23ea87295b30e",
	    "0000000000000000491d1ed7a0e10b210513a8d5533016288a5536dafc145a01",
	    "0000000000000000159d74521e6f76fea7fea75fb8c5e2ac204ac071433277a4",
	    "00000000000000004fbd1b8b742671957c99ee75631a15ed6f0d9683a1a2739d",
	    "0000000000000000bd52759deed01a255de8c29c67d2d4831e6da979945b7593",
	    "000000000000000050c3fa08a8e59bf8ff63b09c952e5da63e49cb3b2931f650",
	    "0000000000000000b1330b81a96a3acfcb2f976efeab374323747bbc8b6005fc",
	    "000000000000000015ed9da37b86fbc92dc11cbed4cdeac38bc3fbf2b5c05a9a",
	    "00000000000000010e058508eee779d7a2575400b8da230a348cc08e98e75bfc",
	    "00000000000000006be893c31b89a7c39473423c58b69375e73f4773e5507033",
	    "00000000000000004740d19af919c0c0f123781c6723eb05bfea57a3051c0df4",
	    "00000000000000005a4fbbaeffee6d52fa329dd8c559f90c9b30264c46ad33fd",
	    "0000000000000000a57292505f98de83f4bdf1ba54415411cb99f3b5a9ee3083",
	    "0000000000000000c47c6d28cffb4b6e25a6aa2c70470a8173942983e457c203",
	    "000000000000000051408e8163f8b34573700bfafb5e891318b620b3b92f4d97",
	    "00000000000000002bc65b72944d079ce3512ce10506cfb5ffd434310a6a31aa",
	    "000000000000000064edda8ab4f99e1f31ba67378778895491345839ecf1e0e3",
	    "0000000000000000076e18574484a938c45d7d600fa71567b5b8ad580f382fa9",
	    "0000000000000000d3e8c7daddd9a4148e0c27dd62723751d91deb1d9d102ad4",
	    "0000000000000000b2940027d804204d23e0d9f80ac122f38501eb1a06014a6b",
	    "000000000000000088216bbc39446545da5928a70b798094f9af103a18f25739",
	    "000000000000000059dbc509bb54abb9838f44a7b7efc33ad41f6beb9760cedd",
	    "000000000000000029ee9d71f69c52cefba91458e637c5b88290d76edb8b3062",
	    "0000000000000000d925bdcdc0e69f75f6cb67d14f56ee83fdccd415e644a162",
	    "0000000000000000c05407545d83de557a284bab1668a574b86b9657c0047b76",
	    "000000000000000033930d3b6cd12026ab8b5fd47f50e883bae0676a2f4df124",
	    "000000000000000011cc2c0b6a52548b823989061122abd8b9b9f34d4591e244",
	    "00000000000000003416bf9ecf98f66054072395ccaa60a38c6a1c8e56cf3889",
	    "0000000000000000412603722518d67ca9876379fa99ee2b0a1b6f5dece1f6cc",
	    "00000000000000004642ed8eb619f2f84aaf201dbf0ba5fc87c425d040455d5a",
	    "0000000000000000238f1acfd2de769f1a24f4c9610adc1683bcd50a139eae36",
	    "00000000000000000d832fee0b901a561491ed8b5ffb2776007e9f2d8a2e1b6a",
	    "0000000000000000668808dc61364ee9f7c1672429ec92581ff6fc26969eee1c",
	    "00000000000000006f5d441e3e2f1c5c9ab378fb38fdfa96cffa129592bb7e80",
	    "000000000000000067bc3e9479a595b2f51d4c9f33e2bd12a9ff898cda185ab9",
	    "00000000000000000a4cc276e4306df8bece43a2cee840c2b026a846ae326c83",
	    "0000000000000000ac1f15bc30da255a10d8be646c182614421fb250d9c7a145",
	    "0000000000000000c3b7e2fe8b9bc79166f6e836ee588f1f91cd0f81024911f7",
	    "000000000000000045f310ed493006c733f6f259be8c3022357f53d34ff055db",
	    "00000000000000006f8ab67e28c18bea0178cbfe009374cd392c365fe9e231cc",
	    "0000000000000000241c373fa2eb53eb8348cca5d8561cce9442bd9b1233eaab",
	    "00000000000000004033940893fad847cb9930f59296c4c2d6614b7e6a894607",
	    "0000000000000000433ea0c79f3def9e77dbf03bc642f5ca48f6dbdd6bd4d883",
	    "000000000000000074c302ee19521f07f12a6a8efdc23dd051175d74a2777b3f",
	    "000000000000000077b8b0d7841c5abc40761d634fd3579274f97be6ab6dec44",
	    "00000000000000000fe659bdfb935e0b4a1e3ba599734e899f2184b68dcfb9bc",
	    "00000000000000007a2b0825f63deb6e9525e7ade25dcbd89fd4735b38e3cce3",
	    "0000000000000000e16f7c079c40785d1ae23db767e7b9d76979357202c821c3",
	    "0000000000000000674727ccb66d8d4b882a79c9c5723fb9caf2b4a53c40f3d3",
	    "00000000000000002fd949770524eea54446adb70603a90a4c493d345f890e04",
	    "0000000000000000412a3723708e409982f61d41ab93063f946b8c67a7cfe0a0",
	    "0000000000000000c166e3b7bcd995e6c0ebe939e92f87a60a1d5f01738d294d",
	    "00000000000000004f48f1bf82ae9055ed46fa6a1dc0964b83738238425f55e2",
	    "00000000000000009de7c0492d7a79fca4c6af1fab8e1edc5f99d08e4d1c9000",
	    "00000000000000001b48c33ee48706ebe3c6bf710e1c47de58f191d3814d8559",
	    "000000000000000060cf11d02b4ae8119b10a751aece5c397a2be3888645dd25",
	    "0000000000000000b513c20079f476846236c031e11479deda9b128921e13353",
	    "00000000000000006b1738a6f50ddb3788d1fd830a24331dd85a8fce065a014f",
	    "0000000000000000309c1155d63da029a19928d1b18d823da4279190ee93124e",
	    "000000000000000044eccbfd2793083b9ce05d0b50593ff4dc5fb25c866025c8",
	    "0000000000000000bf9f29a63105865c700e67c63b2855daf1ff6e75bd2a043c",
	    "0000000000000000b124aac63306d1c36f88844c1c127ba574270090a487826e",
	    "0000000000000000d86b138eda29c1c6c542127028b36f8a95ae3356a2c9d02e",
	    "00000000000000005116490ed7e35714d50f44531db6c1ed2320aa7ee96c45e8",
	    "000000000000000080637bfca0bf7236e598c581dd9410ed28af72854c4e5221",
	    "000000000000000013527b54d3ce4589a397b1d12f09068803ce85aae588a9b3",
	    "0000000000000000d38045800fb467727072b2162ee6eb6e120974548b6c69b9",
	    "000000000000000007570f99ecc4e71c97dbbb24eb8d2e8b436e92baa5955872",
	    "0000000000000000a677f25f72b53a0d91809b0302f2b14fcaf9fb6a2b663e29",
	    "0000000000000000d83d0a587021dc69a425697fa3997eb0b8d000e92d099744",
	    "00000000000000001c6f7fa19c347ac796124d8ca783410a6ffc0fdfdbedc92c",
	    "0000000000000000addad53239af8420246933f470ed016f99c1d8b4e16cd46a",
	    "00000000000000008a5011557a52fe796124c71dd71ebe87a0473e8f2cefe6c2",
	    "0000000000000000c62948760524bf7b43bc9bc8fed26e5c9947e2e1386169c0",
	    "00000000000000001ab1845c27ebcb4912a3357dca65fb888825f829fb7601b4",
	    "0000000000000000b36739c8cb420c088434f61239d4a225328046942ee131cd",
	    "0000000000000000043b668fc8250198c1c97759f82c557d21c92b5c44dea3ed",
	    "00000000000000009d173c91b55b1a5db6262e6a5c3932f67e847bb5c0cb0231",
	    "0000000000000000357806217347453c237eb03a2f80ca90374f8b3b20ffc3cf",
	    "000000000000000073756dee955d6311edbb393b9ee246eb537365b184ba0355",
	    "0000000000000000099884eea8528821fef5953271216d476ad1fc504630d23a",
	    "0000000000000000a31f22af86b0807fe1ae85ddc37f991346a20936fa2b5f3a",
	    "0000000000000000403cbafcdf4727bce959d83536c655609290d85a6e84ebbf",
	    "000000000000000085b4cca06373e31a8cf4722bbca1eb7ecc87e9db967c54b9",
	    "0000000000000000592f741895129ec256aeb77e806867346ec4c90c65bd677f",
	    "0000000000000000c03b7c0002a89065d42fa85bca2eb343b03c763584dde30a",
	    "0000000000000000d608e815c54b084673e8a253c0c4288342d0d84f4609fa1a",
	    "0000000000000000da7782482a6195099e13749c693be3245963279c224b52c4",
	    "00000000000000000eb4dd0fa7a7836dc0f7ea0c291c3f7516eb476aefcc6316",
	    "0000000000000000132aa558913d9cee9ede3372aecf54ece50dac5ce7a71feb",
	    "00000000000000008dc624a64323f3ce54fb28f71b4b1c37bc1d491a2087bf31",
	    "0000000000000000441270f62c61d5179e0c9f755a1783649ee9c9fc9d909350",
	    "00000000000000003237efb8eba61943088ef15b832c61001db09d6422d82450",
	    "0000000000000000d6e1783140e96eda95add5718e1f44e3d68cb11effea0aaa",
	    "00000000000000009da3a447cb29c193e0846c56caa5266fbfde5bcd69ed3ca4",
	    "000000000000000051e3f034608c1f6b769a23f6142de420902fa0d452ec32b2",
	    "00000000000000002d9efc11ffc6cf65a2fa3f2534e70e630ced5e1ff053d3f0",
	    "000000000000000098a0c4f246f1ae15180faebfc6884609f80bc598ff196a6f",
	    "00000000000000004814ad08370b63dd0ac47d12f8fec600748c97beafdb9c06",
	    "0000000000000000509399d60abbfaccae319213c84970b597f3e43dcec2dd2c",
	    "0000000000000000b1ab1fe84001829afed47d2c28dbdce15e34b5934deff3f1",
	    "0000000000000000b9aa996eeb8bf45c51cf32b2ff4d74c5cef2a014dc7054fb",
	    "0000000000000000482079d0d013b75f4a9966613dd348c928f44c05f0476c3d",
	    "000000000000000044420827373679c7fca48d96dfffc18a5dbc2fcf36c10bea",
	    "00000000000000009779ef0c3becca02b7e0517c0fc2d69d773893399b644ae7",
	    "0000000000000000520784feda6588bcfd9b9cff30ff19d3a052caaaa073d9e8",
	    "0000000000000000a98f26600d9d16600d2999bfac1a47ace34c4bf9ff1e9a56",
	    "000000000000000085f6f988a4e83be7f6f759f972b28fc7d67b2120c7685660",
	    "000000000000000060570415b539b17a0ed3277319f2cfb747b0853b8b5cbf65",
	    "0000000000000000654883e1f7a8608a3909c988f0d65b4ce35bdc7237bbd877",
	    "00000000000000008e4bd1d54c9fa7ab9aaef9ca1fb29db1a452c6411611299e",
	    "00000000000000006729fed4f1c60be98972442250548279fae932e5dcfeb366",
	    "000000000000000080b2ad72f1f6b9794cdbd8f677095814b8814ae8f8e3b32e",
	    "000000000000000006dcdb8dceb5e8b7d7330044ab07b3b2369ea5219d4b21ea",
	    "00000000000000007769e8ebae411b7bf58ca23ea412459600084aa0ae94dd92",
	    "000000000000000062f45faf806df735cde5c5b87559cab0e199dffa2213b962",
	    "00000000000000005bc86c2eb08ffb68d420c895b59cc98019cad366e54ad945",
	    "00000000000000003432bece3678dcd698bbd47b62caebf03cc93591878d67df",
	    "000000000000000075e1d5a27757e344b837d36100bbc2ef2a91eefd8b741a47",
	    "0000000000000000421588cd2620cab3c5085e860bbefcad147a3c35aba6e8e1",
	    "00000000000000000ca07ade2023489b5de067b1262f1d5fd738de28dcda1af0",
	    "0000000000000000af16590ef88fae08f92d136ad4457a3e2f24991633038abe",
	    "0000000000000000b0fdb22b3abac8fbe0ef40b84c03b96e9dcaaf3a2babcc84",
	    "00000000000000002042ffdae882ecc8677200b7fe2216f759a765a26527052f",
	    "0000000000000000578e3e96ce06d78f4092df8535b5e7139ef151ab45267e64",
	    "0000000000000000a00d937ced4b096fbb85714714f4333fdb0a4e488a6408a8",
	    "00000000000000000f1f9fc26857c7ada11eb7aa71e7ab6621f8564d7d322c9e",
	    "0000000000000000562ea971f47b4cc9c0aaa098c0617903747db8282b176d32",
	    "0000000000000000099f30086fff5523f88e0d51796c4cacbcfebcd0b84a92cc",
	    "00000000000000002caad1033611653f796990c3d86d7b98a2c7b7ba10ae411f",
	    "00000000000000003871fc3ffc94fd3de3fda7ff7eeb02412925d164f2f6bbe2",
	    "00000000000000002c325f91edf437bd22949d46e6f507dc95b0bf374eac3fb7",
	    "00000000000000001ae0f9986d4db301bf57eee4eaaa864fab6cf021fee20925",
	    "00000000000000006e15e7573b2f561e84cf3e40eb72c6e4210baca9f0430ec7",
	    "0000000000000000676838fc159788af7009d3f6b408731e02ff7f33806195b9",
	    "000000000000000025fb9c57e5c06acde9ff593e6e04e2f3a9b3ea6c3f47ddd8",
	    "000000000000000086895dfb8259b084600b518fc1b4c4b375346980052fa81d",
	    "000000000000000049b9316567225fe9fd1cb2c6441d119db98d635415858e50",
	    "00000000000000009988ea335bc82d9f218c9d1723dfad79cf91120f924ff097",
	    "00000000000000000e9ca6f60c1244fcb27a6f458dbf79a81c9c19994ead888b",
	    "00000000000000008a660e09fd25f9dac83226a1fd4e0b8cab0ff150e451f85b",
	    "00000000000000003e6d1b0d86e581e30671caac1a630eb24be9ea3c997c24bf",
	    "0000000000000000aab75da6083376500c4742e6b5eea148b47d43029620c512",
	    "00000000000000001645f75789880b67389ccb257d413b843fcd0e52686b1cc8",
	    "00000000000000005437252adf3d791bf6e018ce88dadf28ec3a70b1e5966704",
	    "00000000000000004f7bde2c21f83c5ce07f9de77772e0cae438f8de20d83607",
	    "0000000000000000af9db0812fdf7a1010a39004ace2d8ed19dfd172ad53c5a9",
	    "0000000000000000201cdef67807b9fe8f3a26dd5eb3305bf768b0c41feafe5c",
	    "0000000000000000a203a3e46ebe6823891bf45598d1febcbc1391ce36ef2bf2",
	    "00000000000000003612f4a909f11261ce38f58afa236d546cc11e86a8abe26c",
	    "0000000000000000437bda5394137c247b4e83bf9a6e5711132f4b2e81a9a312",
	    "0000000000000000252f22741b8b473a07696874249021182b710442675ec1d0",
	    "0000000000000000562850477fee88aea0ac15a652b577fa3725c251d127938b",
	    "00000000000000004b774f401a84ae542b5601c5fb43d7308408280e93e9f19b",
	    "00000000000000005fd78daabfaaf95302d1a2f20c1e5140f9ae68436e82a254",
	    "00000000000000002e23bf60eefd5266e155cda27d549fba32bdbb5feeee05f3",
	    "00000000000000005348ad57cbcbc92a74d7ee84210521f3fa82d52d1da9d164",
	    "00000000000000008af863a6eea733d77220b4373b74c7e15663743fc61f9d9a",
	    "000000000000000047bb6afd5a416ce0b6ceb927ed63ae7246e07bd6930b5f80",
	    "000000000000000031edd8b1eb1b6d073f014b594d67efadee92eab7cec37597",
	    "000000000000000057eac5fbf6a4819e4407bba8012967c3144418270193158d",
	    "00000000000000002a39de0b432023171236b563aa213f0b5438da3ca26d9dc4",
	    "00000000000000006ffdff728b56e19c64a88217554dea06669c5d77cdce575a",
	    "00000000000000001f520e8d95fe62a4caca31159bb51c4df7184612b94b501d",
	    "00000000000000005bffd9001b2e6f5825156971e4281435f08ad6cbabf84a4c",
	    "00000000000000009c9a22ce297964252cb7840655ed76369912956e53daef44",
	    "00000000000000009471bc50186a932ec7d06ce839ac007edf709cf4e65e6a5e",
	    "0000000000000000584eba0226b22f5c410acee9c3b39a61769831b161265476",
	    "00000000000000003824e554531d353188bfe184ca8d9c4e9a9c6e7c67148c68",
	    "000000000000000049b630ae81eafca5728ff50bb80978b8424755ca67bf1c4f",
	    "000000000000000058a30dac8c69cf07237cf75b94ce3bacbde01f732d7cb1b0",
	    "0000000000000000511671dcf328d1c3ac6b28c5015af4b60fc4f377c732e5ed",
	    "000000000000000035dc12ee75340ff6aab09ea53650de7a48b32e49c7ad252f",
	    "00000000000000000512b211d70cc4958274e8c2a56cd33a53ae8681b1a4c72f",
	    "000000000000000075dfdb95442616e1c032d9994d632d379a1ad2f8a1db673e",
	    "00000000000000006fc391d3f460bb75d3874c3abe04322088957685129b374f",
	    "000000000000000042f8f5fad6703c2b3dd7792ef471d9ae052028816cbc6884",
	    "000000000000000001c5646a83e02f466840bcab041b7d97b33cc3e223c530fc",
	    "00000000000000001aecb65c53dea5a5ccbac32cfbf2cde4b14625655855e1e6",
	    "000000000000000011eb257e31a9f4b4e9a219ac53740cf1b8387eb4fe03bcba",
	    "00000000000000004fb3b9aec53be2987714587d4f72c55a59d42d827477b382",
	    "000000000000000079b27e68db40eeab99fb5c4c62529d1d5708f06632e50ad5",
	    "00000000000000003cdc13b55e912026ce057278cbd1c3bf0670296000e273d4",
	    "0000000000000000266ca764bdc979b242297bf7a03076ac446fc9c197ec5a6b",
	    "00000000000000005d290a3246dd497db3e2af4e1842f0b84e069c8071951651",
	    "0000000000000000558b3d4c27722c0e725b65061f1f122394a4eade5c8c5c16",
	    "00000000000000007a694f723b24d6a92a332178c2022ac15cfc13c480c11249",
	    "00000000000000008491d2738574bf28a05842de4af68b632b5561fa97d7488a",
	    "00000000000000006bf3da2419eefc6b2dde977be3a0e8db0b2b818b4ec55578",
	    "00000000000000005c544981ced6f20b7fc56600529137d04d03ba78a4e67d32",
	    "00000000000000007f0d1d61c1e83036cb71a539ce68fbdd76f36540c6cd36b1",
	    "00000000000000002c87508ed4e2b5369011b9d4d66ab978639299b5f5b9eb39",
	    "000000000000000083b7e2746d82b994006e75ba6a494ba39a5eca47bb24e4cf",
	    "00000000000000004ee8e677b1a2277b05c969fa0625682ad784a769269b5a23",
	    "00000000000000005895bfbe1f5b42b29380a8ca4c5a6cf995cf8a60de771015",
	    "00000000000000000ec9014aa8d4cf8bbeb7454846d6e230804089e5bb2f80ba",
	    "00000000000000006ebf57fe8a3285a569f6a4e8fef9f2ee7f7d9718822685ed",
	    "000000000000000073fcfbcb792a1e9af51a87c2aa12fba0cb0116a5c4f332b2",
	    "00000000000000000c4b95294f39c1cd9001898350805e4dd5bf51579f405526",
	    "0000000000000000745e5de29837daa8c29ab348a0691a6b4782f939c69bbac5",
	    "00000000000000007ea575924254d5ff79923a6ea950c159cd673e9905ab1d45",
	    "00000000000000008930f15a5b00ed9b6d861d5d7ac2a6509205f45d7ff9ba8d",
	    "00000000000000000f1d9d48b75cf3155715eb7843fbc9b37a98e121285cfbd3",
	    "0000000000000000776618b10336062fbd68b15d3d35d92b596dd999651515a6",
	    "00000000000000008708f33f2733d79ee5e2f8ac00b854a4e11f4c2d6b32073c",
	    "00000000000000003ee9a6a518000df4ecfceec55e2c140c5c1c918946ae2c15",
	    "00000000000000003ba4e95b1cad354d111467d48d17169097b5b4b3cbffd9c7",
	    "0000000000000000507ae868ed9210660d389e787870f9f3a5dfeed6fc778ba5",
	    "0000000000000000621275a066da3faf03351f52ca0cf7f0e78d3c23991e58eb",
	    "000000000000000068c523804036ab17a3a88abd860dd27eb3f0e6398abe8200",
	    "0000000000000000581ec041e021927e2407cb80f019dbcd4a05b409f56546e8",
	    "0000000000000000501388255b590ce2ff1380a9c8ac4392fd1d8c9b39b115ef",
	    "00000000000000005777ec19bff37ca8acec7e0fbc07f153fd1d22abb50f5bfa",
	    "0000000000000000381c04b4650c57eeec7c3f2c2216ad73146acbcbc5e50e2c",
	    "000000000000000060e4811a6675f45e7cf54a1f5178b7f1ceed8a7ae90cca72",
	    "0000000000000000275b3660c728b48dcf2450ffa4a8f4ffba1eaf39922badc3",
	    "00000000000000004818e99335168518f9afb4d1b101bd6a92c2fc5ffea53714",
	    "00000000000000004c6a7a5f8b0fda0c6bc2bd7c3a8fdd28a626767abe52563c",
	    "00000000000000007e0ebc299e296deec2a02fdc3fa1d58bdf9a99b52a922d0c",
	    "000000000000000086167c974cfcfcf032620dd8834d784741010a0ff6700164",
	    "00000000000000007f9937e0ffb883589543906894c0ddf149ba6165d3e43f58",
	    "000000000000000040a78527e2373149f612d00279b1061c7f36562fdf9c75dd",
	    "0000000000000000422eb9cc2eb41ffd99f3b7a96eb4a0a67e52afbf3494bd90",
	    "00000000000000006e459ed81580f7544ce96ef81d746c2998499898150dc6a0",
	    "00000000000000002047dc2c2dc61b6e8c5be12582bb20ced7286eb7192dd154",
	    "000000000000000050be4c7c05a9c4cdfa9ad1018987e9004d0b714a529fe87b",
	    "000000000000000055865a7a06e66f251a82a5f4119fa45f9be89109170b913d",
	    "000000000000000036cfb26509fc5711bb60bd010bf37f76d92240d25f62d965",
	    "000000000000000017ca383170b242c7bb926814ffae6051ba721f7df3ff22ef",
	    "00000000000000008901dc624ea0508daaba39f16ea7bd4166924ab894e763f4",
	    "000000000000000052176843e837de5384e65dead5bf6a903f9fb8e606613947",
	    "00000000000000001d48d6b40e230bf323d3dd1b8a177b14f3a43644dc1e85fb",
	    "00000000000000001189a40e5fa97381f06dae57f892f5fc61d9250c97dc393b",
	    "00000000000000001fafe649d90b9f47e7a2020ab4551b31ded7507573660634",
	    "0000000000000000735303b82c6d21d81fcd83e9d3fad6c0b9e1f28b618415d5",
	    "000000000000000015a86868bcb9177f022a52c299e2507c18606f3fa9cdff43",
	    "00000000000000006368f99d9195f3a3170eab9bea8c2d1a272632be7bb7ad6a",
	    "00000000000000002ca3d30796e541d8e729f52807b4c1028c70fe7b572ef539",
	    "000000000000000083d9b2fcc1d14e53c97604648e4610091ba5f9eb4d1b930b",
	    "00000000000000004b05496f732f5aac678484e1c9f4bb70187d4403fb6c90ce",
	    "000000000000000001168acea30c0ef84e429af6fdaa41ee533957026d771a5a",
	    "000000000000000080f58b34b9dd9220b30729fa7efecff6a53a7758d51dc53d",
	    "00000000000000006bb58a4e5ce83312a73fd571ebec48bdcd9e38b027301b89",
	    "00000000000000000be5a8d16a1f852e544441ac1eb65a83355773750014f441",
	    "00000000000000006fc329e10aba85c9943b3cce53f61bd5654067ba73e7b31e",
	    "00000000000000006423c98086a76e061b786f9931368ed373dfe852751f566e",
	    "00000000000000002036679c2cba6e57bb73f8ec355a49c4f9f2dd9b0f4d7272",
	    "0000000000000000374b8e38b55945a51a708bb9042b77d5239a21277ca46e70",
	    "000000000000000036486066a3fa4ea83cfd14217797f0ffb30484b9d4fae3e8",
	    "000000000000000022ff97968bfb81b0a72010f8249c72075fefc26c7304cea6",
	    "00000000000000002fa52ee86b56c1e5fcfb24d83c2e7c21f6922a97e1b52e67",
	    "0000000000000000142b159967bee03edd1866c970190c77f7c113dfca802c3a",
	    "000000000000000076d46db6cabd592e62f89b346b8e05a79313d2fcd6289155",
	    "00000000000000001590d5cadd0c4bf28e018ae857df92d862e63c7d7dd336c8",
	    "000000000000000048911281eb3590e1858b9a7f243119f5bfb4ecc85401cd61",
	    "000000000000000010cb588df32057056157f5394a65fb0765d4cfab550a6c60",
	    "00000000000000000a8e40a4c5824c25b1863c6bd994da44fcac34db008a788e",
	    "00000000000000007a8baac94a7852bc6f7a98bf343ed6ee4aa34b9e569b3e9d",
	    "000000000000000070bf7aa1f7234ee4074055603af4bd6403c714668a50d5fa",
	    "00000000000000003d2568f06d316fe277dbac7faedfb89bb476f8af92879739",
	    "0000000000000000259382ffb65e3d5afab95fb0da8b7b00e53d71f90b27ec8b",
	    "00000000000000003672370113cc99f58210cd6d662a2591be1577af13471c76",
	    "0000000000000000015ef6368b8a7adac9acf8a00d09c9db59c04b18898cd5ad",
	    "000000000000000043c2ab6f1939747bfef50f18fe682b6adf4bbf75ae094ae2",
	    "000000000000000054e9b94fd9f3b8617d559388d578a7a3523af85cd524cd62",
	    "0000000000000000728d391b305d5b6ed4ede0a8b8dc4710afe65f9664da31a7",
	    "00000000000000002ff3fa09be55c9655ccbdef76c96ffc7c14d2fd92ad2086e",
	    "000000000000000013f64a0038a317e59fa1312fa8f7f72b4b10f0dd68327153",
	    "00000000000000000d2a51efdf9e30462d5aa6df0a57d26abee1fd5dc50b08f8",
	    "0000000000000000608ee976758003d97b9e0b4bd8122599c1d2af7e60ad0301",
	    "00000000000000005687b6a871d389bd34ade88166cb18c1fe455841293f181d",
	    "00000000000000000f5640e3f4f5ea6a4065cb97a6b4c19c9d567611f40fd718",
	    "000000000000000067fdf08893f2b832a4b283adc7b9e476979eb65c2091132b",
	    "000000000000000028c5c68bdfc1780e0701195ddf523dd044c5137c066654d0",
	    "0000000000000000314384dff0f56a07131df994210e5b83380b528519dc6493",
	    "00000000000000001e6c0e42804488fcbd028091e8cf6c5875ae358b63cc4008",
	    "00000000000000003a956056498c28307d7ec42b8f36b1e062a13d72e5ea219d",
	    "00000000000000006f04ad7b20be838be933b4106b8b42bd170129fbfce1d5f8",
	    "0000000000000000495ce19abf4cc13b75aaec6c5b8831ff5fbf491e7cae6e28",
	    "000000000000000077a39bd6891f34c59993a75a8aa36593afd0e3ce5cf5bc16",
	    "0000000000000000370806bad730ca4f7a4c03e2a5bf5d8c3a25c85f60571092",
	    "00000000000000005c8a7e43ca368ccc4c2d87bba43c0ca78ce41fb32a70b288",
	    "0000000000000000705746d0421827fa095444569146d3fc103e53d1e4adcb47",
	    "000000000000000069600d11e0d5be529633a9d6a60d65dac1575d6ae3702144",
	    "000000000000000021351598a77cb244ce4c7ee1802bd0ceaca26c26815e42e9",
	    "000000000000000025d14be9bc26edebf5d9b3728c11d51b7d9ce97182270aa5",
	    "0000000000000000004572e1b1c397480a9d551fcac3f5986577e2ed761b9890",
	    "00000000000000002681bc78b8ebb8fbb4da2c24dfe1c67c6e10bb6ae1e4395b",
	    "00000000000000004d40f573089c0a258c09d29b10eb898dd31a81115b37ef6c",
	    "00000000000000002e14b4f03f93f047ab233ec017f0db8410f114b5ccc3ae91",
	    "00000000000000006d0ae1f89999cf16e5c06d49c7e6d6110853ddd6b71dc340",
	    "000000000000000059cdfb9ffae35d3ffd4d6cf6bc73ef667f08e3fc0e72f737",
	    "00000000000000000fbf5f7b0bba15e29e31fed6937548428cbe88fa6717ab43",
	    "0000000000000000753e8277f2c68bccf9c39d691cb41e60916c48f2e6673bd9",
	    "00000000000000003d8df90c68a8c1fda9861479a7d46a39df1bcf5b536a7cd7",
	    "00000000000000002a379aec0fba41ce007b3ed81c049407890c9c414040d827",
	    "000000000000000059a83b75fec0a374d5e33e8e26ac7ab0b7a09f1d921f4f78",
	    "000000000000000065cbc500ed77a2d8d3891e3b6450b194f1ac5fe8f8da0e62",
	    "00000000000000002c0d881c59c81d7369a9197475e231d7835a037787b71e3a",
	    "0000000000000000340df40652c6fbc0682f1922b024ae3b0d95ef06d907102a",
	    "000000000000000031b17498b052dce52dc0fad95569b20a3b1a16f3ff5502c7",
	    "0000000000000000554ce07f93b1bb625c20a0c796594584815accac7d3f886d",
	    "00000000000000004dc47ba170c5ff8bc0098c8237338d8ba15816c9ac8c3ac6",
	    "00000000000000002ef8d84012f00ced84676d95657ef3de131bc939c9c5fa3d",
	    "00000000000000004f5da21eaa350b4540ad1b12c9233e28cd874d1804fa5447",
	    "0000000000000000192763913460f201e42328c4e13658433824b692c0ee9e45",
	    "000000000000000034bb5058b8092dd23430d1fe718800951a8ba8e568387eb0",
	    "000000000000000063df9fc12dbafa58819359c36c46c05fc88d5d610314809e",
	    "000000000000000027fe4d97bbc2831795c1b9e36947e90b0beb1fe2afc90a3a",
	    "000000000000000051ee771683f62d11eb218711de2a5a2674929cdda7ac3134",
	    "000000000000000029193fbb199f7faed76337e7dd64fbfd109092d1be4c2893",
	    "000000000000000036918a1c2259017579e5fb1d29386bec05e377687d64f545",
	    "000000000000000027357cdfe614d483837e590f26a4ca5ff1c0d50d7a3fc1a8",
	    "000000000000000047fa7a303288e344c7475156bee98179eda41e640656d302",
	    "000000000000000054040b714457333d3e58cd7ea63e0c7130aa2362c893f75b",
	    "00000000000000002142c9dce76a0af7a824192d8cc41ff96ce97d507ced4466",
	    "00000000000000003d064dce6041a89b9b333d9300a633b42f85027aa7892727",
	    "00000000000000002e8f897b13c2d891ccc9526eeefc81205a45a9cfeef566b3",
	    "00000000000000005fe3225ab5245f7fddf9fe3030337ff4c02de23efc81283e",
	    "000000000000000053ba95ad3ce7860595177dd5a6e43174ca4c147e34210255",
	    "000000000000000030ce3a0d6cfb8b2ad907b7c7494dd31558fc0be72c1558bc",
	    "000000000000000022b8182284afa8e91486dd6f6265d8d262a6fcafe6af92b8",
	    "00000000000000001797cc6e912ec4e39822baf2fcf677ce961f4e310e8fa757",
	    "0000000000000000209e287c7d05f4b32c6e57887b84f321d18b67a9e28f8a72",
	    "0000000000000000635886dcc360b4b16f06ffb3357a1a23bc6c3540c4d53d38",
	    "000000000000000010dfdc7f4cbd190c34b7cbca7ffafb27b1776d2b68c33203",
	    "00000000000000000c24148f7dd10d67db630d7f90820fbc91d0e60475b2142a",
	    "00000000000000001e37458566c6a0620cada9ed903dd568bd0fbb39eceec1f4",
	    "00000000000000005e5c4d594be85fce0762a802f48819646772030f9fd7cef8",
	    "000000000000000021c937d41d4e37a9129915ecc98a799d3d78b61f73cadf67",
	    "000000000000000060e84d24e9bb2d1bd0c60216ca5d3a4fbee9926990734883",
	    "0000000000000000300787fab271dbb8ac3213a5ca29d0d205161a2ed560126e",
	    "0000000000000000412ed6d88da2661ac8518f6d750424a9b2aa0f38717237e5",
	    "00000000000000004499db5d00a78ff0de591a0dc680d2037c0af59e73ba48b4",
	    "0000000000000000136070097541f7457efa6014076062f23566ffed70a7deb7",
	    "00000000000000003a418869eb71749a7166c3dee070f6957c8d607d82086268",
	    "0000000000000000662d2f9e40083e96178bdf7a82764fbc59562a27b5d1e05f",
	    "000000000000000000db8d3dc115e318705945463a8fcc15bbd52133f0a27bba",
	    "00000000000000001f2a783cc1a435740c364b82c7f415dd89226b3fed624248",
	    "00000000000000004f764cc0d0b8533cd623853bf55df3825e1ecf562ec7f8b0",
	    "0000000000000000284dd974754ad239cf4cdda7ce2e593b4b5aac4489708402",
	    "0000000000000000188a920d89ebc36020c5f020ef828227ea2703c2be54c04d",
	    "0000000000000000149c833de6b5e683748d7cd137939e37bbd031aee1377874",
	    "00000000000000000d1920bd97beb7541ae6ce523b4e259fe6bd497820274e15",
	    "000000000000000011e65e00d0c11fb523325a67fb79ef7f72d489c83c3f05f2",
	    "000000000000000031a271d07736f680e71be192b2bb0b526f49d305a1dd4b39",
	    "00000000000000001318a4c68b36a9cef9d6094b85696968dc277a7bc0419821",
	    "00000000000000001afdd1e39be91514540cfebccb1a4a2565dca1cab544dcb9",
	    "00000000000000002859fbc0f34a422348271a976f80dc0a8a72259dec8fac18",
	    "000000000000000045a4c6a03c6ce90e7e854678a855b61ce960020d25755a21",
	    "000000000000000009bbefdb6ae13e1e492e07411bd1733552746a8a92d0fb18",
	    "00000000000000004ad75eb14f181ccf5546f9c510ef970b4050ee4e6b7f93ba",
	    "00000000000000005cf9271f2cb643b56dec53f87964469b1ec9777954e597e3",
	    "00000000000000004f27e0117c3a1309d2365c37b20b4786ea523ef4e5e14b82",
	    "00000000000000000ff2ab98ff97347b60bc904411aeeb9c47eaa68fe086a086",
	    "00000000000000004437346d8c7e74b02ca7defb4d3473e535b18f9966dd689b",
	    "00000000000000005d5edb8a2df53c805661ad19393a21f513946b4808837846",
	    "000000000000000007e4e6c8d3e8f85e3e9f901d07af1a1c9d7528a2c5741dee",
	    "00000000000000000fbfac552b1d8afc5908bc30606cb1954e6eb420b25d9a5f",
	    "00000000000000004551031776c9475b4ff4a45a8d371fd6e8ba715e8a71d2cf",
	    "000000000000000017512ad55e5a7bfca73ed57cc8861154b115babf1d15dfac",
	    "00000000000000005b78147eace4e9b6c50ac1e94b4c4f7a7df18967694955f9",
	    "000000000000000001e8e3733ef550be72952ebdc20ec2a1e783b294d2b60d0d",
	    "0000000000000000597392907639952da329e525e64bfa985eea0296331de705",
	    "000000000000000046c0a45719626ad86fded169279eb9dc740ea48f38c05a36",
	    "00000000000000000d4d047c995df86021aa98b2590837663bf04bb5d2bcf46d",
	    "0000000000000000176767458adb213ed948210ca42b3c92607cabb09b7da543",
	    "00000000000000002cc1052921a859d52ad4ea3b4c1defe5df32d117570eadba",
	    "00000000000000005b3d09fc9a99ab134ffdef4210b7ce38107b57f6459f94bc",
	    "00000000000000005a6497288470c0f6ab92b1a07170ce80ac770533ccc1534f",
	    "00000000000000000b7a50dbb620b2b78d7667164cc5d310595784df9f391f4b",
	    "000000000000000042621f0d927005f31d39541794f81f7e412e660cb4e4059f",
	    "000000000000000023a85bde6e8aa426e95d7f467209b4d6e4d688dbf27d1d51",
	    "00000000000000000ed5711fe339d4f99031fdbb7d6e54b05d012bdebac879c6",
	    "0000000000000000048b8fa3fecd3a6af32a10774a65b2c6956c7d6b9b263bd0",
	    "00000000000000005bfc853094d59e62dc4d15c79fdbb0acd557277ae04ae7fc",
	    "00000000000000000a1ea889c8e713128d9f5650fe7bb7887f3cf1cde0237def",
	    "00000000000000005c77b8e659610f91ac98ca6d25d153e31ecd09a49bb84dec",
	    "00000000000000004306185063028cabede591c6866672a0911710038d345791",
	    "00000000000000000adc2256df94777d0819dd2f2429591dc01631aa4a3022d3",
	    "0000000000000000484ee09c4bcb92b477d06703f48dad54e57f30da3cf8e023",
	    "00000000000000001d9133950ebbe0c09d3d91c327ad41f2493a23a8407a211a",
	    "000000000000000059ba034b0dec43142a2c674eab8234e7f6f636d58e66bdb6",
	    "0000000000000000269e51addc706494afd29ecf5d3a3761d012188287421813",
	    "000000000000000018ecac40e5f7dc0d9aee5f1795fe00b290bd1a7788afc237",
	    "0000000000000000302ffc6bb05ac8a11cda671613d5b27fa474b6a9859af235",
	    "000000000000000021a8b99480459fe357fe6fa622f956d70698c9fe183addf6",
	    "0000000000000000271c10e568244b58e1774353e8f7e20c3176d6fb39e5fefd",
	    "00000000000000005ccbb26e111fc2fabdb0b41361559563438a753370017973",
	    "000000000000000026b3505e215f995dd466eb47a21e221958b499e2d7d08ca2",
	    "000000000000000000667ebaa5ab7a987a85d4def77b22ccc070ca919e1b0d9c",
	    "00000000000000000f9131b1164bf683e329f0c2712c0a0b67c89b55cfbc0854",
	    "00000000000000002832fea1a53b9460b088338266238b3d5b7b790a94632864",
	    "000000000000000016bed63ca0241252fe0f84c129eca399e8d08b245eacf971",
	    "0000000000000000078b66f3b9794ee49170364c676f453d15ed97548c2ff6fd",
	    "00000000000000004af50d4aea229ef66d40a112ae4865be8c6c3937ad379e15",
	    "00000000000000000ed94f647bd2f746160a2b542df2aee2924f13c22b445578",
	    "0000000000000000265a7ab81660e81b33885e091133f1f4666fcba50c1687e1",
	    "00000000000000003277ddcc778b4e4893d8776a101cf785c57d7ca2e3c8d8be",
	    "0000000000000000176d4ea3ac9908bb9e6c2333859ff944fd00fe5221999444",
	    "00000000000000000d5c167e7a5ecdc434e891bfdc9e32f5b6163b57a2faa4ca",
	    "0000000000000000372b13fa70826196353e5019d7a29e4a43c9303d10a8f9b3",
	    "000000000000000000aee72463e20e8e5f090389db2a1ef0f711dc2fc439330f",
	    "00000000000000002ad05122e64dab9b45cc99cd6ef1b71187d8de20c3c1002d",
	    "00000000000000001ca2babb3fc34990c94ad2283718f02de05af2c51b8ee60b",
	    "00000000000000000d86961f7b320e1bbd0790b2fa4bbdad3a2c7201e9133cbb",
	    "000000000000000032131fc5f14dc832b632eb3667b966ebbd6c097e1215738a",
	    "000000000000000048b77f816e8720182359ed075586d901258693e95f54c43d",
	    "00000000000000004ceb3cc0bc194d44d548da0e920ec99c3281f56418d93057",
	    "0000000000000000271c94e3c0088466bbaf5d3df2299f8998bbc13a5b5c8a38",
	    "00000000000000003a92271ab96f3c162ce0d724bae0aca4fb9de028a9923f32",
	    "00000000000000001a02d76fd9ad520cc0910603263e742c38225b7df44dcbfe",
	    "0000000000000000369bdbd47c7aaa3f8fe54b98879212f9c1408d7fb09c3585",
	    "00000000000000000d58e680d4f5cf97e2af60f17d547bad79b63f719a64cce2",
	    "0000000000000000446c1f7442419b0047f9cd1807dd576a6015c179b4bdb6cc",
	    "000000000000000017ab03b37c673809dc5b270413327baf10969e7266d7f0f1",
	    "00000000000000002a5dce131426df16ddde84537304fa89719120f4aa8907e2",
	    "00000000000000004e0811b2e53012296055addacd4a0c9e75b55c8e06de6a13",
	    "000000000000000017f5275aa6b114f316109e3ed750f3e74a6636fb39fcc0e3",
	    "00000000000000004ecbc81fd1e490933f54d3d35c48c584e8c25482313ad71b",
	    "00000000000000001b822149c947b3b8c1cf5b1078a01aecfef9779ff726ad14",
	    "00000000000000000ebcddd49f3de7d36dfc083e4d77c9d51427dec0ef105eb4",
	    "000000000000000010b0c03b22cb6c38e320d9581588e5b727ae47ef908c4532",
	    "00000000000000001d230c4344c4ae5e761089f2325369e98c1ab45778349c99",
	    "00000000000000000048a264059a1149c63a77f630b2ddd4ab336eb6a3acd98e",
	    "00000000000000004ac9c117d9ac40cdf101947e3d93f305f3a5bfa0dee6ddf3",
	    "000000000000000001dd7cb5d9f86084b1009d42a803b43798426c6a2df0fa1f",
	    "0000000000000000488b2cd2185afc844cb090b5bf72115c1572de1a1e0fe26c",
	    "0000000000000000226033cb51db5c1347d0a02e40c2897416e040607a52b2ac",
	    "00000000000000001541c021301c5e4533dd59a48b0f3b9c4bde762f19353a4e",
	    "000000000000000025f38830d3df55d8f67b34d8826a1fcbbd2ea3321a81ccb6",
	    "000000000000000024a946c0b94d006c9e1c544dc46c07e08947dd20cee81fbd",
	    "00000000000000000df5dc8a1e6d3deaa86431d6554af6c468b6776813fa2f93",
	    "0000000000000000086b1ea554df79578f78b0af031a4ce4ee035929ad84cab1",
	    "00000000000000002caf8174f706a247c22cbf763de5b0c3f03c40de51b0881b",
	    "000000000000000032054a3e5c2aee76be2dc87dd28df08c9662a4adcac7af53",
	    "00000000000000001683bd8cc43c90627c9843baed7f4e8932cb0581aba91730",
	    "000000000000000025f1a4036d95173a81a95d90cfc213b3b8adde1e76a3b526",
	    "00000000000000002edad67fedb02eb2a725dd04c5a2e288774434813d9d3531",
	    "000000000000000038a448567a86b56584811f70e81e45bed5b3f74cd1a96dc6",
	    "00000000000000001fa8387d649bc6133a6df30bc74a5f4829b00a4f5c40e845",
	    "00000000000000000254ad780056522267207ece6c8b1baa3f78bde3892ab135",
	    "000000000000000029b6884600c679d0ecb19518abe4fa4ddb1444bd7108ab57",
	    "00000000000000001a6a0fe67a1dc0a5cad12aa382ba2a6a1dd19c415206efc3",
	    "00000000000000000adb2b209fa12e170e976d09e196c0d26a1cbf18cb47fa43",
	    "00000000000000002d149e388bb11aea49d1e1e37e3303df80f7ea43848dfd17",
	    "000000000000000022b36e6e92b02fcca8e2a80535ca9c274d85e3f682c76991",
	    "000000000000000020872506f40951c3d5766d399a50effcd9419d5b1041ba5f",
	    "00000000000000001b2a18b0219f071b49b3f6ff25c891f92b6a992245f40794",
	    "000000000000000008c30fdec53dddfc87db27d88008748bd000061da0b44153",
	    "00000000000000001b72259ba278603357066ea7cfc07cb85386d2a388490839",
	    "00000000000000003fb131f97a17893e28532123e8cc95e62dc0f9e5144604a7",
	    "0000000000000000212a09ad9865723edb93631c8a37e9f301baaeaade44f8bf",
	    "000000000000000003236cd37c3014367c536dd3d794d99b535eec33a70d425b",
	    "0000000000000000184124ba2eeb6441caf399f1840f706be16b69d0ebb367f3",
	    "000000000000000038e7807dd4129b256cbf4daf901230e44f8e72b778047da0",
	    "0000000000000000348af1c07846351136ad1901bfb75721158933c428cf9906",
	    "00000000000000004131562ca50a5fe95aa32f3c3241dccbb8526c6b487f4e22",
	    "00000000000000001826f481f081fe6bf1a366fb6cd98d6ab825a6276ce2faf4",
	    "0000000000000000125cf12ee71186c649b4c03f966711c8416bd0480a60c560",
	    "0000000000000000078d90ce995535c4fdd4627064ca13466882060aaab4ee3c",
	    "0000000000000000064865e8d62ef1b37608818fa88c5236d7b111615f5eaf53",
	    "000000000000000041220f60a9795270e2028e3641ea42e156b89b190d32c88c",
	    "00000000000000001946ec87a5ec449cb59ec5cb78eebf0854cd2044a12deb1d",
	    "00000000000000003606eaf825796e818e8b34cd2808eedb15feccc68b1aba68",
	    "0000000000000000352077b962d57407ea18ffd8d5d457013c2760afbc53055b",
	    "0000000000000000321c5b4282379c94ed3cf859200be1fcc48564e2a4b39307",
	    "000000000000000034f69be57259380f52230d608c6a44bc4e7302fca3cd0508",
	    "000000000000000009175843bda6c59f7b72f683b0c4747a4f414881a1c9466f",
	    "00000000000000000b28b46c5ca83ba1ca2478a947a004b031882c697081db10",
	    "000000000000000013f870b0becb24a710b8532a71031b343e953e60c378d542",
	    "0000000000000000187ca1d0c0d4a17775488891d3b48192d445fef2a115bccd",
	    "00000000000000000d476de61c5864e3d9135f0fed512f4fdddcad5b3b4f094c",
	    "00000000000000001906c444207ec85a8d87f401681596e7a1920e913fc5e45b",
	    "0000000000000000199dbe4d67d44481fa7c0e8f3ae8aaf9d44f412bef539ed2",
	    "0000000000000000287439e5cd37d78c45e3331f4468adf35cd3ad4b37d77f34",
	    "00000000000000002f5aa50c311e3bb42c7f024cc2307dbdbf7a6e1836ed23e7",
	    "00000000000000000f0e6147e2b64042e300e1776ca2701fa994669dc2569260",
	    "0000000000000000351a0599912172d7e908f6fac551c28eba2dc6105347aedf",
	    "00000000000000003bdc38424386119d88010108ba1ffec6f80e966d54cf40ab",
	    "0000000000000000354d056be6ef62518c8ca1269fccaccadeda80f08494a909",
	    "0000000000000000295b8a2b97b070e5e6a2b1b825f0673fdcc91e828eb90e3f",
	    "000000000000000008b1689738a6531213786b9637670b2b8d67c9fa87421b91",
	    "0000000000000000247c4633db5fdbb0586e2c053825b8d5d37d181cfcc183cf",
	    "000000000000000026221c54efff8ec13b1ccc78f66d477c658bd20364416fe6",
	    "000000000000000033fe3e367f17bb0f15b37d6395983bdede62c489c968f7ef",
	    "000000000000000032953faef4515f79ebdb4196e382df8b72b6b48a5120373c",
	    "000000000000000000edb971bf853f7759b05ae32730897016dcdac5cab5f9da",
	    "000000000000000033732f8aa26ce34be4afb23fefc78da52f413da1419dbbf9",
	    "000000000000000002a3f8596004a5b66b2da897faf3990fbf86d3e051fd30ae",
	    "000000000000000039424a7d90891fd609c70101fb77ea9822acf6239538f07c",
	    "000000000000000035b2df9212575102c6a477a7fe319cf50dd99e06dc6c1fee",
	    "00000000000000001e0c33b35585758d7aa43e26bcbe6b5031b029f5e9a025a5",
	    "00000000000000000fee40f3eb1de9c6b36f752ceb5e4b9108e4f5ddf7c71cbc",
	    "0000000000000000330e527cede6b1cbb77d503b0ba57a5263b554ebf2d3dd7d",
	    "000000000000000031773c29ba543a22a3c7b09c032b3e7e2974b71a9f386e7e",
	    "000000000000000019fff20faf3084d53abb0c7f48212a158f156b5607aceeb7",
	    "000000000000000012e5607091bc8dfb53cf76e539b94d254d7ff2bd096bb94d",
	    "0000000000000000077bd754e7e430bb66dba1052cabd7df89ac5ed6893ea6d8",
	    "00000000000000000ea87d6c72a702867239260cc4347ae109d5a0812b65c16a",
	    "000000000000000036320a34ff045ff9b0b30070193e6495b8acb151e616f58f",
	    "00000000000000000e2734572b534b479e1ae509f623d7cdf09195a0c1f1e1a0",
	    "000000000000000006e85e1751cb8e02c3fac74678205bdc1f668dcf6998b8b4",
	    "00000000000000000c73f11df80ca592c4bc0fb667bf693e15ee1bd9a688c55c",
	    "00000000000000002dee144cde808f00df91514fef03b00e17dac4bb18075059",
	    "00000000000000002d07fb272b2496f1f139477ca7dac480c1420b80f71de297",
	    "00000000000000003d82c693308134185301f5c6d51f83efcc38671a758e36c7",
	    "0000000000000000313c4708da5b676f453b41d566832f80809bc4cb141ab2cd",
	    "000000000000000004694292591c942b4e6f00173de8b8e871d6fa576bb218da",
	    "00000000000000002a4c3f0408d2a9b0e09e3cc3503ea5a95f79737c8ef076d1",
	    "00000000000000003e1edb2e73180c1c258bf345755a4d5442452935a39a37a1",
	    "00000000000000000316bf1872aa947e4d4fdbf796d4c738b6c2cae52c7a95aa",
	    "00000000000000002d880a2fa7c1e15edcbb9ebff8b916b7e2c75143b23d340a",
	    "00000000000000001dd6b4d4ceaecc912d5cb7de627c94bd0ee59badf1a43d7b",
	    "00000000000000001d5c55e8011bf768bdb711693f1308f0ec8c0d5bf6c91760",
	    "000000000000000033189d7a3103f2294a260b88ea6a9ac45d155267ba0add2c",
	    "00000000000000000d1e45518f2edf9303c0cd21d19dfdf065de7c82070758b3",
	    "000000000000000010e90031cce0bea1ded4ab0becbd7c23e1afad458b824a98",
	    "0000000000000000321f75104221b3dbbd890e68d1d4c0261e33e60777af3502",
	    "0000000000000000172b4c6c0d1173e3a30ad7925e55d0c0af522a55c38e1949",
	    "00000000000000001b174aa986cd4de9c50ed26ed65119e4915c8d633a6c9f61",
	    "000000000000000027537138cf94c00f594ca8b20e5f7f40d3f3ae332a22dd73",
	    "00000000000000001bd8fd2fc5618014301001b433ecc7c5fbf27dbcb412ce3c",
	    "0000000000000000022d60e1199bd1016a49d932b23a0f180f2fa22bee8b8917",
	    "00000000000000001e2cef06a293cf327ea91d9a7fc1fe5041df5817a2a7ce14",
	    "0000000000000000186ce65b3c536c021faadc9f079c2a2a71fbfff1b888b784",
	    "0000000000000000323aa1d50fe27c44c532c44478fc1330b59030ec2e096014",
	    "000000000000000017dd7a2945274036e35610086e492f024f3a85c99118be82",
	    "00000000000000003d848f7c945fb990dce7bb4ad47ca877ff32c8d4a42eec36",
	    "000000000000000011ae313df96f807b4dbf85d044eb8e8a828d422c111c89e6",
	    "0000000000000000123ca41fec1773862b29678ebd2bac6099043004bf9dd5ad",
	    "00000000000000003263330cc748de3253da7f90dfc61b7f23f25c81a5314195",
	    "0000000000000000160b30623c07340ac1d12fedff47a7adfa6d12c32d3eb5c1",
	    "00000000000000000b5613955859fbdd3552c1a7dd90db720a47458b1696aa45",
	    "00000000000000003743f708593336cfe0f0d41278921db40c296582788eb843",
	    "00000000000000003b9854a853ebfe59cb2dfeb3efede1dbab4c9b3f7b6a0e86",
	    "00000000000000000553e316c2a45a06ac6db7757432d14c32797d0bd3176d70",
	    "0000000000000000198a417cc5194a07e8bf8f0063d7e46e3e4af5d08357e854",
	    "00000000000000000ec13ed056f9f7ed6e07b56d8b359bedb56733f253ccdbb4",
	    "000000000000000007e2cd1985ba0d94e104a08e8be493ae4d36e689429507fe",
	    "00000000000000001942b41e06723063de50e1448a5c346415c16ed9beafd274",
	    "00000000000000000dadcdc98fd526cde3b358e76ed3f674044d40528966281f",
	    "000000000000000005d1616fe01604908fed3a2311164e76488f78d593d82b7a",
	    "00000000000000000feb06d298fe33f0acd6615897b721851d3c695ab1ec2063",
	    "0000000000000000140ca7fd2ad08d5ce1e85901fadf93e13e223e92986e30af",
	    "000000000000000005482522441fae4fdf6e05dad41ea6f7340d807144825e83",
	    "000000000000000008fff78278b43caf2ab414514046ef96546ac1116dd5f197",
	    "00000000000000000f111a45419da86c6aec66fb1aadfa77aa5ad0616b81aa9f",
	    "000000000000000001354937a2db02852bc96f9f5ba50883ca50879993872fee",
	    "000000000000000025445c6eee79ead66d225a5c1fedbd42d343ac2ebd15339c",
	    "00000000000000001106927a48e84a5f846d1890667834b651f98d2ec10ea9a6",
	    "000000000000000016e52f59e42537c70bcc075f83693b3baddda8a5619683b4",
	    "00000000000000002ba00176148586f8302c0c1bc6acfea96ff046a7ffda2dc1",
	    "00000000000000000e924a3f63665ab712afafd91c53f621690a95fcb7e355bf",
	    "00000000000000002c182e99de5dde55bffd25de4a661b5f51ce33e9954f4487",
	    "00000000000000003959462a3f81ebcb3601d17822fc9e929f281213b7a69e3c",
	    "00000000000000002523ca7dafcd32008b7fe51dea132a1b80fb990b3e8bce74",
	    "00000000000000000691da0309c945a627b968619bddf204404ddae09e280e24",
	    "000000000000000032add98b859f5f08b70ed4cbefe489d4157af6456647d7ef",
	    "000000000000000005466e9c2de85420e7a264296f0daddade675deaff92c60a",
	    "0000000000000000373f28ca2c7776081131c4aaaa3a057913a2855381109d73",
	    "00000000000000001ca7d646d1fbc237c94ecc9572ca21207d1140139b9e380c",
	    "000000000000000008a5b7801231225765043db7096474c12dd1e96e04db8780",
	    "000000000000000013962d462ab3fdbb68f4b740274ebbe0586341242fff67ca",
	    "000000000000000008423de5ef07ac29bbaebe965aa86733b77a32be1f9ed1fa",
	    "00000000000000001a737564206348948c628470614285731f924a1e733e0407",
	    "000000000000000003a7fd98a6413ebe77e1348a4d303ed18eed9e2286218d62",
	    "00000000000000002a49590677bfe325d937aa06123d2e20a98e8ae10681a8bd",
	    "0000000000000000222235e5c204a751f6398f41989d65037757ba9510c11618",
	    "00000000000000001a685a8c20d906e3c135aa997ff9c61233e7bbdfbcb90bdc",
	    "000000000000000015698ec41e987a2cc715406b0a3c3ea25039b8fe78a53e04",
	    "000000000000000033fcf6b34e64743ae1aeae3e0d4cf55557fa0a9351443a97",
	    "000000000000000014672959e3a004afeec16cfbd573d81502ac9a69b8d98c9d",
	    "0000000000000000388af6f5140caf7e3d34522eea1aa9c0778056e8e8e4bad6",
	    "000000000000000037808aa5beaa258aca66fd4064782eabc24101d26fbdd6c0",
	    "000000000000000001d568ea2a9e232b1675da1df27f0f69d016e4ab1197dfb2",
	    "000000000000000002fc178050e3a35099132ad9721f552966324b9f0ce79692",
	    "00000000000000001d01e0701c3146e8d3b22ea34efd8828b1809247c250567e",
	    "00000000000000001cc46f238aeb9037156ebe3419d453bae70ed63d522a64eb",
	    "000000000000000000e5635e77dd0f50925a9383e6368e612232f46be3bf00c7",
	    "000000000000000002d04ab8c993ab2d0bdeff1b947005734423cdb201c3560e",
	    "000000000000000003452177b09902803bdad94d342a6df1cbd3928aa92a54e8",
	    "000000000000000026517cecf83b8822c4837ff5d0dc255be17cc499fdddd87f",
	    "0000000000000000112ef1e95c3700ab10c401982ef05060944df991c339eb22",
	    "0000000000000000371836bfca835eeb3a1973fbc6aee74446bf2369ed6ed09c",
	    "00000000000000002f84fe5cdd46a82622338f9d2c5034b67727a9cfec863344",
	    "00000000000000002181e131ec8a037e88ac39bcb5f55c1dfbf083edc4bd589f",
	    "00000000000000000dc8db6f89b2eeaeb3d0cdf3d5aae50c125e082bfa97ff7c",
	    "00000000000000002aa9005779220088289fbf911d3c3c84d8384c2dbdf31565",
	    "000000000000000035a4843a1e96374345d1fbbf54748a29d4a61815b79562be",
	    "000000000000000029035cb01ddef77de7219410c30b9ff45eeb1b4f59248511",
	    "0000000000000000068c64dcbf20e207e82b1570860d4c8890890203a1a288f6",
	    "000000000000000027118e84946b91e012c9b1062770b5964761b303d65c2d68",
	    "00000000000000002722ea82b2269b098cde626c89137ecd28260438d7462003",
	    "000000000000000035452a33ca6c9df5297258d5b90b9980b775adfa4256a9d2",
	    "000000000000000008930d3e08dff39235c6621680853ee15219537868488c17",
	    "0000000000000000305312a171b489169f9e9267ea4e207d45972920e0df848d",
	    "0000000000000000026b4f056ea0ba89edf8750f60cf57d01f9c5801b920d9ca",
	    "000000000000000032c99d2a89f26b0db8042be491eacf1810faae2c3ad25e0d",
	    "000000000000000027a296aafdce13174d474c00f88cf55f37e1909304ff42d6",
	    "000000000000000024de8f01f69a377e27145aa0b3d5bb731c90933b2ae5c8c0",
	    "0000000000000000062ff7f089671d68b37fec1c8a8dca03ba466e39ed95c1be",
	    "0000000000000000013f3217b4d1caf5caa56825ee73192b9be349d078668bd3",
	    "000000000000000020773718493611dd4f949425bc92d6380b21206ff704b5d0",
	    "0000000000000000225839cfb3281d0f46738bb6df44830e6bd04a465a34cedf",
	    "000000000000000019c1cf813d4301ba53fb500ebbb79c2ef4a2f941d9d3af63",
	    "0000000000000000104e6161a017b169525e6486cac4bd046108cfd74164d996",
	    "000000000000000001763a99beba5d1914eb7f23121d0b1ec56fde0a1d283ed8",
	    "000000000000000024842e820c95527106b9f3c6b6c47378a843dd8677622c2c",
	    "000000000000000006bdcea4d07fdde202e41eeb2431ecce10b977296703d016",
	    "0000000000000000304ea26819593c60c2d5ea30f1e5cfc5abcc550593ac311a",
	    "00000000000000001b7e083a4099ba74480cc6ae126b3f14543da7e0b74b2aba",
	    "00000000000000000c4334265cf0b853c0f17f1a2364cfec392f6f514b2e89fb",
	    "00000000000000003144c7cf4c7116143d6c117930320adc777e2f02becd93ad",
	    "00000000000000001919e4d218c923ec7660e95c88436489440b8e9b7e573a38",
	    "0000000000000000290e46886b4d04c93e56fcb271329def1f17ccae288f31ee",
	    "000000000000000025edc90d5805ffd0703c355dc851a0f7cc2c8f88d74452a8",
	    "00000000000000002d8e5ee4094431487275a7ca555590815cb8c12356a85d6e",
	    "000000000000000028c3b00903358835fae961961db3a5d1e5d154b64b6e72a6",
	    "000000000000000022a8b4576ef40b9cf6555b8aecc65f7479afc7f739743aac",
	    "00000000000000000cf1944080cbbd0c8825b84f1b99a4ad3be03055bdb821a4",
	    "000000000000000003a8b11aea0a8914f6fac4324f2b8eeafe62f1738871129c",
	    "000000000000000029f17d7f7bb53528dba7bd407e5d258a12a3b3af69c4c31e",
	    "00000000000000000cc27bbe12fe35700340c0dd738b100ade7fa13a6c9ec1ce",
	    "0000000000000000326b7a64c2e10863c6b7b5b316619826f910113ffcc6b016",
	    "00000000000000000a6da1224d2b9751d7952508597c90abb6939374da2537a1",
	    "00000000000000003613ed597147ef1e7095acad2bb388b5a57425f7f0a4487a",
	    "000000000000000029ec849b4d279237c6e06a24f4d4c6209424c6b8eb13c183",
	    "000000000000000019f33769e47d17b9c71b8276fc1d422d284bc8a6bc24a4dd",
	    "000000000000000020df8b90f43069eceb98f0779651bb5a0cc7c7eb259aafc2",
	    "000000000000000035b570878bc99b9cd6e3784d631d289519890d2a133b66c3",
	    "0000000000000000044452489933b2b355ed901071748436975f87821fd71562",
	    "000000000000000003beb06cedff8b91669448bce51f87d7f9d6f068f633a8a3",
	    "0000000000000000076f830667c9df190e4b1e4651e179afaa553a0e8e0a4167",
	    "00000000000000001ac5280b667103616575de5b87f42b4956d7551053c50f92",
	    "00000000000000001c969ecae95595866d796b9afe11105ce84c76957be8234a",
	    "00000000000000002c735b61e5f33b49e82bd8de1867f14a002d9bc99ef976d4",
	    "000000000000000007b576f02104a2caa7ab1de6ad1aa124886cfe6246a7dde8",
	    "0000000000000000056cd0c69b2441123606ed43acb6208f48668e6c3183153c",
	    "000000000000000024f71e066ac4a414843aa63f37ff8ffb0a8bdddcf672f247",
	    "00000000000000001ff5814301257ec77e755ac99ccf54897084d9482e463e63",
	    "0000000000000000074c0a87b4e26dfc83f767112d9ad8d5317f5f71fc5b7559",
	    "0000000000000000118300d320cc5258e0daa204e36cc48fc76bf1d1ba5aec46",
	    "000000000000000023b34742690293fc7b13c285ce8c58c6a924c1e19c610766",
	    "00000000000000002180b5e77ff681c9a7f8583200d4e24b61bc7b2da0180fbe",
	    "000000000000000020f0252de25b739e4c2b4d35c3016d4430850ba8b08d093f",
	    "000000000000000019f52d9c59145df2e9d6df73536e42d856dea91f74548f51",
	    "00000000000000000894f4f2cbd1dbc8dd0b6d2f3a9a89582f5456516f2bc7d9",
	    "00000000000000002c06da52f1763904e890972f42ff7cd8100658d5cdf1b483",
	    "0000000000000000292fadfd397a6c581b3523fd2bff23f1829fc1ec742d9af9",
	    "00000000000000000da37cdc37594822c8bc35317ae3d105d182cbc9aba8d8fc",
	    "00000000000000000dc20d9e6df868e9d0bc0d42fdb6cd6fdddece21a203bc2a",
	    "000000000000000029f8ddca13878ddd9c9b616b91238bd28c474cb1deae57cb",
	    "000000000000000005d4b33dda42ae79344e2ff033c91795f7529f92935e2b30",
	    "000000000000000014c31ef302751275f1718e9ec28851de2af91beb9acde0f7",
	    "0000000000000000033869804030d3b792bf05266341e8942d2c7914b4079474",
	    "000000000000000004b86dcbdcd3303c6f301ecad569be8bf49b7c56d3e168e0",
	    "00000000000000002d212e4bf2024652fd370f2bc9d5df1b08b8bdfe9da16dee",
	    "00000000000000000b34769196ff0a537efdd0977af0d755a0803a6fd8235073",
	    "0000000000000000150411a6aadab21544fed7b83c1a0b1be8dc028605fe83e7",
	    "0000000000000000230c299b8dae2d9d362bbd2e577b289a3a2f4f27475d8ca3",
	    "0000000000000000054ef7ce2f517748fdc00ba7b5f2dc558e3f2dd9e99cfe7a",
	    "00000000000000000d49ca062051290bfa228460b5690218d00dfea3ed2bfb87",
	    "000000000000000006daa0114a38bd0949747b45d7bcf56f54bce6367eaea468",
	    "00000000000000002686b58756ff76e85613b338490612f9cbf7e48df7e4bd06",
	    "000000000000000018de8c05cb73e4a19fa8949e3bbe43eb1e24f88bd67ba49c",
	    "00000000000000000e6a0039de0536afb26acdb3a1c927ed5df2a78a3c679f7d",
	    "00000000000000000e03a917a4c95600d66b382a444c54b33fa2d799d4bc7bcc",
	    "00000000000000000b6adb180a82015f7f6599e64db6e932fb759264ca1a57ed",
	    "00000000000000000997457805f2801f2f24ad04d2f2d227015f2605f2a64621",
	    "000000000000000009b8ae6a65cf90163c5d13f6eb3dfceed299ffe567f6fdb2",
	    "0000000000000000244c26911af3e2d9741f0e24c5a01ae11afa1ca35a76a3c9",
	    "000000000000000005b99e35ec86ae61199893ddc3aba936c80ded50047b2def",
	    "00000000000000002cfd6a438cb3899ac991bfab11d4c21a7acbfa391b7a699e",
	    "00000000000000000f11bbc1d9950fee9d375f5d1d785f693b760d913c72d05e",
	    "0000000000000000137dbafb3a01a6304bccef997036dc901654b81a02928137",
	    "00000000000000001c764467a158d9310dfbd11f60846dc94ac60baf65ede193",
	    "000000000000000005b0bfce2519c3f0d1baf093b436b862ddd60877d36a6a4c",
	    "00000000000000001e8bfdd4dbbb9097da9b08daeb6f2feec1fd78d457492557",
	    "000000000000000008c4bd5c7a8b5535f3aa6a7b0375015127cf4374c66d5cac",
	    "000000000000000029f1e35a9a9dd9020d6b8f77b5fd7c2ec2ef52837f1cf5ba",
	    "0000000000000000247d9052bc6d4135b995bea2d8d025f67170a0bab43340ea",
	    "00000000000000000ee988885e20c0badf4987b32d02e67a61101bc16488699c",
	    "0000000000000000143c794fa82df58d8c0cf5b1ffc43fa8a8d05bcd6d15025c",
	    "000000000000000024ba1de56ae90ba518f2a87d980f9e1d60ae90beb9a69d4e",
	    "000000000000000012205498487c5f73dc6e63f029a184d63a59248f3f8c7885",
	    "00000000000000001e00de69740ee4f3dd5efe857899e4d1b30c5b05f545e7a1",
	    "0000000000000000125315b915ce951df16d5b4f010f70de71bde2b9d800fdee",
	    "000000000000000002e11bef8f02d6b915fce83e69b6bfe3ca44aa98048f29af",
	    "0000000000000000003cb581a84d5dbb8c78a88e48714e17304875beacab4019",
	    "000000000000000001e7a060b9e972cb7a579b364b262cc8e1c489f116501511",
	    "00000000000000000a1e64eaf06cdf4d7c11e7dedd4519705c6ffce72e257c66",
	    "00000000000000000e8f918bbcf642f585918bd41b915dc04f0c6433740b0c9f",
	    "000000000000000025a51c4288bba099cbfcc1a75168b78800fc0dd5c01884c0",
	    "00000000000000001a9a3839023266d5db5bf15458acc529cddbea4ab248a9e3",
	    "0000000000000000245ab5fe15bf327e5fd1ac82b1b340ea6d330ad6653c7824",
	    "00000000000000001dad5b968550336c4f5add900350a005e35aab51527f09a1",
	    "00000000000000002327e211b51027f0baa8756df69d77cc1cb7b3d63327005f",
	    "000000000000000026b27e86955e4db4bc82b1efb3512f913e31becfba5bbcab",
	    "000000000000000002cfc19634a69ef9ea0d27e22d1d2b1e3ad9c0f6257b9b5c",
	    "00000000000000001b2da002128688a2efcfc9f1e0daf5f74204f79b26ec1fc3",
	    "00000000000000000210b7aff150af09592b5b45531c6c38d39396bf6f155b00",
	    "0000000000000000213e16ecf3fb4abf576074bd5d6c658392eff068692b8790",
	    "00000000000000002661cfb63f2aa775dd99613780a9aaf0c50d3d72f9edb7b7",
	    "0000000000000000161be6467e8d86e7446c907746bdedd39645ae49a8611bca",
	    "000000000000000026effd21161cf58e8668488621c613e52c4c9397b628b9b7",
	    "000000000000000003e5385466cfbedb668385e769ab74b7476bc9c2ea7f0aa5",
	    "0000000000000000127b07a96519ca5822a69423bf790aa5384d5f25794a6361",
	    "000000000000000004c385d051e6243c114c8a24f2f0bca1137f676be0e4f7f8",
	    "000000000000000027653ce5d171c86483e603909b96f2a9da51e1796923b630",
	    "00000000000000000bcf586e460752029340de463c45ec5d454529f91c887a7d",
	    "00000000000000001fffbbd3784c667c0b324f21858b69a5b2585f4dca4370fa",
	    "000000000000000017489b69f2bc03d9294ead30b0ff7539de237a8f7b89af88",
	    "0000000000000000168f2f227e489fcf710f0d92cc859a4f86c4aed8e1d0713f",
	    "000000000000000000050dc445e74ff95e9091f98277b04e7c84facbb9e2f503",
	    "00000000000000001b9b1ec10309f3e5fe1a68c52e26ec384172f492862d7554",
	    "0000000000000000178206c498fc3545c1de469635c0f9152a7d982c9cba2dcd",
	    "00000000000000000e5a60acc6eabef90a7b086af4b815a7e8c0eaa73ea4f130",
	    "000000000000000007aa55a4fc98b54359a16ec7de3e93ae268fbfa279bdd60b",
	    "0000000000000000222a8a1fd0e7e2c2df417df0fd0c8405ef131c15e95c6c26",
	    "00000000000000000739ae4119340642a53d3e6064e10cb12347cfe874b9ca30",
	    "00000000000000000edea692af34117915f82be6bc240753fe7a64cd65cf374a",
	    "000000000000000006d84bb692b9a663b2a7e04b2c04cc31513c8ceb644db734",
	    "000000000000000001e087e010f851954db1ceb34a9d118bc4054681ec0c0b61",
	    "000000000000000027f912db19dc4976569022f24d27ae5f69094d154db08c9a",
	    "000000000000000019c0dedabfc2366547a8f65bac2e854f99ba15425fe1c8e7",
	    "00000000000000001638d8b1f7bd567be5f4ffeb45afa44e3ac77d39351dcb61",
	    "00000000000000001706f5c97559767f637d4d48dce7d19bf61d8ac6e1c2fde2",
	    "00000000000000001d43fe5da07c4724744964a24503dc58b16138a09c353bb0",
	    "00000000000000000c4a552d2969e1981d63db7a1648d6bce14133d02fc9714e",
	    "00000000000000000afea38ce2077f97a8103109f186c0b95d86b1c3ea9a5e06",
	    "00000000000000000832526c13a5d98f67e1477596d0040708f608f8da9f149f",
	    "00000000000000001f5e726dbbd7654f02d080aa1366b433cd1ec63e3a903497",
	    "0000000000000000041f24371c0c1bd49f49712797f075e311c5ca732e451e81",
	    "000000000000000011388cff9f19c8ffda1be4142124e0d853c3c3b6353c8d9f",
	    "0000000000000000050d6c442fbf5f3be450c77be8f0fb0f1c67dac92071122d",
	    "00000000000000000a9647c67f1cbb618a7be8afc59a22c7b9c07d54b99ba25f",
	    "0000000000000000045fa360e3d43d784cd7d01c65d71214535aec5699510525",
	    "00000000000000000ade48adc39c34f096b30a4410b4039728fb0f50eae25d40",
	    "00000000000000001d1340a4433fadd2feba26a770df8aa669998584a836e790",
	    "00000000000000001a27a4a5381cf88b40a735a2e23687ff721974e903db3cfb",
	    "000000000000000001925ad284e5acc5f76616320eb962a53ec6b804739746cc",
	    "000000000000000007261f2d7e5b3f1889dfd0228f609dce1e888715a6cc18a3",
	    "00000000000000000d059c4558b173e22b260ebfc8b5e7455153c0c06dac636c",
	    "000000000000000010880ac835ce6cc4afde14be734b0934861d6a32b51e8ba6",
	    "000000000000000021ffd7ae2880102273a7ce0f92e7c86f396849ca7c7445f1",
	    "00000000000000001da8248d2b683785cfcb1e22ffdcd06bf499694e18adc1f3",
	    "000000000000000019cdb3a678bc7f3490c27b6f1e2e3b21d937647ee265a3de",
	    "000000000000000015e189d3339b08bf3ddaa190268f8fdd57d601adcbd3f0b9",
	    "00000000000000001c548c4f1bead5e61042bf5d851954e7aa6ff4af3d3e25f2",
	    "0000000000000000084a4f9f94170ff40b01b5a294f8a828030794e307f0c077",
	    "000000000000000012bc49622b9771d884fec08ae5bf5f4fa6eb5a7408f1b491",
	    "0000000000000000126702862fa37d4137989dc9eabd511020749c2ed68034bf",
	    "000000000000000002b8207565903ca29cfedb31c796c1771f6ae0480b608481",
	    "00000000000000001150b911bf1bf86b2de00cf231819dfba283bd26a731947c",
	    "0000000000000000052ef99df69977dd71ea65c09dcde6121c1f41b8f77ce92e",
	    "00000000000000000c8bfd9e2bb8d9125e2ebc7bc55ecbe1586285d420d55d72",
	    "00000000000000002204fd69c213847d165e58965ddf3ee6e88c1ad3e6b00f89",
	    "000000000000000003c700eef592cdd6144737398f4ec972649d49edb614a87f",
	    "00000000000000001ae09a5a4b1d5c4cbbed2fbf15f589897882a86218f42377",
	    "00000000000000001d0760abd9c6cafc11185ccf200771b5bae70eb2cf53699f",
	    "00000000000000002121ec0ef982e7854ecf17fee0acc7b5084d4580f1aa7e63",
	    "00000000000000001bc68219164ac21980eafd94e36124fd84c920300ac446a0",
	    "00000000000000002034da567dae1302ec2d3b287c00c5346fa8f73095b54f9a",
	    "00000000000000000b29a4dfea182580205366b97e6c53502f3a936df8126247",
	    "00000000000000000dccd9ea7570891fc939ab51d71fcc58228215aac2606b96",
	    "0000000000000000177da809382f93ca1c4336811e4a910050689d317d62264e",
	    "0000000000000000007c6916f154794e33d45543455e465131372c5132e8ceb6",
	    "000000000000000006ad2c4faf52eea6e79c59a0b980c57d18959ed631b789ce",
	    "000000000000000006498b52cbaebbc96be15a690125a3df7c4ad49e8dd41644",
	    "000000000000000007cd96ffe3af63b943ed6116949ca96d9fa3ee63f7ecb426",
	    "0000000000000000002c43d70d18bb1bfa5d0cc4718675560e428a490af32a51",
	    "000000000000000020f29be473e922c3d109c15cbd3c0a45d7c65c60ab4bd6e8",
	    "00000000000000000e0729d778525e8e7c3256a478dbb1b20f201c716d2880f1",
	    "00000000000000001032f34358a646ae8c43f26ae628cc1b835979d6d32a5b90",
	    "000000000000000013781a9e94281a533dbf61fa4766450a391a536edcdb93bd",
	    "00000000000000001889c584a533c50a866ec0d7d6923b48b2a117cf2993e246",
	    "000000000000000005683ead5cb801138fb61ab9b8251dbfe51f342180f08e3f",
	    "00000000000000000eefdc7afb05af751319363dfb5d204d2b05a65b6685f51d",
	    "0000000000000000011c11bbaa0f5929ebea9058a6e879d058f2d4ce33edd045",
	    "000000000000000006609c90dad6e40d3e203db27962ce9865c4ba65fa3a0cc8",
	    "000000000000000009155ade9feba107238a19d7e6ed2f110a9ab0f020a58aa3",
	    "000000000000000005a65f3e0f006de492168f55e0d97d932f15ace2a9e49496",
	    "000000000000000005efb9e5897f681c9c5fcfdee62f4cd8c8ad6d11776d4d1a",
	    "00000000000000000a6d5bedc1c8834ee8058c1e167f590c144cdb8e9d543a4e",
	    "00000000000000000880a41cd6dacad20ffea00a17b12bebde1cd206954ca274",
	    "00000000000000000bd53b929e53aa933db4e7abb83c8b79e6d2564337638cad",
	    "00000000000000001782dd3d570caebfce0f6977b5c69a252406a722ae76499b",
	    "00000000000000001e017081492320cd23e4441075193b843ab3db5a515cacea",
	    "000000000000000013e1fc2e83fe6931c77709c64c6b95ab47664763bea33fdc",
	    "00000000000000000e3ad981e9a35df45ebaa73f40c4ff738be7a216fc3f0893",
	    "000000000000000014da3b86e067404eb438de5ff3db022badfdeeb4c52872a7",
	    "00000000000000001315992d6a9e0975dc21201ebc68762d2bedac6f393eee5a",
	    "000000000000000016d3c7dafc6fe1d05518c1a133e19410ac76afa7edc74388",
	    "0000000000000000018fd718a8d06fe228982c56fb6657981bc7389cc11403a7",
	    "00000000000000001e80614b307464df1af051b50c5dd15fd5e8c0034bcc969a",
	    "00000000000000001662096d4b3705c206cf22a8a5131b8faa846a4f5489d6d6",
	    "0000000000000000163a196e620f76bdaafdb92f9fee5053df0e342bde7fd68c",
	    "000000000000000017da8d0833fc8d529bc65931343ef16e909f13c812b266a5",
	    "000000000000000016c487eb9466f8828fae1ab877ecf1768b38274b7557e72c",
	    "0000000000000000007b85de8666cb1dd27cea4c5e1f3d889520baffa351e468",
	    "00000000000000000657023da4975a8fff0f59f5fd6350256b933b2a39d1c41c",
	    "000000000000000002233fd614f34326da84671670ab3f20cb727234e099d650",
	    "0000000000000000166125e277e39aa1fdcaddf70558af1b5289978f290e28b6",
	    "00000000000000000b43d0337205478221f1b5fbe36dd594270688ed62c28cc1",
	    "00000000000000000603792f32f1b15e65b34fe97a5ad398e7a68f5f65a71f2a",
	    "00000000000000001580903b74810df15fd6d0799de8e68349c17790a5c9fbfb",
	    "000000000000000019d7fa998314fb2329ab61559b92bb1fab23022cee5bf985",
	    "000000000000000000c32f60119aad35e61242eee57987f08f7543e90c613c6b",
	    "000000000000000019bc7ca57017705cd621321c2b11025e307ce5ad384ba09d",
	    "0000000000000000163dfc54d9d6051773b51a438fbee89824dba17c8e0fa905",
	    "0000000000000000053c53c8bd5bac29621c5fb8dc8c03807c7cce616fb9639f",
	    "00000000000000000c52672ae98a2d6ff2a9570099ad52de0843b926e7c5712b",
	    "00000000000000000ff23c6d3850fa0f6b0f32d01640f4da8f9f4300a2d92f97",
	    "0000000000000000010a10dc2413fd14790bba0fbbdb1bd74be80dd590b2723a",
	    "00000000000000001f0c1738dcbfe95e8550e76a8c70c70c400509a2293aad7b",
	    "00000000000000000e3fe704a71341a81a5a22f9d422d4ad1323c79a39a31694",
	    "000000000000000005261f4402885f49e88d668bf35129fa7b9d296b6beb95e8",
	    "00000000000000001629476e12264a1354105ea93f270fcebefa58b95ee6dadb",
	    "00000000000000001b1b9710804c4600dd1e17720686d9c4cc358caeebd656bc",
	    "00000000000000000cfcb96878ff0ed0c30634242b3a5ecbe10a14b6b363bb0f",
	    "00000000000000000ab8d65b36825935a2610493bbdaaa1fed8ec58e86919301",
	    "000000000000000004e468d7b09cb1db405844ec9621d4522baef1b9edefc45b",
	    "00000000000000000d37751c2d3b7247b638650ad9922145d82c89a144091e8b",
	    "00000000000000000b2be61144613f642f59b3c32ac294d764c912e336cca7f2",
	    "000000000000000007f46fbc6ed28e548830ed0f9d3fe448b3a06760ee18679d",
	    "00000000000000000fd024f669d21ef203ffc99985e387aa1b9f7f756930252b",
	    "0000000000000000021d5a384cc00a83a534b5905a42da29dc53203ac534c693",
	    "000000000000000004fded461d3ebb12c23e0e17ea19036927439ad9440e5458",
	    "000000000000000008e61a0268d785ffc8d565f59220173d3e4699daf1d674e9",
	    "000000000000000002c05f63e1f0d3fc3d6f6d6e38d7afff651ff1ffa311cddb",
	    "000000000000000019628f3c4fdb306a5875c7bb3644be3fac4332f742f925c7",
	    "0000000000000000005ad50f74bc193235f756601f4affe17bf2a0116f210417",
	    "000000000000000006bae8883beb39890aec98d4f3df565770a2dd47563d7964",
	    "000000000000000008453e0a90eb9c72baa4e46a8181f85b72bafde4ae08a93b",
	    "000000000000000012a5a41041012e59660c930506f00b31d23a5b0d59cb80a6",
	    "00000000000000001732afac0f5f1a2a15d308d98cc29e57809cd4ab5e5bf0e0",
	    "00000000000000000c20ad6ee044b824ad7c3e6ab3a16ff021c0794bc8eb86fd",
	    "0000000000000000126fcdce01f15f973b8c0d48f5b53a1d61ce02a71a347da9",
	    "0000000000000000051ecfb01ec844584a834c4ef5af13b827d85d07063f7602",
	    "000000000000000017508cb7c766253402210eac3736fdbae59061810caee307",
	    "00000000000000001dbc17cce335850d7ffe53f3f3240f24fbb8c9b84e06c24e",
	    "000000000000000019c524da38029188c618c6cba3415fc7eeba3f25f475d2c1",
	    "000000000000000007a93459514e93145874c0fba692d61edfedc26fab3e96a3",
	    "00000000000000001bf52864eb0b7ecf867055ae9ccc250b938b9e7967b3bffb",
	    "0000000000000000198136891c688ae41e5326cfe29dfc54ed386f02a4c6069d",
	    "000000000000000018670f282e9545e2f7c74a4adcec4bd68967237d21181b5d",
	    "000000000000000019e6de03053bdb5fef03b3101ebd3fe72b34f42332c3ec4c",
	    "000000000000000007ea0a8cbfe57c2437960f4cf793d99790395ed994c70e5e",
	    "000000000000000008e52cf4b9803775996a719884dc7441382f044fa8e310a2",
	    "00000000000000001a16af36c4423e27de4ed136d6ed41b736dcd915c29e1ee7",
	    "00000000000000000db5182f954a17d4db880dcd33742d0f83b51aa36c0349bf",
	    "00000000000000000acaa88fb8144b1dc8e2b7a8b3b6e2a428ac98afc75682ec",
	    "000000000000000019c513391c2f4975fec60a92a09704ed4afcd86a10b3dae2",
	    "000000000000000015dbb576869d02d87f71fa95622109ef1d926f7bf1f439f4",
	    "00000000000000001af40993df227b9e662e8a5fdc071cbb5f39e31010b3c254",
	    "00000000000000000ae440731284e4557465e7b90429babb00a644e25042bc79",
	    "0000000000000000086d74e31ee21f45a647f019087e413a7b3873e0e991848a",
	    "0000000000000000155700b30ed356786b0bc61de6e5d250ba880a44c0ca8ac2",
	    "000000000000000008707413bc629715ce2dceb80bf20a6bc54fe06690f54dbd",
	    "0000000000000000057bdd5b50b18adc073a582441cf44f17738083b0d5f7f7f",
	    "000000000000000017a8b558fcfba4aa6cec8c11313c5d9bb291c8c6fa9c21b4",
	    "000000000000000000a5a31044246b1ed2b88f47ea55defbf5aa819832f21db3",
	    "000000000000000013c8d113a2b9745f086e10a16e3918df0dba4ce89a6e4e86",
	    "00000000000000000bd8d6eaa419b5e672d5d44f1904c25f442972c05e4abd6d",
	    "000000000000000003a6bc2da9aca0e7d40a48d7368bd78f796b9d05958e3b69",
	    "0000000000000000166ca82739a86b30b3867edc9c2040f167db8deab7cd1a6c",
	    "00000000000000000e9916fa71a091144c79b39163be0d812092a83d81f87ec8",
	    "00000000000000000c6d44e81c8d1482fbcebd142bd192308cddc05bae1417f1",
	    "0000000000000000162beeec23f4c5e3cde6f3dc732b8629e630367fd9d4c0e6",
	    "000000000000000004c96ca973b30393600cfad7ca8d7bd6dc05041297ac2af9",
	    "00000000000000001169f89284a08118623e563629b3d6907fed383fbe34e342",
	    "000000000000000006b9474fccd87ee50a49ba7391f75bea662e4fdef930988d",
	    "00000000000000000075fa7687fd845afdc2b50b3d6ecb6e355f2fea47b1e78b",
	    "00000000000000001c9d3f0da3818ab5004054af8660e4ad1a07e61306806920",
	    "0000000000000000177966ca1f581d8b68385f4159578c541d1d4fb31ad4dda4",
	    "00000000000000001251d0c29f3e1515d4d0ed679241c651ae66c0b49c12f22d",
	    "0000000000000000007c2f4c128242b592ab598917232aefd38ae9de3a5c911d",
	    "0000000000000000075bf3e4cabf28a24cea5feab69c361011090f8f07a3c288",
	    "00000000000000000afa92e8f947d46985b2d174e3eff976326b6923fb80d52b",
	    "00000000000000001cc8657f1e97c53d748eadfe6d34fe729f5a02673f9bd2f7",
	    "00000000000000001cbb8d314818a4ee54deeb2e6fe38df8747a724ddd043d22",
	    "0000000000000000112cb38b582b8849f4b1bb06eddbae158ef6baaa3593f8c1",
	    "000000000000000017bea8c25135068ca96b93a5848120b5eba63c6fd802ef7b",
	    "00000000000000000dc491311c43b291b11f1c61e468424c332c84bdb64655cc",
	    "00000000000000000648718c4ae109cb7a0f43e4b71d2d60a44db3b7c3e797c4",
	    "000000000000000002be6c6636a2da8e922d688b15e3ea0d7fcdc470ee41fbbd",
	    "000000000000000012b3b41b1c652106490da9e9b19371ad668be0bdcfdafceb",
	    "0000000000000000077fb00374ac503ac4eff0b4abfacad0f8d6ce2f5013d157",
	    "00000000000000001377510d718f659b0ec9a79aea51916f7d965cf971d8b3b2",
	    "00000000000000001e62f4db110c61fd15fef119e58c32b3de071ecddcbd7804",
	    "00000000000000001b719312d2c54252fc405a49bfac976bc88f4b6b23dd2ba3",
	    "000000000000000014bfccc5e72a1a17870453bc2e97777e927801fb720d2a86",
	    "000000000000000000b97ef8b53be8efef6ee9f95e0ffbda9f9e1640641b97aa",
	    "00000000000000001822d1e27998a21cc5bdc8262b80b0a6f2e812d37fd8c25d",
	    "00000000000000000cdd3ff444b0932f4dbf384489f1c4fc6c6d441326df0f4b",
	    "00000000000000000f7bd34c3bc539d7349d52d9b3484aee0cc2ab10b773dd19",
	    "000000000000000011c66770e2c3fdf0561850074717bfaac656c4ed7d0000a1",
	    "00000000000000000e37e22903425c856b1f2237020e4b66dd0c6e23bae48501",
	    "000000000000000013d566d822cc47cc4701530ce9c6a1de1e450618e2d23ca4",
	    "00000000000000000eb1f450f8f87fdac704968821d97b49495c7f7c99f8e979",
	    "00000000000000000032a9afa3d560732a6a0ddb3c7ede14f543dc7e4cb83495",
	    "0000000000000000068b374a21c42215915eca6def48e2102d59e021870d1cab",
	    "000000000000000011c1488fc836cba228e972e5cbb3b792b1e7c020d5d5eebe",
	    "0000000000000000014edf0fb4701a421b5a12afec853617c2484e42ef0e5015",
	    "00000000000000001e5f2a0431b58e67150c0b182a2485c04b83151b94fc3faa",
	    "00000000000000000a0a4b89d371171a96e1d45b06e0763a21174ace42d597ff",
	    "0000000000000000077262b5391b884d2b4165b78f83cd06fff1a7f8b2a01e07",
	    "000000000000000002d652251d7cffe17dc1d1660e760cb2b9ed92357307680e",
	    "000000000000000002c09c9956cd4fea6056305c48531d3c57e162891225fdc4",
	    "000000000000000009657f04dd48fe9868eef847bff05a9a263ba97c141c36f3",
	    "00000000000000000fceeccc1cea086a2bc3a995449bde825849bc5386ecef35",
	    "00000000000000000990f471886e5217ae6e539b10ac2b5f88248f83af4fbf84",
	    "00000000000000001a0229d6a88ab0f93856f18f50b84bcd0e9445f0f7db0890",
	    "0000000000000000185bbf27c246ecb6d95a73a1a50eca28f34ee4ecb7755aa8",
	    "00000000000000000e3d56eb63217a1f0d12fa8b42b66809c5b43f97c8e226c6",
	    "0000000000000000007bbbd636e98e6967c120015e7675f23110506a459cf660",
	    "0000000000000000124374247f8ea953c734245be815574f37bac0cccadd2322",
	    "0000000000000000132534a4afdd22ae0695ab59eaca4941533b109bf8c469ef",
	    "0000000000000000008f1c9dc87c18d50d6aac82934df4d73233acb6c904942a",
	    "00000000000000000605633bbe29340c26d787956291e4d291345d2913a41e0d",
	    "0000000000000000083808a86cc776ce17a74e133f08924a515dc45f478ba0d0",
	    "0000000000000000127ff4d4bd0f517ca7274ecdda9aacda6d8b24d8e4351871",
	    "00000000000000000c1fee1e13173d9711b92459c52459ea74df1a2385f9a1de",
	    "00000000000000000c482304187a611c87f78e3133cbb61199d4d138540ba1a3",
	    "0000000000000000175286e9f6033bceb66f9922354b642ed9fef2ee3f3e1c8e",
	    "0000000000000000060c3a0fffda69b6f4a4a38638365823b5c795b721ebb9af",
	    "000000000000000008d1b2ede0d9a6d7a5b29e0553fd3542ea5eb84218fcd89f",
	    "000000000000000010f2853e8a8af4e21c7c7ce9f9af953a7d836f016c773656",
	    "000000000000000002a34f2ce1a2e1e5bdb748a7eef2316d7e7d7d0fd0365897",
	    "00000000000000000a000a7611ae5e632236d273467df8518421c7252f9d5137",
	    "000000000000000008665edaa39b7704b1feb35ea0b7d84dfcf57239c87757da",
	    "00000000000000000483f300d22427beefadcffb84b8c447f72d361112b1f19f",
	    "0000000000000000101744b0afe6216c9ce35cc22d781283cec67fe3ef81781a",
	    "0000000000000000038836a36181a0990c94cc22b271a554542a58ebea8b7583",
	    "0000000000000000023dbebb7043b0420cb52047e22e48e6f37c2e15cb480733",
	    "000000000000000002fbd4f39da7935beaab8788b24684d534b1ef09e52284ef",
	    "00000000000000000280a67b9a5aa5b8a8618bac5f91ea6e3440c030a47b2ae9",
	    "00000000000000000bbe44ed84ba35c2a7f3e493bed22446a1992a607d8b4197",
	    "000000000000000000974234d6210055b912a1976651c372baaa673578e0c8ec",
	    "0000000000000000147814710b9ab69dd40ebcb6aceddae1b7def40fa18b4d0b",
	    "00000000000000000e85f86a756aabb84c8288f7c56bcd4936840a8623395813",
	    "0000000000000000076e56fead43515d9c08abf424d5dc38ca44e6ffeb7a88c4",
	    "000000000000000008066dd2bba76e7fb6ed025c1d2a26ec248a2705d124e11e",
	    "000000000000000004e1d35a10ddaa60aa60ed27fdd77d0998a6d5c3137158d7",
	    "00000000000000000ab64290f8c2334f77b066cf0a8e298987669937a3c69adb",
	    "00000000000000001a2e0379bfa50bacf682927527b6f04731cc4333d61db6f2",
	    "00000000000000000b5faeaeac8cd0c785fe347d5453ee71cbe1e1c5ddbd4699",
	    "000000000000000018d925c641f9e9b42802c549f89b9b699083ae592367943f",
	    "000000000000000003608556d11d567b0aef289433e9e325506238073c09aeb7",
	    "000000000000000016a275a1ce5ab69bd4a33afc56247173b7de911668c03dc1",
	    "00000000000000001b3b49ff15ae5239b23edb63a050e8dcb37d86a8eec275c6",
	    "00000000000000000ebefb1e815902f2c6ea208730f3cc16e6e0a8b3687cd472",
	    "000000000000000009bdb08af84a830422a81e2862130141026bdcf55accb4a8",
	    "0000000000000000041f4216eeb432d68200727b352d27cde47640b92dea75b2",
	    "000000000000000001559c301d6f3488b2ccf8e36223dafeece8ed90bd7d5b8d",
	    "00000000000000001477b99565ca69832fc41d22b8b9e360ec1c170a5753ab02",
	    "0000000000000000166d67a2d2085cdf5798c76af7c9e374faac54187c230058",
	    "00000000000000001908dabaf3c5de945cf82a597473cc54f80195ffd7f37ddc",
	    "0000000000000000028efda46eac967c0ee8b862aebafafb2bdaafaa8fc9a67d",
	    "000000000000000019963aa4bbae1013171a01c2aceae6b7e537a2f3d906797c",
	    "0000000000000000063d5541625dd34842ff6ffbf0f1d37b9a8ea9bfc4320cc5",
	    "000000000000000005bffad91a0edeef3bd204c60530d601ea393e1be817d70f",
	    "00000000000000000baaef97303bdd9563c98246c721b92fe21ff3ecaf978c16",
	    "00000000000000000237909c5f7bf63ed76b229c275e5f16b99a32cff0d47bbf",
	    "00000000000000000cb9d43a91d213547f8cc70e431f58da7de61700d11e1d48",
	    "000000000000000014120482ee0cdf2a4ecdc0146efa262cc346e2a81e0683f8",
	    "00000000000000000c5ebb85f0631c65371e987a41a6c008e48295cc15060e2c",
	    "00000000000000001428554adfec6515853f5b4badf35fb2e10c9dbb6c527d72",
	    "00000000000000000ff0ac19886e5b4348848de00e0ae0c42525e3979295d1e8",
	    "00000000000000001168c8562c4476756e008b183ce2a0782f302288ab0231c4",
	    "0000000000000000052c5828c18590c0411926236e1a6f59538f821e673992e2",
	    "000000000000000000657614104babe20c0f76066c288c0b849504ea11f7af6e",
	    "000000000000000019d3ae901e6179894ead4d14a8a78e63fbbd164baed30cff",
	    "00000000000000001a32532e37fec77133cc47c4fd5ab3802fe62515b40d764a",
	    "00000000000000000fe3e6f265093af07074b66e22a637aa26656839b8c926c4",
	    "000000000000000012cc7798413c5f8865e82fd4711ddc70482822c7f17c5e89",
	    "0000000000000000004c5013e160b897c0857f2fc6a0287e2132a46a29241b31",
	    "000000000000000008ff9e6494c58aaea446bce8c5eb809ea31893617286ecfe",
	    "00000000000000000af9cc952a6ad2c2fffbe48f636a9d9391bff840d4e83056",
	    "000000000000000018ec669347deaa16fb87b61ed1c0c009154dc61dcdca8dda",
	    "0000000000000000002ecce5a98fe392d6d04b2861787a2a9962d66a9903ca5f",
	    "00000000000000000e88cd774c4ae10bdd8356142622f02b868c77fc24fe27b1",
	    "00000000000000000b80a401786484e3669951c273b30453c8f61f8f481899ad",
	    "000000000000000012904f2aa262b69e75ed0afd7c890203a3388175ebe086f8",
	    "000000000000000015799d6baf0441d15e99755541fbdf1d91dc9bea2f363bee",
	    "000000000000000018e26bdffdc8884d80356fff54639ad349787157b5230573",
	    "00000000000000001321f1a20d51bc819858f103aaaf15544f21c66c6b9bb263",
	    "0000000000000000072f3bebf0d2881560e3ddcf420dca7a01a09db21923fe53",
	    "000000000000000009566188ba5497688f2f70402a78b553fc6cb9ca34b50f60",
	    "0000000000000000101f988b9bfe8285aec5b05093d52f9efc36a540474e1dcf",
	    "000000000000000006ee25cc80ed1303a3516867317685022af56a71d114619f",
	    "000000000000000002f25a17ddec9e55a4f07fb7e5a4ab58a61594f5847327a5",
	    "000000000000000003294781a7f1da9fb7b25f99f245caac3f5aa5944ea6ab7a",
	    "00000000000000000275e6a8c926086b8923d5fc59c15f1e353c79770f06d194",
	    "00000000000000000fa5e5fa505fa718d3ef8c9060f5f5f9620775b4e9c7d91e",
	    "00000000000000001636e7e7db337a19dbcbabb0d2b9355b9835d4107aaf5433",
	    "00000000000000000a8ddb784d6150eb6ee5a6e7ef3c05f74521bec589006737",
	    "000000000000000005116dfd6dbcd728006db4fc720098a92a557f72d4ddd35a",
	    "00000000000000001553b335d729ff70aae23071208902ba229264843699d75b",
	    "0000000000000000023e39ddaecb07dc3433c54836ac7630c23ba91717a1df6f",
	    "00000000000000000ad66b28e6b6b1a95edd1781e6041f0ef7798efb4f446b39",
	    "0000000000000000045a53751985e60b61edfdbed1bab7cd417773863f1f4646",
	    "00000000000000000d83d5f5bb55ffb41ab35fe46bd6cce0d27d9a040ed67ee1",
	    "0000000000000000042a17f4f04fc9c288a4b00133802d84d2ce7f7f3e916758",
	    "00000000000000001712cddf3e9b5c903dbe1d5dd9eb8c49e92a8a8509ad18d5",
	    "000000000000000001a8cc4a90e4ce0316c36e6d12637661e2ca5dcbe4e3f523",
	    "000000000000000005efcc321a3f0daa5b4335c881553f32cf28124d3c3a7e57",
	    "0000000000000000028b388f8d45759752b4ced7818ff15d5f56a558efec81b8",
	    "00000000000000000e9271b07f76de58f4ac2cb55872c4714e347e2362206ce9",
	    "000000000000000004839b86dc2570f9bfc91d4066cd03dde8b120927664b5db",
	    "000000000000000000fc72b69f3f625ee2f7c1b2c63dec2549cc8fb17a1fda1b",
	    "00000000000000001452f3c991469f2668495e7c3dcf9c0abc7ef26b62114d41",
	    "000000000000000019e41eace649f56a1b26269e40009f3bbbbe5614dfdfb917",
	    "00000000000000001229800fb42336ad09b8f1de653d78a7c149c97399fc5f8c",
	    "00000000000000000e9a48b30086c269365e2da8dc53493ee3e284acdbdb7914",
	    "00000000000000000ada48b447d58e6599e0a39314f6b6bb0da7abe81f5ad181",
	    "0000000000000000073681c84868c516721f9c901887bd978411a690c35e0137",
	    "000000000000000002193569986253270415c10906ca823d07fc252db6437466",
	    "0000000000000000165f47a3e5a8c0141259888371bff9bd09fafbeb331d5f98",
	    "0000000000000000079420ccd442e3254192a0f8b9b6a5df15432ece2d7882d7",
	    "000000000000000001a9469cf0d2b0dc6e17a87369b68ef55535a7fb702e8dbe",
	    "0000000000000000027aa82da30058acdba26b31469415cb2e3fb836d7e1176f",
	    "00000000000000000e414c523eb85920a0e79d11f718b21680a9a7dcf6f8ff7f",
	    "000000000000000013661b5146da080589aab6834708bee25ec488d6dacf7be0",
	    "0000000000000000105481b597c31fc74653b0c6960b03c5b9c17fce9e13bf6a",
	    "00000000000000000d5ddaac54f8e3b61738d5178e3f41d9b23f76444063be0a",
	    "000000000000000012d29b953b013e46202fad04cc484be0b2b4a2899a98adfe",
	    "00000000000000000f3f86e284fd45873403a6912bc899cdaf61468e4e3369c8",
	    "000000000000000009e569fa1a8731eccbf15e452092b7542ca00877c07f129a",
	    "00000000000000001a4215af7d12dedc9ccc6650108b05d217288d3d81313714",
	    "00000000000000001571212479be55339aeaab4e39424e97536b97b86c2dad8f",
	    "000000000000000005ae238aa9bd37bf94aae953b5dd6044923b4a61a4c8a89e",
	    "00000000000000000dcecb2e27e34c9196d9813358e11c9222622773226662e3",
	    "00000000000000000fd0e20e53413de725e2dcf4706d9ff1e8f1c4b5b58467a4",
	    "00000000000000000cc59de989fcd594158b4c3e388e276c543016da71e6b0d6",
	    "00000000000000000519c147a18703b396fbc1cd397c0cc38c6f051f5584f2aa",
	    "000000000000000007f29c6c9870ab95b54cd88ac53f96631339d53665cf43ec",
	    "0000000000000000161881ecf042a8fda671eb966f78690582fb9a6b55e6d941",
	    "000000000000000012b9a0053daa5015ffb67e853a684c9f1610fa9449b76631",
	    "00000000000000000eb7679dfc2d3ef488e02999248116d99f1ba366829c4dd4",
	    "000000000000000015a57e8c9012cb21294f0a2a04ff65d7d8a9e2802f2acc45",
	    "00000000000000000071b933f2b0cc845e7ebd7cc99338c82b795b264d5fabcb",
	    "0000000000000000183d01688f217cb0902b524422fed0d64de4a2436338841d",
	    "000000000000000013675dbc793e1a21aa700b1e84654665f942e7dad80db5ea",
	    "00000000000000000969d51456e7069855c86137edc6f8d8fd101ff19c643ee4",
	    "00000000000000000444a632df50646378e378d51299f8d0c4c97398fa78a8ca",
	    "000000000000000015ad371640da7818b7b859501c7236d7b6ba51f140d77753",
	    "0000000000000000173e36eb15b51e63cf5df5a85dbbf76b3bbed3f742735936",
	    "00000000000000000de48663c40bbfb54defd1619cc31120f6cfcc0c0d63bcfa",
	    "000000000000000000dfef22eed8fae22195709aec472ab88228c44a1794f3f8",
	    "00000000000000000ebab027661570b7881bc2718b35d00d0ba9a7c9eea00a58",
	    "00000000000000000f2f71296fab8ffbdd91b4678e87245c6d10afbd114377e6",
	    "000000000000000007ecb6e897b512134dad930fa9298b706bf21042c65d34b2",
	    "000000000000000015f4d3109b79b64a7c4e51bea750ed6907cd16ae1a193ea5",
	    "000000000000000003bb647d11c7ccc102e83b69858fa0d2d04d0f757eaad9aa",
	    "000000000000000018b9f08a4afbc45b4b8a70d9693ee1b876b012a8d5df3173",
	    "000000000000000014817ed57093756b4e83673ea8f17a4b14c7c1551b35e8f2",
	    "000000000000000007e538974d4947e3928dc40b0794656a1873636f8254d44d",
	    "0000000000000000121270ddf035eb6421af0dd8d2a7ad5ff85fc7b86e30b8a9",
	    "000000000000000013e5308bb102afb4736535201fea23686c98a80c5a1871db",
	    "0000000000000000162bebecfba1a0b9da7a6dcca3c17a7e36ad384fe1f8f5c2",
	    "0000000000000000025789442b346ec44b1ddce6c4848ff9b9d52762f1efcca9",
	    "000000000000000004cc83c61faad548ab5cd8b91b2ec11ba0979e4525aaf108",
	    "0000000000000000166297dbbe5ab8f406a737b2dc9aa02d9c3521ffb761f564",
	    "0000000000000000126fb8393487d7b51888991b1765fad366c88d0057a1f5b6",
	    "00000000000000001912d696defd8cd882a2204c66b1598a8e297b8c99a5b65d",
	    "000000000000000001823bfa195d5bdbdcdc5defc981956ce3e642ade8865e31",
	    "00000000000000001b0516f32a31d82ed7d2dc7dab3dae5a07cf7ce671e601a2",
	    "000000000000000017f1866fb3f82534348285c76e21f92128793eb8c2af9238",
	    "0000000000000000055eee9c5c6e20f2737d186b82cf70f961c46310b324f417",
	    "00000000000000000f663d648e9bb03c4de70549d4f2871726be9ed96e13ebe6",
	    "00000000000000001880fd186ca473976cadec502404cfc7a2a95fd5211f6151",
	    "000000000000000000c34bfaf8d9930cabb501f78b735b1278fb60ebb7f7bdd9",
	    "000000000000000006f6074c5d9ccbd058bdc45b6f05f62578250a68e74c1464",
	    "0000000000000000168861bb2ba5653e02472a2e6e2e6bc12f6804362445ae9c",
	    "00000000000000000ac9fbe34d17ef8e536ad2d4838c56022a27bae08bf0feaa",
	    "000000000000000010cd8da140c5fcdc9e8cb9e2b0e68cc81fd26232d98a62da",
	    "00000000000000001964dc2573240f8b180e9867f7d1731851d1043e33d7e990",
	    "00000000000000001494c37ac93e16608abc13dd62d31f411a5e797555fa7156",
	    "000000000000000009a41fb217cb601da2bce51ed3521b37b5bfbc6520d775e6",
	    "00000000000000000d6d70500b874734368c76b7fd2eaacf4d5e1f5137ae92b7",
	    "00000000000000000996c3c0046f4c05b36d0da522282e61ffedaaf423bdb954",
	    "000000000000000019a5262e5615c5c289269ad7fad4007450634dbbbbf4759c",
	    "0000000000000000085e34a8b94402da578ee48b34de0d2143321e7ff6b01035",
	    "00000000000000000a1ae96f83dd0803ca7aba1c3e8b3ee75791c29571ddd85c",
	    "000000000000000012c11c55476d405f2727c5b9468a19e57881adf91e8ec8e8",
	    "00000000000000001ac9586138e94065401307f76ddad8eb0bbaf47c5b51c206",
	    "000000000000000009eab0f5de193a4696c8d2396469bdd75f427a65df9d0b0b",
	    "00000000000000000ce82968259012038e503448de71c5b6493183f175121d2f",
	    "00000000000000001afab496e6cb9f7a739a461eeec7ec83039e1b67c66affd1",
	    "000000000000000002bd325b4890a5f9427cb14a9605f984db02ec96a5497da3",
	    "0000000000000000087a249d5dacf82b0c1a06b09c781df1898043c39241d03a",
	    "00000000000000000cc9ba887c18cb32a0309381f4cf4b2c3f80c3968f504971",
	    "000000000000000019d597113e76e5ea16fcab1f12ae94672db9ed1948c046d5",
	    "00000000000000000a215763beb32009327e04e6e7f652f9fd5285452a7586f5",
	    "000000000000000013ba4cb92fc26253b970b72fd6d554e0eb2fb5371a1a2a1b",
	    "000000000000000007e4b711b0a4f1b3f77a45fe3ade8edc4cf600ddc7740cbb",
	    "00000000000000000e9fc635fdd0636c1e91ffeee7256a8a48566f85af7ec07e",
	    "0000000000000000043208a7f8c5351dd3e21552c88b8d86624e654b5eb6c11c",
	    "000000000000000008161c9bdaaef73ec48bdaf86a277b39db26ed2b94ec5859",
	    "00000000000000000759fad633ac7d73ea4c27b9fd004189ca0606e01e8ea9c4",
	    "000000000000000011f309f999c8e86ead1fd8ffc98c0982fc6ecfaaa5ee8cd9",
	    "0000000000000000134dd8422885052e80bf6bc2e343e019d30e911c22bfda74",
	    "00000000000000000ac3b0ca58b9aadcc09e3f65da15cbeeaa8dc9baae14beb7",
	    "000000000000000016f4494400b0082c6a6415038dedc4ac5d01f91f920c5dc8",
	    "00000000000000000b72516d1db578e28995e2347a64aa765a0e9ffc6781cfaf",
	    "000000000000000017c741cfda0c67cb6a3bfe8f61b2ea5204e6433366fa6208",
	    "00000000000000001a8505541133647a21e5987b71a83158017248bbfc1c34d8",
	    "000000000000000008fe346060891d82916a8efed7c879cfaacff1e0a6325c82",
	    "000000000000000004c18ee78d74ec168611b958ab180e47b2340c5ba576f099",
	    "00000000000000000fbb3990dedbdc26b18e65a892034cc5ed78881988c9da5b",
	    "0000000000000000163a6140a1f44b2a57ed2c74bc80cfe3116edce0868bdbda",
	    "0000000000000000085764e72d36eda1a1320806d09000531a528535ccbcaad4",
	    "0000000000000000177e78336482934c0f6826510464c5405490db118300dfab",
	    "000000000000000003652387abeb48b8042d02693461975407adf0cabc861b70",
	    "00000000000000001090b0b04d6ac6a703a5995320a88f511138747a4e259ba4",
	    "000000000000000000539b69399a6630e866e9fe6a5c2bc5a4ec3645a0cbf24e",
	    "0000000000000000129a959f7e06f2d78b385f3622ec995abddbf00dd2af8e64",
	    "000000000000000004bfbc207324262e7dd00f857cdfa08072a4dd793190eea1",
	    "000000000000000003e5307111e8558ef0097ec29905d382241270e91d745c8f",
	    "00000000000000001ae87ef1719ddcd586af31e9c3921b7167502fd557fd65cf",
	    "000000000000000000f3606a79f9f634671a69e57f209e3453a37766f0059ee7",
	    "000000000000000016fda0818c06c9422a3614299865243a4dcb990c21c212e1",
	    "00000000000000001279667416eee4bd5bc6703b7c9678ede30dcd383ffe0a50",
	    "0000000000000000125f93abeed15ff9471f2eb1791a16b0f87fe6e19490cd37",
	    "000000000000000009a4494127d07029b082c27bdb7ed6076acddaac083642b7",
	    "000000000000000018907e5f13a37b22dafa0392564b6cf4ed580dfd2ef193f7",
	    "000000000000000004c9c8c641ed1890a783c2bcddaef3824993845195bc96bc",
	    "0000000000000000087d49579c0b7a417ea13195423cf5da56524dbdcdd47b55",
	    "000000000000000012742ff5b259440c8c76a4cad862a3435b8990935b414f46",
	    "0000000000000000038ba2ecb46c02672582cdfe74e3d6a4bfcf1097e251f73e",
	    "0000000000000000189a6d0d46b0364748c4c2249ba4a3cbb45db99abcbfd2a9",
	    "00000000000000001891a0cecc1150bbfc50a5f4f2aed689713386dc8a00fe54",
	    "000000000000000019ec82d66756b02b3fd228a74d94db3adea033e33d22f690",
	    "00000000000000001bac5cbcc1964526a9ea7914fc7f087e94e386c951cfea2e",
	    "00000000000000000304e9b3c4efad1995c87ff795c3a790d2dfad431c8d6e34",
	    "000000000000000010c5bd9ff54dc2a806e100d0416bf8cb870258a7135af635",
	    "00000000000000001abdad1edf5028fbabdfc758406b3796a645be19d9eb2343",
	    "0000000000000000114249e696f109d08a67b3008f66f9aee0968a3c547b2fb8",
	    "00000000000000001286a3335caabf58adb83a04ffc6d1894bf55e8055d5eeb9",
	    "00000000000000000bfc98a3494148ad94c8f988df408aec11d47073910cb895",
	    "0000000000000000056f3a7c26ed8fa143877c25c212ae00075e229bdf4adb88",
	    "000000000000000012b3a34d21a4fccd728813dddfc17b593c0ce749b7c74f04",
	    "000000000000000018f90925a38bfd8ffb9a58acebe6f5bf00ba14f456fcd138",
	    "0000000000000000085e02a8d441f131f9b1d752f135982af1e95a386863073e",
	    "000000000000000007f5dc18964cde486496b1937b290a06754a9b8f46a0b323",
	    "00000000000000000a765980cec9d2a95eeee1ea33afa83002027a3934ce9abb",
	    "0000000000000000123d480c41514b260d63830c481c51f91fb7771e082f5b77",
	    "000000000000000019ead9ae4e56981d636b77a67b9997febbc5052aa11df6cb",
	    "00000000000000000cbfd4b7e2b3402b477043efe6ea33fa6c371184e296a99c",
	    "000000000000000012d48bc6e7e152989d7574442e664d25da8bf2bf1997c647",
	    "00000000000000000934614d7382e21ed7a44499b04bcd55a08340da9fd3ecf6",
	    "00000000000000001aae8c0e07aadb245c1cd7158da23eb495000fb497f77465",
	    "00000000000000000135e33fa6a0cc6de9ff3991767aeb7ee059f4788563d39f",
	    "00000000000000000c4a7b82526930bdcdfcb281b5df8b853d6799ef08de2212",
	    "0000000000000000002d8e75adc5fc330c9f6adf6355ab3b08b6bfd01454cbb9",
	    "000000000000000006148bf5b473218a0e33ad2b04e68aee730dc6a346661662",
	    "0000000000000000124226aab0553c1d4bd7ebd790b17fb2a503b6a1190c3863",
	    "0000000000000000080ac5f6ed0ce13aaf9f0d6c6b9db65c6a87ef16593d0a7e",
	    "00000000000000000344d3072ea353cbae50548d0ef8a3e2357f35fc5fc6e7e5",
	    "000000000000000007eed47b02256c1602447785ffd4107203a8a3986bce8b47",
	    "000000000000000004cbbc8d7e0dbe4bc1736ebc6eaab0a6216137febf6e283b",
	    "00000000000000001984609b45ec5756e3418c2ae3bd59044a7d94b1c86e98c8",
	    "00000000000000000edfa00c7c8b8d2b4d5c8b0681ee52170d8ed3f55309ffbd",
	    "000000000000000019aa843b8f4cbe4cd5e4bb976156731746df0885d85fb512",
	    "0000000000000000146d7e4dbd79eee20d92f647cd93d5d97fcc996f6eb785be",
	    "0000000000000000184bf58d055f4203163e32ccf8c074909e2a0a085626721d",
	    "0000000000000000165b4761ff3897f69551eb5abe4f02babfcd5fd334c69b67",
	    "00000000000000000f6e2c9b38a350b5774eebdf842b150c8a9c0172aa470390",
	    "00000000000000000bc0891743a10f82d9465d440da5e6344a6caa5abed405ac",
	    "000000000000000005213ba1f7e617ee3122e98f48a6f32e02691855eafb0e9f",
	    "00000000000000000e1e16244a7918f87abe3a05eccd596efa822e3352b1dfde",
	    "0000000000000000000bcebf8f3265923a60aa05e3a42e41c210c135d7a0216b",
	    "00000000000000001580f98d81a2f3cea8cd516843b52e4dfeeb881c96da73cc",
	    "0000000000000000076a3de2e8f73db47e0d51dbfc0ca3d0d6a6754731513fa9",
	    "000000000000000000b96a4f0de960dc254bb82a47ea26223ad091702a237343",
	    "00000000000000000b791b470a1d7b18a1aff22ca9e41ad057da77a89921d237",
	    "000000000000000013596b1a04d514689b5d83b86dddc2c2841ebaa40692f554",
	    "0000000000000000022becfc1fa0749f3211868a2092b6455433013875e6c20b",
	    "00000000000000000df3fe435278a59074d930a1b3a921fccfb6a3c4c5a64df2",
	    "00000000000000000307f10927e592ad7a9f69842a295e6674cb79d0e68ee092",
	    "0000000000000000094c957bd880fb83d91839c7794c44848c4b2a0e9252e8e8",
	    "000000000000000013be85f4815d62a9403b80545010591265a33884845b8dd2",
	    "00000000000000001626f32b230dbebccd680ba136727986e7aa1646860413ce",
	    "00000000000000000c976b660c6397153e312fa047ceb24f4639fdd04a4b241b",
	    "000000000000000009283f0976c1a883e7768523df9fa9bb61a32a868f90ce86",
	    "000000000000000010e2b2349baada443111f75ce78719ae0dd9478009732323",
	    "000000000000000009bfca5a27f95c6212923139b0f43888d8581f49b3542fd4",
	    "000000000000000017bb88d936d1ec1ed87482fc40da9b6340248ce249e7911d",
	    "0000000000000000024d52c17cd7212926e01e20a6513a6bf54b41f3dba0d187",
	    "00000000000000000d71f8657f09267d0944766aeb89ad56991240d2dc5e1c43",
	    "00000000000000000be935fa56119da5a21a9997d4ca1ef884d83e290c4ccbe8",
	    "00000000000000000b4587af76f4d454e0336e5233dfb1c940a1140df6108475",
	    "000000000000000005411b501208ed9daa766652593014c9495b75ab91934a88",
	    "00000000000000000e208aabc3b4626309057b8d6e537b4f59450df6461368c3",
	    "0000000000000000151cefc413c6fcf273b70ea55c6b24b287f27855c4e21bbf",
	    "0000000000000000146ab88f50fa6853367e670e63b3a4210f0d775179d44e66",
	    "000000000000000012db7c9a2bbe391b0ae1fa94a0ca9df0a86a049641011e86",
	    "0000000000000000151f49d2c265d65e44d1fc165d499f83ba2fc8a6d62f4fdf",
	    "00000000000000001a8b749457090c2228ec6a6628309b911415fd2450c965c1",
	    "00000000000000000bd00463bdd93c0586870f8d70bbeb4bfb990a5c403c0178",
	    "00000000000000000b3450074790965dc84a93f8bf9cd3807606388290a22dfc",
	    "000000000000000004fd1cf43e9ee57969576638fbc43377a4c9d4122e4d810b",
	    "00000000000000000a510c67ceeca4662f1d9ba79737bfc83c6ffd77fb95bab1",
	    "00000000000000000f32237197e7517509a83e16895dfa84e9825a117aa9ca84",
	    "00000000000000001174690a0104bda13de9ef74ed4a86d800b1f00adca6756b",
	    "000000000000000018b06ec167b4ad799cff83670ea9e6157bb66cb1838460b4",
	    "00000000000000000ab62d34ca1a043f78fecb272510c2514c14b03e85e955da",
	    "00000000000000001734d1f5cf2c3404c01162b1ab9116ee2a02f867822cfe28",
	    "000000000000000003fb2e1c3f0d8781cfd4e977cf580f719397e8ced4bf53ac",
	    "00000000000000000f54e73d7e3a3b8b651208b1ee601669b2de7f27e4ace0ab",
	    "000000000000000018150b2d18cd3f23b69f45397283a97f6d2c96fa4c3e6aee",
	    "000000000000000004fb9fbbcf6c2255352d608d3bed3dc2b8e5b8bd71ec6c53",
	    "0000000000000000160841094b9df1c2e519b733cc3da7ec7ee014a17db85b7b",
	    "0000000000000000015f8fb55d98f345c3c9f52b9cbc3251ed3952e74a6e6000",
	    "00000000000000000dc7152617f7fd0e4ff352d4d262bb66ec14e1e29704f015",
	    "00000000000000000cd27638142fe7e99c86f9d005093ed94587e3708dcd3787",
	    "000000000000000009090c46bb595601fae7c45c8d5753c9a7fb48ee7256bf77",
	    "000000000000000018d0b78e047194cb6118a395db1dd59bcc1387f497d862cd",
	    "00000000000000000fafd12fe19c61b561c38b5986f1c39eea99ba4712a63ef1",
	    "000000000000000018a4e9277fef7096c9f6b8ffad575ef8d44d7bdeb205aa61",
	    "0000000000000000068d68197abd1a2c127921f4d3e48a271315c9aac0196311",
	    "000000000000000010dc5e2e9e501ef2c90a2e0319e86f1e86312b01abde25cb",
	    "00000000000000000e0656ff9dadd37f301f7bb95ce437bb36fd6c41bb1cd1fe",
	    "000000000000000015d488c2929d5828b13ee76e73a0ce6aea747ad2d0429b5b",
	    "000000000000000011892514cff9f14bf6152bc909f4194a8e13feef03b7c262",
	    "00000000000000000674a32ce136f4d782b1c832a180fffcdacecbc798dfd963",
	    "00000000000000000175a218c1dd72b11aaf49567e5771fb564c339073973db0",
	    "0000000000000000084d4d34ef84c01df7886f88f26ba6ac69372c1760f52ed8",
	    "00000000000000000abbd037c34429bd85f6b2666faf378395cb30fcb147e02d",
	    "000000000000000016cb66453db7adf2b143836d4d28a0d90431722a45d5335e",
	    "0000000000000000044679c6f80c303b6276d0ba9063c3a24ca02d32635374f7",
	    "000000000000000005d98d0dc0eb4bf9a442bb529f9b64724d46198a4aa1c603",
	    "0000000000000000042080088a2677314101cf3b507f866b6ca8bb4aa4c34da5",
	    "0000000000000000149ca71550edf9a7b353f540c13acdb7b3d95a5e4c2e3d04",
	    "000000000000000014d903d632631478bc82f02e0a2a0bcc75166c9906e9583c",
	    "00000000000000000ad6c903da97e3ff274fe832165801f37abdf56772872768",
	    "00000000000000000f8d8bb56ae2c78c4eaa7ef5b924d31c8beafcfc34a9974c",
	    "00000000000000000e48edb11f4bef6f49d201c5ac6e3823bcd419e1d8a84e73",
	    "000000000000000005e2c4214a1cc815c9120bd29f0e49d1e83ae0ff3c5a0844",
	    "00000000000000000d162ee8e0668f3a94dacb961b8342d419b1e90b092b7497",
	    "0000000000000000124ad32b035848e8170f543fa3349a2e4827140ae09d5404",
	    "0000000000000000123f94bdb90c6e25ce68aec2a6cca7d79d3204f848ea792c",
	    "000000000000000016046cd341fb00e41dc1e9bab64e64b64a63d329acbf645c",
	    "00000000000000000753666f40d83467a5bafe5ddbd4f7d36755938887133b11",
	    "000000000000000010a3d127eae74116929df71fda492939b882ceeabfb63703",
	    "000000000000000018acfd7334b623fd5378e4437b2db10a723cbbe18d6dfd02",
	    "000000000000000007c90b4c9c96f7e0de2db9ee23793f4d4d3771e26a1ab9d0",
	    "0000000000000000176e75bd90c95bb12a255eeb2464bb74134613e00c7245b7",
	    "0000000000000000123852a6fd232e29c6a4cbec49f9e058105e1525f62fff8f",
	    "00000000000000000e106010a4c9ef3ae4d5937a1da4c22822773164be511945",
	    "0000000000000000126c45c5fbeaf6191d351386170a975876ce7204fc44b409",
	    "00000000000000000dd6b5d20890361dfeb160667e0bcf021125a23e4ea833a2",
	    "00000000000000000ba0661db824374c88bcb52a7607877b726b0fea113faa21",
	    "000000000000000005a6f9625aa7bee3e517c54f2ebcc513900d5afac1a01771",
	    "0000000000000000133d1f933c5b83d8fba602e429336deb52f8ed220fe7bd8b",
	    "00000000000000000be0dbbf13238e3ef9c38c93b08a77ba8df2e5d4294581f8",
	    "000000000000000011c50d9f18075c3f029d64bb1400b0a722b41b970d9bdf23",
	    "00000000000000000510ac4fada7df5b4caced1aa012072d13442ac89fe11d6d",
	    "0000000000000000026500f71cc3639cd20147ac0292a0dd20f37458ed6577ec",
	    "00000000000000000d94b9cc2193c88a69310ae7b49569808ea7533dcdbdead3",
	    "000000000000000019765149cfbc3f3c3a324419a750d40943b47087fb66dc13",
	    "000000000000000014825c77eac00acee6a3e6ea1879dc3a3b09b365861f5572",
	    "0000000000000000187a17e94204fc9834281393998513ea46a6ae04c3327ec2",
	    "000000000000000015838f4680c941f342e89d31dbc7189bb10ef73bef938121",
	    "00000000000000001297bf3060f4f23eff29de9fcec6905911ea84bec3f4d92f",
	    "0000000000000000102fd3783ac66a179fedea99fea25d91cdec7c855f2fb1c2",
	    "000000000000000008dc763c6dd0918c622395f04fc9f7770ccdce1ee84b0a0e",
	    "000000000000000015369232df427c78eb7b0eca51d01554d13804c7452d6f38",
	    "0000000000000000183288c147c6cfc583fa632b596cc16ce00d68826dbc41f3",
	    "00000000000000000e3050fec6daf3c51dad2b588dea52c4a89ae5c42e6df6c5",
	    "0000000000000000152c6dda073a57d2dfa47e04e3a204d49e44205af2ba0738",
	    "000000000000000019637dc51444a9769ff7ac81efd91707fbaf1356c5b1881e",
	    "00000000000000000879816828333cdd8841a7d4586b698ddfc2acd7b2063e60",
	    "00000000000000000829f0d3cd85a51fe0ccdbb16c5cab6856bf250f52620888",
	    "00000000000000000a8c3108dda749198b59118f42c6ba87a4f382fe2a97fc99",
	    "000000000000000000c8bc32958cee79a1f15eeed345155cec976c80a6f32b22",
	    "00000000000000000bd9dede2707b532a4fde0a7e30344cdca08bf620c846e1a",
	    "00000000000000000694330d68db03947271fbfb874d95a96ca9c276fbc3f7c2",
	    "0000000000000000026276f21e35887f8c1d77bbac7e0f14463962700be5c2b6",
	    "00000000000000001787579e9caed6c595decf8c08bb4c44c873bdc787877e75",
	    "0000000000000000183ef1a4f0815181eccb0a1eeb6142e7606f7fb690eb3c72",
	    "00000000000000000f4dcbf3ff61819966a1f8a7aff70e3c03ea9f3f2e0367a5",
	    "00000000000000000dee62c4011183cbc78e257ea1aae7e2e52decb1516308d5",
	    "000000000000000009d656c53d500f39dae7b59604c8bb7af8399edc0d0baf41",
	    "000000000000000016403f18aab9dd1bf7a6c171c401c8321d7bee0c32383db0",
	    "0000000000000000153f30264a92d164eb34768806c940f3a98cac85721699cd",
	    "000000000000000007708ee042ec68a0e3595b70dbcaa4e598c566da5d590fdb",
	    "0000000000000000114681dbd2523b7fe1bd6e9189c02208fb76be75345958ba",
	    "00000000000000000a854138f44e767373d1302c67bf11ab0890a72d9b8d1ee0",
	    "00000000000000000a587de27387c0b60871f469794451f2b08b2a13fc008598",
	    "00000000000000000f3d0feab87dbb6967c29d4b2563b83cf7dec10168b72fb5",
	    "00000000000000000869e9b98cb91c89dc51a7d70e021057f4561c331de451bc",
	    "00000000000000000251e518e13ea8f6b6e6f75b8efb7c8fa5237567e869f7a8",
	    "000000000000000001fe7ab77a28c15fd8a08577840084eab97672ff4246a9b8",
	    "00000000000000000f4527d0540807730f7c98a9181f529fe590fc0011909403",
	    "000000000000000001ff16009b26c90f007a4a1045a489b90863ca58e7fcda5d",
	    "00000000000000000dff08ec279d4b69c4021acff6d17e87f915ab804a540e38",
	    "000000000000000005d99ff30bb9fd56a8ecf52d9e5001695b8289fd9f54821f",
	    "00000000000000000212b8d6dd176ca42a6403291328433e28e557402832a400",
	    "000000000000000018a8bc458a67aae5092de30bfc1c003e8aed069fe6a351c4",
	    "00000000000000000f61a7955015a71fbad63b72bc531e8d990bd75f5950bd51",
	    "0000000000000000024d6b1c886246eb502a7f27460ca502f0452003c3d813f1",
	    "000000000000000019c715d8e86f153a7d4a71c5a7101f620042e2c796fdaf86",
	    "00000000000000000799165123d8f34791234209c66f0652ddd37eb5ac73c1c4",
	    "000000000000000013e977e339179c11e18067d1a01a28f15f4cf75416c2ca7d",
	    "000000000000000011f035b55115e00ce4b009ebe7020e46144a4954dc20cd04",
	    "000000000000000003fbc46167b2067599584ca7ffd0a2d1ce84ffce0808b19f",
	    "00000000000000000b2558f0a5f9bb06ce7a6a3b927c81b6566f9f3232f81b4b",
	    "00000000000000000a40e74a0832b61b91c54f3d9a7e4349a91ea9a7ce23235a",
	    "0000000000000000062ba80d63af54e7cc699dfacf89aa18750c4e12417eed6c",
	    "00000000000000000101fc475000753486c060fa0c719139c20deb869a041f52",
	    "0000000000000000153136029b658c25345a4a679772d879e90915fa2a55b540",
	    "000000000000000015f34643b876e5a06efdd7f2e3b545bc1105c91272d3f324",
	    "000000000000000010a0711043ae24c0abf68370ae85909a5c23aaad758b28e5",
	    "000000000000000003b383d6c6c0f51c52ce61189f0b7b814e4499d511dcbe9f",
	    "0000000000000000045f98ad68d1b1400a5b56066a3c67ec90905a23ec757fb4",
	    "000000000000000007bd193e702de9c6e089c1f41e5ba39e2ba76471fc79bf79",
	    "000000000000000013c9e8a11204cbf93d84761249fef979a938340e3676ff04",
	    "0000000000000000090e24a10e7fec261056908beb2d8cfb014afeff1777c6df",
	    "00000000000000000ad22d514055c126d1d81def3dd2985b1200e850889c554e",
	    "00000000000000000efd4743c663c9b7d8597ca87c2e3b6ce574c82c74d5082d",
	    "00000000000000001638b5e090860ceb2ee708a05bfa5f24deeafc02afb7ed6e",
	    "0000000000000000143a5c5297ea6a5c44e2bf4d89d97542f212248c7554fa3a",
	    "00000000000000001614d124e064b350b1d06e9aa607aca0668a452e74c61955",
	    "000000000000000003273dd9c25294370534ef9e38f2dd175d1d7eba26a99883",
	    "000000000000000003c4115e29ac465f134fc48f15b00fe822a883e4a087d896",
	    "0000000000000000069b94db6c9f739ff848397082cf78dcc7aad8bca655aa1f",
	    "000000000000000010609266732d421736df99c0bbd05f05714966b4ea5003db",
	    "0000000000000000001c1f40f01ad284430afd247520d0758cc1be193de33733",
	    "000000000000000012cb3f69855c6a7e5f3301b145d7aecb039f050cd4c50b18",
	    "00000000000000000d0a8606eed56dbe6a1892ee977f93bec6173480965bd418",
	    "000000000000000001982e0002a73e510fe265f367c713b019408901b7a75151",
	    "00000000000000000f00b12ab56383f339702db5b50c497e07663d262f466753",
	    "00000000000000000c3abe8fd1a6acd6106ddf5e7a7bc5a8bd1aa033069b9fd9",
	    "000000000000000016b6444e463c7d92da1579360c5f71d4fbd3dab45d13990a",
	    "000000000000000000ffb7a576b7aa5236c53f51ec07ccf174067beed3398056",
	    "00000000000000000e4aa5d4c89c276321f1480af6584c51a0512fcd483df3cf",
	    "0000000000000000125e077e83d3c1a6b6ce082d1848714bd5dad056fc6f66d8",
	    "00000000000000000b2b0f68fe63e0b7f23c5c20dba60b11a5f237f67d5e24d1",
	    "00000000000000000fe958a4fb8cec0fc3637c66a633fabda553c416ae76ba10",
	    "00000000000000000a58db3287fd177283b52d6cc00e63e2f232f09ba7b3e6b5",
	    "000000000000000015ae4a5ee9030f86326f058063c0e3bf39660ea1a1de0a7e",
	    "00000000000000000b2e4c1975f6c5c989f86bcfa180ff9779f58aa299b9a747",
	    "00000000000000000c0691387b7ad45b6bad2f2eea05f346881e4bac2967293c",
	    "0000000000000000071922c94584f449713c229635fa92aaba1087cfa8a8d0f8",
	    "000000000000000011cd801073b1b2d2c9125dd5db7ac4f3ddd933e581b97369",
	    "0000000000000000099c2739ca5fa2c100e469602679b6fa13f85310dcb5acff",
	    "00000000000000000f0a1ff988ba9d4992c53acf4a210bf17d5d3c9a785a1e95",
	    "00000000000000000371a90775d895e83d1eb63ba83672d90980841320fb9ec5",
	    "000000000000000006caf56d0d56ddba81987c70461bf42762c98944fb16453e",
	    "00000000000000000511f6df1e4631ce30e238b496796e860e3551d63e2d11df",
	    "000000000000000006b426c1860d19a796675af0cf745807da3cc9fcae2ce237",
	    "000000000000000008393f83980956e53bfd01e82973211be295fd6c84d2961b",
	    "0000000000000000100c68d36a0a223e1ff57e1eaba1fc2900ac3da18f4ade8b",
	    "000000000000000005ab9105c73eb7e8f9ded4a4ebaa98342d50c39621ff1a78",
	    "00000000000000000de7ee85189b468e0e0c391adc0dd3131297ccfd663673ac",
	    "000000000000000004c5a74429a34cb051d1512b9a02dd2139cba605eafc0dcf",
	    "00000000000000000049d944337a9751711aa991584b54b78746ba1536c6f3ea",
	    "000000000000000007c8a20a0cecc203a00d671ba211864993f833cfdf4a58f4",
	    "000000000000000011216825d6820abecd252c39b2d6d339e46a0e000171cd16",
	    "000000000000000002d4acee6b7e93b982c2af56ca7ca237bb420a647e13a5be",
	    "00000000000000000f9d4f0716a1739fe2b996229ebf1ab8bfccce295956b4b5",
	    "0000000000000000000654b4143e68289e3724457a9e00284d98404b65cc8017",
	    "00000000000000000c62e54cc3b6ddee88ca6769c9afe8c69b23904d3ffcf08f",
	    "00000000000000001158cc0e43e7a292b6dc6ece3a07e62d02662592719fddef",
	    "00000000000000000d9e493fbdf4c49a3f45d748a82254b0eb4cbd549c79fe52",
	    "000000000000000013c41e96b82f9adad96da89e600d19bafcfc9883ec454670",
	    "0000000000000000177e6a367a06187b344860630fe36a14fb099b26c0214567",
	    "0000000000000000002b58af013921bcbeca8aedd610ed8c11a3e73fc457feea",
	    "0000000000000000103633f7e814d31154990bfca291f3788bf00b9e56f0ad7e",
	    "00000000000000001588db4b41a254819a096051201aef9621bd7c3aa3eb1ba8",
	    "0000000000000000071af937d8950ff2e9a1d9f19e4381066b4cc4f6cc51dd1a",
	    "00000000000000000b346b775874f2a8c6a44bc3c60c11517f748ca3117a7fcb",
	    "0000000000000000035603ab3cf8d2283edf27459d02943dff7cfa96204f1fc0",
	    "0000000000000000056f9721ab6430251c883e7e90eb86695a00375a8842016e",
	    "0000000000000000178e8ade81280fe1f9d83d99c7aea77b91f14d3be512dc78",
	    "000000000000000011a19233a659e34a75371ea93ff4bf9a8fcfa1b1843fa034",
	    "0000000000000000051d33aa590fd2820995b1ec160f44adb04b51ff9696a177",
	    "00000000000000000c71cbf53cdd4230e5230521b684b7451a46013be383e3e9",
	    "000000000000000000020fc1ca1268a27de8646059ae2bcca61d13d16890b5db",
	    "0000000000000000055f7fbf85d6a5b4a6b14556f93b2f9bcffdb0aa91461a44",
	    "00000000000000000d9df941d487826af967420b7150849505d6ed94fef8e1d3",
	    "00000000000000000dbd03cee6609de7b9b0f1a3be730c8763e3f1e66b168fc7",
	    "00000000000000000f62863bcfd19e7d02630d74dd95ee1cd8f725a1a96950f3",
	    "000000000000000007704c310d205d154be4d4c4c31e678aa1db2b12e92b024c",
	    "000000000000000016f12d8ff1ff39d4dc60eb5827669d0dba7ccdba45f7aeff",
	    "00000000000000000a161c535c5ea404d1c251f6c9d54c78384c423e359c9c56",
	    "0000000000000000086243895e03fd8fc49a5d4594aa974a67ac1a008e4f83cc",
	    "000000000000000004d9b370834ab49b6bc40e9efd4376f70ea35426793b1ae0",
	    "000000000000000008253d012c5f283b3e45ecd690245925e42930c3de6b9924",
	    "00000000000000001338d0e4b62ca18de27a0fabf3a95c71baec7088fa96de4b",
	    "000000000000000003b11b115ea3e0b7203779b9ceba1c2a5b573abebe39f655",
	    "0000000000000000086de1824a1b6a83c3f9a6fd11835c76bb883b812965b383",
	    "0000000000000000056596839710c4f4ddd39725bc66de2296b07bc1c355889c",
	    "00000000000000000188e41ccc07c309b3b0878b915dc59899dc1e18439b2fb4",
	    "00000000000000001520f7c0fd30cd69e846e7db00383307240567ccf0f02ac6",
	    "00000000000000000fd56052c5dca44ad20b2bc90e641224f5328d9aed9613c1",
	    "000000000000000017b1839d743b80d4764990208a31109472c6ca3e0ca92a42",
	    "000000000000000003c57dd274f3bbb044dcc76356effc2a0eeb4c55ef4ba3fd",
	    "0000000000000000050c56e2b66dbc9d69bf1b4a6a1f00b7ac866ba96b7c40ec",
	    "000000000000000010fd1d0aea323de2655157057524252a84de30b6ec0de4ba",
	    "000000000000000014cbfae8a0a96d76ebaab49f296eb7045ca2dab2c73b8ab4",
	    "0000000000000000051b547d76d05f1482eeb851accd05e67c4745b21d9a71de",
	    "00000000000000000d650969e1130e17e3c8244d5dd66c4d5e78eb5eb014daf4",
	    "0000000000000000184926ab5d8c2458f20fd16bcd0292e28b6aff02feafb050",
	    "000000000000000014a8a0d36f5e67673dff3441ac853ef923264d5cced8186b",
	    "000000000000000012b3e126ac94c9a1f8548dcb38e9ef2ee21682b98f059ea9",
	    "0000000000000000153bbc228db884a06db6f3919ea31f77a056ecb5febd88b0",
	    "000000000000000012874bc180a2318ac6298c8a1fbdb2b04454c85172509adf",
	    "00000000000000000e36990c77d6a5be18e2c8b3dce1cd0b2c996ffb48dcffa7",
	    "0000000000000000034b4291aa1fad89108dabbf309fe210a1513f9ad53ab552",
	    "00000000000000000c2588722cb820cce63612c423960cb7ddf895f84777a76c",
	    "000000000000000013784f51607c139112e924e1230afe14d5322c541c217667",
	    "000000000000000012832ffe252146a1ecfe7df9446b90d449e8b963918be673",
	    "00000000000000000ecd427bdc736c66d45029d72d6e6427b17076e657055875",
	    "0000000000000000105693b8d0bda2bc40adc24518daa9a0df0259bd11f376dd",
	    "000000000000000004031ccf90184772d6aa03fcd1338c463a79248b0207f60c",
	    "0000000000000000006ecfc28611c0b1f4981cf2a1de500b22ec77a773c2b84e",
	    "0000000000000000173be7c113b97581a6a2c15cca0754f553081b586f80b3c0",
	    "000000000000000012080b04c25a13d6a7fb1e020f11510391b742d34df55fc6",
	    "000000000000000007df34455d71170710009717cde0168c570f7cfdc708a70d",
	    "00000000000000000be2aec8253290bce1218181261d67bd53b06b6a70bf0946",
	    "00000000000000000bf0c65bd9e2ed90c0b80230edcf41412794a51fcb457ea1",
	    "000000000000000011112dbd4483573fdfa2d9e80719794c8e2d7e273cc729f2",
	    "00000000000000000a176c2351a817d9e72a5fdc40458dd557f17fccbc156f69",
	    "00000000000000000b4f5c305a121f16ee03b2329b2dea7b2589020bfad53881",
	    "000000000000000013f4559983f8e25807756d348b010493fa4589984d6601b0",
	    "00000000000000000947ac05f0fbc89e52c92e2a3f0d654c3c5c72ab60faac01",
	    "00000000000000000af4cfc737611ff34d9f2f89535560ff2c2c18a3cdfcfc11",
	    "000000000000000016b7907b12fce9d602187e1731df6b487ef70a5cd7054df0",
	    "000000000000000012c2ca55556b2200709fc6bf1e92f9ba50b5d648d0c29241",
	    "00000000000000000f8bcd31216233a89193ac2a6d26b1ad3a61ed1146c93bb3",
	    "00000000000000000d1196618dcd2c542d154257569d74615980a59c115d1f97",
	    "000000000000000010a594ad77470b0c8a803174a1ada1b3cf2d1f991e9beb5e",
	    "00000000000000000afe266f3a8b0b67924f9a9ea42f73fffdbbac81f0333574",
	    "0000000000000000016d3c17a8147aa7f89b568ccc104fa95f11d1a173f68906",
	    "0000000000000000048aa62d1aa53311893f722191e52594a46dd6c7472beb4d",
	    "00000000000000000f58fe6ed5fa2b6cbea30baec74ab1dff58aaa8c701251a1",
	    "0000000000000000138c6c076b93c4128aa6975e39a7524740c709668cc0f228",
	    "000000000000000005c6f83da4504ccb4559cf2a5d6aa48344f05db1a0f60047",
	    "000000000000000002202dc032c2228f5ca2b336fb8e1e7e8e931cec4de4c1c8",
	    "000000000000000017bb606715249c32511f349c9907722cc80aea91a540d1f1",
	    "0000000000000000104b08f990b9ae10ba9308c789ca882aa813d068d34d94e8",
	    "0000000000000000103b815489f87da629488bd64db9d657e58c925eaa355407",
	    "00000000000000000b89103d0422781c8a352a87bf8b93289454ecf5cad0e5b7",
	    "00000000000000000afead21680db688d60181952b65560a9d80587164d8d06c",
	    "000000000000000004c5251606ce994021d2b73dc84084751b89a756bd0cd1b3",
	    "00000000000000000f9597aed448ce8429c550a65f896b66760381d0c364901e",
	    "000000000000000010dec2dfaa9a11ec4c263644a4f20ea4df9a5424a3d4ded6",
	    "000000000000000014efb22561313ebe3c27780808b5d8939ebc1a850badf9da",
	    "000000000000000017ddab25f10beaac2ee0e187143df63ddb386951c8239a5a",
	    "000000000000000000681c4de760ce918ae962ff4c225cadc4efaa7edacef8aa",
	    "000000000000000006f753bdfe4526a4904ac922c57629f06d5fffe477c20d3f",
	    "0000000000000000027729cbcfaca9484569c370d1547047a625d0f67738fecd",
	    "000000000000000000ddae00bf45681e0ce562e89dca6174eff406ff64cfe9a2",
	    "0000000000000000175b44859017a5148c48ecba7a67f14012232e9bb6b47a73",
	    "0000000000000000004e68c02bdbadf4864290c52ae95223c78b8dea8843a483",
	    "00000000000000000df0b0efe077aed9750196242e43b3f30e2180852623ca21",
	    "0000000000000000110bf5a90ba1b34e416097d432018b598c309fd7e0dc5c10",
	    "000000000000000007c1a5aade23f7d76fc7316c2ff7e92c8a31f88462bc42cd",
	    "00000000000000000aa183d6c2c7e6443437cbef8df739d76cbf19ba8581b228",
	    "00000000000000000e5766de6254ff5d33a40212b1e25066d004a6827b44de80",
	    "00000000000000001308aa07562f2d32f563abcb04044e4922ad617b3329cd25",
	    "00000000000000000f69a7631a3fca7a64da66a1d4702bbea68cddaaa86ec93c",
	    "0000000000000000087f9fd14a7be131b1d1563239659c07be6a66e98293ef3c",
	    "00000000000000000b6504c846eadadb48996824ca1c586d78a018c85829a2f7",
	    "0000000000000000117b4b64d9bfde9f6ae7828af7360728ab54757e4db68e4f",
	    "000000000000000007ab535b682532532d2c37c2aeceb1d1a14863d4fb332113",
	    "00000000000000000712c09020168ddcf6216c04a8372fee584f1b4f62603760",
	    "000000000000000001788c0130ee827a3ec12cb4aa7d24431f082e71c7812d79",
	    "000000000000000010e5cbdb4c0d764d0980ba1ffbfa625b5893104fd2f201d7",
	    "00000000000000000e4c2d80246694ffd934987c067448b3ba997f456ebdd9e7",
	    "00000000000000000da5e975195401ec20e254cdd82018b2df087c0aed7c378f",
	    "00000000000000000b408d9c526e45b4caba53e53068cc1669195491ccca3017",
	    "0000000000000000064713aa290bcea8b0f31a5fab7138f75013a2fb4cf6ca4b",
	    "000000000000000004d78a84b40bb740f604c5b9b9574f113e4cdb46ee3cdc02",
	    "00000000000000000cccc689704a5a30b84edbc1c3ac54b613a3c6a02971ba9c",
	    "00000000000000001171fedbd68eb7cc5b23e2b787e1f7475fb1fa97fcea7d31",
	    "0000000000000000109401da682baec42f7211598ea7da72d1d1df7b5bce3474",
	    "0000000000000000133446688c76257d40e267b31bfc601a641a325d8bec08ac",
	    "0000000000000000095f6663f257ad3dbbe34b1a3fd39d13a00a63b4fb7def94",
	    "000000000000000011ab4274a38dc1efb14d71b08b388fc8f2df9ab094d3f34d",
	    "00000000000000001887ed2ee705ee2236a8d78496eecea17000493403d60f50",
	    "000000000000000002a6f90a679b2d50f9ec808bab7a28515ac53b79ab2fd416",
	    "00000000000000001116eee4bdf5e00290a7ffa54b7fd107366b9958ba786384",
	    "000000000000000003102f06895f87e4dfe8d46c2a8932a1659f2ba4c20b5ee7",
	    "000000000000000010584999e6e2075e0923e9786c8e7300776278460768b724",
	    "00000000000000000ab978874486f90d343f9edcb129d837a6b78feaffed9478",
	    "000000000000000014551bb7cb7145921ac3d3765a1bbf2019547544e0b31ac7",
	    "000000000000000012bee6ce7f1d1a0da1da209b04808bf0895616116ba833da",
	    "00000000000000000122e18ff7c4bca9da3231cc452837388ab35014bce1e473",
	    "000000000000000017b721233970b06de783d6d18d97fb78edbe13a931b8cbc8",
	    "000000000000000009408d519bd4fe19b846e6f0bcd1fc3142313cd1997fb195",
	    "00000000000000000b41273a3798344275d4fd591b6a486589c0902841161256",
	    "0000000000000000177b546922857e1a8a74cde79fd9ee1e049f95e3b48b51ff",
	    "000000000000000016058e81b48108afd344ff3cdd600a1d15fe416f2c8aa6aa",
	    "0000000000000000138d2016b093cac6ef269b4a987aff06cc53b8af3a8f993e",
	    "00000000000000001397b7c6723faf3353593a4796b86e65909d8a2d1898dd8f",
	    "000000000000000005f2dbf018dcedc2d24795d67a39f9ed5006aa0dd3600a9f",
	    "00000000000000000c0404b384009b7077373ab570bbe531b88b94763ec5fc7d",
	    "00000000000000001646b3d26b3d87c4ba40d0f4959b9f287a9c029dbc17e4b4",
	    "0000000000000000020e9c9d2ca3af4775750a13451af5b0a771eb44f5719def",
	    "00000000000000000d125dea466b5066bd95e46bc9d18a13090776a7716ad075",
	    "000000000000000006c4504be78187fabc701d73f97da7ba48e5156ed62bed14",
	    "00000000000000000ce499756ef4052ee3dd243a4b3faba62bbae050249d6887",
	    "0000000000000000095b8d3fda9ffa72ae0234970dd81213df9a01911a9ba654",
	    "000000000000000014fc5bb7e1b217bce39b2acf900a872459d086835730403b",
	    "00000000000000000ec533d7e07994e8945222111892f73e18e28a5db3bdb7d7",
	    "00000000000000000db96832bb3aa293939f361808a16c5095bb941fb9966384",
	    "0000000000000000106a49b94960743427326959d74c1a63bfa48e4452a1dc68",
	    "0000000000000000150064e111fb440e028720d583333c5c6bedfec207ebca97",
	    "0000000000000000036a09a12f391c13d0def92695b2260269208111b52f1eff",
	    "000000000000000013baae8473d0dbf5e957090ac2a800784d938f1f1f8d8548",
	    "000000000000000000007eef13ee1f2fcf1b469bd862fcc93b48ec49548ecf6d",
	    "000000000000000007ec25f4d464345a6f9ab3e531aa27e7446e534829739c51",
	    "00000000000000000c00220866daf4bf0f3d53859c7569b6c273baf3c31f5a68",
	    "000000000000000007a850fd217f42d807212987c5af8f512cea7c86ca787fb5",
	    "00000000000000000f352c200ba2b59ae06223a0d39b5d7bd8f850d205d58080",
	    "00000000000000000a1b4df8fa7ae723d1ad26d8f5da0441e9b18eef5907de95",
	    "0000000000000000117eddb75d4a5d70e5b0b20caf52d2a604c622aa1dd79cf8",
	    "00000000000000001314eaa0d5d3a0c07f150f88bea1926deeb6b70174c4ad2a",
	    "0000000000000000113e9f411d1e163bb3dad20caff581235233ab2e5e5f9a3e",
	    "00000000000000000366cdd531fc2822775b0e5203a890f82c4ea40a5fe72809",
	    "0000000000000000127eaefbbafd41d683436ec0871213dff2c6aa3a67b60bc4",
	    "00000000000000001490b75f440e8254f93c78b3aeb0884124aa7dac42a03cbe",
	    "0000000000000000173f191ef2eefe913db6e7cb662b65cc8a2e1ca8358eb96b",
	    "000000000000000004155aaad5d3f015cfab7e02f4066e58305f84dd41f861e6",
	    "0000000000000000044ee2c2056fd3358092ea43258fc7cf5c85f24a9ead9c4a",
	    "00000000000000000782010555dbc7e4173f545c8b774ece4853aaa9729e511c",
	    "00000000000000000f4887e7f9d1860ea471c22d0030b7537e1f350bfc6f9ed6",
	    "00000000000000000ffceb1c9b8a3abc896d0108084fecab0df419cb48df4d88",
	    "00000000000000001607a850a3e6c55cd4f1c196f8f67a9a7cd027bb7173be4f",
	    "000000000000000010d6d65f76968c864428c7e5db7c4a6654a264c4b1a92a79",
	    "000000000000000016c4ddbf03e54e40ad5e6a4a56a32cbe479820b07d2eb99a",
	    "000000000000000005f136d567c861e257fc222ed07a817214f853513025ee1c",
	    "0000000000000000154cb54a6687b3389f4413825ea906d8bd1125963d841ca1",
	    "0000000000000000174ff85bc167fe3f513d2c3a708a05c3eda8e5ef40d88721",
	    "00000000000000000c8f51ed8debe7a0c1fab10d527297d589186fe42d9dad2e",
	    "00000000000000000cee3032ed1a3b93d833ccde51ec323757ae5b1ffad0e4de",
	    "0000000000000000069dc85136d988307ec5e497a37c6d764cb19a9d761eb9bb",
	    "00000000000000000a63496f0b4393e58e51dcb6872da3ad411f9c19a50a2805",
	    "00000000000000000129265f7afa48b85a56b95626558fcfc3770821cff103c8",
	    "000000000000000010d9bba08b0eb8d925c72bfbd62aaebdc3cd1bbf8cd574dc",
	    "000000000000000013987d0f7be153eb2505018409255b3d3db37c49a589198e",
	    "000000000000000008d6c0b6cfb373781e8d00dd3232f9d5a857462bbb73834d",
	    "00000000000000000e1d1b5afd492b385769adc75946d66ffaf85e639233e13c",
	    "000000000000000017881c723d503a653cc9ec3eb462b1e3de1742de1038b4ba",
	    "00000000000000000d38fd7960f37971b2348e6e06ed79fa44c04130bb7f620a",
	    "00000000000000000f48b70ae01865fea9f233e16b6f91b9adead49e312533b2",
	    "00000000000000000bcc81d14916094da148414e535f254f452ea52de9585660",
	    "00000000000000000e41813a61b8eab86da289fda248512c322ef5debbafb545",
	    "000000000000000017d5c9942f06761b3909f0aa0cd3225a8b6e5c31e0558bf4",
	    "000000000000000009aec60ac0ebd93d08be1210627ee14cb09d6eccd486cb1d",
	    "0000000000000000025c1adf8a85e649dfc99048faa60023883b9afa6d9e086c",
	    "000000000000000002f12e98060378cb8690ae0f4bf3cfad9461cf4f7860c900",
	    "000000000000000003b8a97ec5cebcf280622d59435f8d0005a5762d79eab925",
	    "000000000000000001b4dd219f1ff17adcc00b56a777069ade741ac40a9570a3",
	    "000000000000000009e2fa3855315ba83157131ba9266c6aa47de50f4bfe3b48",
	    "000000000000000003ba9ea1d8c93373494a05990a1c04726c3056d363f87233",
	    "00000000000000001563e2debac3b83fb21427bbfbccb1155c58d95cdf489897",
	    "00000000000000000682ee45f478b2edb3ee44550bbd9478e8da4f75985c51b5",
	    "00000000000000000fffe9479b7cc5189a3c43fd446b226308b239473314a82c",
	    "00000000000000000b7ab80098b8bae4570123542aada223d3272285f0db6eb0",
	    "000000000000000009fe1ff3eb5f4b547d0885d3a40262fb39ed91bf7e2364cd",
	    "0000000000000000140ae013f8ffd8a4f49e2b4799b607101c21103a86b4ca37",
	    "000000000000000000ac3ac8b0d4eb4dc8ddc2a4e60e3a9da9891a175512dd02",
	    "000000000000000005f1c70a711d78defa921b0edeb8f788553fb5c8395eb9e0",
	    "000000000000000004e651cfd8c8b17b05a6966d32046d2b563f258d4b20fde5",
	    "0000000000000000092fe64208ee6a4091b7242d19db531d3ec4fb81849f4592",
	    "00000000000000000f6a2b6acea864eecac1df828210f729ae28e90ca89a4971",
	    "000000000000000007b32fd99415da85eaf7032946f63fec26981bfdd5d021c4",
	    "000000000000000014fbbb49d0d11841f537f34c009c7d83db202b240136f0a3",
	    "000000000000000004f403992f82f3235fe740d321bc4537bf89a29c6a8e6bab",
	    "00000000000000001825d217e4438a8c4d8df4aaab5b9a570aa59c847e8efefd",
	    "000000000000000014d978f793636c0a88c1d2c6a7ad2cb666465039ce8dabba",
	    "00000000000000000337e55b279929b911b275e0221d9f300a32d6b00e197a59",
	    "000000000000000001d2e4a70223ff7e987e215ea00a86b4bb065551d78c0ff3",
	    "0000000000000000138716e66b43c3017434d1e3876078c4ff362eb45ec75ad4",
	    "00000000000000000dc42d2f435e208846c1bfbf5b0617a4a08d702cde24aee6",
	    "0000000000000000092d1d3830174595ab0cff2ce9f09c7e6a1cf94e05316e15",
	    "00000000000000000aead8c1e6b8b42fd12b00313da602a5876d3f5d547f25aa",
	    "00000000000000000db90d66f535dc28ea40e77a69f702603a76456415ad8b13",
	    "000000000000000017c2f346f81e93956c538531682f5af3a95f9c94cb7a84e8",
	    "000000000000000006b34addcc6feda3a7a282e25d865a0c1a4646b56a427a9d",
	    "00000000000000001305e3cc96b24c7f546586809cdc063d7c603facd44a98f0",
	    "00000000000000000dcbc58e1142094e85ab7956c38cb7f5e1e140ea59bb8b1a",
	    "00000000000000001394e56b8db2f90086516e8bc9a7498cf961ea1dc6a60700",
	    "00000000000000000406e95de91ba3fb7ed3478b5fca534764f50410a0ba9c3a",
	    "00000000000000000c529ea0cde98812f34f3489dcd755706fd309b6c979e999",
	    "0000000000000000014231b256e082bac7c981b14f5130b843a589fa30fc25e3",
	    "000000000000000007cbfd37af181fa3539c7dd84f715b59dbcb27fb5b3c28d5",
	    "0000000000000000124b3d865557e317ebde34373f84e426805082d90547c3b2",
	    "000000000000000012e8bbb4536bdd3b34fbb7fc80a680b983e7cf2517929039",
	    "000000000000000001c32a075bbbf9d76466ebc979a0a908cf58b0973fca42eb",
	    "00000000000000000c39c197c3ddf2da4027f6565913d3902266a4f6ff593a40",
	    "000000000000000005b6a56c7cf83d107caf1fe2cec3ff5cf6ad4ff2757a877e",
	    "0000000000000000040f0eb2e8e6c8bfc68bafd8db8b8ca056ca1c572798021d",
	    "00000000000000001514efdf993b41e565009e930ef1d51df2479399484b8e98",
	    "00000000000000001541a264b14c7c30fb38194cd2a6cad814850cc02fa0b4fe",
	    "000000000000000003fea859ecd2ade6829a20d88233f2d10c9e5738072fa75d",
	    "000000000000000014be05d4a9419a14c40ff164391109b730213b86d8ce7e95",
	    "00000000000000000502775adc7134802f6eac9aa00c3454fcd5b281e750b722",
	    "000000000000000017df49f59c1839db4b3b41d4be4f25437c38897a19c1cb63",
	    "0000000000000000189148a5e6236b79398dcff5bd60040c76dd2d5c5b901092",
	    "00000000000000000cd647ba2dcea22b8277ea219fc0b6f76ae2313f17d84968",
	    "000000000000000005dada1bd6e060b18a9e343787d8ce4f3bdb60666cd72bbd",
	    "0000000000000000084a3047f05cc3f8ec4c3e38a1c8e2f5314cc3d792bf6a4c",
	    "0000000000000000101ae4308792777c35a52c034db29c7cb5eb06100893a827",
	    "0000000000000000176782b626409d853a7b71b75d566e938902aee92c9d262f",
	    "000000000000000006cd4488b5c44d79983f466fc2e7821cb309e0523dee0e52",
	    "0000000000000000139af90a35748d1b77414e71fd46fd7b05e39ed3bfe5ea47",
	    "0000000000000000164aa2bc9af3a294afc1b46bb8246cf55390078fdabf2347",
	    "000000000000000007682734c02b3fee83556167631b74a085fc8defed96de09",
	    "0000000000000000138087858eeaaf366fffefa3f716ff857b7098559bb50e53",
	    "00000000000000001393d63086990617910b59fecb388b2003576d96e2431a72",
	    "00000000000000000b2c911c96eb05cd0082c3376ff02d42766a69455a15de31",
	    "0000000000000000034080f05f4fc04b5646158c2513543bcbdf39860834179d",
	    "000000000000000003ab9d31f6e4f0f32bc35d7f94579b9a23ac51d5e3686a10",
	    "00000000000000000827648a26c3588b00543710226aa0f16134d8eb56f88c4d",
	    "000000000000000000fa1b6b12d2224de5bcbe3b0d1a075c50e07b68a182e98c",
	    "000000000000000003f44d04b47450b3645ec5bc27989f6e6c3d1df967558b23",
	    "0000000000000000088e7f62c17236f420dc89c047e9a8794e0dee96ea0ebd02",
	    "00000000000000001460780b4944bc1fc51dd105e8e587b61352c0fc0be77103",
	    "0000000000000000098d2f2b4880e6934c89ab4ed9142937230dfd1fd3dd2306",
	    "0000000000000000149d597839fa1951624edffd57c24831a25336c4da88fa45",
	    "000000000000000010b356144e7387dc040d6bb8c67286b6aca324ab2d39aa46",
	    "00000000000000000ba4f4b99132d1663e965e68c74a2c53b2ff2293323c626e",
	    "000000000000000006ece65f246e12dd600f2ba970e2b9aa556abbd0fca97906",
	    "00000000000000000ea9f879044b49609cccb29ec1f8e3aba47516bf8f1b6d76",
	    "0000000000000000144329e831c86e6aafed2b3072b6b20c9efcb6bf60743e0a",
	    "000000000000000014f16ddd2c29014f0c6004584db929bcf2d717fe960cb421",
	    "00000000000000000730e25b9855c2338f22a0ff38dfa1ba30acc1f9e9598349",
	    "00000000000000000e25ed674ddaa5453015bd758298e2c78be42f1dfbadfa25",
	    "00000000000000000846d464fd8c4adea20dbc1f2e1ecff9e9a4c2857e2ff790",
	    "000000000000000003c151d97c72dea0dfc7294ec0d489684b04398fae9eda51",
	    "00000000000000000557045c11bfd3db3ee58b79fc87d0fb4dbef451c380193e",
	    "0000000000000000180caf97a7bf9e53cfdfc74e04b9401c3a90bbb88ac13675",
	    "00000000000000000f7ba7924395293f0b5c8711b2835b9ff462b062843af36c",
	    "00000000000000000b73b2227bd44c22931d8b9d99a49067f50addcb47da4a35",
	    "00000000000000000e652ae3f688a91e342b5b88577b4399166d9ed55eb6a775",
	    "000000000000000003919bfc40b63228672e5d47e36e234116f95b4e3ef5b1e7",
	    "0000000000000000086e68ac37ff3e6175d025ad791c29c58cf38472894b7945",
	    "000000000000000012fbaca2c4d792721cd6c14c2f685c65d8fd094021375d28",
	    "00000000000000000426d53bd72921022091ea39d7b15edafdc1d2132acaa2d4",
	    "000000000000000004c73d3be56ae930f48ce633e5a6af7d12b30083bc2fa9e5",
	    "00000000000000000f4169fc9eba4ceea3f675ae20bd8dcc9f7c38400f27dcd2",
	    "00000000000000000dd88ca04ac267835c0d8ab65bc11f31a97c2232e9edc383",
	    "00000000000000000f62d83e7bf45cc46413d1905f17f0cb0f6fb7a6f1ddaa98",
	    "0000000000000000053f5bd7b7cb57ef06200e515d6f0b36592777eea30f9a2f",
	    "000000000000000006717bde6b441492537e47185333efe03ae6b69fa36a41cd",
	    "000000000000000007746017b8659eae744d07c7abca93fbca513ffb4a232785",
	    "00000000000000000b2895306528289307c861e3011abaa926623e2e47ecbe73",
	    "000000000000000018b071e06106f8f52af85723158c4ec9c5019235236ddb59",
	    "0000000000000000186bc8a19b3a9f2572e71349e8cbe9fce00b74aa70ef1803",
	    "0000000000000000164fa934a7e04c142ea4045c3c5ae92bccfc6b14ec47d0b2",
	    "00000000000000000300aaa216b66bf408613f5a15f34b492073a5f83cc4d43b",
	    "000000000000000009e510c75f6765697785762c164d6e91e4e79d680b79d1a1",
	    "0000000000000000156aaf991fd43fe0cbd51a8026f072b9767253c3aef53f2a",
	    "00000000000000001616ab85012e541e445ace48232f916c110c0e9063cebb8c",
	    "00000000000000001092cfb9133a05d795bf5a87a3e50933c3e8abbde10a1c22",
	    "00000000000000000f34cbafd465f1d4e005a56cbb097443dc856c62d10e32aa",
	    "000000000000000006d1863a048980444f7dd1bd2e821b2e758cf4ef4c607cb7",
	    "000000000000000016ff74d08e32b70e12288e332d26c975af43b7c3d199b874",
	    "00000000000000000b15ba73a552b8d37803ef12aadfe9980e80bbd3a53b9709",
	    "0000000000000000001a0590e06217704b4630ed2d6856749444a6abd596c955",
	    "00000000000000001520c3f7f13ff89385454d73f5ad2a02b6ba3ab391ff1d00",
	    "000000000000000008072ba6417e061560e6ccf73765a88150c653daa0e817fd",
	    "000000000000000002ca2e1f91ea297f48ebe5c4cda969b447a7f16327628db1",
	    "00000000000000000b636ab2b1f7a67cdde3c0c34c3207a74d623b0fc3538015",
	    "0000000000000000174cac202c7e37bb0ec12a29e3ca980c02c3ad7509003f87",
	    "0000000000000000110776b3bdb3d5efc27b25773f2e9fa29b7a07567a58bc09",
	    "00000000000000001685b03290894958d0fa4d1053a5731ae2b8b92aae6379be",
	    "000000000000000011c0036ba6807bb081082f34f95c50828c2f4e7d1f2240e8",
	    "000000000000000000dfcdcea524ebc877d535bc304ad70d750fd6bb69b5cd35",
	    "00000000000000000034fd217785c7b4cb586e28872ca6461410c8b5d5ed64d2",
	    "0000000000000000035409103f8ac2f23139184042434a3833e8ae78f3ecf5aa",
	    "000000000000000013f157d069e1ede7740faa64318a47ee39df7793cb66fd38",
	    "000000000000000000f2ffa33cbaa93cee784644fe94a56e9f40ddf50ae18a0f",
	    "000000000000000016127ca24786d186b079b896e31416c672500e3b501bd950",
	    "0000000000000000017e0f51248c20e040fa09ecae948ff1510f08566feb4d9d",
	    "000000000000000016542d9653a379ab0824630a7442ac3f2e806b769b5b062e",
	    "0000000000000000051b1f2c79aac0430f2fd07b4a248dbd128d11649ea00c83",
	    "00000000000000000291e0580515e0c061e79b3d0218efe047b519b2eeff2452",
	    "000000000000000006ce40cc0e82948485f7cb2842f52cf7029e6ecb8cfdeb3e",
	    "000000000000000008d4f1a260add0d78b27bf2a11717199111e94d46a9ddf1e",
	    "000000000000000010c9468dffbc5ca4341cd0053708cdee21631980defb07e0",
	    "00000000000000000d6cdb9353cec7c34912b167a04ae40b4102c566f5727a23",
	    "0000000000000000018a7f181e9502317ac5029f666c380905d39244535d9962",
	    "000000000000000001ace06e2c91e2f25add9c82c8fe1357476ef1f9bb64b8ee",
	    "00000000000000000d397a596e3d2ac8f6d13e07efde44751acc4020273e3c29",
	    "00000000000000000d3a8be560d0c6b6a1dc64533d4f8cca5349cb64a3f0f739",
	    "00000000000000000f493b1a089b83cc8bad34c5c600f5c93c4fb3f7c321cfd3",
	    "00000000000000000d3d816daffed2bc1fe35e75fb1886f36d6d0c3d28a9f308",
	    "000000000000000009b3849e481113c3fc8c2d769a8f9ef006d8f2560ba24d48",
	    "0000000000000000087d8a634f757d7025f05af761e5c01d87b073ba3482213c",
	    "00000000000000000ecb8135d03441bec92949ac0c67a81e532b9d56232db8a5",
	    "00000000000000000bd28418fbdc60bd19cdc8097eaf3d0dbdfe333d88938e1b",
	    "000000000000000006875172b9b33efd87733f9fc9d7b1745c4eed45c9d60825",
	    "0000000000000000046ce707789b85ded5b18c45bf4ce2c91397c8110d920bb8",
	    "0000000000000000135fb484ddc675622405b700f77622a96c340c05e403ef68",
	    "000000000000000001509c4181c6b3403aa1d828b3461f36d4acd0476414ff25",
	    "000000000000000007ef90a9ee7f5c6bfb769021c2476e78119916b4189af619",
	    "00000000000000001195e6069ecb9bb79c5010bef0f953ac32d02e171dcc14f0",
	    "00000000000000000978969eb653d31bf28f4d6db9619306e076d54ef0e323bb",
	    "0000000000000000159a1a17d0ada0ea4bb6b95f5df6e6390785cbc1e5b6cdf3",
	    "000000000000000015f271ceb9a6dccf18c8a93cf6bc234469057c8ee1dd8406",
	    "0000000000000000010c49cce889294499eda3d8e0177fb64b61208714dd2a40",
	    "000000000000000013c732a1d45c8f1fadaced5532f87a4898cdb1c69fd625e7",
	    "00000000000000000d749c92c8c4fcdb859ee24ff7db5f6821d8872513ee1b19",
	    "000000000000000006b5ab5a18bdd63005741f832bd6728a1078921b7f7b13e2",
	    "000000000000000002801bdd7022d732d1e680aa34797b2eb592189d6b5a82eb",
	    "00000000000000000fb3c8734d61ffc9cf92908a81386ecc7b35882e05a84d90",
	    "00000000000000000bb5bfc207d1de041afa97630c804ff4b2a3c948bafc36b5",
	    "000000000000000014fa06f0c107ce5195bc00feb563ae732b0e0e49ae93e565",
	    "000000000000000008aefde60d833a9db610996680987abdd6c65ed348a72061",
	    "00000000000000000ca3bec5e29cbfa39ab532ad4524c7fd55b9abb00aa61316",
	    "000000000000000010f9517a29a0b870f79bb07a7fa0aa7e2e4978cde200b4b4",
	    "000000000000000013790f5c04a53fdf079dae9db22a04f9f52f6d31844f11c5",
	    "0000000000000000057f3905216a9f2f5df5a431738f7822d604eb60bbfefa1f",
	    "00000000000000000c2b847ef09aa3d542d7e2053d8e4628e53758e594da93cb",
	    "0000000000000000132a3a17f166cec34cf0b1bc514b3e4154a79e06308a82f0",
	    "0000000000000000186e65fb000dac5671deaffef36375ce7bcab2a4bdd041e0",
	    "00000000000000001489c70ce70bcffbb18bb97d0e995dc7977933cc37ed5b4f",
	    "00000000000000000e14e9164829984074757d8728fc3c50bb94570278899574",
	    "000000000000000001e3b58b926e024ebdc500ccf7a6ff12d7447bfca05f0517",
	    "000000000000000018abcbe83433bf0f445cabc984f0bc7b115632918719328e",
	    "0000000000000000006a9c7b0ab8df56a02b134ef2bec7d3c0f76f2ad1dcb419",
	    "00000000000000000d31892b449cd02e78d97ee1977e0b5d40f38a5998fdcc6e",
	    "00000000000000000bb2caa01b7fc5b705ae3fd99dca901839b502d2eb6b8868",
	    "000000000000000007287f2359ca10cd3dd8cf0840941927a14e2fdf78881400",
	    "000000000000000015d1f1ba5c3de6ab9fccd5274644a6613b6a8b76cec61972",
	    "00000000000000000701a649c69a9494654967943516c864db5f9813f7634085",
	    "0000000000000000097e1ea107576f2ba97b5bb6d7fc02add0437edcc01fead9",
	    "00000000000000000385ab43be593a093f00b66962c22f41890d513625efc841",
	    "00000000000000000c3f24de3c81cd22c3ae344d5bd5205b7e76061561c1fcbb",
	    "00000000000000000e7ed1a77caf92fa4584f4d9cc98282256fc5040cbc6c497",
	    "00000000000000000e1ed33edbbc42c8bf85f4d8ac7dd6788e52f15a163285bb",
	    "000000000000000000ea7df29c44052b4f5d4d1d526f6bd92e1810ab92ab1add",
	    "000000000000000005f0a16f5a9f95eeb95c5eed0eb221e8f5dc5a9943a03aee",
	    "00000000000000000b7c96af32f1e4317e3069ea4bfb02697caa6dbde7216f9a",
	    "000000000000000014f8f20797081bd0f9329009f2f28706d14efaea730608da",
	    "0000000000000000091903ffcd06841fa6ff4a5102c601d7dd6cf60dc8be1be2",
	    "000000000000000016b69f45f4cf8d136b9a3e6da01f781975195a8739615f97",
	    "00000000000000000fe06d072f98a176d701404658e8bf8841a5e12b1985169b",
	    "000000000000000014a2a571bb8f3d609bbbc2cc6bca97f5ec6df5acfd75f4ff",
	    "00000000000000000de8579592f251f15ba2a7604c0e59e520cc77208b885058",
	    "000000000000000011e2c51d1e16af1e9f6dd4033d9a83ee1daf92c1e966c605",
	    "00000000000000000d71a0ab5f7176171908c586a0c741f00e45538e989445da",
	    "00000000000000000efa953f86594a5a55187b6f3eadd5a73633bdc74ef08f85",
	    "0000000000000000085a3f07f603cd76e7634fbb379ab60da552b33aaf7d8abb",
	    "000000000000000006d17529df799bd2b3d938bb8a354f9cce28dff06449085f",
	    "000000000000000009365d0d14f6e0e9555ff5abfdb472f3442f375f21a0d332",
	    "00000000000000000a4c4518728de48f788b0a118752d6701136f9ad971e1332",
	    "0000000000000000109d1720db81081fc9f5e6767cd66203b6edb23537dcd193",
	    "000000000000000014b00a14b6260ad31d2452f993f17b807041a1a75dba70a7",
	    "00000000000000000e09db81717c8649b89ca74248a403e8d9bdfd3cfdaf824e",
	    "00000000000000000d4653c3ad8fad312ec71fa805571559f3d3c53482fa2a6a",
	    "000000000000000005623b99b344daf97b0fc641b2f8cb133100ac120627f983",
	    "000000000000000018919438e6d6d08804bf122f4b6059005e42b4ffd231dd10",
	    "000000000000000017df6ae9be443dedf868d31302dca951607ea2d32f6aeba2",
	    "000000000000000008a35926255356d8ae58c174cc59684c50bbb9858705395b",
	    "000000000000000006e3ba823c381f557dcef7272c0307b501e7563d1406c7f2",
	    "0000000000000000006c276c7fa92c16bec8021457cca03ecf4c11fa7c7115e9",
	    "000000000000000013ec9c7f8acb260ad03a0864917d42f98e1f36a4707d70d5",
	    "0000000000000000071141290171da6fefdcf255f8b9172e3bf9e225df971e69",
	    "000000000000000003ad0354750548b3e28bb26d4fdddf758aa12b21d065d1e3",
	    "000000000000000015b893480091f8afeb65cc220668f7d808ecc68683ac88ba",
	    "00000000000000000fc8c01e15886b52b873782fc21a61e3abd27594ff28cac9",
	    "000000000000000013134ba114bbdbc413c33ee9aca994999469c7eaf7411c94",
	    "0000000000000000083461d200d8ee53a8ca7f76d883af57432bc14232d500dc",
	    "000000000000000011d371ce1ac35959628a3772f96ec1619e7a3263f2e76795",
	    "00000000000000001373f3d19677c62ae03f6f0ec9ece8c4b395fe8ff6ee31f9",
	    "000000000000000012f791a15fa60d089d21b6afe4592ed8b6163b8125e10d0d",
	    "00000000000000000b5dd3125d073c71e160e9b664690c1e446bd9b648569803",
	    "00000000000000000b24874adbc3def1c026554dad687a440e64cbbe55ce6e9d",
	    "00000000000000001495d9ff335e2cb13cdb33ec3f798529a4c2c082762ec407",
	    "000000000000000004a0328659ebe0eefd190d8d7688892ca5e863aad8f41b19",
	    "0000000000000000129528c13c40c22d1457b673b0412e532e9acd61e2401e25",
	    "000000000000000007f34358a9809d6fbc05bb42178fafe3d3ddedceff729acb",
	    "00000000000000000d91bffe234d2cf025967c6c4836a12777e62174cb3bc0ea",
	    "0000000000000000000abbe197d2ad379ef0da5271baf820ab4739ea9028393a",
	    "000000000000000017b39abdf4a2a7cf3bb23f0fd02c9236d4810fb99d094bc6",
	    "0000000000000000001f76855800e5bb75e090ea56d01c5e38ef5186f1fdbc4d",
	    "000000000000000004fa7cfcff928462edebb6716df7ce96cc58ae77f38c1113",
	    "0000000000000000012bae531bdff0c28cdef80bb38440cf69c8fbf6e6b693fd",
	    "00000000000000000eaa85a84938be8acfdb793e0ecefaf514cb11195af37b24",
	    "00000000000000001371494e42ce2cc1f5ea1aa49cdea859e3b63eb627b97ca5",
	    "00000000000000000d34ff9f1269cbcc3202b81aae67435972448e7bd7894e50",
	    "00000000000000000a365550b6140c8b790c35233ba9245f0236ff892a7ed6b0",
	    "0000000000000000031a680413877e42c2588143b7fe5b51ab81addde9d9bacc",
	    "0000000000000000051fbe49067d5465ad715dce93f14aa2bebbdda3f6f5a48e",
	    "00000000000000001098158e4b5baa3e73d578e4345fdc92ff5e5eda7e641aff",
	    "00000000000000000751ae5bae5dd6bc0f9328c6403ace36f795816f42744499",
	    "0000000000000000185068855424a93e01d0def01d507adf953fbb7cd6ce2913",
	    "000000000000000012ab3b52e0d80a62d9a702dbb154181d4c411f9e1f6001ab",
	    "0000000000000000021cb18ec216ff9522b0ac87895041c56153cfa352f5e261",
	    "00000000000000000b0d817839b1bb4a6c3d3ee51ae889f2c072df5f412c4942",
	    "00000000000000000103edf38f4c5f986a68ac8e33379e4d9fc13259b5827055",
	    "00000000000000000885a6e53dd5c6bb4aeed72f7a28333f69d2b9337f8a0db2",
	    "00000000000000000b4e228f4bcde8003a4b3ecdaf319dc99e9e8f371d00fa8d",
	    "00000000000000000477417305b03d8033a0c9fbf949be5ca60dbf0c6abf5fef",
	    "000000000000000003d825c65274fc0a511a0769ed378c63374820c8bd4f4cad",
	    "000000000000000010748b1d3f343ced8a8bd6b18cb2aa04408ee11fb983cb60",
	    "000000000000000010c90d83c34e9712edfc5613113d1000ca14b973de125878",
	    "0000000000000000110e4eb46c0f7f051c7bd0de6dc5192642aaf72dfadb8549",
	    "0000000000000000053dd6f8825b7cf8cb8ded193992d40fa9f8bde7a48f73d8",
	    "00000000000000000014506cec64981fdc49178011a1510b1f00995c9d62a95d",
	    "0000000000000000173eba0d560b66ab4fa06e11f418c15ccf811f8790dd7ce6",
	    "0000000000000000175b8c4189a8f1af8bd7dcbcafd57e2681d297716da38fe3",
	    "000000000000000009409bfff4db1863827d0a66d7f9b6b6dab64370ae782335",
	    "000000000000000008c8eede3fc8e24edc0ac5ff51fb706bfba1d0c0deba5858",
	    "000000000000000011ca575ea769208a6f918940699a4e616ac5f01119b28165",
	    "000000000000000007cc0fdd36f351a6893065d8b8965cec88f4e5bbcb0f6227",
	    "0000000000000000080643cd3eadda545179a0f634e42f4bb55113bab5ccc6f9",
	    "0000000000000000029cd7a12342bc2e50c5cccb19eecbe98a72f69a70e1393d",
	    "000000000000000008b69fe3f8b6e9f891c9e14620704d4eaccc12d4a76c942a",
	    "000000000000000010af7e9af51103afe63885a22c7595ebb9d4e5fbfbc9be37",
	    "00000000000000001680aab429e9e82714c65ada89d51284fcbc21c972020cac",
	    "000000000000000015873f5c63c03c3661c5cefd2ec392336ff8e4febb41ca8c",
	    "0000000000000000066570e2a5e1220d9633fd0126f055e4acc8e2e09ad9ed8d",
	    "00000000000000000cfb1d5db1008234f23151683c556114d4f7734c2d661ee2",
	    "000000000000000003724966e50a27cda07c05f95f3a8cca5fb5d076351832ac",
	    "00000000000000000b265f22c02be4dcdd5f23ae873527dfd5d80be960f8c7b3",
	    "00000000000000000577caf7823c048ee34cec0ab2fc82d4b8e55b022fe35cfd",
	    "000000000000000018976d6c66a88f3d456cb7ac5ed3db152b1c433039953287",
	    "0000000000000000123bd9f69bf46b7c6ac2e27500737ddac077eb5f88bc8f17",
	    "000000000000000010a21d5cdf8d203ad9f577756aabc0c2e8abb817dfa1b75f",
	    "000000000000000003b33068efde5bb504367e4fbbe5708b02cec319e73bba7a",
	    "000000000000000009a8309802dbc2815a50d03c6f64c60b71e4d4cf999ff977",
	    "000000000000000003e6e826640c5415dcc63c5d2253739991c4843891a312c1",
	    "000000000000000003e1ab4075b571fd6ad136cc475165e22d4b6f46a1e5c100",
	    "00000000000000000977dc0a25ad2fb244e47afd20fcd083403b898089925288",
	    "000000000000000015d768b152149ef4c7a121ea69388b56940b0de179b7ca43",
	    "00000000000000000400265d5521ee710e285874531d5f18de67fbc26bd8119e",
	    "000000000000000001f05b150b3245d46fb29e0d97612fece897b4a682c52be6",
	    "000000000000000005c8615ca95812ef5da96cfc74ae47e057f0e423811e6f69",
	    "00000000000000000af05ed4bca3def89c5a7c33344adf7e313ca69f3cf09fae",
	    "0000000000000000187ed9476b69c0f0c984c6754918b594c03ae8b5de43e943",
	    "00000000000000000d10bdcb4e8b3e33960bd16989f1bbf6bd4257cf617ad929",
	    "00000000000000000b8de2e4dca0b88bd7e96aaec4de210838061e2d403b0546",
	    "000000000000000008600e1bdc225a3a0f3e86f327d3c5eb5574b616c68bbda9",
	    "00000000000000000c1b20b03d6197157f05bf0f6dec487b3a2e807d2b0f9d43",
	    "000000000000000008561180c71b413856bb3ae4ed5102c8b9cd89aaece5eaeb",
	    "000000000000000008af849c45982c88d24e44f995962e9b1fb411ae3b082de9",
	    "00000000000000000dba9890ec1d3576bd36ad3275f5a20e9dbc1c5a9453abf4",
	    "000000000000000010e2cd31e92bc43c1f21cc84a0b24bb307c6c94d54c7bf6d",
	    "000000000000000002e052080c850c8a11b5bd7e57ca5d43ed42d51ea68096b9",
	    "0000000000000000188b60bdbb8dc1114f64abb1d9db361dcaf5e0fc755886ca",
	    "00000000000000000be1e7b66be3066fd96bb0f9e1890bd4175354f39842448d",
	    "000000000000000006c42a8468c40d6843be14f6212fac3be87a218c8453beb9",
	    "00000000000000000216391dd0e8535c766516d9584cefd8691b2b2df756c965",
	    "0000000000000000099b3f1f2bc1b588fdb76ade3d41bf336664e053862f79fc",
	    "0000000000000000064ed5784afb103c0999e9865e2c3d9ea7ee48b341be7c28",
	    "00000000000000001829441b913087d91a4c49bc5e1747e83caf61664b2af5dc",
	    "0000000000000000005800d18f46a666429b419316ac9b6c1883a501643c8659",
	    "00000000000000000fcf3375307838cb8e16f4736d71efe5a1c1288e72717ad6",
	    "00000000000000000a23933a0108085f6372e2a05721938ce8038e936e938cc2",
	    "000000000000000011d809867831146b2496bce3fbfb3cff0b9a4544bf068f87",
	    "00000000000000000ae9d5af790d95d0e112fb70fd1e82fe125d66c1d67b9362",
	    "0000000000000000008b9debd883ddeaa0ac9674acde09cd1532398e30f4ed7a",
	    "000000000000000003e1c66aa6409a7623c95e71b11afa5c517783adc890410a",
	    "00000000000000000f35b34e455e645911b9130a5863815047e63514b9b86e3c",
	    "00000000000000000fca87ba2e657f62c1306ea266fd5c9437526872e254a165",
	    "00000000000000000163dd302dddbb7b1190ae3791ac081d4b7dee77e3c06252",
	    "0000000000000000074de121233e54030f7db296a91c7e10d37b7a71a9cb865d",
	    "00000000000000000ada6ff16964daf87e81ca4f80b321ed825f4e0eb39b503a",
	    "000000000000000011e2f12a7d1deef8b95e4d45422c593d748b914429cb905f",
	    "00000000000000000b7b45d606b3177149070a0535fb100161286d17bf5217af",
	    "00000000000000000e29612cddb060facf84a91478ec1ceebb1f63d059c7e8fe",
	    "00000000000000000d37e16ccd67cfbae080000819ce2a846ccc7ae45a2e5cbc",
	    "0000000000000000133f4b07432ee03b07663a5ae048dacb31a2ca08ffa49288",
	    "00000000000000000afa1628cc74ecc9816ef9835302923161918d8cbc638901",
	    "00000000000000000fd446d38e7a6b9651543e2b397586f1634861803db5b0e6",
	    "00000000000000000b46ed28b45623dbb8c21552a534f0b2f6a251601d4c945e",
	    "0000000000000000089dd942bf83724698d76a80b83485c5d80738115fb70fea",
	    "00000000000000000862a3f60a39f3e18a6e670765bb5b582ca325fcf7ab5697",
	    "00000000000000001111df47b8c43cb2dae794a883c4097c10c093a81d784e2a",
	    "00000000000000000fa3769b4dfe7146b530adf43f8473a0f7f1a0a7a3f48a5e",
	    "000000000000000009478a6f80d407a12b9a621d5229c9de424d670cbf7f540f",
	    "0000000000000000157cf38b7e4d838dae74f7ffac98a5e7beca332cf984e69a",
	    "0000000000000000174d287220ae6160b656e7da0c68ce1f3d16e550a67b295f",
	    "00000000000000000242b6edd4e9223d1923fb2bc45f38bb86cba27060815fd3",
	    "00000000000000000ef3da9af36ed731b813be34578eebc1a137750142afea91",
	    "00000000000000000907dab3afe4ef03ab35a899f290e9e33220ff186064c7e4",
	    "0000000000000000171148cd0127c44f66b93f663c028f496058c1412d465f2e",
	    "000000000000000004fccc8f908ae830f285cdd83d67a68c11536882ba55d27c",
	    "000000000000000014c1b9c05f51c8ad93dc4433deaf9131f8b8cbee9fe32f37",
	    "0000000000000000168949f6d431b9eabd3db4762f82009ba835e8168d80e3cb",
	    "000000000000000005d6c34bd66faefc9e8d5776dda459cb58faa493dbc657b4",
	    "000000000000000002c94bc79c7a9e5e6757905041e79006aed470016ab9e477",
	    "0000000000000000104f010f495901c1e965f5a8594b51b4b6c5edfea64689ec",
	    "00000000000000000ffe0d7b33c8ac838a036ebae196746d6937a6da740f5e81",
	    "00000000000000000118bf7de512b5a41e98ab2c9a54e69934ab8b238619af6c",
	    "00000000000000000a7772b67cfe6d53eefcf8a81b89c9b1da57c0a3594069a4",
	    "000000000000000014198cddc7fc021e7fe8c49fff18972de0ede0e07b094d1c",
	    "000000000000000005f8d983d1e646790681419b574524224f842050893b0ef2",
	    "000000000000000005212cb07725ccb2e057907ee201c96a9af54d3925af482e",
	    "00000000000000000c3f9654c6f96d48cba1f3d6503d03e86ee6c0f9c9b625f6",
	    "000000000000000004e6fa124f898fb2b8bcc0ecc40528bfbe4841f130b53918",
	    "00000000000000000507a5ebeead1251bdfaa91bdf59c672a898e7c7f450721c",
	    "00000000000000000167f898915e7000288d56e607e3af8e3b1e880188a58d13",
	    "000000000000000012bdff95ad376e1dbb9c535c122cf05c13757874aa9d0489",
	    "00000000000000000afcafa786e077ddf70d22efb4b5af5e748b19f2734578eb",
	    "0000000000000000008fa636e5d31d80ce82788f541c5f7fb082d047bb999fdf",
	    "00000000000000000364debb197aa5ae239f3066346915355f9cef17b9aa8242",
	    "00000000000000000a9cdc1490afe4c9b66b33e86bf0e4b8f4f56bf856e6a46d",
	    "0000000000000000138d97cb30573b296e69940cc3f4d29b024597cd6020e461",
	    "0000000000000000004ef72874535290d0ebe8b624f7defd57b69d8b75164f18",
	    "000000000000000009b7f19f3153f9ec6342eacae3e86893d9ed932a315b485a",
	    "000000000000000002886e3efb2974528d9278c76b59e6621e0e34d7cad4f9ad",
	    "00000000000000000ca9ef32a55a5a277513868db4aad31c8ebf389be0a3c147",
	    "000000000000000014bac4b5cbafd564568af812c0b06c1a65285f24faceb582",
	    "000000000000000003cf7f91d3ac47bb559c0e81aa6e8dfd19efa4755efde5a6",
	    "00000000000000000ec951e13dc8fb02735f691ae7bc17b55fdfe0640105231d",
	    "0000000000000000059e884660f3207a89428818ba416289a40ede0e6ddfa128",
	    "0000000000000000145b75457a2c80e67a8fa2c2c9d014a2f7f604dfc2f5b27e",
	    "0000000000000000133504544dcd827238ef35c3b3f88961592e592970a0f530",
	    "000000000000000011e203fab48edba3ff64839bbdbbe36989e4f3479c1b53ea",
	    "000000000000000013204355a5910b1fd0f21064cfdd904118298cca76e14220",
	    "00000000000000000a055c27d37c602b9f66fca26fe6e2abf75d34e673ab2321",
	    "000000000000000016371f3d083903903d6d1b1e7593d91f58e8cb1c69ae5283",
	    "00000000000000000d6736d102da0066bbf5e7c998b2e924f8d3b45dfc1a38e8",
	    "00000000000000000f3c71720141c9b1de0a5c5eef9aff2f701f47c92949d0dd",
	    "000000000000000017daff7095011798ee3a61e4889771c2298be3e17bf197ff",
	    "000000000000000015b9490a606c2be13c53974f8f24949ab5b8701ff9c6183a",
	    "000000000000000004865f1627a42772f83bb460eef464eb74d880d7f699a22d",
	    "000000000000000014552764a40385836d8ed396a157a2d56bf229fb02159109",
	    "000000000000000014034e04140996a06f663d84771d1ddee23e8c343fdd2136",
	    "00000000000000000e25b20510f781fa11e56dc33d7aee1517182d64d252c375",
	    "00000000000000001484055aeb4afd0b073256af838fb41bede9738299f8adaf",
	    "000000000000000004fd65d6455df9a241d81028374a2a4577a475487cf3845c",
	    "00000000000000000b84f3ff970a6b9c572b1111fc2e929d7d19033c53a73deb",
	    "00000000000000000e5a76e7fe7b72319617f515a4d7c76243f8062e64fb311b",
	    "000000000000000001ddd9e738e1edd65bff59b77ae7ef407bcee2ce518e4a6a",
	    "000000000000000002984fc795c48138c8699a746f1057dd8ceb490b079bb9fd",
	    "00000000000000001697b0bbd30989718e304a1a369a60962788ed5a5eead4b2",
	    "0000000000000000006ae9fa940419e7956c7d0f3020996f7a7978f9550138d4",
	    "0000000000000000177c917e30518c47e71b330094eaaced604b045619d8582a",
	    "0000000000000000024497df68e3d8d38557a5af53b737ce509257d59fbdace3",
	    "0000000000000000043fde47bc57a0446dc2b8d498c219e1a7f0f02300b24bf9",
	    "000000000000000015b566fb4d4538a4cdf32846d8ed18291053c9c3794154c4",
	    "00000000000000000b9c8eea00e62b1a5f9a99c79d7da4a4765f6adaebd5d683",
	    "000000000000000008cf74b35dc0238a3d8bbe1247ade8a9f55a5424373d025b",
	    "00000000000000000ab77d9626aab7c895f3a28f40931c00b6fb79edcbff79a5",
	    "000000000000000008faf19860166dddc90e9430949db01a4cd8b9b025f0c2bc",
	    "000000000000000006e45e3bf5049ff7847c647404668e90dddc99f4ddbe739a",
	    "00000000000000001837a3a7f60af65cd9786809234a2bc814151104d5429a6a",
	    "00000000000000000280900f2bd4bac992017bb2f5d013bde8eac3a48c9caa2a",
	    "0000000000000000051dcaf9eb0d73343ea1cf8bdb0f2ff737e84faf7e3650f2",
	    "00000000000000001578b0b5e526558c6593c52af7212c82025abb9cc1e8d9b4",
	    "000000000000000011135f6026ef1e9cf92dfcdbaccd3554b5427ae07ad66c71",
	    "00000000000000000bf1f28958b4fcd338834dca1e7675282de4b5b72352cdf1",
	    "000000000000000004d5e9d35713b2f6df65a4bc7d106e1ebe2b768fbdf6f5bd",
	    "00000000000000000f15a6303c7628f41358040445b559e76fbbb85def8b7f8b",
	    "000000000000000014f29b890df0d8903d5b2a72751d3ee091d9464c68992ad3",
	    "000000000000000010a571d94065bba78db05fcbab9e08af832ac37591ec0ab6",
	    "00000000000000000c65444ff53028a0530878a684838a35730b68e3156d4580",
	    "0000000000000000025b50bcbb8792d87c5a1f798e0e771de72d2b90d875c596",
	    "00000000000000000d1bbbbf0ddc4a2f3e9809e94335b5421e81a3b9a57f11b4",
	    "000000000000000005ccbe36b713f1712506e7948315f79987ea8aa834b4cb9f",
	    "000000000000000004322d9a8333b0e8a3e8cdb5f94dae6435b36ae7ea73d2a1",
	    "00000000000000000760970830eb9dac1aaa8fa9bb3f8489ea607b27ca060e5c",
	    "0000000000000000053a0c0d8508e68c050944e1dba3e030db0465e7cda84af0",
	    "0000000000000000125f4cfdebbc0d4decbdba81713861857b4b318507318d49",
	    "00000000000000000856c5f68cf8783151686b2dbcb2832aa880376400ec1998",
	    "00000000000000000c3a8076f71e56da0498f6611b13b569454252c5e86cc90a",
	    "00000000000000000cf3b7f4a7de8a80bcecfec66e5a1165cbfcfa09e686d67d",
	    "00000000000000001235404e418fdf43cef9eaaa46247fe54e20d38ab4f57dde",
	    "000000000000000009f7ba0a1c614556435f6bdd327d674d8ec079d25de11f78",
	    "00000000000000000ade085625a13891ce1595645d9fb3d2a759e53fa34c593d",
	    "00000000000000000c03117529bb7db3d7dd622c6501b5b7af2f6c62acc53889",
	    "00000000000000000fa0a9b7174700bf76340b88e6c22a3916f0e83e1af4f2e6",
	    "0000000000000000139ed456e43abf36bf1776001f1aca73d513e4f11d3a5e86",
	    "000000000000000012a2087f2cd790b46968c6231b485d1680219011165dfe81",
	    "00000000000000000948c817297a359e19671fae9aa2d082be18fa46a1169259",
	    "0000000000000000096fa662a551217085fe2a24a8e304ca96415778329c2f27",
	    "000000000000000015cb9194b8965914a20152fb6318e43b26331fea0339d4e4",
	    "00000000000000000b8e4fb556a16ea8a50250312d09e9d152dfbf657f5554cd",
	    "00000000000000001566a50a99e76365866a3b8862373220f9496da52bef96de",
	    "000000000000000004517aa45d14e9e67479eeac8c29128bbfff64e19a3edc81",
	    "0000000000000000128cc2cf16140595dd9fbdfec3e4876d099e7ef2cb64d577",
	    "000000000000000012b656d769e11750d72d09e4dad10f34c55384b3f7b62b26",
	    "0000000000000000080de2cafd14eb7545ed52f9ee2b302b17f5c13f036d28ef",
	    "0000000000000000163e509ab3997b9365e25c0f38ce40f469499976e3fa0f9f",
	    "000000000000000011b4c5a63e9856d080a487d82ee1fc6b6d59b2049b3eda77",
	    "00000000000000000701cd96ee883845eb4bdfdc109049178785f338b634ccd4",
	    "00000000000000000f94f5bde8bdd304d6ea217e0fb8cc449c777bdc11ef069c",
	    "000000000000000000b8ffc7d40ccc41d23958f5906a975ba9dc917b9fcb8721",
	    "0000000000000000171f5c09d8a21d297a2162ea2b5362150973c899d1bec1a8",
	    "000000000000000014b57b98984ec54c3584b448a92022caab9cfbb8ff462777",
	    "00000000000000000abd01e67a8afe36639cdc54c46d40bf44ec76acb42575b5",
	    "000000000000000009226611d8039b156de51a7fc4a4e9500ca5127d6153f0eb",
	    "0000000000000000094de59312639bda98e03d57b1cbd61608c727a78f31599e",
	    "0000000000000000013bae8e82ef20860c24568cf88c82846756914de0176de6",
	    "0000000000000000030d8ad69208f2b3d0e76a7bd6b1cd18d41b7d2c5e162673",
	    "00000000000000001715a1d821f3d70190fe193d608e2d492941ae486a0e6022",
	    "00000000000000000bf1a486ac90503bffaa2e558a41dbe56b1308f27b688739",
	    "0000000000000000119160a973e4389d77ce5b681aa1876fe5aab4339e79c639",
	    "00000000000000000f533fe1d71db1afb7f045608fee7ff7ce43e718909f7f31",
	    "0000000000000000068045530f863bd4125b08994b984ce1ef9131d3fb06b1a7",
	    "000000000000000001eba25d4497ef78992e0f42e8f559c9244eb16225c7e0c4",
	    "00000000000000000b6c5c57870af15374d0e3b01039446c5ec22250f3766b7d",
	    "000000000000000005f957bec271813e8d1a904de71206249c375d83a31c74a1",
	    "00000000000000000d323ad30f3e4118719affcbd5378a30b090b7ee13de544d",
	    "000000000000000008cffe0d96179bd661b55383d70b09de7e37bc414ccc4916",
	    "000000000000000017a90455633ff8af008a7ef39211798afed0b5344a3ac441",
	    "00000000000000000d97dcfeb6de620f1983f5b0e2efd2e4bb0189f833b8d83a",
	    "00000000000000000b6241d6e86f7b27d43458cb7666adaeacc078b2c6a13ff0",
	    "00000000000000000af8b608b5bb49d440976d55dc7399c850d74c7f83d2a915",
	    "00000000000000000e36d863c0bf9e9ccc5db298f0fcdbc6226185413ff3cff9",
	    "00000000000000000995aaef64a3ebd5916cdb477ed9385b005b295a7162addc",
	    "000000000000000017b2576a68a351d98d24bc8a42a74d9ba8db4ceaeed79ab5",
	    "000000000000000018355a9f129531d8463fcf5057f86e6606d153b856797b40",
	    "00000000000000000d023140da3c698522ff7118cd391f1be5bbe75d3c607f81",
	    "000000000000000012447e25eaee61f962f230550b4e80a7ef89008db4af074f",
	    "000000000000000012af6e11b58ff36c21ac3525a68bf59d68797ce234bcd112",
	    "0000000000000000139b928cff545cb6c4a6691f6712ef341a1ceb377b740044",
	    "0000000000000000127e180f593a23eece35c9fdd5ca807defff59c05bdab618",
	    "000000000000000007bb39bf42c820becf0ad1fa9be57f544e7ad93b7edae0a9",
	    "0000000000000000177cbc7146a225093ddf26f7ccc64677c7283c2bfc5a025e",
	    "00000000000000000020a6a6280401444ab61a9d4f35d436a50567935fcbf495",
	    "00000000000000001108976cdb3be8b12ff16b1280ddf47d843db8f45ce6ff63",
	    "0000000000000000049c1d7fa83a74c56b197c642008ba0d3ced9232cda3be78",
	    "000000000000000017dc1d0443b7a1a351d16ccc0c37b8af0af9ffac90be2458",
	    "000000000000000007de0c7962095e6736a80ebdb15bf7fb696086d756803cd0",
	    "0000000000000000015b11a48179755609e49ff9b4f35c16e790512f64ccb759",
	    "00000000000000000acace605c1cd7461ac6d1452080431b8845d356baa8fba7",
	    "000000000000000013b9ed462aeb36f96f77f43e6121439691bf88dead31f921",
	    "0000000000000000008805f204b5b2d344fde4117da1edcc80d2dedac1285668",
	    "00000000000000000e9820d8521fe763ebf2837806ca492ce315d5295bd9911b",
	    "00000000000000001339444dac9926b39bd9ab50da427747570482f2f58924ce",
	    "00000000000000000013dab39c231fc44e4bab1dcf298e929131f96d5e30ca7f",
	    "00000000000000000290ede5a27ea623b890c0e4578849bba31ec2c070ec24cd",
	    "00000000000000000ec587c01abf8322154dbd44ecfbcad013bb72858ba2e515",
	    "0000000000000000180b78a9cf51d077025850d4581411cf226e2d9adb7f42c1",
	    "00000000000000000facc5f5ea20dc2c079aeed2291edcc56e7ae239d23ad6e4",
	    "000000000000000017c72a3751b961aa5639ccf257dbc03164c15b07f493dbf9",
	    "000000000000000015f662ed2e442aa5188bbc36c4ddda728886695a1409a3f4",
	    "000000000000000015d89c168fb9fd7ba8204528023ab9e986b877dc6d980e89",
	    "000000000000000007e47ade54693cd9f524cb52d6a0ab69a3b13db72333b785",
	    "0000000000000000183be0bab15627e6e452878a9270751a95f6b9e279451291",
	    "00000000000000000118c18d5e3017ad5bc5484d9419ed9ee12304796065effc",
	    "0000000000000000034135ace932ab4499bc75c0ff48b00dc2caadfc5a2369b3",
	    "0000000000000000167146a0038f33feb45243ef8f295da25189ff9993452717",
	    "0000000000000000077b02ceb3d0d0371710162556344cad4d2556779f1d8c89",
	    "0000000000000000132408ba7dd69f28a1c7fc0aff66db20f16216197928a333",
	    "0000000000000000055e6568112ea8acd8bfe8ecfe7cf368484c0b65561d26b8",
	    "00000000000000000f87782444b3ff15a499111518274d5228e916f718ed7c00",
	    "000000000000000008867ad0d3c266c92eba007deef03491f8f4d42bc3b2f332",
	    "0000000000000000111e1fa4d747bf09f7c53f941a1be04b05dbd0e0140d5252",
	    "00000000000000000a7228569cbc7d4c6a67c4a004b21bacca19b861c2a1d309",
	    "000000000000000013c2cc7e9471b8c6a2b7fb9fa79ce2d9e913c40bc8ff0876",
	    "00000000000000000f3fd139ef0fce4da002cef3ee67227448428269fe46395b",
	    "000000000000000014cdeabd9b7e27acc417fc4206f445e4593e3b2929d684e4",
	    "0000000000000000185ba6486b156f45845d25a10e3e50882b2a47160ac4adc5",
	    "000000000000000009615bbff873063a5f815056da687c6b67b682aa79e4dd8a",
	    "000000000000000016fa406b4b4253bc6e5871653a61d1d93942023679a92a33",
	    "000000000000000000e8c82268c031a15311e8074f3dfe761e07444ee5a18839",
	    "0000000000000000051f3ba2fe90c80a0fad3f0981649c0968b40c04207f9c45",
	    "00000000000000000adb79ed72c9fae1dd776af98771ce1071e74b95981f2aa2",
	    "000000000000000013528d7a948690dfed1678b3c27184e19b597d359db2d227",
	    "0000000000000000125d4008d878278326796ea68ad202e2a97bbc40eb4284f1",
	    "000000000000000007406dadd869b55109bcd8b775c9dc553026ffef1b1bb4b4",
	    "000000000000000006a4ed739730f61ee43ddf2dbe99cf4a2b2cd168dcaacf1a",
	    "000000000000000013f3f3bb198b262df0444104c72e41a50756f55d35e90e2a",
	    "00000000000000000ad0ef1e570c50dc941796679ee0b7cc3395f61cc0454474",
	    "000000000000000017a92f4611ee1f1d8f8e70fa3acbecaf3b952ac7417fd40e",
	    "000000000000000006428ade733dc97658c61fdcad9c604db6dfbf2703872bbc",
	    "00000000000000000254c8608892470549edb17993419ef112fd1fd7eaa073ef",
	    "000000000000000009e4276c636637d85d33eafa47ca6820ca8aee385d952d51",
	    "00000000000000000647a107cc03bc6ab65abbaf4e12cfd3d9b46016b817fc0d",
	    "0000000000000000178d5baa690d811024bf4528c9364b8598fdb456c27ea5b3",
	    "000000000000000007cade4f70ec310986aa7ecd2333b8a75add18a5a6a9faa1",
	    "000000000000000007a0959b3f994494a2eb251aeb5018a53951ac69c24452e2",
	    "000000000000000006b68a29dea6ca61352f502ad06fa976ac93474006662a27",
	    "00000000000000001115219c9cc85777af2aff9ff1a6f8604715a77e3d35bf5a",
	    "00000000000000000f27ed5f57549da628d84bf0e4a21a9ca31ee9fc346f9df8",
	    "00000000000000001710011149c2e00fdaae4009b5d3636e7089aed9eeb631b7",
	    "0000000000000000048573913299b24c2f642faa9881829abee13c94acae5b35",
	    "00000000000000000e443a4ec5b37879190acca82b9cb4ae902a7c7f01a34d3f",
	    "000000000000000012272c71ec12e1e428a8ccf4d1d443e5a35aa9722689f298",
	    "000000000000000015acf35e919011b1249005910d40bd2c1eb91ddbff914bde",
	    "00000000000000000d762986eb5dbb2c9e1ba539cf4dfb5ccb9923c2c096eea8",
	    "000000000000000005176b66fe8e45647be9efdfce9c2ff9d6fc3735e8584549",
	    "0000000000000000181e7eeac0a8d7f0d8e8a621ef6e2d91f5c74a8b1dc74d39",
	    "000000000000000006aee5859ca74c2106169eb5f919563052dbd213abc2e77e",
	    "00000000000000000c9c556be3f24de2ecc66c5b63530b05362b5456a5e6edc3",
	    "0000000000000000123026c01d5c1b9179021dd9e03ecd5dae358c3aece1e33c",
	    "00000000000000000628efec8b515b92de502cd6e73dda22b53f17ec35b86ef6",
	    "000000000000000000f51b95902147ad33bdd7009ba5a190663aa034428bfaa3",
	    "000000000000000015e0ff2d709638f2b6e2530e1739311550d92b1f01295b7d",
	    "00000000000000000b38512351c8a4e1ee8b1d56523c962ec257d69abafa099c",
	    "00000000000000000b9fbe7e338587aa7636defd3c8a33081e9d0bec244bb9a0",
	    "00000000000000000cf0d3631bbaf10e477362ba893845a8510a6a7769a66dbe",
	    "00000000000000001753e98b54059eeab876ce459aa6ccbdbcda445d885c1d88",
	    "00000000000000000d90e395e35dc5680d1bdd4d41dd741bf57efac8a0cbf41b",
	    "000000000000000017b6bb920ded2e22a60f907f3d1040c23c93f844f8fab7fd",
	    "00000000000000000866bb701ed86d97059c63195ec4936951e54097010552ee",
	    "000000000000000001d1cbbe9e0e1d5693ce8cc0ee84d205770398c686481baa",
	    "00000000000000000342453ba14c498095c005e291edea98b05467bfe8cbb2d5",
	    "00000000000000001723c55a1337bd3cf910c8ff21c6f4659b30a5a4631200d7",
	    "00000000000000000c60f500f3da74947b46ebc5b47e738974050864a016dcc6",
	    "00000000000000000b94ba5ca5080596a8b1c8e50e8d8cd28993e6b3dfecc321",
	    "0000000000000000144ed42c6b968ab5f3c209533a82b0b5ea55003e1d1a3b14",
	    "00000000000000001130a92a32f828575e08ecf90c326929f360ee93ee527e60",
	    "0000000000000000176c848d25079880dbe41719af350dcf561a64a391a61e16",
	    "00000000000000000f71e12317f3c24641820adde9bd174e299554c5b3e7e9db",
	    "00000000000000001613a467eaa151d1b1e3784d4d3419ed94b72b8e2bf9320e",
	    "000000000000000009788c01a7fea5870e91717eaae55b217d16753f594b6ce2",
	    "000000000000000003813892c1ee904f2a62acbece874b94f7ac9df124c20f51",
	    "00000000000000001811da207e6e4166164489a8ee19acb728bfe23a965848cb",
	    "00000000000000001195836b48fa396ae4e857f0855366dab4a78a7374d7c50d",
	    "00000000000000000b44a2397eafa5992d6e14d505bf61626dde373f8719238e",
	    "00000000000000000b470b65df09dd8fb3d6d56a45e174767ea88d614b46daa7",
	    "000000000000000011db1b41854348d8825cb6aaaafee5e7b7a045b6426f98f7",
	    "0000000000000000086a2ac5e2a7be9b6cde6697de00b9fd918d8eb04f12cc34",
	    "000000000000000012bf660b13b68bfbb8773ccae5ece0aee178de21db1dd9ea",
	    "000000000000000002b757e0a58815124b2c4ae6e76ee3f9526dd17e6fdf32f4",
	    "0000000000000000166469abfd3a9463c66aa7d3e63c02d79517702433c25f8c",
	    "000000000000000005b1de28231f1e21bd49d40bb233d2470bd76d184fe98a96",
	    "00000000000000000e4a5fb7e2513e4380dc68a78e0a6734095038e6aeff809c",
	    "000000000000000015cbd499e17b3daadb5d37d23d6d078cf888bee5c2df0d5c",
	    "00000000000000000855b9da8d07e225c2cbf6ca6918247fe3d07a8d72f7ef00",
	    "000000000000000000645e891728319a63b4be026cf98776234ad9fa7003e8f4",
	    "0000000000000000163ec1d8c56b9d70e823d698caf1103e34f7dfc0d3c15f26",
	    "00000000000000001780c604aeb63b287b1e8c85f29e9156d31256f91322f2ec",
	    "00000000000000000766a33c9c520866b2f00ef7c2f9d3ee02ea6e2a0ce6e22d",
	    "000000000000000007ef22c951cc64504952ef3fa9090d6f11e74d83c66fee08",
	    "0000000000000000142bdd203365e9da00316363015161120e127d99ffb65983",
	    "00000000000000000b4311d1f6a87afdc219ba509b6e12ef2c320a8d7fdf65fd",
	    "0000000000000000024b751a039c639bf441cc4d336df51c1e307c8eb6a9ee8b",
	    "0000000000000000078e762bc42ab4e489d5b3d2d30495b48459591d1cbc693a",
	    "00000000000000000546714de9f29dcea0c433269e74144ef5bfce7cff649f4b",
	    "00000000000000000e956d9ebdef88922d3cbb8df62822cc58719bce227b292a",
	    "000000000000000016038b3ec9076d16a824a4a6e4a6b944d80d3bd17ce915f3",
	    "000000000000000014a0c54b037eabadde70e6e7f76fbc84d6d90dfd177eda50",
	    "000000000000000002283229a4f07789a5dd0d5637a48993ffc7fea4354ca761",
	    "000000000000000010780150982f48441b77bc929bc0b1b84f68a3ed86dcf76d",
	    "000000000000000013cac7ca6243560aeeb66c4a6909177ac13407308500598b",
	    "00000000000000000fd034712952116f454b837f44f762cb45c30778dffa4c13",
	    "0000000000000000105b031b11daa42938651a50d4bcc227ec9c68f373cfac46",
	    "000000000000000010b959fb340677288a39c662488b45d7873bde1c7f424591",
	    "000000000000000018713cb53796b77701637b17bb8373e7fdf15802b7fc6621",
	    "0000000000000000153d02bf6bc498b87506e509470c0b73ae63fdd361153568",
	    "000000000000000015224dae93bf5c28f7b77e557ad8e9107fffb6cb33691ad7",
	    "00000000000000000937134a2bfcd5ace17821f35921b619b6c3994d70c9422c",
	    "000000000000000003a1517685c09c26d3173577494358eca3e027c61bdc6f39",
	    "00000000000000000eba4864a54ad4c0e975655b89e40db136f761b2b4081456",
	    "0000000000000000157f3c6f5d9cc0289a3fbcae77e376d1b3977f86b16de9ce",
	    "0000000000000000098e9d35ecda2fbdaa669c267d5fa078008ff7ae8467e657",
	    "0000000000000000016b5169bff7f553440066a94acbbae4c9b25f0b535b0414",
	    "00000000000000000cbc109baa339670ddd7c029a6d3f0258155a36de7a3a750",
	    "00000000000000000c9058353f1033bfe16df7266b000ae4396756b93272d5f1",
	    "000000000000000006230d35281b15e2f2aa187df8d0533772c8a3f91d0dcf4a",
	    "000000000000000015d71f2745795bee72533e5e2c925237c64dab4fc098ac9d",
	    "000000000000000006faf4c4305b9b57dd46e180e5fe862e30a0a48ad981d7f6",
	    "0000000000000000147011a429bd8c2e30475ad61eaa544c3b971e99bb7bc307",
	    "000000000000000010ab2865a8d9341a6e98dd0ee63b28c348721ba99800d6cc",
	    "00000000000000000451046d30871c6a344ace4b8b3459b2992f04d2505d130a",
	    "000000000000000015e8056765c1b63d5a513f3471645c79a8d9763908b86a62",
	    "00000000000000000bebf8f9f6aa636cdf40afc62643c1512cf4347523eddeda",
	    "0000000000000000181e0b7760f0196b14e4a9b9d9f8218f42b88bb6d485f399",
	    "0000000000000000021028c914a8613b211877f00ab0333956e0f3c8f1dd533b",
	    "0000000000000000114e3ab8137a724f4d8e8359d3e38c4427395082c1602467",
	    "0000000000000000098698d1ddb10a77945d4ccaabdad2e195100a81dd32770f",
	    "000000000000000006921bfa68c108f4fdae2ea0bc44925d54cd332d6fb9832b",
	    "000000000000000008005cceac7a0fe48dbed303cd1d34f7c1f67a914fbe334f",
	    "00000000000000000dfb072d042697f5a8232667ba9acc1d04788c842df8aef6",
	    "00000000000000000b1ebf6bddec511bfc87b6fe8830d650b99ea0071784b70f",
	    "000000000000000013c1ea5022e18fa09596dcb3ce6736ef193cc13e0971a666",
	    "00000000000000000e604a5d49d8655928dd480ecbd19ecef5fcc5e04a70946c",
	    "0000000000000000125c34daf2aa31430fc5cb49a61ad8c1920e22acd5bb0a9c",
	    "00000000000000000b6e4aae3c52b41c56e93071e5edbe9522af4dfc670c5a98",
	    "000000000000000005074e4c3ba999f47944ba3fff420b4828ba708e2f947d81",
	    "0000000000000000030780194fb4459a3171b5259afb42a0ed719aec819c43dc",
	    "000000000000000013b70d4738a4c9fe53e25ede1eac4541b65b1baf2eef04f6",
	    "000000000000000017d7e1f9e25c196fc59680d28cd78bbf45007cdd311947d8",
	    "00000000000000000d6c96d74dd0c10c72cbed3dc40a1c74a3bc6b9768b28ebc",
	    "00000000000000000d68b85130227093beb685acc49d046ee50a7d6af4afd224",
	    "0000000000000000153c9889fbdc60965acd33402443fe1d9d1ed7152e675702",
	    "0000000000000000153e7ae094e2355802254368e4c7930ec3c139ab16e9bc70",
	    "0000000000000000104554c51f462e0af693846b3040ef18254a8b1d0a61aa63",
	    "00000000000000000ee4d0f4d086b0324e750d19fae10003c55ba875652c1ca4",
	    "00000000000000000585782b01dc875ba5d5ef22e3b9ef0d7cda576830689a10",
	    "00000000000000000e9d46970497da5e38a653a318fb42b18061caeea3d5bbb3",
	    "000000000000000007331d9ba3d913daf4d75f577985c8759c48dd66b7bb30ca",
	    "000000000000000001280d1dcf30bb6b39189324d9fe06b5e86eddcb499ebd19",
	    "00000000000000000b51bc4b952d725fd54c28fee5932194ad5f154d81e17890",
	    "0000000000000000058595ec317bf1a492e73b799780c61583851d9e195e13ef",
	    "00000000000000000066b468b452fcb50e0c428d7703e0bd23dc16ae67f1f88d",
	    "0000000000000000137c20d04911201822ebd319eca6fe58a906d3386644e79b",
	    "000000000000000015ee1446a7d16ba901bbc4c2847fe55eca2d5f818a921d57",
	    "0000000000000000025cee0e1ae26e443d6fdeb1d98853feac248124336f65ab",
	    "000000000000000015c21c962191ad91590c08cc1d07cf42ecc09a0d61907dfa",
	    "00000000000000000594ea0a82ff04521adff03320868d9ac1fbf8e3f9f41c30",
	    "0000000000000000179a89577c88b0da137771dd6ddca7535889584b925d5b18",
	    "000000000000000011888fb6c9c964af125961da7d13feec53ba3e1bb071ded0",
	    "000000000000000012de3f2416f341c94e931e1df10250cf71c3efbea75db428",
	    "00000000000000000642e7559ceb0863caadf89e997f25a929200c3b1434ed45",
	    "000000000000000001afa693a5aaef7532ae37013e60eea073a77a40baa2ea84",
	    "0000000000000000148c8866edc6d5c6856d4b0b758cca3df7999f5bf3933671",
	    "000000000000000017b8ecdebd235c0f72ff53943deb6293676588af648d74b9",
	    "0000000000000000051919a69d352b5ea63a78c65968b9a998076e8c7408a9a2",
	    "000000000000000006c7cdecaf9dbe50a5fc693e7a555550d57aa1706f3f964b",
	    "000000000000000010782621c97ece70b72a169fc07468dd4f41cdf0f60cddef",
	    "00000000000000000ace713dd80122301e9f2f07d82c25e38acbb2728e29d79e",
	    "00000000000000000de12589b24e02bac8370b28457858581fdea8244799bbae",
	    "00000000000000000d6a682987b229aacafefce3f153f5b4fd92795f9ac920f4",
	    "00000000000000000b3e3360eb1b163194956789c71331de6ad6c189ce163499",
	    "0000000000000000157b1914e33403984cbc8b969d52186476b51b07d41be07d",
	    "00000000000000000557679c7e56d4502a9f87e21cff7c9db938755149b9f60b",
	    "000000000000000002950ddab196250cc085138469824aa49a151b78026d7333",
	    "000000000000000018ab5f6bd270011c083d06bf21a47fa231a089a167bcec4e",
	    "00000000000000000e0d175f7f6c657d6dce5e0d909cafeb643b82d776110f25",
	    "0000000000000000080315867d97c97a55f23fea6998c9067e73c16abc73b791",
	    "00000000000000000a9fe63dbdc0cae20a33fbd93406fe2cae33ba95a591e3fb",
	    "00000000000000000d04e2f2667ec02da915f703cb0c464e8f5318f130858381",
	    "00000000000000000dd9b69e3215abcbcf180111de5cdae1313175fc9e1a9801",
	    "000000000000000010e727b08ea3dd7d46f52a9e68bab814b9f1e6f2c688d490",
	    "000000000000000000a83d9ccaa28d9a902379929f9689b9e2c771e6c3f817cf",
	    "000000000000000011608c668581fa764d3ba25759e6b4995a712355ff6f22dc",
	    "00000000000000000a61376166d0d9cae3d94269520319e9fe0a16a695f816bf",
	    "000000000000000002901a3ef8813022c6d84f292d03676f09a090ad8664c439",
	    "00000000000000000a91991a436c5a0aca289a32e40d9b9a4372c75e8bec64ee",
	    "0000000000000000015645609716e85133fa7be8f49063e90c1d7425ffd91ef4",
	    "00000000000000000375f9e7cae91dbea61e96dd2e58f6579f3361426c17a937",
	    "0000000000000000121efaab2647983c13eeceefdeba9f555cac88e151b0e369",
	    "000000000000000009dee8e9c826e54785d074c5b59618607f79affb39b4ece3",
	    "00000000000000000058fcd94454e97d824ddd2594d3d152a8d37fd6906a0c27",
	    "000000000000000009781d6f685ca79ae032c69f5f43f4ab7b46514c4f2fd033",
	    "000000000000000014013de4d5ba8dea8eb26cfbb3ff840333d2deb36a597c44",
	    "00000000000000000247ba56a4993d222ef565a7c0d2bb9bec6b7f3732a2ed02",
	    "0000000000000000146831d41dae35a4e6038289d82acf7e86506e7b576a5fb3",
	    "0000000000000000022f9407ae7d195ca4201bd2c9ab22edbea86e27a17bf1fe",
	    "000000000000000007263415597d604a484b17221638b13e14f42f3dcd4257ce",
	    "000000000000000015de5f009d21856ba523f2a64f88158454fd070137c9fe06",
	    "00000000000000000cbd04ddcefe8ba3568ef7401c6d9f0f53c84131d0268354",
	    "00000000000000000ebb33c74bc430174a074883350500cd7130c5417f5d58b0",
	    "00000000000000000bef31e2b2f0f76576043f11bfa8f320395dcd6a38ff7cb0",
	    "000000000000000012c0cba839ff85a5620665209ee5d6d0d9402efdcbb7804d",
	    "0000000000000000057db1adb1adcff3f4043fe76d8a5c7e43179a00951cb2c7",
	    "000000000000000015d27d2dd222b3f904b8159aba227e45f50785688d31a572",
	    "00000000000000000912f9a666ce1edfeb9118e034504d990b44ae4ed4c94ac2",
	    "00000000000000000b10abb1cceb4dba5dab298af7472495db42afcab9642f62",
	    "00000000000000000a132870f8da8d4298caf75006e4c350273a6b9bffcfa8ac",
	    "0000000000000000149561d46a9aa2294a4c3d2a1b5a5e79100f723c82e2b757",
	    "0000000000000000060b8378c8b260a26e2676c561d0e93261d494646cc4ea13",
	    "00000000000000001569248a24d500e60844adc0e46876756aec51dc55b839fa",
	    "0000000000000000106b7bea9c5da0dd8e6e473accba0a6a32dfc290d5d25c59",
	    "00000000000000000ba39c1713ea3d69b00f5b1701a4ac997bfe82d2980c07af",
	    "00000000000000000c9ead198ae801340b95f66a83d970e8282ebf0b795b0ee0",
	    "0000000000000000136b41252b170bb3e5cc4d450ba2ba3931e5597062ed5220",
	    "000000000000000008dad1b62d118c5176a2e5387ef969022709cc7c2ec6fa41",
	    "000000000000000012784a73c1b21d425dcb466c16032e70ce28f430256de39e",
	    "0000000000000000027c7e5d0ed57580ca214112e805715e884b5b4fda1632df",
	    "0000000000000000147c2b81fac99b75292bb7b1c977ce753b79547584d7eb91",
	    "00000000000000000ab233bbeeb6d944a28d5fc6fa32211a8b13899c86bba3fb",
	    "00000000000000000d4d7411d1b378a94355eabf5cb7df58fa48f30802992391",
	    "0000000000000000106f21e2fbafcee7ac184f1114f5ea241830a2f863ad60d9",
	    "000000000000000002cd55ea1e6fb2b644f4fa9c2ef020a6cd7d19d8b70bd5f1",
	    "00000000000000000c2048ad8d7a9c3545a53bb3f4ee238f395e23f94cb215aa",
	    "000000000000000016fdf661d8f19f544f29aafa52ee52ed269d071f0d3f00a7",
	    "0000000000000000030f5a5bf06a5bcfcb75ad2d88792d6915f3ab9941a1647f",
	    "00000000000000000d2d691a08cda88af0a486da1f90a52c4b01b56eb813f0ee",
	    "0000000000000000084e32d7fdcbcfd5e2f0fec6a3220324d70617e4bf057aa5",
	    "000000000000000005d4e1272781e972e7230ff9ac034242cfd9da14358b3777",
	    "00000000000000000564b88b60ab78635134b58c016765ce9f939031adeaa6cb",
	    "0000000000000000165642800bff3f12d38f227e232616212cd90c3f01677cf8",
	    "0000000000000000091d1fabded64c8793d7c2fa4375dedb6be3785e89d1c6f4",
	    "0000000000000000048d0cdc3592cb3509cc4f3c77bd81a5248b9d27f48b0b6f",
	    "0000000000000000002bb3a5c7cb56c2685818d71ef37b1d8e28c0ff93143a04",
	    "0000000000000000127c9732377c191c1908caaecd4f08d45eaa2a584539804c",
	    "000000000000000002d9c92f1b93569eaf6f0d3e7362c83fb0ae5a469f10a639",
	    "00000000000000000b8967fd6ec78e04370dc16c17aa6a1329b5c4fbd10d502f",
	    "00000000000000000c37232b391e9479dbecb24fd46d3ce83248ce71497e7349",
	    "000000000000000008e109984372730cca38d2363069fe6ab6b37463f1412c50",
	    "000000000000000008c5ca491376f157671b1309e74c8f8864f3142fbd0cfa3b",
	    "00000000000000000b249e1ddc64e1e6e837728d8f008637d3bdf09f150bb544",
	    "000000000000000012f31520fab43af32693fb20f5be78bb722c51b34ff014e7",
	    "000000000000000015d7f798aa92a8e6e464060d2503e1186025579d0fa65c83",
	    "0000000000000000037093c13501b92d817e2bbff3b89aefffd640a64a22a575",
	    "0000000000000000040b3dea66bce3ef453f7523770e3821ae992320b0022938",
	    "000000000000000007745fd91b01eb1ac2cc9a08206917d7dbe0fc8ab1bddbf8",
	    "00000000000000000bbcc57dd86a829d674506e0cb151a09e91a9decafbf292e",
	    "00000000000000000f430b7a265c88220a392733a25cbf26844048a9f88ad06a",
	    "00000000000000000cf61705feeec7a63a448861ee551a2400cd52e998c0a5a2",
	    "000000000000000011dcdf841ef0c529a77d94c9673857c08dfeb954d467ed11",
	    "00000000000000000e95129d8c0f54ed828535ea22f217e4aa391811658df89a",
	    "000000000000000011d23cf7d68932a090b9ff9e350fbddf0861470462da53c6",
	    "00000000000000000fb864238ca1afec1946a35af655ca8ee5d3731f354d17a1",
	    "00000000000000000106cd3726847f0c10aae6cb22b6f81501b499cb140f5216",
	    "000000000000000010b7e547d873385fc527c9981013aa49e0f80023c0f496dd",
	    "0000000000000000104f6217dcedfda795fa34278ddc67e485f243314de9de77",
	    "0000000000000000031135c9cd4b2a7b8652f2a7b01ff924b71c45193d7d24f8",
	    "0000000000000000065da55251fa1bff1cf8b69d2acaa65f8afbb47c4b88dc25",
	    "0000000000000000013658fc8407550a85ca94f3ec5ec2bd40b81127ebe34923",
	    "00000000000000000b52d36a71754e028f65ba59b075a6126b6f787c4806c41e",
	    "00000000000000001541c141c4b298757eea0b961d09775a67588fd876f0c6bd",
	    "0000000000000000056f40908a30a9148dd7b83418ad4b26d5b44a827e323021",
	    "000000000000000004c75af4ec6300142723b61857b265d5aa4c49f71b7b7082",
	    "000000000000000016864d0c674de7bde217f60e6836ad5b9dae098c25632245",
	    "000000000000000001c98869f7ac38454844482a29f69fe6c3f03837c3ae064a",
	    "000000000000000005a031fd3ee829c31668276d0f9d3640caba23bc88fb9a1c",
	    "0000000000000000080f81e432e419f503e09c8fa3796e0f68e54bb0be2efa7a",
	    "000000000000000004490baaace2bec99a4e5edc9e1cc4ca5a2df414cced6425",
	    "00000000000000000e1e10f298a4a3b6d45887b1f519b686d7e943a2b932b165",
	    "0000000000000000097b896696ac620c4284c1e642c6f410e9252c2850056242",
	    "0000000000000000077d9e2af20f29c7f170d363128cf37295b271fc3f9cabfb",
	    "00000000000000000cb35ee12f77423faabe5ad2ec9d5e5dd30bb63df9929e74",
	    "000000000000000012cbb29cd63e937522ea148fa72edf9dea84f42800296cb0",
	    "00000000000000000af1cb96defec351c95bfd6e4513c19b39f379ea659fc305",
	    "000000000000000015bdd61ea7e487e64bb26bb2b09bd797fa7f1cc6f75a9b44",
	    "0000000000000000040786dc773413bd761e0af380960035f93611ab923dd81b",
	    "00000000000000000458596498d27b20fd1e9edfd4e952f02d9dcff6cd297929",
	    "000000000000000014b60d5b8f4ae3cd40c4de1270d39adec2e174131284bd39",
	    "0000000000000000061c32785b954d833a6e571146ce5de2e0cb4d1eda93c45f",
	    "0000000000000000030aed831fee60808cccfe71370c7fc79aca28959d626438",
	    "00000000000000000341ab3079e03a0748837598a827fc752f38b341222d6c6a",
	    "00000000000000000084c82458af6d40d406ae2a5d898d5858eccfb50515214e",
	    "0000000000000000083a306f835ff8f149ca9c0e5cb9aa840dfc066cd64cd2d3",
	    "0000000000000000037e9156ce80cce597aaef825a57d937260b2e5f516cfbc6",
	    "0000000000000000148cf7aae5c660d455a9051c56dd480c5577dc5fe59b5a49",
	    "0000000000000000028dc06fa24383df02dae2d3b225566f30864d975502556d",
	    "00000000000000000ce235cb8295a6c74935561f028d3ecd8ec5445607c1e39d",
	    "000000000000000002e75b6aa1209e612871c24e550c7ee5298b2a9da96eb549",
	    "00000000000000000b596fd9a398bbae778c8725a93104a47890ac52afcf53b0",
	    "0000000000000000126c58845eec57e993726afc7f69b57ad4b0bcdd69ff5cc3",
	    "000000000000000004bc4304019b9d89038942c83d423fc38d7c347e72332f4d",
	    "000000000000000008b01254a56beb885744c6060c024115be2274a4c0eeed78",
	    "00000000000000000261143e0ba3461d27ba5e574de4a852e794e362b27960f1",
	    "00000000000000000a0007551b16b7d2556b76b4658b84a79a2aab8967a9268f",
	    "00000000000000000894a2442337fbe656e9dd99db2ff00dd47a73d23892a061",
	    "000000000000000011e91602cbcdb82e5984b658c5dd1c5435031025473f2e10",
	    "000000000000000002616b20314b616ef5b4c978a39a5e5951a5d6cef3085f32"
	  ],
	  "ts": [
	    1231006505,
	    1231611793,
	    1231829684,
	    1231999700,
	    1232189223,
	    1232384317,
	    1232582734,
	    1232787191,
	    1232896069,
	    1233090420,
	    1233277280,
	    1233449296,
	    1233626445,
	    1233793412,
	    1233966740,
	    1234132927,
	    1234304861,
	    1234474703,
	    1234637694,
	    1234814380,
	    1234996105,
	    1235172565,
	    1235358205,
	    1235558815,
	    1235757451,
	    1235964669,
	    1236170034,
	    1236362304,
	    1236555030,
	    1236754999,
	    1236946552,
	    1237133162,
	    1237310041,
	    1237493103,
	    1237727656,
	    1237909207,
	    1238097650,
	    1238285650,
	    1238472095,
	    1238659263,
	    1238854097,
	    1239031199,
	    1239240932,
	    1239443435,
	    1239625136,
	    1239809436,
	    1239990539,
	    1240168874,
	    1240349313,
	    1240560688,
	    1240744700,
	    1240942640,
	    1241111838,
	    1241287218,
	    1241471401,
	    1241630575,
	    1241808035,
	    1242052704,
	    1242224377,
	    1242384872,
	    1242566136,
	    1242740884,
	    1242977503,
	    1243281616,
	    1243459232,
	    1243674674,
	    1243908068,
	    1244169973,
	    1244611308,
	    1244862276,
	    1245135749,
	    1245408088,
	    1245678201,
	    1245959131,
	    1246247450,
	    1246513572,
	    1246768189,
	    1247049623,
	    1247310079,
	    1247603602,
	    1248050192,
	    1248357798,
	    1248752531,
	    1249358265,
	    1249597887,
	    1249847774,
	    1250144648,
	    1250751698,
	    1251360890,
	    1251662108,
	    1251936995,
	    1252257657,
	    1252582722,
	    1252890050,
	    1253208972,
	    1253490776,
	    1253858612,
	    1254090481,
	    1254339991,
	    1254645175,
	    1255033969,
	    1255319802,
	    1255659348,
	    1255962431,
	    1256196455,
	    1256467849,
	    1256794474,
	    1257277713,
	    1257622069,
	    1257931123,
	    1258226302,
	    1258450952,
	    1258726326,
	    1258960116,
	    1259198435,
	    1259495645,
	    1259774819,
	    1260091722,
	    1260290919,
	    1260499792,
	    1260704049,
	    1260895145,
	    1261055645,
	    1261163807,
	    1261263001,
	    1261384319,
	    1261516808,
	    1261654981,
	    1261798476,
	    1261927506,
	    1262071920,
	    1262209951,
	    1262367115,
	    1262523372,
	    1262636641,
	    1262749874,
	    1262883561,
	    1263020592,
	    1263147377,
	    1263285123,
	    1263417973,
	    1263566912,
	    1263732533,
	    1263905449,
	    1264051485,
	    1264187282,
	    1264335286,
	    1264445114,
	    1264553482,
	    1264682488,
	    1264795183,
	    1264897678,
	    1265024652,
	    1265159344,
	    1265238029,
	    1265332838,
	    1265430559,
	    1265546520,
	    1265640107,
	    1265746941,
	    1265874530,
	    1265996680,
	    1266092451,
	    1266198310,
	    1266318646,
	    1266421621,
	    1266510328,
	    1266625825,
	    1266721279,
	    1266818527,
	    1266909196,
	    1266998702,
	    1267137867,
	    1267269426,
	    1267394155,
	    1267502940,
	    1267639230,
	    1267757963,
	    1267878152,
	    1268001784,
	    1268158917,
	    1268307520,
	    1268462554,
	    1268629228,
	    1268795694,
	    1268948697,
	    1269082533,
	    1269198596,
	    1269317535,
	    1269430872,
	    1269547261,
	    1269656237,
	    1269778777,
	    1269892054,
	    1269991325,
	    1270098775,
	    1270234176,
	    1270366869,
	    1270497148,
	    1270630688,
	    1270738380,
	    1270858461,
	    1270941714,
	    1271037376,
	    1271147729,
	    1271262372,
	    1271369519,
	    1271474315,
	    1271567458,
	    1271664217,
	    1271756421,
	    1271860452,
	    1271980623,
	    1272125828,
	    1272250934,
	    1272379387,
	    1272499100,
	    1272645026,
	    1272775406,
	    1272908323,
	    1273061846,
	    1273213667,
	    1273364526,
	    1273522865,
	    1273705896,
	    1273876068,
	    1274077952,
	    1274214121,
	    1274343355,
	    1274456550,
	    1274568598,
	    1274675290,
	    1274784605,
	    1274882938,
	    1274990083,
	    1275088659,
	    1275219632,
	    1275367681,
	    1275514870,
	    1275669028,
	    1275817155,
	    1275958179,
	    1276094598,
	    1276227356,
	    1276367329,
	    1276503800,
	    1276621612,
	    1276770730,
	    1276912423,
	    1277046214,
	    1277182498,
	    1277307721,
	    1277431795,
	    1277564836,
	    1277701673,
	    1277836313,
	    1277949914,
	    1278058889,
	    1278174485,
	    1278296269,
	    1278415964,
	    1278554305,
	    1278675177,
	    1278791207,
	    1278904330,
	    1278939596,
	    1278965603,
	    1278991733,
	    1279017371,
	    1279056611,
	    1279095131,
	    1279132507,
	    1279168870,
	    1279199985,
	    1279235899,
	    1279270138,
	    1279318923,
	    1279438431,
	    1279565512,
	    1279682620,
	    1279794431,
	    1279904679,
	    1280020480,
	    1280117717,
	    1280207477,
	    1280337046,
	    1280464401,
	    1280579180,
	    1280678745,
	    1280764797,
	    1280857722,
	    1280949800,
	    1281044382,
	    1281185143,
	    1281302250,
	    1281417879,
	    1281521859,
	    1281618851,
	    1281713803,
	    1281801664,
	    1281868712,
	    1282031985,
	    1282198738,
	    1282332912,
	    1282448167,
	    1282554655,
	    1282653236,
	    1282750658,
	    1282854776,
	    1282973385,
	    1283107981,
	    1283240372,
	    1283370409,
	    1283505760,
	    1283633154,
	    1283762054,
	    1283898771,
	    1284042419,
	    1284171045,
	    1284300052,
	    1284424729,
	    1284544269,
	    1284650884,
	    1284751158,
	    1284840808,
	    1284949204,
	    1285053540,
	    1285182083,
	    1285279100,
	    1285372187,
	    1285477753,
	    1285580009,
	    1285676741,
	    1285791771,
	    1285937596,
	    1286123880,
	    1286278609,
	    1286417123,
	    1286552420,
	    1286687243,
	    1286815190,
	    1286947373,
	    1287068912,
	    1287181933,
	    1287265817,
	    1287345380,
	    1287429496,
	    1287515283,
	    1287607401,
	    1287711590,
	    1287841130,
	    1287955632,
	    1288056642,
	    1288147446,
	    1288250676,
	    1288345792,
	    1288435620,
	    1288538494,
	    1288666788,
	    1288781133,
	    1288890922,
	    1288990698,
	    1289090883,
	    1289179378,
	    1289258837,
	    1289363256,
	    1289458856,
	    1289567824,
	    1289674706,
	    1289767335,
	    1289868869,
	    1289975665,
	    1290061342,
	    1290154017,
	    1290319850,
	    1290461809,
	    1290599479,
	    1290724831,
	    1290834855,
	    1290967108,
	    1291069891,
	    1291181041,
	    1291291082,
	    1291408099,
	    1291503305,
	    1291593530,
	    1291684355,
	    1291773363,
	    1291861126,
	    1291972438,
	    1292106209,
	    1292235466,
	    1292371983,
	    1292483768,
	    1292611437,
	    1292746222,
	    1292869674,
	    1292984154,
	    1293129169,
	    1293271420,
	    1293412126,
	    1293541887,
	    1293670517,
	    1293801008,
	    1293920942,
	    1294046414,
	    1294197945,
	    1294343570,
	    1294472746,
	    1294607709,
	    1294735247,
	    1294866379,
	    1294985898,
	    1295110823,
	    1295236500,
	    1295366486,
	    1295501562,
	    1295612056,
	    1295746166,
	    1295869114,
	    1295999816,
	    1296116408,
	    1296261089,
	    1296391923,
	    1296525083,
	    1296656032,
	    1296791189,
	    1296908505,
	    1297027274,
	    1297135047,
	    1297260689,
	    1297372289,
	    1297486292,
	    1297600408,
	    1297709766,
	    1297806435,
	    1297900774,
	    1297994976,
	    1298110125,
	    1298223352,
	    1298333952,
	    1298435294,
	    1298530331,
	    1298629467,
	    1298714399,
	    1298788308,
	    1298904217,
	    1299054668,
	    1299173577,
	    1299281388,
	    1299358548,
	    1299438515,
	    1299532309,
	    1299648495,
	    1299812962,
	    1299976899,
	    1300168069,
	    1300337007,
	    1300503354,
	    1300677004,
	    1300836802,
	    1300971450,
	    1301108041,
	    1301259150,
	    1301390776,
	    1301526570,
	    1301637445,
	    1301755532,
	    1301880345,
	    1301999141,
	    1302130615,
	    1302271252,
	    1302405034,
	    1302538069,
	    1302662321,
	    1302781837,
	    1302925201,
	    1303051195,
	    1303198647,
	    1303339503,
	    1303474319,
	    1303601111,
	    1303729442,
	    1303837548,
	    1303957926,
	    1304072895,
	    1304188567,
	    1304305075,
	    1304416967,
	    1304524043,
	    1304624685,
	    1304729262,
	    1304824882,
	    1304922299,
	    1305020703,
	    1305136572,
	    1305265185,
	    1305357078,
	    1305450518,
	    1305545582,
	    1305629251,
	    1305709848,
	    1305806110,
	    1305910217,
	    1306008621,
	    1306094719,
	    1306172188,
	    1306248107,
	    1306317788,
	    1306388985,
	    1306468116,
	    1306593847,
	    1306731743,
	    1306871847,
	    1306986277,
	    1307096972,
	    1307196325,
	    1307302191,
	    1307392950,
	    1307517136,
	    1307624299,
	    1307718623,
	    1307813295,
	    1307903413,
	    1307993265,
	    1308086558,
	    1308162416,
	    1308270314,
	    1308386388,
	    1308485134,
	    1308582286,
	    1308672911,
	    1308755463,
	    1308843676,
	    1308930273,
	    1309074722,
	    1309210873,
	    1309345902,
	    1309462249,
	    1309583742,
	    1309714301,
	    1309843063,
	    1309990466,
	    1310146042,
	    1310285634,
	    1310429131,
	    1310565903,
	    1310700249,
	    1310829862,
	    1310962590,
	    1311100802,
	    1311248728,
	    1311391755,
	    1311527140,
	    1311663443,
	    1311781966,
	    1311915892,
	    1312051837,
	    1312178854,
	    1312315691,
	    1312460067,
	    1312625227,
	    1312798247,
	    1312944656,
	    1313097459,
	    1313264632,
	    1313424765,
	    1313586103,
	    1313734029,
	    1313886306,
	    1314014996,
	    1314155242,
	    1314315577,
	    1314471631,
	    1314651894,
	    1314790871,
	    1314945779,
	    1315089011,
	    1315244812,
	    1315386561,
	    1315555379,
	    1315700476,
	    1315869178,
	    1316014691,
	    1316170732,
	    1316328756,
	    1316486415,
	    1316637994,
	    1316781763,
	    1316949153,
	    1317113238,
	    1317264290,
	    1317440016,
	    1317604127,
	    1317770406,
	    1317926837,
	    1318094421,
	    1318272744,
	    1318470989,
	    1318646240,
	    1318815690,
	    1319004364,
	    1319169708,
	    1319369956,
	    1319549217,
	    1319740253,
	    1319941210,
	    1320119044,
	    1320257527,
	    1320418219,
	    1320563992,
	    1320724532,
	    1320859665,
	    1321017369,
	    1321177978,
	    1321324259,
	    1321469187,
	    1321631656,
	    1321796970,
	    1321957303,
	    1322123357,
	    1322304140,
	    1322480240,
	    1322641617,
	    1322760018,
	    1322907149,
	    1323050775,
	    1323185628,
	    1323332081,
	    1323469470,
	    1323618945,
	    1323781089,
	    1323930035,
	    1324104740,
	    1324256426,
	    1324402298,
	    1324550367,
	    1324699787,
	    1324834580,
	    1324959999,
	    1325101490,
	    1325265108,
	    1325404169,
	    1325542923,
	    1325681543,
	    1325826791,
	    1325945679,
	    1326075974,
	    1326219644,
	    1326354516,
	    1326508526,
	    1326651779,
	    1326785699,
	    1326944674,
	    1327093013,
	    1327226260,
	    1327365032,
	    1327513829,
	    1327675204,
	    1327818868,
	    1327943251,
	    1328084853,
	    1328228054,
	    1328367199,
	    1328513090,
	    1328667637,
	    1328816429,
	    1328967954,
	    1329107224,
	    1329268949,
	    1329426370,
	    1329566777,
	    1329695313,
	    1329857252,
	    1329989962,
	    1330133522,
	    1330264449,
	    1330406197,
	    1330529008,
	    1330671816,
	    1330853125,
	    1331002008,
	    1331150803,
	    1331292365,
	    1331418794,
	    1331562644,
	    1331704879,
	    1331873240,
	    1332002701,
	    1332137234,
	    1332279116,
	    1332413843,
	    1332568189,
	    1332693524,
	    1332833368,
	    1332978291,
	    1333124470,
	    1333260027,
	    1333421916,
	    1333586474,
	    1333755901,
	    1333916156,
	    1334062173,
	    1334208373,
	    1334382028,
	    1334552539,
	    1334710778,
	    1334861991,
	    1335004633,
	    1335146365,
	    1335310515,
	    1335460979,
	    1335610824,
	    1335742838,
	    1335870343,
	    1336003015,
	    1336138951,
	    1336269623,
	    1336401935,
	    1336523209,
	    1336660919,
	    1336826995,
	    1336984148,
	    1337154212,
	    1337320671,
	    1337471129,
	    1337634384,
	    1337811541,
	    1337987139,
	    1338132697,
	    1338288374,
	    1338443349,
	    1338596515,
	    1338729585,
	    1338878717,
	    1339020325,
	    1339175994,
	    1339306559,
	    1339440749,
	    1339582607,
	    1339724771,
	    1339864564,
	    1340001783,
	    1340120229,
	    1340282985,
	    1340437452,
	    1340583444,
	    1340724544,
	    1340862020,
	    1341016117,
	    1341174277,
	    1341315583,
	    1341457663,
	    1341603975,
	    1341732664,
	    1341868228,
	    1342017130,
	    1342167089,
	    1342301312,
	    1342444458,
	    1342578186,
	    1342725134,
	    1342874681,
	    1343022340,
	    1343161444,
	    1343293410,
	    1343420053,
	    1343565368,
	    1343683032,
	    1343838753,
	    1343979376,
	    1344113628,
	    1344263444,
	    1344407109,
	    1344535951,
	    1344665376,
	    1344799588,
	    1344934977,
	    1345067536,
	    1345208159,
	    1345363633,
	    1345475074,
	    1345602600,
	    1345738502,
	    1345884447,
	    1346014721,
	    1346158748,
	    1346288336,
	    1346439311,
	    1346575242,
	    1346709744,
	    1346843120,
	    1346965507,
	    1347101157,
	    1347243639,
	    1347385706,
	    1347540002,
	    1347680862,
	    1347821781,
	    1347948649,
	    1348092851,
	    1348229985,
	    1348365068,
	    1348500180,
	    1348649538,
	    1348793096,
	    1348927184,
	    1349068277,
	    1349219930,
	    1349384569,
	    1349540437,
	    1349684778,
	    1349826603,
	    1349977541,
	    1350121244,
	    1350273911,
	    1350413006,
	    1350558680,
	    1350706211,
	    1350843383,
	    1350981731,
	    1351130878,
	    1351272197,
	    1351400069,
	    1351527186,
	    1351677500,
	    1351833244,
	    1351980028,
	    1352118294,
	    1352272413,
	    1352403152,
	    1352549018,
	    1352701438,
	    1352856338,
	    1353014596,
	    1353166008,
	    1353315305,
	    1353461415,
	    1353601812,
	    1353746624,
	    1353888703,
	    1354027779,
	    1354158769,
	    1354309748,
	    1354452242,
	    1354598819,
	    1354781140,
	    1354937034,
	    1355103421,
	    1355253442,
	    1355419363,
	    1355613707,
	    1355788538,
	    1355950202,
	    1356133749,
	    1356288098,
	    1356459454,
	    1356600348,
	    1356731296,
	    1356878937,
	    1356984337,
	    1357027862,
	    1357071960,
	    1357116391,
	    1357159939,
	    1357203291,
	    1357247554,
	    1357290972,
	    1357334227,
	    1357378990,
	    1357422256,
	    1357465632,
	    1357508985,
	    1357554484,
	    1357597914,
	    1357641634,
	    1357685049,
	    1357729050,
	    1357773369,
	    1357816648,
	    1357860810,
	    1357904536,
	    1357948394,
	    1357992331,
	    1358035785,
	    1358079061,
	    1358122423,
	    1358167475,
	    1358212675,
	    1358256270,
	    1358300298,
	    1358343866,
	    1358387081,
	    1358430644,
	    1358474721,
	    1358518147,
	    1358562180,
	    1358606318,
	    1358649620,
	    1358692976,
	    1358736348,
	    1358779581,
	    1358823094,
	    1358867032,
	    1358911169,
	    1358955911,
	    1358999287,
	    1359043072,
	    1359087180,
	    1359131524,
	    1359174766,
	    1359218034,
	    1359261747,
	    1359305140,
	    1359348673,
	    1359393120,
	    1359436547,
	    1359480044,
	    1359523376,
	    1359567422,
	    1359611091,
	    1359654478,
	    1359698688,
	    1359742239,
	    1359785813,
	    1359829043,
	    1359872289,
	    1359915994,
	    1359959384,
	    1360002945,
	    1360046596,
	    1360089954,
	    1360133209,
	    1360176871,
	    1360220678,
	    1360265098,
	    1360309568,
	    1360353733,
	    1360397185,
	    1360440987,
	    1360484278,
	    1360527488,
	    1360571240,
	    1360614626,
	    1360658335,
	    1360701695,
	    1360745064,
	    1360788511,
	    1360832130,
	    1360875497,
	    1360919239,
	    1360962536,
	    1361006222,
	    1361050271,
	    1361093522,
	    1361136824,
	    1361180143,
	    1361223628,
	    1361266895,
	    1361310946,
	    1361354311,
	    1361397553,
	    1361441260,
	    1361485183,
	    1361528488,
	    1361572192,
	    1361615571,
	    1361658866,
	    1361702242,
	    1361745746,
	    1361789326,
	    1361832558,
	    1361876309,
	    1361919778,
	    1361963092,
	    1362006592,
	    1362050035,
	    1362093576,
	    1362136903,
	    1362180423,
	    1362224491,
	    1362268885,
	    1362313577,
	    1362358151,
	    1362401871,
	    1362445367,
	    1362488786,
	    1362532671,
	    1362576198,
	    1362620193,
	    1362665215,
	    1362708725,
	    1362752122,
	    1362796173,
	    1362839975,
	    1362883566,
	    1362927126,
	    1362970481,
	    1363013740,
	    1363057410,
	    1363101305,
	    1363145663,
	    1363190236,
	    1363233547,
	    1363277512,
	    1363321100,
	    1363364378,
	    1363408243,
	    1363451552,
	    1363495930,
	    1363539200,
	    1363584005,
	    1363627747,
	    1363670982,
	    1363714259,
	    1363757558,
	    1363801235,
	    1363844457,
	    1363888182,
	    1363931455,
	    1363975741,
	    1364020275,
	    1364063516,
	    1364106857,
	    1364150381,
	    1364194079,
	    1364237354,
	    1364280638,
	    1364324046,
	    1364367331,
	    1364410709,
	    1364454064,
	    1364497268,
	    1364542716,
	    1364586214,
	    1364629807,
	    1364673289,
	    1364717434,
	    1364760669,
	    1364803893,
	    1364848063,
	    1364891336,
	    1364935190,
	    1364978543,
	    1365023674,
	    1365067618,
	    1365111689,
	    1365155710,
	    1365200121,
	    1365244886,
	    1365288314,
	    1365331761,
	    1365375400,
	    1365419079,
	    1365463159,
	    1365506582,
	    1365549813,
	    1365593076,
	    1365636635,
	    1365679926,
	    1365723754,
	    1365766996,
	    1365810548,
	    1365854352,
	    1365897624,
	    1365941259,
	    1365986552,
	    1366032026,
	    1366075406,
	    1366118672,
	    1366162030,
	    1366205241,
	    1366248449,
	    1366291930,
	    1366335924,
	    1366379727,
	    1366424626,
	    1366468922,
	    1366512143,
	    1366555363,
	    1366599175,
	    1366642703,
	    1366686026,
	    1366730612,
	    1366774216,
	    1366818124,
	    1366862680,
	    1366906082,
	    1366949774,
	    1366994440,
	    1367038164,
	    1367081583,
	    1367124786,
	    1367168064,
	    1367212221,
	    1367255669,
	    1367299522,
	    1367343214,
	    1367387032,
	    1367431442,
	    1367474822,
	    1367518081,
	    1367561546,
	    1367604903,
	    1367648605,
	    1367691921,
	    1367735802,
	    1367779206,
	    1367822512,
	    1367865938,
	    1367910278,
	    1367953704,
	    1367997217,
	    1368040809,
	    1368084912,
	    1368128585,
	    1368172530,
	    1368216026,
	    1368259294,
	    1368302822,
	    1368348012,
	    1368391255,
	    1368434455,
	    1368477772,
	    1368521546,
	    1368565925,
	    1368609555,
	    1368652946,
	    1368697502,
	    1368740716,
	    1368784155,
	    1368827592,
	    1368870793,
	    1368914555,
	    1368958388,
	    1369003011,
	    1369047014,
	    1369090416,
	    1369133846,
	    1369177050,
	    1369220424,
	    1369264797,
	    1369308020,
	    1369351410,
	    1369394692,
	    1369438599,
	    1369481981,
	    1369526267,
	    1369569993,
	    1369613338,
	    1369657208,
	    1369700637,
	    1369743865,
	    1369789277,
	    1369833171,
	    1369877479,
	    1369920951,
	    1369964159,
	    1370008019,
	    1370051281,
	    1370094562,
	    1370138407,
	    1370181611,
	    1370225812,
	    1370269074,
	    1370312423,
	    1370355710,
	    1370399809,
	    1370443373,
	    1370486859,
	    1370531344,
	    1370574829,
	    1370618095,
	    1370661456,
	    1370705200,
	    1370748718,
	    1370793180,
	    1370836407,
	    1370880895,
	    1370924155,
	    1370968316,
	    1371011762,
	    1371055245,
	    1371098493,
	    1371141761,
	    1371185268,
	    1371228555,
	    1371272550,
	    1371316533,
	    1371360152,
	    1371403644,
	    1371447124,
	    1371490523,
	    1371533764,
	    1371577586,
	    1371623557,
	    1371667224,
	    1371710859,
	    1371754355,
	    1371797679,
	    1371841633,
	    1371884902,
	    1371928178,
	    1371971447,
	    1372015058,
	    1372058773,
	    1372102387,
	    1372145782,
	    1372189133,
	    1372232582,
	    1372276066,
	    1372319599,
	    1372362991,
	    1372406817,
	    1372450589,
	    1372494167,
	    1372537523,
	    1372581032,
	    1372624312,
	    1372668248,
	    1372711747,
	    1372755576,
	    1372800586,
	    1372843986,
	    1372887892,
	    1372931523,
	    1372975738,
	    1373021335,
	    1373065620,
	    1373109361,
	    1373152723,
	    1373196483,
	    1373240006,
	    1373283642,
	    1373326905,
	    1373370413,
	    1373413688,
	    1373456955,
	    1373501278,
	    1373544497,
	    1373588319,
	    1373632579,
	    1373678245,
	    1373721790,
	    1373765274,
	    1373808947,
	    1373852206,
	    1373895631,
	    1373938858,
	    1373985596,
	    1374029859,
	    1374073513,
	    1374117112,
	    1374161161,
	    1374204391,
	    1374247954,
	    1374291424,
	    1374334786,
	    1374380044,
	    1374423321,
	    1374467021,
	    1374510429,
	    1374553774,
	    1374598348,
	    1374641636,
	    1374685145,
	    1374728416,
	    1374771682,
	    1374815303,
	    1374858657,
	    1374902088,
	    1374945297,
	    1374988805,
	    1375033339,
	    1375076685,
	    1375121186,
	    1375164880,
	    1375208435,
	    1375253376,
	    1375297502,
	    1375341528,
	    1375384965,
	    1375428261,
	    1375472051,
	    1375516386,
	    1375559648,
	    1375602882,
	    1375646225,
	    1375690037,
	    1375733313,
	    1375776660,
	    1375820166,
	    1375865583,
	    1375909027,
	    1375952452,
	    1375996787,
	    1376040652,
	    1376084195,
	    1376127895,
	    1376171229,
	    1376215304,
	    1376259290,
	    1376302587,
	    1376345910,
	    1376390692,
	    1376434612,
	    1376478222,
	    1376521663,
	    1376565077,
	    1376608707,
	    1376652935,
	    1376696506,
	    1376740702,
	    1376784037,
	    1376827683,
	    1376871378,
	    1376914712,
	    1376957913,
	    1377001626,
	    1377045046,
	    1377089247,
	    1377133586,
	    1377176806,
	    1377220195,
	    1377263438,
	    1377307774,
	    1377351674,
	    1377395461,
	    1377438987,
	    1377482240,
	    1377525653,
	    1377570049,
	    1377613381,
	    1377657225,
	    1377701001,
	    1377744721,
	    1377788544,
	    1377833433,
	    1377876707,
	    1377920322,
	    1377963726,
	    1378007269,
	    1378050948,
	    1378094713,
	    1378139072,
	    1378182539,
	    1378226015,
	    1378269408,
	    1378316593,
	    1378359844,
	    1378403492,
	    1378446735,
	    1378490293,
	    1378533640,
	    1378577125,
	    1378620873,
	    1378665162,
	    1378709371,
	    1378752967,
	    1378797248,
	    1378840549,
	    1378883931,
	    1378927218,
	    1378970648,
	    1379013887,
	    1379057235,
	    1379100826,
	    1379144345,
	    1379187733,
	    1379231344,
	    1379275197,
	    1379319109,
	    1379362330,
	    1379408145,
	    1379451884,
	    1379495163,
	    1379539238,
	    1379582604,
	    1379626381,
	    1379670110,
	    1379713423,
	    1379756625,
	    1379799834,
	    1379843087,
	    1379886581,
	    1379930886,
	    1379974643,
	    1380018218,
	    1380061586,
	    1380105265,
	    1380148499,
	    1380191967,
	    1380236023,
	    1380279361,
	    1380323192,
	    1380366536,
	    1380409912,
	    1380453132,
	    1380496493,
	    1380539943,
	    1380583360,
	    1380626757,
	    1380670008,
	    1380713935,
	    1380757366,
	    1380800876,
	    1380844659,
	    1380888026,
	    1380931412,
	    1380975033,
	    1381018357,
	    1381061760,
	    1381104961,
	    1381148638,
	    1381193060,
	    1381236509,
	    1381279825,
	    1381323104,
	    1381366529,
	    1381409736,
	    1381452957,
	    1381496397,
	    1381539704,
	    1381583011,
	    1381626229,
	    1381670407,
	    1381713699,
	    1381756950,
	    1381800265,
	    1381843638,
	    1381886845,
	    1381930178,
	    1381973401,
	    1382017537,
	    1382061093,
	    1382104696,
	    1382148287,
	    1382191535,
	    1382234981,
	    1382278191,
	    1382321508,
	    1382365173,
	    1382408393,
	    1382451643,
	    1382495966,
	    1382539634,
	    1382582883,
	    1382626324,
	    1382669935,
	    1382713419,
	    1382756664,
	    1382800022,
	    1382843400,
	    1382886772,
	    1382930306,
	    1382974480,
	    1383017779,
	    1383061080,
	    1383104807,
	    1383148267,
	    1383191809,
	    1383235052,
	    1383278387,
	    1383321597,
	    1383364925,
	    1383409105,
	    1383452868,
	    1383496276,
	    1383540810,
	    1383584730,
	    1383628317,
	    1383672197,
	    1383716435,
	    1383760325,
	    1383804792,
	    1383847998,
	    1383891409,
	    1383935506,
	    1383979266,
	    1384022596,
	    1384066017,
	    1384109600,
	    1384153597,
	    1384197010,
	    1384241121,
	    1384284509,
	    1384327856,
	    1384371634,
	    1384415762,
	    1384459153,
	    1384503207,
	    1384546721,
	    1384589958,
	    1384633339,
	    1384676738,
	    1384720301,
	    1384763951,
	    1384808712,
	    1384851984,
	    1384895928,
	    1384939604,
	    1384983408,
	    1385026704,
	    1385071462,
	    1385115612,
	    1385159507,
	    1385202734,
	    1385246133,
	    1385289394,
	    1385333157,
	    1385378257,
	    1385421926,
	    1385465305,
	    1385509293,
	    1385554224,
	    1385598146,
	    1385641936,
	    1385685534,
	    1385728801,
	    1385772757,
	    1385816694,
	    1385862302,
	    1385906179,
	    1385949649,
	    1385993724,
	    1386038568,
	    1386083620,
	    1386127080,
	    1386170780,
	    1386214595,
	    1386259407,
	    1386303458,
	    1386346741,
	    1386390508,
	    1386434074,
	    1386478882,
	    1386523764,
	    1386568395,
	    1386612278,
	    1386655806,
	    1386699227,
	    1386742759,
	    1386786394,
	    1386829664,
	    1386872883,
	    1386917354,
	    1386961178,
	    1387004684,
	    1387047980,
	    1387091239,
	    1387134949,
	    1387178204,
	    1387221471,
	    1387264880,
	    1387308395,
	    1387352368,
	    1387396079,
	    1387439698,
	    1387483148,
	    1387526658,
	    1387572492,
	    1387617112,
	    1387660361,
	    1387703675,
	    1387747605,
	    1387791728,
	    1387836374,
	    1387879741,
	    1387922951,
	    1387966162,
	    1388009809,
	    1388053579,
	    1388097171,
	    1388140436,
	    1388183675,
	    1388227519,
	    1388270814,
	    1388315878,
	    1388359519,
	    1388403164,
	    1388446911,
	    1388490331,
	    1388520477,
	    1388542348,
	    1388564308,
	    1388586056,
	    1388608354,
	    1388630297,
	    1388651984,
	    1388673739,
	    1388695612,
	    1388717840,
	    1388739790,
	    1388761929,
	    1388783879,
	    1388806149,
	    1388828930,
	    1388850940,
	    1388872743,
	    1388894897,
	    1388916601,
	    1388938869,
	    1388960483,
	    1388982210,
	    1389003995,
	    1389025752,
	    1389047471,
	    1389069786,
	    1389092195,
	    1389113848,
	    1389135613,
	    1389157862,
	    1389180653,
	    1389202279,
	    1389224917,
	    1389246746,
	    1389268405,
	    1389290162,
	    1389312491,
	    1389334227,
	    1389356259,
	    1389378014,
	    1389400160,
	    1389422257,
	    1389444140,
	    1389465839,
	    1389487451,
	    1389509677,
	    1389532388,
	    1389554449,
	    1389576141,
	    1389598271,
	    1389620012,
	    1389641670,
	    1389664564,
	    1389686250,
	    1389708420,
	    1389730085,
	    1389751938,
	    1389773798,
	    1389796631,
	    1389818496,
	    1389840168,
	    1389861780,
	    1389883509,
	    1389906648,
	    1389928610,
	    1389950785,
	    1389972782,
	    1389995365,
	    1390017403,
	    1390039198,
	    1390062120,
	    1390083964,
	    1390105612,
	    1390127473,
	    1390149239,
	    1390171125,
	    1390192841,
	    1390214871,
	    1390236666,
	    1390258417,
	    1390280308,
	    1390302874,
	    1390325577,
	    1390347221,
	    1390369138,
	    1390390881,
	    1390413083,
	    1390435525,
	    1390458759,
	    1390480514,
	    1390502140,
	    1390524549,
	    1390546583,
	    1390568673,
	    1390590294,
	    1390612839,
	    1390634458,
	    1390656100,
	    1390677986,
	    1390700222,
	    1390722155,
	    1390744954,
	    1390766764,
	    1390788646,
	    1390811965,
	    1390833875,
	    1390855600,
	    1390878603,
	    1390900434,
	    1390922044,
	    1390944706,
	    1390967252,
	    1390989744,
	    1391011413,
	    1391033338,
	    1391055105,
	    1391076884,
	    1391098988,
	    1391120592,
	    1391143276,
	    1391165420,
	    1391187309,
	    1391209575,
	    1391232603,
	    1391254599,
	    1391276407,
	    1391298184,
	    1391319786,
	    1391341609,
	    1391363293,
	    1391385374,
	    1391407986,
	    1391429939,
	    1391453174,
	    1391475194,
	    1391497305,
	    1391519016,
	    1391541353,
	    1391563700,
	    1391585468,
	    1391607096,
	    1391628788,
	    1391651595,
	    1391673892,
	    1391695587,
	    1391717421,
	    1391739361,
	    1391761103,
	    1391783589,
	    1391805526,
	    1391827320,
	    1391850295,
	    1391871963,
	    1391893861,
	    1391915751,
	    1391937620,
	    1391959482,
	    1391981232,
	    1392002953,
	    1392025293,
	    1392046918,
	    1392068998,
	    1392090715,
	    1392112602,
	    1392134777,
	    1392157585,
	    1392179681,
	    1392201471,
	    1392223397,
	    1392245794,
	    1392267472,
	    1392289345,
	    1392311778,
	    1392334101,
	    1392356187,
	    1392378393,
	    1392400455,
	    1392422499,
	    1392444148,
	    1392465944,
	    1392487867,
	    1392509618,
	    1392532938,
	    1392555108,
	    1392576908,
	    1392598669,
	    1392620495,
	    1392642227,
	    1392663912,
	    1392685929,
	    1392707671,
	    1392730055,
	    1392751756,
	    1392773751,
	    1392795449,
	    1392817367,
	    1392839062,
	    1392860970,
	    1392882631,
	    1392904251,
	    1392925910,
	    1392948292,
	    1392970035,
	    1392991701,
	    1393014315,
	    1393036839,
	    1393058987,
	    1393082050,
	    1393103958,
	    1393125675,
	    1393147299,
	    1393169333,
	    1393191364,
	    1393213177,
	    1393235589,
	    1393257297,
	    1393279273,
	    1393301123,
	    1393322903,
	    1393344750,
	    1393366671,
	    1393388342,
	    1393410389,
	    1393432110,
	    1393454558,
	    1393476338,
	    1393498818,
	    1393521448,
	    1393543813,
	    1393566049,
	    1393589174,
	    1393611089,
	    1393632819,
	    1393654822,
	    1393677475,
	    1393700319,
	    1393722430,
	    1393744140,
	    1393766116,
	    1393789338,
	    1393811552,
	    1393833248,
	    1393855374,
	    1393877188,
	    1393898957,
	    1393922475,
	    1393946138,
	    1393967800,
	    1393990465,
	    1394012194,
	    1394034570,
	    1394056746,
	    1394078840,
	    1394100562,
	    1394122780,
	    1394144443,
	    1394166737,
	    1394188854,
	    1394210617,
	    1394232736,
	    1394254511,
	    1394276558,
	    1394299246,
	    1394320913,
	    1394342783,
	    1394364762,
	    1394386823,
	    1394408518,
	    1394430346,
	    1394452945,
	    1394475213,
	    1394498020,
	    1394519911,
	    1394542138,
	    1394564222,
	    1394587538,
	    1394609258,
	    1394631246,
	    1394654724,
	    1394676535,
	    1394698361,
	    1394719973,
	    1394741794,
	    1394763575,
	    1394785509,
	    1394807490,
	    1394830031,
	    1394852310,
	    1394874465,
	    1394896422,
	    1394918645,
	    1394940705,
	    1394963179,
	    1394984948,
	    1395006866,
	    1395029384,
	    1395050992,
	    1395072761,
	    1395094816,
	    1395116701,
	    1395139076,
	    1395160683,
	    1395183978,
	    1395205870,
	    1395227768,
	    1395249485,
	    1395271407,
	    1395293701,
	    1395315486,
	    1395337411,
	    1395359730,
	    1395381907,
	    1395403613,
	    1395425683,
	    1395447809,
	    1395469946,
	    1395492802,
	    1395515986,
	    1395537600,
	    1395559689,
	    1395581937,
	    1395604759,
	    1395626863,
	    1395648810,
	    1395670570,
	    1395694055,
	    1395716618,
	    1395739369,
	    1395761839,
	    1395783980,
	    1395806335,
	    1395828971,
	    1395851992,
	    1395873635,
	    1395896090,
	    1395918439,
	    1395940541,
	    1395962682,
	    1395984453,
	    1396006330,
	    1396028413,
	    1396050811,
	    1396073059,
	    1396094997,
	    1396116869,
	    1396139056,
	    1396161215,
	    1396183077,
	    1396204786,
	    1396227109,
	    1396249146,
	    1396271516,
	    1396293441,
	    1396315574,
	    1396338562,
	    1396360842,
	    1396382570,
	    1396404608,
	    1396426748,
	    1396448359,
	    1396469987,
	    1396491641,
	    1396513396,
	    1396535588,
	    1396557716,
	    1396579800,
	    1396601570,
	    1396623313,
	    1396645485,
	    1396667144,
	    1396688829,
	    1396710748,
	    1396733358,
	    1396755425,
	    1396777792,
	    1396800562,
	    1396822709,
	    1396844381,
	    1396866264,
	    1396889101,
	    1396910801,
	    1396932739,
	    1396955412,
	    1396978540,
	    1397001349,
	    1397023622,
	    1397045285,
	    1397067747,
	    1397089584,
	    1397111425,
	    1397133418,
	    1397155927,
	    1397178853,
	    1397200644,
	    1397222609,
	    1397244351,
	    1397266586,
	    1397288346,
	    1397309951,
	    1397332434,
	    1397354266,
	    1397376013,
	    1397397726,
	    1397419452,
	    1397441104,
	    1397464051,
	    1397486232,
	    1397509209,
	    1397530927,
	    1397552688,
	    1397574527,
	    1397596420,
	    1397618829,
	    1397640491,
	    1397662555,
	    1397685406,
	    1397707646,
	    1397729617,
	    1397751666,
	    1397774972,
	    1397796824,
	    1397818450,
	    1397840101,
	    1397863447,
	    1397885063,
	    1397906883,
	    1397928728,
	    1397951882,
	    1397973531,
	    1397995902,
	    1398017511,
	    1398039599,
	    1398062055,
	    1398085375,
	    1398107849,
	    1398129881,
	    1398151894,
	    1398173740,
	    1398195744,
	    1398217529,
	    1398239191,
	    1398261325,
	    1398284277,
	    1398305947,
	    1398327867,
	    1398349667,
	    1398371487,
	    1398394089,
	    1398415777,
	    1398437567,
	    1398459414,
	    1398481740,
	    1398503797,
	    1398526250,
	    1398548049,
	    1398570743,
	    1398592543,
	    1398614798,
	    1398636684,
	    1398658623,
	    1398680398,
	    1398702471,
	    1398725145,
	    1398747002,
	    1398768603,
	    1398790353,
	    1398812956,
	    1398835505,
	    1398857291,
	    1398878928,
	    1398901684,
	    1398924930,
	    1398947562,
	    1398969446,
	    1398991654,
	    1399013257,
	    1399035114,
	    1399056964,
	    1399078698,
	    1399100405,
	    1399123031,
	    1399145235,
	    1399167069,
	    1399190146,
	    1399212935,
	    1399234974,
	    1399256893,
	    1399280398,
	    1399303477,
	    1399325126,
	    1399346965,
	    1399368966,
	    1399390845,
	    1399412822,
	    1399434422,
	    1399456313,
	    1399478347,
	    1399500043,
	    1399522120,
	    1399543863,
	    1399566399,
	    1399588088,
	    1399610739,
	    1399632411,
	    1399654368,
	    1399677022,
	    1399699773,
	    1399721785,
	    1399743511,
	    1399765294,
	    1399787024,
	    1399809097,
	    1399831270,
	    1399853133,
	    1399875005,
	    1399896823,
	    1399918624,
	    1399940625,
	    1399963357,
	    1399985189,
	    1400007437,
	    1400030558,
	    1400052660,
	    1400074776,
	    1400097158,
	    1400119173,
	    1400140897,
	    1400162570,
	    1400184406,
	    1400206364,
	    1400228514,
	    1400250198,
	    1400272378,
	    1400294735,
	    1400316665,
	    1400339188,
	    1400361087,
	    1400382722,
	    1400404861,
	    1400427172,
	    1400448882,
	    1400470803,
	    1400493083,
	    1400514818,
	    1400536644,
	    1400558443,
	    1400580300,
	    1400602187,
	    1400624229,
	    1400646638,
	    1400668562,
	    1400690692,
	    1400712462,
	    1400734166,
	    1400756004,
	    1400777774,
	    1400799704,
	    1400821457,
	    1400843673,
	    1400865579,
	    1400887357,
	    1400909169,
	    1400931147,
	    1400953331,
	    1400975123,
	    1400997120,
	    1401019165,
	    1401040924,
	    1401062741,
	    1401085257,
	    1401107309,
	    1401130020,
	    1401152331,
	    1401174236,
	    1401195967,
	    1401218069,
	    1401239722,
	    1401261809,
	    1401283598,
	    1401305552,
	    1401327433,
	    1401349143,
	    1401371568,
	    1401393279,
	    1401414930,
	    1401436605,
	    1401458326,
	    1401479997,
	    1401502140,
	    1401524048,
	    1401545918,
	    1401567808,
	    1401589529,
	    1401611429,
	    1401633156,
	    1401655096,
	    1401677111,
	    1401699337,
	    1401721782,
	    1401743744,
	    1401765494,
	    1401787384,
	    1401809331,
	    1401831244,
	    1401854073,
	    1401876460,
	    1401898173,
	    1401920993,
	    1401943260,
	    1401965040,
	    1401987628,
	    1402009597,
	    1402032300,
	    1402054245,
	    1402077253,
	    1402099076,
	    1402121359,
	    1402144804,
	    1402166785,
	    1402188845,
	    1402210711,
	    1402232703,
	    1402255699,
	    1402277927,
	    1402299754,
	    1402322676,
	    1402344444,
	    1402366369,
	    1402388084,
	    1402410207,
	    1402432392,
	    1402454065,
	    1402476152,
	    1402497920,
	    1402520361,
	    1402541986,
	    1402563771,
	    1402585455,
	    1402607415,
	    1402629094,
	    1402650805,
	    1402672486,
	    1402695553,
	    1402717523,
	    1402739483,
	    1402761770,
	    1402784192,
	    1402806860,
	    1402828916,
	    1402850559,
	    1402872786,
	    1402895414,
	    1402918415,
	    1402940588,
	    1402963357,
	    1402984971,
	    1403006621,
	    1403028714,
	    1403050851,
	    1403073039,
	    1403095049,
	    1403116681,
	    1403138466,
	    1403160468,
	    1403182663,
	    1403204574,
	    1403226380,
	    1403248153,
	    1403270232,
	    1403291970,
	    1403313901,
	    1403335891,
	    1403358602,
	    1403380456,
	    1403402203,
	    1403424005,
	    1403445673,
	    1403468334,
	    1403490283,
	    1403512305,
	    1403534588,
	    1403556405,
	    1403579122,
	    1403600997,
	    1403622775,
	    1403644736,
	    1403666554,
	    1403688229,
	    1403709966,
	    1403732243,
	    1403753926,
	    1403776384,
	    1403798547,
	    1403820600,
	    1403842207,
	    1403864357,
	    1403886410,
	    1403908076,
	    1403930509,
	    1403952349,
	    1403974205,
	    1403996770,
	    1404018436,
	    1404040136,
	    1404062192,
	    1404086635,
	    1404109384,
	    1404131519,
	    1404153688,
	    1404175816,
	    1404198710,
	    1404220718,
	    1404243374,
	    1404266037,
	    1404288420,
	    1404310108,
	    1404332919,
	    1404354529,
	    1404376331,
	    1404398140,
	    1404419932,
	    1404441902,
	    1404464050,
	    1404485805,
	    1404507427,
	    1404530467,
	    1404552189,
	    1404573931,
	    1404596092,
	    1404618255,
	    1404640298,
	    1404662817,
	    1404685170,
	    1404707301,
	    1404729549,
	    1404752227,
	    1404774545,
	    1404796435,
	    1404819783,
	    1404841664,
	    1404864802,
	    1404886509,
	    1404908278,
	    1404930952,
	    1404953584,
	    1404975372,
	    1404997423,
	    1405019121,
	    1405041333,
	    1405063579,
	    1405085675,
	    1405107735,
	    1405129878,
	    1405151672,
	    1405173390,
	    1405195686,
	    1405218397,
	    1405240740,
	    1405263470,
	    1405285406,
	    1405307463,
	    1405330235,
	    1405352000,
	    1405373814,
	    1405395903,
	    1405418295,
	    1405439956,
	    1405461585,
	    1405483575,
	    1405506573,
	    1405528642,
	    1405550834,
	    1405572492,
	    1405594713,
	    1405616329,
	    1405638212,
	    1405662566,
	    1405684577,
	    1405706836,
	    1405728919,
	    1405750655,
	    1405773291,
	    1405795524,
	    1405817258,
	    1405840286,
	    1405863331,
	    1405884947,
	    1405907599,
	    1405929310,
	    1405952541,
	    1405974301,
	    1405998743,
	    1406020842,
	    1406042676,
	    1406064680,
	    1406086470,
	    1406108443,
	    1406132043,
	    1406154470,
	    1406176482,
	    1406198109,
	    1406222390,
	    1406244904,
	    1406268736,
	    1406290929,
	    1406312684,
	    1406334578,
	    1406356240,
	    1406377967,
	    1406400444,
	    1406422048,
	    1406444248,
	    1406466140,
	    1406488142,
	    1406509978,
	    1406531938,
	    1406553866,
	    1406575906,
	    1406597793,
	    1406620030,
	    1406641649,
	    1406664348,
	    1406686806,
	    1406708436,
	    1406730211,
	    1406751892,
	    1406774745,
	    1406796696,
	    1406818582,
	    1406840294,
	    1406863125,
	    1406884944,
	    1406907194,
	    1406929374,
	    1406951225,
	    1406973491,
	    1406995366,
	    1407016988,
	    1407038920,
	    1407060732,
	    1407082596,
	    1407104300,
	    1407126014,
	    1407149750,
	    1407171752,
	    1407193533,
	    1407215533,
	    1407237393,
	    1407259012,
	    1407283232,
	    1407306584,
	    1407328230,
	    1407350176,
	    1407371981,
	    1407393583,
	    1407417963,
	    1407439594,
	    1407461405,
	    1407483083,
	    1407504972,
	    1407527573,
	    1407550369,
	    1407572147,
	    1407593984,
	    1407615697,
	    1407637516,
	    1407659229,
	    1407682011,
	    1407704666,
	    1407726365,
	    1407748405,
	    1407770029,
	    1407791885,
	    1407813885,
	    1407835754,
	    1407857408,
	    1407879886,
	    1407902858,
	    1407925193,
	    1407947038,
	    1407971094,
	    1407993822,
	    1408015908,
	    1408037828,
	    1408059477,
	    1408081119,
	    1408102742,
	    1408124578,
	    1408146258,
	    1408168041,
	    1408189851,
	    1408211527,
	    1408233915,
	    1408255856,
	    1408278030,
	    1408299772,
	    1408322305,
	    1408344290,
	    1408367123,
	    1408388779,
	    1408411052,
	    1408432973,
	    1408454864,
	    1408477101,
	    1408499743,
	    1408521594,
	    1408543614,
	    1408565486,
	    1408587480,
	    1408610954,
	    1408633013,
	    1408654635,
	    1408676863,
	    1408698689,
	    1408721379,
	    1408743939,
	    1408765859,
	    1408789414,
	    1408811216,
	    1408832864,
	    1408854667,
	    1408876472,
	    1408898718,
	    1408921200,
	    1408944504,
	    1408967505,
	    1408990017,
	    1409012058,
	    1409034104,
	    1409055726,
	    1409077365,
	    1409099661,
	    1409121681,
	    1409143340,
	    1409165048,
	    1409186918,
	    1409209595,
	    1409231389,
	    1409253923,
	    1409275804,
	    1409297706,
	    1409320302,
	    1409342626,
	    1409364475,
	    1409386170,
	    1409407828,
	    1409429660,
	    1409451532,
	    1409474168,
	    1409496243,
	    1409518141,
	    1409540071,
	    1409562256,
	    1409584801,
	    1409606412,
	    1409629135,
	    1409650993,
	    1409672854,
	    1409694557,
	    1409716255,
	    1409739163,
	    1409762144,
	    1409784700,
	    1409806631,
	    1409828321,
	    1409849953,
	    1409871666,
	    1409893751,
	    1409916065,
	    1409941275,
	    1409962967,
	    1409984807,
	    1410006556,
	    1410028197,
	    1410049870,
	    1410073900,
	    1410095925,
	    1410119042,
	    1410140708,
	    1410162410,
	    1410187363,
	    1410211077,
	    1410233638,
	    1410255261,
	    1410276896,
	    1410298671,
	    1410321402,
	    1410343280,
	    1410366746,
	    1410388472,
	    1410411214,
	    1410433415,
	    1410455763,
	    1410477784,
	    1410499398,
	    1410521375,
	    1410543547,
	    1410566385,
	    1410588563,
	    1410610854,
	    1410632587,
	    1410655021,
	    1410678487,
	    1410702512,
	    1410724178,
	    1410746056,
	    1410768139,
	    1410789764,
	    1410811632,
	    1410833272,
	    1410856002,
	    1410877975,
	    1410899809,
	    1410921533,
	    1410943661,
	    1410965379,
	    1410987838,
	    1411010078,
	    1411031953,
	    1411054022,
	    1411075748,
	    1411098507,
	    1411120304,
	    1411142998,
	    1411164669,
	    1411186740,
	    1411208617,
	    1411230557,
	    1411252165,
	    1411274052,
	    1411295663,
	    1411318063,
	    1411339893,
	    1411361746,
	    1411383395,
	    1411405536,
	    1411427265,
	    1411449745,
	    1411471763,
	    1411493492,
	    1411515335,
	    1411537184,
	    1411558933,
	    1411582015,
	    1411605327,
	    1411627464,
	    1411649262,
	    1411671364,
	    1411693049,
	    1411714706,
	    1411736829,
	    1411759608,
	    1411783668,
	    1411805502,
	    1411828368,
	    1411850314,
	    1411872057,
	    1411893755,
	    1411915789,
	    1411937456,
	    1411959422,
	    1411981070,
	    1412002878,
	    1412024805,
	    1412047313,
	    1412069098,
	    1412090795,
	    1412113129,
	    1412135300,
	    1412156978,
	    1412178955,
	    1412200664,
	    1412222532,
	    1412245261,
	    1412267172,
	    1412289022,
	    1412310912,
	    1412332669,
	    1412354272,
	    1412376285,
	    1412398291,
	    1412420169,
	    1412443007,
	    1412465414,
	    1412487053,
	    1412509115,
	    1412530989,
	    1412552614,
	    1412574292,
	    1412596684,
	    1412618772,
	    1412640975,
	    1412662684,
	    1412685916,
	    1412709473,
	    1412731174,
	    1412753353,
	    1412775023,
	    1412797119,
	    1412819019,
	    1412841460,
	    1412863643,
	    1412885906,
	    1412908969,
	    1412930777,
	    1412952555,
	    1412976400,
	    1412998177,
	    1413020835,
	    1413042493,
	    1413064137,
	    1413087719,
	    1413109539,
	    1413131464,
	    1413153944,
	    1413176019,
	    1413198180,
	    1413220493,
	    1413242632,
	    1413264880,
	    1413287402,
	    1413309695,
	    1413332175,
	    1413355048,
	    1413376968,
	    1413398953,
	    1413421149,
	    1413444775,
	    1413466749,
	    1413490371,
	    1413512090,
	    1413533799,
	    1413555404,
	    1413577430,
	    1413599587,
	    1413621542,
	    1413644024,
	    1413665630,
	    1413688403,
	    1413710561,
	    1413732635,
	    1413754291,
	    1413776430,
	    1413798477,
	    1413820306,
	    1413842964,
	    1413864950,
	    1413886580,
	    1413908197,
	    1413929984,
	    1413952588,
	    1413974793,
	    1413996819,
	    1414018687,
	    1414040779,
	    1414062735,
	    1414084723,
	    1414106336,
	    1414128126,
	    1414149729,
	    1414171868,
	    1414194364,
	    1414216516,
	    1414239088,
	    1414261054,
	    1414283215,
	    1414306356,
	    1414328869,
	    1414350677,
	    1414372616,
	    1414394905,
	    1414416563,
	    1414438276,
	    1414460385,
	    1414482709,
	    1414504799,
	    1414528651,
	    1414551024,
	    1414572990,
	    1414594857,
	    1414616457,
	    1414638427,
	    1414660526,
	    1414684158,
	    1414706244,
	    1414728212,
	    1414749872,
	    1414771715,
	    1414793454,
	    1414815616,
	    1414837864,
	    1414860251,
	    1414881854,
	    1414904240,
	    1414926118,
	    1414948532,
	    1414970393,
	    1414992417,
	    1415015321,
	    1415037614,
	    1415059933,
	    1415081784,
	    1415103888,
	    1415126045,
	    1415148084,
	    1415170437,
	    1415192046,
	    1415214879,
	    1415236880,
	    1415259833,
	    1415281879,
	    1415304043,
	    1415326215,
	    1415348210,
	    1415370209,
	    1415392284,
	    1415414481,
	    1415437372,
	    1415459172,
	    1415482084,
	    1415504296,
	    1415526037,
	    1415547637,
	    1415569551,
	    1415591350,
	    1415613225,
	    1415635796,
	    1415658719,
	    1415680656,
	    1415702432,
	    1415724099,
	    1415747840,
	    1415769639,
	    1415791898,
	    1415813818,
	    1415836673,
	    1415858943,
	    1415880869,
	    1415902906,
	    1415925868,
	    1415947852,
	    1415970682,
	    1415992696,
	    1416016742,
	    1416038575,
	    1416061390,
	    1416083573,
	    1416105699,
	    1416127755,
	    1416150928,
	    1416172703,
	    1416194956,
	    1416216721,
	    1416239035,
	    1416261704,
	    1416284780,
	    1416309391,
	    1416331023,
	    1416352866,
	    1416375039,
	    1416396968,
	    1416419104,
	    1416440749,
	    1416462445,
	    1416484450,
	    1416506936,
	    1416528554,
	    1416550954,
	    1416574097,
	    1416595703,
	    1416617866,
	    1416640086,
	    1416662076,
	    1416683735,
	    1416705668,
	    1416728198,
	    1416749802,
	    1416771516,
	    1416793129,
	    1416814935,
	    1416836864,
	    1416858514,
	    1416880322,
	    1416902158,
	    1416924236,
	    1416945931,
	    1416967783,
	    1416989718,
	    1417011424,
	    1417034065,
	    1417056326,
	    1417078075,
	    1417099881,
	    1417121594,
	    1417143385,
	    1417166272,
	    1417188108,
	    1417211018,
	    1417233928,
	    1417256188,
	    1417277908,
	    1417299708,
	    1417321620,
	    1417343514,
	    1417365505,
	    1417387844,
	    1417409563,
	    1417431242,
	    1417455055,
	    1417477118,
	    1417499486,
	    1417521205,
	    1417542941,
	    1417564685,
	    1417586435,
	    1417608686,
	    1417630646,
	    1417653116,
	    1417674761,
	    1417697155,
	    1417719775,
	    1417741663,
	    1417763405,
	    1417785150,
	    1417807078,
	    1417828857,
	    1417851030,
	    1417872743,
	    1417896095,
	    1417918295,
	    1417940098,
	    1417961753,
	    1417983745,
	    1418005726,
	    1418030487,
	    1418053412,
	    1418075131,
	    1418096909,
	    1418118620,
	    1418141314,
	    1418163500,
	    1418186353,
	    1418208170,
	    1418229793,
	    1418251402,
	    1418273823,
	    1418296201,
	    1418317950,
	    1418340064,
	    1418361794,
	    1418383833,
	    1418405794,
	    1418427638,
	    1418449269,
	    1418472641,
	    1418495612,
	    1418517423,
	    1418540189,
	    1418562233,
	    1418585618,
	    1418607255,
	    1418629384,
	    1418652153,
	    1418674441,
	    1418697398,
	    1418719492,
	    1418741367,
	    1418763365,
	    1418785313,
	    1418807148,
	    1418829180,
	    1418852623,
	    1418874281,
	    1418896553,
	    1418919233,
	    1418940865,
	    1418964039,
	    1418986011,
	    1419007942,
	    1419029751,
	    1419051481,
	    1419073635,
	    1419095500,
	    1419117293,
	    1419139106,
	    1419161695,
	    1419184203,
	    1419207778,
	    1419229701,
	    1419252482,
	    1419274231,
	    1419297131,
	    1419319161,
	    1419340826,
	    1419363567,
	    1419385213,
	    1419407929,
	    1419429593,
	    1419451264,
	    1419473077,
	    1419495293,
	    1419518011,
	    1419541904,
	    1419564115,
	    1419586163,
	    1419608684,
	    1419630595,
	    1419652420,
	    1419674378,
	    1419696838,
	    1419718759,
	    1419741017,
	    1419762779,
	    1419785029,
	    1419807604,
	    1419829717,
	    1419851354,
	    1419873020,
	    1419894719,
	    1419917519,
	    1419939146,
	    1419961243,
	    1419982870,
	    1420004579,
	    1420026663,
	    1420049199,
	    1420070954,
	    1420092906,
	    1420114721,
	    1420136382,
	    1420158899,
	    1420180774,
	    1420202922,
	    1420225797,
	    1420248570,
	    1420271779,
	    1420293438,
	    1420316228,
	    1420338250,
	    1420360041,
	    1420381913,
	    1420403523,
	    1420426052,
	    1420447936,
	    1420469722,
	    1420491681,
	    1420513386,
	    1420535388,
	    1420557064,
	    1420578945,
	    1420600550,
	    1420623001,
	    1420644907,
	    1420668857,
	    1420690627,
	    1420712524,
	    1420734445,
	    1420756814,
	    1420779745,
	    1420802049,
	    1420824156,
	    1420846838,
	    1420870058,
	    1420893667,
	    1420916100,
	    1420938373,
	    1420960144,
	    1420981853,
	    1421003499,
	    1421025294,
	    1421047577,
	    1421069467,
	    1421097142,
	    1421119093,
	    1421140973,
	    1421163206,
	    1421185166,
	    1421208851,
	    1421230869,
	    1421254437,
	    1421277178,
	    1421299650,
	    1421321551,
	    1421344505,
	    1421367292,
	    1421389438,
	    1421411801,
	    1421433513,
	    1421456203,
	    1421477925,
	    1421500871,
	    1421522928,
	    1421544629,
	    1421568697,
	    1421590598,
	    1421612276,
	    1421635007,
	    1421657243,
	    1421678945,
	    1421701198,
	    1421723475,
	    1421746005,
	    1421769093,
	    1421791141,
	    1421814015,
	    1421835701,
	    1421857376,
	    1421879228,
	    1421901472,
	    1421923362,
	    1421945113,
	    1421967666,
	    1421989724,
	    1422011861,
	    1422035165,
	    1422057323,
	    1422079244,
	    1422102680,
	    1422124693,
	    1422146775,
	    1422170729,
	    1422192485,
	    1422215642,
	    1422237902,
	    1422259621,
	    1422281778,
	    1422304073,
	    1422326061,
	    1422348049,
	    1422370316,
	    1422392446,
	    1422414322,
	    1422436506,
	    1422458215,
	    1422480314,
	    1422502888,
	    1422525931,
	    1422548263,
	    1422570853,
	    1422594842,
	    1422616570,
	    1422638532,
	    1422662162,
	    1422686222,
	    1422708059,
	    1422730169,
	    1422751814,
	    1422773478,
	    1422795292,
	    1422817322,
	    1422839825,
	    1422862584,
	    1422884837,
	    1422906691,
	    1422929694,
	    1422952305,
	    1422973919,
	    1422998534,
	    1423020258,
	    1423042176,
	    1423064415,
	    1423087868,
	    1423109483,
	    1423131499,
	    1423153159,
	    1423175240,
	    1423197168,
	    1423219352,
	    1423241104,
	    1423263596,
	    1423285596,
	    1423307727,
	    1423329598,
	    1423351311,
	    1423374948,
	    1423397362,
	    1423420150,
	    1423442116,
	    1423464146,
	    1423485792,
	    1423508561,
	    1423530660,
	    1423552547,
	    1423574259,
	    1423595949,
	    1423617898,
	    1423639567,
	    1423661670,
	    1423684218,
	    1423705968,
	    1423728138,
	    1423750528,
	    1423772667,
	    1423794669,
	    1423816484,
	    1423838541,
	    1423860227,
	    1423881830,
	    1423904806,
	    1423927262,
	    1423949482,
	    1423971173,
	    1423996045,
	    1424018192,
	    1424019610,
	    1424020019,
	    1424020428,
	    1424021573,
	    1424021740,
	    1424022196,
	    1424022932,
	    1424022374,
	    1424022500,
	    1424022560,
	    1424022682,
	    1424023254,
	    1424023972,
	    1424024552,
	    1424025182,
	    1424025228,
	    1424025305,
	    1424025615,
	    1424026149,
	    1424026387,
	    1424026499,
	    1424026642,
	    1424026779,
	    1424027824,
	    1424028084,
	    1424028281,
	    1424028358,
	    1424029447,
	    1424030216,
	    1424030277,
	    1424031428,
	    1424031660,
	    1424032430,
	    1424032750,
	    1424033506,
	    1424033723,
	    1424033852,
	    1424035169,
	    1424035767,
	    1424035718,
	    1424037070,
	    1424037142,
	    1424037877,
	    1424038316,
	    1424038640,
	    1424040735,
	    1424040582,
	    1424041023,
	    1424042030,
	    1424042974,
	    1424044642,
	    1424046172,
	    1424046784,
	    1424048231,
	    1424049036,
	    1424048524,
	    1424048842,
	    1424049785,
	    1424050113,
	    1424051368,
	    1424051662,
	    1424052457,
	    1424053166,
	    1424052977,
	    1424053326,
	    1424053365,
	    1424053813,
	    1424053969,
	    1424054641,
	    1424055109,
	    1424056191,
	    1424056950,
	    1424057073,
	    1424057232,
	    1424057842,
	    1424058697,
	    1424058553,
	    1424058605,
	    1424060072,
	    1424060782,
	    1424060811,
	    1424061607,
	    1424062127,
	    1424062749,
	    1424063138,
	    1424064351,
	    1424066102,
	    1424066176,
	    1424066360,
	    1424066811,
	    1424068190,
	    1424068980,
	    1424069100,
	    1424069153,
	    1424069153,
	    1424069718,
	    1424069842,
	    1424070015,
	    1424070051,
	    1424070511,
	    1424070980,
	    1424071511,
	    1424073019,
	    1424074347,
	    1424074445,
	    1424074540,
	    1424074793,
	    1424074852,
	    1424075594,
	    1424076200,
	    1424076467,
	    1424076714,
	    1424077341,
	    1424078433,
	    1424078509,
	    1424078534,
	    1424078601,
	    1424079850,
	    1424081377,
	    1424082319,
	    1424082746,
	    1424085055,
	    1424085893,
	    1424085441,
	    1424086297,
	    1424086263,
	    1424086714,
	    1424086995,
	    1424087425,
	    1424088124,
	    1424088219,
	    1424089280,
	    1424089396,
	    1424090232,
	    1424090686,
	    1424090803,
	    1424090827,
	    1424091107,
	    1424091422,
	    1424091618,
	    1424091938,
	    1424091981,
	    1424092113,
	    1424092196,
	    1424092400,
	    1424092985,
	    1424093818,
	    1424095328,
	    1424097556,
	    1424097843,
	    1424098105,
	    1424099490,
	    1424099856,
	    1424100286,
	    1424100607,
	    1424101045,
	    1424103108,
	    1424103302,
	    1424103608,
	    1424103893,
	    1424104008,
	    1424104345,
	    1424104887,
	    1424106228,
	    1424106300,
	    1424107094,
	    1424107451,
	    1424108296,
	    1424108655,
	    1424109429,
	    1424110455,
	    1424110768,
	    1424111073,
	    1424111086,
	    1424111181,
	    1424112248,
	    1424112438,
	    1424112918,
	    1424114036,
	    1424114286,
	    1424114749,
	    1424114959,
	    1424115193,
	    1424116088,
	    1424116431,
	    1424116596,
	    1424116751,
	    1424117394,
	    1424117323,
	    1424118350,
	    1424118730,
	    1424119875,
	    1424120206,
	    1424121021,
	    1424121382,
	    1424121198,
	    1424121555,
	    1424121997,
	    1424122496,
	    1424123479,
	    1424124056,
	    1424125465,
	    1424126194,
	    1424126309,
	    1424127122,
	    1424127211,
	    1424128435,
	    1424129185,
	    1424131705,
	    1424132263,
	    1424133119,
	    1424132503,
	    1424132606,
	    1424133638,
	    1424133646,
	    1424134154,
	    1424134852,
	    1424135402,
	    1424135957,
	    1424135922,
	    1424136713,
	    1424137249,
	    1424137607,
	    1424137662,
	    1424138206,
	    1424138473,
	    1424139130,
	    1424141986,
	    1424142987,
	    1424143528,
	    1424143685,
	    1424143964,
	    1424144476,
	    1424144868,
	    1424145007,
	    1424145134,
	    1424145661,
	    1424145734,
	    1424145907,
	    1424146542,
	    1424147039,
	    1424147532,
	    1424148571,
	    1424148830,
	    1424149142,
	    1424149157,
	    1424149612,
	    1424149838,
	    1424151458,
	    1424152644,
	    1424152889,
	    1424153332,
	    1424155638,
	    1424155887,
	    1424156058,
	    1424156876,
	    1424157764,
	    1424159544,
	    1424160445,
	    1424161499,
	    1424162201,
	    1424163163,
	    1424163752,
	    1424163905,
	    1424164014,
	    1424164509,
	    1424164651,
	    1424164729,
	    1424164934,
	    1424165275,
	    1424165667,
	    1424165473,
	    1424166964,
	    1424167896,
	    1424168436,
	    1424169875,
	    1424170899,
	    1424171162,
	    1424171667,
	    1424171805,
	    1424172514,
	    1424172629,
	    1424173536,
	    1424174233,
	    1424174999,
	    1424175479,
	    1424175578,
	    1424175676,
	    1424177194,
	    1424177887,
	    1424178981,
	    1424181231,
	    1424182575,
	    1424182781,
	    1424185239,
	    1424185338,
	    1424185844,
	    1424186741,
	    1424186268,
	    1424186363,
	    1424186339,
	    1424186453,
	    1424186744,
	    1424186783,
	    1424187412,
	    1424187621,
	    1424187891,
	    1424188239,
	    1424189443,
	    1424189796,
	    1424189844,
	    1424189787,
	    1424189966,
	    1424191039,
	    1424191646,
	    1424191978,
	    1424192134,
	    1424192173,
	    1424193190,
	    1424194094,
	    1424194640,
	    1424194748,
	    1424194756,
	    1424194805,
	    1424194984,
	    1424195587,
	    1424197077,
	    1424197083,
	    1424197828,
	    1424198185,
	    1424198541,
	    1424199748,
	    1424199696,
	    1424199821,
	    1424200984,
	    1424201500,
	    1424202333,
	    1424202391,
	    1424203153,
	    1424203746,
	    1424203959,
	    1424204708,
	    1424205370,
	    1424205447,
	    1424206593,
	    1424207400,
	    1424208396,
	    1424208733,
	    1424209270,
	    1424209547,
	    1424209877,
	    1424210896,
	    1424212535,
	    1424213407,
	    1424213975,
	    1424214741,
	    1424215668,
	    1424218826,
	    1424218818,
	    1424218981,
	    1424219402,
	    1424219789,
	    1424220525,
	    1424220832,
	    1424221516,
	    1424222059,
	    1424222484,
	    1424222543,
	    1424222954,
	    1424223212,
	    1424223358,
	    1424223266,
	    1424224109,
	    1424224577,
	    1424225885,
	    1424226067,
	    1424226751,
	    1424226978,
	    1424227490,
	    1424227349,
	    1424228046,
	    1424228343,
	    1424228665,
	    1424228822,
	    1424229026,
	    1424229783,
	    1424229723,
	    1424230884,
	    1424231305,
	    1424231637,
	    1424231765,
	    1424231795,
	    1424232737,
	    1424233472,
	    1424233722,
	    1424234508,
	    1424234906,
	    1424235090,
	    1424235581,
	    1424236808,
	    1424238722,
	    1424238702,
	    1424240090,
	    1424241277,
	    1424242545,
	    1424244133,
	    1424244302,
	    1424244244,
	    1424244682,
	    1424244764,
	    1424245134,
	    1424245066,
	    1424245955,
	    1424246517,
	    1424246978,
	    1424247958,
	    1424248622,
	    1424248655,
	    1424248960,
	    1424249064,
	    1424250786,
	    1424251769,
	    1424252735,
	    1424253147,
	    1424254745,
	    1424254805,
	    1424255187,
	    1424255870,
	    1424256607,
	    1424257423,
	    1424257119,
	    1424257889,
	    1424257984,
	    1424258519,
	    1424259367,
	    1424260139,
	    1424261372,
	    1424261928,
	    1424262633,
	    1424262755,
	    1424263416,
	    1424263989,
	    1424264305,
	    1424264751,
	    1424265303,
	    1424265706,
	    1424265919,
	    1424266080,
	    1424266165,
	    1424267241,
	    1424267588,
	    1424268284,
	    1424268923,
	    1424269441,
	    1424269629,
	    1424270157,
	    1424270193,
	    1424270382,
	    1424270553,
	    1424271151,
	    1424271391,
	    1424271426,
	    1424272136,
	    1424273101,
	    1424273401,
	    1424273720,
	    1424274686,
	    1424274931,
	    1424275263,
	    1424275245,
	    1424275333,
	    1424276098,
	    1424276554,
	    1424277711,
	    1424278048,
	    1424278625,
	    1424278978,
	    1424279789,
	    1424279988,
	    1424280331,
	    1424280669,
	    1424281244,
	    1424281789,
	    1424282218,
	    1424282306,
	    1424283013,
	    1424283125,
	    1424283962,
	    1424285511,
	    1424285464,
	    1424286133,
	    1424286195,
	    1424286994,
	    1424287502,
	    1424288115,
	    1424288985,
	    1424289075,
	    1424289074,
	    1424289855,
	    1424290981,
	    1424291146,
	    1424291468,
	    1424292527,
	    1424292881,
	    1424293476,
	    1424293342,
	    1424294001,
	    1424294042,
	    1424294082,
	    1424294951,
	    1424297273,
	    1424297034,
	    1424298183,
	    1424298303,
	    1424298372,
	    1424299403,
	    1424300487,
	    1424300617,
	    1424300727,
	    1424300858,
	    1424301246,
	    1424302445,
	    1424303045,
	    1424303983,
	    1424304565,
	    1424305378,
	    1424305917,
	    1424306850,
	    1424307112,
	    1424307315,
	    1424307301,
	    1424307339,
	    1424308056,
	    1424308278,
	    1424308794,
	    1424309002,
	    1424309634,
	    1424309892,
	    1424309917,
	    1424311146,
	    1424311808,
	    1424311885,
	    1424312045,
	    1424312320,
	    1424312695,
	    1424313148,
	    1424313162,
	    1424313784,
	    1424314182,
	    1424314335,
	    1424314529,
	    1424314837,
	    1424315544,
	    1424315581,
	    1424315980,
	    1424317627,
	    1424318425,
	    1424319249,
	    1424319130,
	    1424319560,
	    1424319824,
	    1424320139,
	    1424321391,
	    1424321945,
	    1424322505,
	    1424323774,
	    1424324485,
	    1424324710,
	    1424325103,
	    1424325523,
	    1424327219,
	    1424327417,
	    1424328002,
	    1424328092,
	    1424328662,
	    1424329333,
	    1424329885,
	    1424330324,
	    1424330662,
	    1424331691,
	    1424331851,
	    1424332316,
	    1424332834,
	    1424333612,
	    1424333733,
	    1424334288,
	    1424333854,
	    1424334347,
	    1424335176,
	    1424335533,
	    1424337327,
	    1424337455,
	    1424337499,
	    1424337574,
	    1424338976,
	    1424339552,
	    1424340200,
	    1424340066,
	    1424341508,
	    1424343414,
	    1424343597,
	    1424343657,
	    1424343955,
	    1424344431,
	    1424344703,
	    1424344726,
	    1424344961,
	    1424345062,
	    1424345931,
	    1424346727,
	    1424346295,
	    1424346586,
	    1424347012,
	    1424346928,
	    1424347148,
	    1424347825,
	    1424347930,
	    1424348601,
	    1424349540,
	    1424349669,
	    1424350175,
	    1424350217,
	    1424350575,
	    1424350773,
	    1424351001,
	    1424352844,
	    1424353122,
	    1424353695,
	    1424353904,
	    1424353816,
	    1424354316,
	    1424354983,
	    1424355252,
	    1424356623,
	    1424356809,
	    1424357634,
	    1424359189,
	    1424360008,
	    1424360724,
	    1424362055,
	    1424362094,
	    1424362664,
	    1424362780,
	    1424363232,
	    1424363581,
	    1424363604,
	    1424364378,
	    1424365317,
	    1424366587,
	    1424367314,
	    1424368804,
	    1424370716,
	    1424371008,
	    1424371431,
	    1424371406,
	    1424371666,
	    1424371767,
	    1424372734,
	    1424372741,
	    1424373313,
	    1424373982,
	    1424374007,
	    1424375494,
	    1424375083,
	    1424375467,
	    1424375949,
	    1424376575,
	    1424376951,
	    1424377084,
	    1424377279,
	    1424377288,
	    1424377333,
	    1424377634,
	    1424378224,
	    1424378960,
	    1424379903,
	    1424382020,
	    1424383691,
	    1424384219,
	    1424385002,
	    1424386390,
	    1424386220,
	    1424386392,
	    1424386744,
	    1424387208,
	    1424387698,
	    1424388687,
	    1424388960,
	    1424389236,
	    1424390064,
	    1424390863,
	    1424391129,
	    1424391112,
	    1424392085,
	    1424392286,
	    1424392820,
	    1424393270,
	    1424394796,
	    1424395776,
	    1424395773,
	    1424396231,
	    1424396330,
	    1424396834,
	    1424397506,
	    1424398387,
	    1424398459,
	    1424399425,
	    1424400003,
	    1424400121,
	    1424400145,
	    1424401442,
	    1424402347,
	    1424402428,
	    1424403483,
	    1424403839,
	    1424404166,
	    1424404643,
	    1424404657,
	    1424404665,
	    1424405724,
	    1424406722,
	    1424407064,
	    1424408160,
	    1424407555,
	    1424408031,
	    1424408339,
	    1424408554,
	    1424408868,
	    1424409870,
	    1424409957,
	    1424410204,
	    1424410816,
	    1424411007,
	    1424411449,
	    1424411861,
	    1424412447,
	    1424412122,
	    1424413501,
	    1424414005,
	    1424415208,
	    1424415467,
	    1424416728,
	    1424416782,
	    1424417489,
	    1424418920,
	    1424419695,
	    1424420152,
	    1424420069,
	    1424420456,
	    1424420712,
	    1424420945,
	    1424421421,
	    1424421560,
	    1424421708,
	    1424421817,
	    1424422667,
	    1424422732,
	    1424423608,
	    1424423275,
	    1424423874,
	    1424423929,
	    1424424839,
	    1424424995,
	    1424425872,
	    1424426007,
	    1424427122,
	    1424427146,
	    1424427325,
	    1424427411,
	    1424429046,
	    1424429488,
	    1424429706,
	    1424429733,
	    1424429768,
	    1424430276,
	    1424430381,
	    1424431726,
	    1424432818,
	    1424433194,
	    1424434077,
	    1424433944,
	    1424434139,
	    1424434369,
	    1424434689,
	    1424434996,
	    1424435058,
	    1424435789,
	    1424436305,
	    1424436896,
	    1424437237,
	    1424437632,
	    1424438529,
	    1424439263,
	    1424439527,
	    1424439867,
	    1424439945,
	    1424440062,
	    1424440869,
	    1424440924,
	    1424441667,
	    1424442359,
	    1424443550,
	    1424444571,
	    1424445274,
	    1424447938,
	    1424448660,
	    1424449141,
	    1424449324,
	    1424451456,
	    1424452053,
	    1424452696,
	    1424453399,
	    1424453698,
	    1424453867,
	    1424454250,
	    1424454274,
	    1424455970,
	    1424458088,
	    1424458156,
	    1424459464,
	    1424459379,
	    1424460066,
	    1424460363,
	    1424461865,
	    1424462670,
	    1424462869,
	    1424462880,
	    1424463241,
	    1424464299,
	    1424465167,
	    1424465176,
	    1424465717,
	    1424466708,
	    1424467015,
	    1424467471,
	    1424468006,
	    1424467889,
	    1424468827,
	    1424469145,
	    1424470664,
	    1424472087,
	    1424472693,
	    1424473546,
	    1424473788,
	    1424474579,
	    1424475013,
	    1424475681,
	    1424476780,
	    1424477144,
	    1424478511,
	    1424478642,
	    1424479294,
	    1424479228,
	    1424480551,
	    1424481645,
	    1424482964,
	    1424483659,
	    1424483943,
	    1424484094,
	    1424484297,
	    1424485004,
	    1424485397,
	    1424485420,
	    1424485495,
	    1424485819,
	    1424487044,
	    1424486331,
	    1424487462,
	    1424487828,
	    1424489019,
	    1424490723,
	    1424491262,
	    1424492294,
	    1424493032,
	    1424493199,
	    1424493663,
	    1424494366,
	    1424494772,
	    1424495265,
	    1424495333,
	    1424495910,
	    1424497235,
	    1424497292,
	    1424497304,
	    1424500117,
	    1424500772,
	    1424503027,
	    1424503285,
	    1424503654,
	    1424503833,
	    1424504408,
	    1424505030,
	    1424505113,
	    1424505259,
	    1424505250,
	    1424505816,
	    1424506707,
	    1424507645,
	    1424507898,
	    1424508313,
	    1424509966,
	    1424510228,
	    1424510564,
	    1424512598,
	    1424513177,
	    1424514253,
	    1424514792,
	    1424514877,
	    1424514996,
	    1424517301,
	    1424518573,
	    1424518355,
	    1424520328,
	    1424520347,
	    1424520327,
	    1424520817,
	    1424522501,
	    1424523218,
	    1424523672,
	    1424524092,
	    1424525024,
	    1424525522,
	    1424525772,
	    1424526423,
	    1424526935,
	    1424528445,
	    1424529153,
	    1424529630,
	    1424529697,
	    1424530408,
	    1424531001,
	    1424531171,
	    1424531288,
	    1424531327,
	    1424531475,
	    1424531937,
	    1424532049,
	    1424532188,
	    1424532220,
	    1424532922,
	    1424534681,
	    1424535491,
	    1424535959,
	    1424536011,
	    1424536200,
	    1424536304,
	    1424536330,
	    1424538158,
	    1424538238,
	    1424538323,
	    1424539030,
	    1424539535,
	    1424541372,
	    1424541477,
	    1424541599,
	    1424543562,
	    1424543810,
	    1424544061,
	    1424544209,
	    1424545663,
	    1424545832,
	    1424547812,
	    1424547789,
	    1424548239,
	    1424549477,
	    1424550244,
	    1424550705,
	    1424550694,
	    1424551288,
	    1424551527,
	    1424552283,
	    1424552645,
	    1424552823,
	    1424554036,
	    1424555697,
	    1424556702,
	    1424557939,
	    1424558230,
	    1424558438,
	    1424559192,
	    1424559375,
	    1424559983,
	    1424560181,
	    1424560227,
	    1424561295,
	    1424561555,
	    1424561952,
	    1424562154,
	    1424562223,
	    1424562789,
	    1424564131,
	    1424564464,
	    1424564985,
	    1424565649,
	    1424565769,
	    1424566599,
	    1424568712,
	    1424569111,
	    1424569219,
	    1424569363
	  ],
	  "heights": [
	    0,
	    46,
	    296,
	    546,
	    796,
	    1046,
	    1296,
	    1546,
	    1796,
	    2046,
	    2296,
	    2546,
	    2796,
	    3046,
	    3296,
	    3546,
	    3796,
	    4046,
	    4296,
	    4546,
	    4796,
	    5046,
	    5296,
	    5546,
	    5796,
	    6046,
	    6296,
	    6546,
	    6796,
	    7046,
	    7296,
	    7546,
	    7796,
	    8046,
	    8296,
	    8546,
	    8796,
	    9046,
	    9296,
	    9546,
	    9796,
	    10046,
	    10296,
	    10546,
	    10796,
	    11046,
	    11296,
	    11546,
	    11796,
	    12046,
	    12296,
	    12546,
	    12796,
	    13046,
	    13296,
	    13546,
	    13796,
	    14046,
	    14296,
	    14546,
	    14796,
	    15046,
	    15296,
	    15546,
	    15796,
	    16046,
	    16296,
	    16546,
	    16796,
	    17046,
	    17296,
	    17546,
	    17796,
	    18046,
	    18296,
	    18546,
	    18796,
	    19046,
	    19296,
	    19546,
	    19796,
	    20046,
	    20296,
	    20442,
	    20692,
	    20942,
	    21192,
	    21410,
	    21584,
	    21834,
	    22084,
	    22334,
	    22584,
	    22834,
	    23084,
	    23334,
	    23584,
	    23834,
	    24084,
	    24334,
	    24584,
	    24834,
	    25084,
	    25334,
	    25584,
	    25834,
	    26084,
	    26334,
	    26584,
	    26834,
	    27084,
	    27334,
	    27584,
	    27834,
	    28084,
	    28334,
	    28584,
	    28834,
	    29084,
	    29334,
	    29584,
	    29834,
	    30084,
	    30334,
	    30584,
	    30834,
	    31084,
	    31334,
	    31584,
	    31834,
	    32084,
	    32334,
	    32584,
	    32834,
	    33084,
	    33334,
	    33584,
	    33834,
	    34084,
	    34334,
	    34584,
	    34834,
	    35084,
	    35334,
	    35584,
	    35834,
	    36084,
	    36334,
	    36584,
	    36834,
	    37084,
	    37334,
	    37584,
	    37834,
	    38084,
	    38334,
	    38584,
	    38834,
	    39084,
	    39334,
	    39584,
	    39834,
	    40084,
	    40334,
	    40584,
	    40834,
	    41084,
	    41334,
	    41584,
	    41834,
	    42084,
	    42334,
	    42584,
	    42834,
	    43084,
	    43334,
	    43584,
	    43834,
	    44084,
	    44334,
	    44584,
	    44834,
	    45084,
	    45334,
	    45584,
	    45834,
	    46084,
	    46334,
	    46584,
	    46834,
	    47084,
	    47334,
	    47584,
	    47834,
	    48084,
	    48334,
	    48584,
	    48834,
	    49084,
	    49334,
	    49584,
	    49834,
	    50084,
	    50334,
	    50584,
	    50834,
	    51084,
	    51334,
	    51584,
	    51834,
	    52084,
	    52334,
	    52584,
	    52834,
	    53084,
	    53334,
	    53584,
	    53834,
	    54084,
	    54334,
	    54584,
	    54834,
	    55084,
	    55334,
	    55584,
	    55834,
	    56084,
	    56334,
	    56584,
	    56834,
	    57084,
	    57334,
	    57584,
	    57834,
	    58084,
	    58334,
	    58584,
	    58834,
	    59084,
	    59334,
	    59584,
	    59834,
	    60084,
	    60334,
	    60584,
	    60834,
	    61084,
	    61334,
	    61584,
	    61834,
	    62084,
	    62334,
	    62584,
	    62834,
	    63084,
	    63334,
	    63584,
	    63834,
	    64084,
	    64334,
	    64584,
	    64834,
	    65084,
	    65334,
	    65584,
	    65834,
	    66084,
	    66334,
	    66584,
	    66834,
	    67084,
	    67334,
	    67584,
	    67834,
	    68084,
	    68334,
	    68584,
	    68834,
	    69084,
	    69334,
	    69584,
	    69834,
	    70084,
	    70334,
	    70584,
	    70834,
	    71084,
	    71334,
	    71584,
	    71834,
	    72084,
	    72334,
	    72584,
	    72834,
	    73084,
	    73334,
	    73584,
	    73834,
	    74084,
	    74334,
	    74584,
	    74834,
	    75084,
	    75334,
	    75584,
	    75834,
	    76084,
	    76334,
	    76584,
	    76834,
	    77084,
	    77334,
	    77584,
	    77834,
	    78084,
	    78334,
	    78584,
	    78834,
	    79084,
	    79334,
	    79584,
	    79834,
	    80084,
	    80334,
	    80584,
	    80834,
	    81084,
	    81334,
	    81584,
	    81834,
	    82084,
	    82334,
	    82584,
	    82834,
	    83084,
	    83334,
	    83584,
	    83834,
	    84084,
	    84334,
	    84584,
	    84834,
	    85084,
	    85334,
	    85584,
	    85834,
	    86084,
	    86334,
	    86584,
	    86834,
	    87084,
	    87334,
	    87584,
	    87834,
	    88084,
	    88334,
	    88584,
	    88834,
	    89084,
	    89334,
	    89584,
	    89834,
	    90084,
	    90334,
	    90584,
	    90834,
	    91084,
	    91334,
	    91584,
	    91834,
	    92084,
	    92334,
	    92584,
	    92834,
	    93084,
	    93334,
	    93584,
	    93834,
	    94084,
	    94334,
	    94584,
	    94834,
	    95084,
	    95334,
	    95584,
	    95834,
	    96084,
	    96334,
	    96584,
	    96834,
	    97084,
	    97334,
	    97584,
	    97834,
	    98084,
	    98334,
	    98584,
	    98834,
	    99084,
	    99334,
	    99584,
	    99834,
	    100084,
	    100334,
	    100584,
	    100834,
	    101084,
	    101334,
	    101584,
	    101834,
	    102084,
	    102334,
	    102584,
	    102834,
	    103084,
	    103334,
	    103584,
	    103834,
	    104084,
	    104334,
	    104584,
	    104834,
	    105084,
	    105334,
	    105584,
	    105834,
	    106084,
	    106334,
	    106584,
	    106834,
	    107084,
	    107334,
	    107584,
	    107834,
	    108084,
	    108334,
	    108584,
	    108834,
	    109084,
	    109334,
	    109584,
	    109834,
	    110084,
	    110334,
	    110584,
	    110834,
	    111084,
	    111334,
	    111584,
	    111834,
	    112084,
	    112334,
	    112584,
	    112834,
	    113084,
	    113334,
	    113584,
	    113834,
	    114084,
	    114334,
	    114584,
	    114834,
	    115084,
	    115334,
	    115584,
	    115834,
	    116084,
	    116334,
	    116584,
	    116834,
	    117084,
	    117334,
	    117584,
	    117834,
	    118084,
	    118334,
	    118584,
	    118834,
	    119084,
	    119334,
	    119584,
	    119834,
	    120084,
	    120334,
	    120584,
	    120834,
	    121084,
	    121334,
	    121584,
	    121834,
	    122084,
	    122334,
	    122584,
	    122834,
	    123084,
	    123334,
	    123584,
	    123834,
	    124084,
	    124334,
	    124584,
	    124834,
	    125084,
	    125334,
	    125584,
	    125834,
	    126084,
	    126334,
	    126584,
	    126834,
	    127084,
	    127334,
	    127584,
	    127834,
	    128084,
	    128334,
	    128584,
	    128834,
	    129084,
	    129334,
	    129584,
	    129834,
	    130084,
	    130334,
	    130584,
	    130834,
	    131084,
	    131334,
	    131584,
	    131834,
	    132084,
	    132334,
	    132584,
	    132834,
	    133084,
	    133334,
	    133584,
	    133834,
	    134084,
	    134334,
	    134584,
	    134834,
	    135084,
	    135334,
	    135584,
	    135834,
	    136084,
	    136334,
	    136584,
	    136834,
	    137084,
	    137334,
	    137584,
	    137834,
	    138084,
	    138334,
	    138584,
	    138834,
	    139084,
	    139334,
	    139584,
	    139834,
	    140084,
	    140334,
	    140584,
	    140834,
	    141084,
	    141334,
	    141584,
	    141834,
	    142084,
	    142334,
	    142584,
	    142834,
	    143084,
	    143334,
	    143584,
	    143834,
	    144084,
	    144334,
	    144584,
	    144834,
	    145084,
	    145334,
	    145584,
	    145834,
	    146084,
	    146334,
	    146584,
	    146834,
	    147084,
	    147334,
	    147584,
	    147834,
	    148084,
	    148334,
	    148584,
	    148834,
	    149084,
	    149334,
	    149584,
	    149834,
	    150084,
	    150334,
	    150584,
	    150834,
	    151084,
	    151334,
	    151584,
	    151834,
	    152084,
	    152334,
	    152584,
	    152834,
	    153084,
	    153334,
	    153584,
	    153834,
	    154084,
	    154334,
	    154584,
	    154834,
	    155084,
	    155334,
	    155584,
	    155834,
	    156084,
	    156334,
	    156584,
	    156834,
	    157084,
	    157334,
	    157584,
	    157834,
	    158084,
	    158334,
	    158584,
	    158834,
	    159084,
	    159334,
	    159584,
	    159834,
	    160084,
	    160334,
	    160584,
	    160834,
	    161084,
	    161334,
	    161584,
	    161834,
	    162084,
	    162334,
	    162584,
	    162834,
	    163084,
	    163334,
	    163584,
	    163834,
	    164084,
	    164334,
	    164584,
	    164834,
	    165084,
	    165334,
	    165584,
	    165834,
	    166084,
	    166334,
	    166584,
	    166834,
	    167084,
	    167334,
	    167584,
	    167834,
	    168084,
	    168334,
	    168584,
	    168834,
	    169084,
	    169334,
	    169584,
	    169834,
	    170084,
	    170334,
	    170584,
	    170834,
	    171084,
	    171334,
	    171584,
	    171834,
	    172084,
	    172334,
	    172584,
	    172834,
	    173084,
	    173334,
	    173584,
	    173834,
	    174084,
	    174334,
	    174584,
	    174834,
	    175084,
	    175334,
	    175584,
	    175834,
	    176084,
	    176334,
	    176584,
	    176834,
	    177084,
	    177334,
	    177584,
	    177834,
	    178084,
	    178334,
	    178584,
	    178834,
	    179084,
	    179334,
	    179584,
	    179834,
	    180084,
	    180334,
	    180584,
	    180834,
	    181084,
	    181334,
	    181584,
	    181834,
	    182084,
	    182334,
	    182584,
	    182834,
	    183084,
	    183334,
	    183584,
	    183834,
	    184084,
	    184334,
	    184584,
	    184834,
	    185084,
	    185334,
	    185584,
	    185834,
	    186084,
	    186334,
	    186584,
	    186834,
	    187084,
	    187334,
	    187584,
	    187834,
	    188084,
	    188334,
	    188584,
	    188834,
	    189084,
	    189334,
	    189584,
	    189834,
	    190084,
	    190334,
	    190584,
	    190834,
	    191084,
	    191334,
	    191584,
	    191834,
	    192084,
	    192334,
	    192584,
	    192834,
	    193084,
	    193334,
	    193584,
	    193834,
	    194084,
	    194334,
	    194584,
	    194834,
	    195084,
	    195334,
	    195584,
	    195834,
	    196084,
	    196334,
	    196584,
	    196834,
	    197084,
	    197334,
	    197584,
	    197834,
	    198084,
	    198334,
	    198584,
	    198834,
	    199084,
	    199334,
	    199584,
	    199834,
	    200084,
	    200334,
	    200584,
	    200834,
	    201084,
	    201334,
	    201584,
	    201834,
	    202084,
	    202334,
	    202584,
	    202834,
	    203084,
	    203334,
	    203584,
	    203834,
	    204084,
	    204334,
	    204584,
	    204834,
	    205084,
	    205334,
	    205584,
	    205834,
	    206084,
	    206334,
	    206584,
	    206834,
	    207084,
	    207334,
	    207584,
	    207834,
	    208084,
	    208334,
	    208584,
	    208834,
	    209084,
	    209334,
	    209584,
	    209834,
	    210084,
	    210334,
	    210584,
	    210834,
	    211084,
	    211334,
	    211584,
	    211834,
	    212084,
	    212334,
	    212584,
	    212834,
	    213084,
	    213334,
	    213584,
	    213834,
	    214084,
	    214334,
	    214531,
	    214628,
	    214703,
	    214776,
	    214862,
	    214933,
	    215023,
	    215100,
	    215172,
	    215255,
	    215318,
	    215393,
	    215466,
	    215537,
	    215635,
	    215712,
	    215773,
	    215837,
	    215906,
	    215986,
	    216053,
	    216119,
	    216172,
	    216235,
	    216296,
	    216364,
	    216430,
	    216512,
	    216588,
	    216645,
	    216710,
	    216768,
	    216847,
	    216901,
	    216955,
	    217025,
	    217087,
	    217159,
	    217237,
	    217293,
	    217375,
	    217439,
	    217502,
	    217570,
	    217644,
	    217712,
	    217782,
	    217860,
	    217936,
	    218005,
	    218072,
	    218144,
	    218229,
	    218301,
	    218385,
	    218455,
	    218528,
	    218617,
	    218690,
	    218765,
	    218849,
	    218954,
	    219029,
	    219111,
	    219198,
	    219273,
	    219356,
	    219438,
	    219534,
	    219617,
	    219707,
	    219787,
	    219872,
	    219945,
	    220008,
	    220092,
	    220165,
	    220250,
	    220319,
	    220388,
	    220472,
	    220551,
	    220642,
	    220715,
	    220786,
	    220858,
	    220931,
	    221022,
	    221101,
	    221177,
	    221266,
	    221354,
	    221447,
	    221545,
	    221648,
	    221740,
	    221829,
	    221903,
	    221979,
	    222062,
	    222156,
	    222247,
	    222350,
	    222434,
	    222508,
	    222603,
	    222683,
	    222770,
	    222847,
	    222931,
	    223030,
	    223130,
	    223201,
	    223292,
	    223393,
	    223488,
	    223568,
	    223660,
	    223737,
	    223810,
	    223882,
	    223962,
	    224040,
	    224128,
	    224218,
	    224306,
	    224374,
	    224448,
	    224544,
	    224610,
	    224688,
	    224768,
	    224845,
	    224930,
	    225007,
	    225100,
	    225197,
	    225283,
	    225372,
	    225441,
	    225500,
	    225589,
	    225663,
	    225752,
	    225845,
	    225934,
	    226022,
	    226101,
	    226192,
	    226284,
	    226397,
	    226499,
	    226589,
	    226686,
	    226782,
	    226863,
	    226972,
	    227077,
	    227198,
	    227304,
	    227422,
	    227529,
	    227640,
	    227751,
	    227854,
	    227926,
	    227990,
	    228075,
	    228151,
	    228214,
	    228272,
	    228361,
	    228455,
	    228538,
	    228637,
	    228725,
	    228805,
	    228890,
	    228972,
	    229073,
	    229184,
	    229272,
	    229361,
	    229453,
	    229538,
	    229627,
	    229706,
	    229775,
	    229853,
	    229943,
	    230026,
	    230105,
	    230193,
	    230279,
	    230350,
	    230450,
	    230530,
	    230637,
	    230722,
	    230803,
	    230880,
	    230970,
	    231055,
	    231134,
	    231223,
	    231304,
	    231376,
	    231466,
	    231552,
	    231647,
	    231729,
	    231821,
	    231895,
	    231976,
	    232041,
	    232109,
	    232182,
	    232259,
	    232353,
	    232432,
	    232521,
	    232595,
	    232679,
	    232762,
	    232849,
	    232930,
	    233009,
	    233092,
	    233190,
	    233271,
	    233362,
	    233434,
	    233513,
	    233597,
	    233682,
	    233783,
	    233860,
	    233933,
	    234014,
	    234078,
	    234159,
	    234223,
	    234294,
	    234370,
	    234436,
	    234526,
	    234591,
	    234681,
	    234772,
	    234847,
	    234934,
	    235022,
	    235107,
	    235188,
	    235274,
	    235354,
	    235447,
	    235525,
	    235618,
	    235704,
	    235801,
	    235880,
	    235976,
	    236058,
	    236143,
	    236210,
	    236287,
	    236355,
	    236435,
	    236506,
	    236588,
	    236668,
	    236734,
	    236814,
	    236898,
	    236977,
	    237047,
	    237111,
	    237185,
	    237259,
	    237344,
	    237421,
	    237513,
	    237597,
	    237684,
	    237764,
	    237844,
	    237932,
	    238019,
	    238099,
	    238192,
	    238273,
	    238342,
	    238431,
	    238522,
	    238605,
	    238694,
	    238791,
	    238880,
	    238964,
	    239067,
	    239180,
	    239277,
	    239384,
	    239489,
	    239588,
	    239695,
	    239813,
	    239909,
	    239994,
	    240094,
	    240171,
	    240243,
	    240336,
	    240420,
	    240517,
	    240597,
	    240691,
	    240780,
	    240857,
	    240949,
	    241041,
	    241146,
	    241252,
	    241344,
	    241434,
	    241520,
	    241612,
	    241693,
	    241795,
	    241886,
	    241974,
	    242043,
	    242121,
	    242192,
	    242255,
	    242321,
	    242404,
	    242469,
	    242554,
	    242641,
	    242727,
	    242823,
	    242903,
	    242994,
	    243061,
	    243136,
	    243217,
	    243290,
	    243394,
	    243478,
	    243549,
	    243644,
	    243719,
	    243818,
	    243890,
	    243980,
	    244051,
	    244138,
	    244217,
	    244296,
	    244374,
	    244450,
	    244540,
	    244638,
	    244725,
	    244804,
	    244901,
	    244996,
	    245073,
	    245185,
	    245274,
	    245376,
	    245471,
	    245567,
	    245657,
	    245753,
	    245847,
	    245950,
	    246024,
	    246124,
	    246207,
	    246282,
	    246358,
	    246450,
	    246528,
	    246614,
	    246695,
	    246787,
	    246864,
	    246953,
	    247043,
	    247138,
	    247216,
	    247302,
	    247390,
	    247482,
	    247578,
	    247659,
	    247768,
	    247870,
	    247958,
	    248032,
	    248103,
	    248174,
	    248249,
	    248336,
	    248398,
	    248489,
	    248573,
	    248647,
	    248742,
	    248839,
	    248920,
	    248997,
	    249089,
	    249178,
	    249276,
	    249381,
	    249480,
	    249575,
	    249672,
	    249762,
	    249861,
	    249951,
	    250033,
	    250123,
	    250209,
	    250312,
	    250408,
	    250494,
	    250591,
	    250693,
	    250780,
	    250881,
	    250982,
	    251099,
	    251193,
	    251294,
	    251397,
	    251508,
	    251616,
	    251731,
	    251837,
	    251924,
	    252027,
	    252104,
	    252193,
	    252276,
	    252368,
	    252448,
	    252534,
	    252635,
	    252729,
	    252826,
	    252923,
	    253012,
	    253104,
	    253195,
	    253295,
	    253400,
	    253489,
	    253607,
	    253714,
	    253816,
	    253907,
	    254012,
	    254090,
	    254167,
	    254244,
	    254324,
	    254413,
	    254496,
	    254583,
	    254668,
	    254766,
	    254867,
	    254961,
	    255069,
	    255164,
	    255281,
	    255407,
	    255506,
	    255621,
	    255742,
	    255831,
	    255922,
	    256034,
	    256111,
	    256203,
	    256281,
	    256381,
	    256470,
	    256547,
	    256634,
	    256707,
	    256785,
	    256881,
	    256983,
	    257089,
	    257174,
	    257274,
	    257377,
	    257485,
	    257587,
	    257690,
	    257794,
	    257902,
	    258017,
	    258114,
	    258196,
	    258288,
	    258361,
	    258462,
	    258543,
	    258615,
	    258697,
	    258811,
	    258896,
	    258998,
	    259096,
	    259189,
	    259285,
	    259391,
	    259499,
	    259604,
	    259709,
	    259820,
	    259917,
	    260033,
	    260132,
	    260216,
	    260291,
	    260394,
	    260471,
	    260558,
	    260650,
	    260737,
	    260816,
	    260899,
	    260982,
	    261088,
	    261169,
	    261265,
	    261359,
	    261462,
	    261565,
	    261660,
	    261746,
	    261858,
	    261969,
	    262061,
	    262151,
	    262230,
	    262306,
	    262392,
	    262474,
	    262576,
	    262651,
	    262754,
	    262843,
	    262936,
	    263035,
	    263132,
	    263244,
	    263360,
	    263477,
	    263602,
	    263725,
	    263861,
	    263978,
	    264106,
	    264191,
	    264270,
	    264356,
	    264445,
	    264560,
	    264667,
	    264768,
	    264880,
	    264983,
	    265085,
	    265198,
	    265322,
	    265435,
	    265543,
	    265655,
	    265757,
	    265885,
	    265992,
	    266116,
	    266207,
	    266289,
	    266384,
	    266469,
	    266565,
	    266641,
	    266720,
	    266816,
	    266910,
	    267016,
	    267120,
	    267220,
	    267315,
	    267430,
	    267531,
	    267623,
	    267737,
	    267827,
	    267938,
	    268020,
	    268108,
	    268188,
	    268273,
	    268361,
	    268431,
	    268504,
	    268565,
	    268639,
	    268710,
	    268783,
	    268885,
	    268974,
	    269076,
	    269166,
	    269267,
	    269369,
	    269451,
	    269538,
	    269628,
	    269708,
	    269791,
	    269906,
	    269991,
	    270097,
	    270180,
	    270266,
	    270345,
	    270419,
	    270501,
	    270586,
	    270666,
	    270746,
	    270819,
	    270909,
	    270993,
	    271081,
	    271163,
	    271238,
	    271334,
	    271420,
	    271513,
	    271600,
	    271675,
	    271765,
	    271853,
	    271943,
	    272033,
	    272133,
	    272211,
	    272288,
	    272381,
	    272490,
	    272590,
	    272674,
	    272749,
	    272864,
	    272956,
	    273047,
	    273128,
	    273220,
	    273308,
	    273423,
	    273512,
	    273622,
	    273714,
	    273806,
	    273919,
	    274006,
	    274108,
	    274208,
	    274284,
	    274369,
	    274455,
	    274534,
	    274625,
	    274704,
	    274798,
	    274905,
	    274997,
	    275084,
	    275171,
	    275280,
	    275377,
	    275478,
	    275582,
	    275687,
	    275806,
	    275910,
	    276015,
	    276108,
	    276192,
	    276269,
	    276348,
	    276438,
	    276525,
	    276607,
	    276697,
	    276783,
	    276863,
	    276947,
	    277029,
	    277124,
	    277217,
	    277311,
	    277391,
	    277461,
	    277543,
	    277633,
	    277724,
	    277809,
	    277904,
	    277968,
	    278015,
	    278069,
	    278122,
	    278167,
	    278218,
	    278247,
	    278283,
	    278312,
	    278348,
	    278394,
	    278441,
	    278484,
	    278519,
	    278548,
	    278597,
	    278622,
	    278670,
	    278722,
	    278771,
	    278815,
	    278869,
	    278910,
	    278954,
	    279000,
	    279056,
	    279108,
	    279138,
	    279186,
	    279236,
	    279291,
	    279345,
	    279384,
	    279434,
	    279481,
	    279529,
	    279593,
	    279638,
	    279689,
	    279733,
	    279784,
	    279846,
	    279897,
	    279947,
	    279993,
	    280049,
	    280090,
	    280143,
	    280207,
	    280252,
	    280294,
	    280342,
	    280376,
	    280423,
	    280461,
	    280497,
	    280546,
	    280585,
	    280632,
	    280677,
	    280731,
	    280781,
	    280825,
	    280873,
	    280922,
	    280963,
	    280997,
	    281030,
	    281073,
	    281123,
	    281161,
	    281204,
	    281254,
	    281292,
	    281344,
	    281385,
	    281432,
	    281470,
	    281530,
	    281579,
	    281623,
	    281667,
	    281709,
	    281747,
	    281798,
	    281851,
	    281898,
	    281945,
	    281998,
	    282035,
	    282084,
	    282131,
	    282190,
	    282238,
	    282283,
	    282318,
	    282358,
	    282400,
	    282442,
	    282485,
	    282515,
	    282559,
	    282605,
	    282641,
	    282677,
	    282728,
	    282779,
	    282817,
	    282864,
	    282900,
	    282940,
	    282979,
	    283025,
	    283064,
	    283101,
	    283132,
	    283177,
	    283224,
	    283271,
	    283316,
	    283357,
	    283408,
	    283459,
	    283509,
	    283560,
	    283612,
	    283656,
	    283702,
	    283742,
	    283791,
	    283842,
	    283899,
	    283946,
	    283990,
	    284035,
	    284067,
	    284119,
	    284163,
	    284208,
	    284258,
	    284294,
	    284341,
	    284375,
	    284425,
	    284471,
	    284510,
	    284562,
	    284596,
	    284631,
	    284674,
	    284721,
	    284772,
	    284815,
	    284860,
	    284906,
	    284941,
	    284976,
	    285006,
	    285043,
	    285078,
	    285127,
	    285162,
	    285201,
	    285259,
	    285298,
	    285327,
	    285372,
	    285420,
	    285461,
	    285509,
	    285557,
	    285605,
	    285648,
	    285695,
	    285739,
	    285787,
	    285843,
	    285888,
	    285926,
	    285971,
	    286025,
	    286076,
	    286129,
	    286175,
	    286225,
	    286277,
	    286321,
	    286352,
	    286389,
	    286431,
	    286462,
	    286514,
	    286558,
	    286604,
	    286660,
	    286711,
	    286754,
	    286795,
	    286843,
	    286889,
	    286929,
	    286980,
	    287015,
	    287056,
	    287094,
	    287126,
	    287174,
	    287216,
	    287271,
	    287320,
	    287358,
	    287404,
	    287442,
	    287498,
	    287540,
	    287590,
	    287635,
	    287684,
	    287725,
	    287763,
	    287809,
	    287850,
	    287889,
	    287947,
	    287991,
	    288033,
	    288089,
	    288137,
	    288186,
	    288223,
	    288281,
	    288329,
	    288371,
	    288404,
	    288434,
	    288486,
	    288518,
	    288556,
	    288594,
	    288631,
	    288666,
	    288704,
	    288742,
	    288780,
	    288814,
	    288851,
	    288887,
	    288933,
	    288979,
	    289023,
	    289053,
	    289091,
	    289131,
	    289174,
	    289214,
	    289262,
	    289314,
	    289349,
	    289389,
	    289436,
	    289490,
	    289522,
	    289569,
	    289608,
	    289648,
	    289698,
	    289733,
	    289792,
	    289825,
	    289869,
	    289902,
	    289943,
	    289987,
	    290032,
	    290072,
	    290115,
	    290160,
	    290205,
	    290251,
	    290303,
	    290348,
	    290387,
	    290429,
	    290463,
	    290497,
	    290528,
	    290564,
	    290613,
	    290659,
	    290704,
	    290739,
	    290778,
	    290819,
	    290858,
	    290904,
	    290948,
	    291002,
	    291050,
	    291077,
	    291111,
	    291152,
	    291194,
	    291225,
	    291257,
	    291302,
	    291354,
	    291385,
	    291436,
	    291478,
	    291516,
	    291563,
	    291603,
	    291658,
	    291705,
	    291753,
	    291800,
	    291843,
	    291886,
	    291929,
	    291997,
	    292053,
	    292103,
	    292152,
	    292188,
	    292250,
	    292302,
	    292349,
	    292383,
	    292415,
	    292456,
	    292502,
	    292545,
	    292585,
	    292629,
	    292670,
	    292700,
	    292753,
	    292796,
	    292844,
	    292898,
	    292940,
	    292986,
	    293024,
	    293066,
	    293115,
	    293164,
	    293193,
	    293228,
	    293267,
	    293310,
	    293353,
	    293396,
	    293441,
	    293494,
	    293544,
	    293586,
	    293624,
	    293662,
	    293703,
	    293762,
	    293822,
	    293876,
	    293929,
	    293976,
	    294026,
	    294081,
	    294125,
	    294173,
	    294226,
	    294287,
	    294328,
	    294362,
	    294403,
	    294439,
	    294476,
	    294516,
	    294552,
	    294596,
	    294632,
	    294665,
	    294712,
	    294742,
	    294769,
	    294817,
	    294856,
	    294898,
	    294941,
	    294974,
	    295020,
	    295059,
	    295108,
	    295150,
	    295176,
	    295214,
	    295261,
	    295306,
	    295351,
	    295383,
	    295424,
	    295469,
	    295515,
	    295574,
	    295619,
	    295670,
	    295706,
	    295759,
	    295814,
	    295863,
	    295907,
	    295952,
	    296008,
	    296046,
	    296087,
	    296130,
	    296164,
	    296208,
	    296250,
	    296301,
	    296345,
	    296386,
	    296420,
	    296453,
	    296504,
	    296543,
	    296587,
	    296631,
	    296668,
	    296711,
	    296749,
	    296801,
	    296845,
	    296891,
	    296934,
	    296979,
	    297028,
	    297073,
	    297110,
	    297148,
	    297186,
	    297229,
	    297279,
	    297322,
	    297360,
	    297400,
	    297449,
	    297492,
	    297509,
	    297555,
	    297600,
	    297645,
	    297682,
	    297736,
	    297783,
	    297822,
	    297861,
	    297906,
	    297945,
	    297988,
	    298040,
	    298079,
	    298120,
	    298162,
	    298194,
	    298240,
	    298280,
	    298320,
	    298370,
	    298414,
	    298447,
	    298474,
	    298510,
	    298550,
	    298590,
	    298646,
	    298693,
	    298728,
	    298769,
	    298820,
	    298853,
	    298889,
	    298924,
	    298965,
	    298997,
	    299042,
	    299077,
	    299125,
	    299154,
	    299187,
	    299217,
	    299254,
	    299296,
	    299337,
	    299398,
	    299444,
	    299488,
	    299529,
	    299566,
	    299608,
	    299648,
	    299689,
	    299734,
	    299773,
	    299821,
	    299862,
	    299898,
	    299951,
	    299990,
	    300044,
	    300079,
	    300131,
	    300177,
	    300217,
	    300248,
	    300289,
	    300327,
	    300373,
	    300408,
	    300453,
	    300492,
	    300540,
	    300583,
	    300621,
	    300660,
	    300697,
	    300735,
	    300783,
	    300833,
	    300864,
	    300902,
	    300947,
	    301003,
	    301050,
	    301091,
	    301131,
	    301186,
	    301238,
	    301275,
	    301308,
	    301349,
	    301396,
	    301445,
	    301479,
	    301529,
	    301573,
	    301615,
	    301661,
	    301713,
	    301755,
	    301793,
	    301840,
	    301881,
	    301928,
	    301976,
	    302020,
	    302060,
	    302105,
	    302148,
	    302193,
	    302229,
	    302267,
	    302313,
	    302354,
	    302404,
	    302433,
	    302471,
	    302511,
	    302552,
	    302590,
	    302634,
	    302675,
	    302718,
	    302761,
	    302797,
	    302832,
	    302865,
	    302894,
	    302937,
	    302986,
	    303028,
	    303077,
	    303104,
	    303142,
	    303169,
	    303210,
	    303250,
	    303292,
	    303335,
	    303376,
	    303412,
	    303443,
	    303482,
	    303531,
	    303567,
	    303613,
	    303661,
	    303705,
	    303743,
	    303790,
	    303840,
	    303900,
	    303944,
	    303985,
	    304037,
	    304076,
	    304131,
	    304177,
	    304225,
	    304265,
	    304302,
	    304346,
	    304381,
	    304427,
	    304462,
	    304493,
	    304531,
	    304569,
	    304604,
	    304648,
	    304689,
	    304726,
	    304758,
	    304808,
	    304841,
	    304871,
	    304910,
	    304949,
	    304982,
	    305030,
	    305077,
	    305123,
	    305160,
	    305191,
	    305227,
	    305273,
	    305311,
	    305350,
	    305394,
	    305436,
	    305480,
	    305525,
	    305559,
	    305593,
	    305642,
	    305698,
	    305741,
	    305781,
	    305825,
	    305885,
	    305924,
	    305970,
	    306024,
	    306062,
	    306123,
	    306178,
	    306221,
	    306272,
	    306305,
	    306361,
	    306407,
	    306448,
	    306492,
	    306533,
	    306570,
	    306605,
	    306650,
	    306688,
	    306737,
	    306779,
	    306818,
	    306876,
	    306927,
	    306970,
	    307013,
	    307069,
	    307123,
	    307176,
	    307223,
	    307256,
	    307295,
	    307341,
	    307386,
	    307425,
	    307480,
	    307533,
	    307583,
	    307625,
	    307675,
	    307728,
	    307770,
	    307812,
	    307859,
	    307907,
	    307947,
	    307988,
	    308046,
	    308090,
	    308133,
	    308184,
	    308224,
	    308272,
	    308327,
	    308376,
	    308421,
	    308463,
	    308504,
	    308540,
	    308571,
	    308604,
	    308638,
	    308675,
	    308710,
	    308747,
	    308777,
	    308816,
	    308845,
	    308887,
	    308923,
	    308954,
	    308995,
	    309027,
	    309057,
	    309099,
	    309134,
	    309180,
	    309227,
	    309268,
	    309307,
	    309347,
	    309384,
	    309420,
	    309455,
	    309493,
	    309530,
	    309565,
	    309611,
	    309638,
	    309683,
	    309720,
	    309759,
	    309804,
	    309841,
	    309892,
	    309926,
	    309968,
	    310008,
	    310043,
	    310085,
	    310126,
	    310162,
	    310212,
	    310250,
	    310283,
	    310323,
	    310370,
	    310408,
	    310444,
	    310484,
	    310524,
	    310570,
	    310613,
	    310651,
	    310678,
	    310711,
	    310751,
	    310785,
	    310823,
	    310859,
	    310900,
	    310947,
	    310996,
	    311027,
	    311059,
	    311110,
	    311147,
	    311198,
	    311234,
	    311281,
	    311323,
	    311367,
	    311412,
	    311453,
	    311502,
	    311542,
	    311596,
	    311636,
	    311679,
	    311719,
	    311748,
	    311794,
	    311828,
	    311874,
	    311919,
	    311948,
	    311987,
	    312023,
	    312057,
	    312100,
	    312136,
	    312172,
	    312218,
	    312256,
	    312289,
	    312324,
	    312371,
	    312420,
	    312455,
	    312494,
	    312532,
	    312563,
	    312594,
	    312628,
	    312681,
	    312719,
	    312761,
	    312785,
	    312822,
	    312864,
	    312894,
	    312936,
	    312979,
	    313011,
	    313050,
	    313091,
	    313136,
	    313178,
	    313235,
	    313265,
	    313306,
	    313347,
	    313378,
	    313417,
	    313464,
	    313503,
	    313546,
	    313581,
	    313619,
	    313670,
	    313709,
	    313752,
	    313796,
	    313828,
	    313869,
	    313896,
	    313936,
	    313970,
	    314002,
	    314037,
	    314073,
	    314105,
	    314141,
	    314183,
	    314227,
	    314264,
	    314309,
	    314345,
	    314392,
	    314428,
	    314476,
	    314512,
	    314553,
	    314591,
	    314634,
	    314682,
	    314728,
	    314768,
	    314818,
	    314866,
	    314909,
	    314953,
	    315000,
	    315044,
	    315084,
	    315141,
	    315194,
	    315233,
	    315276,
	    315320,
	    315361,
	    315404,
	    315443,
	    315479,
	    315517,
	    315561,
	    315621,
	    315661,
	    315694,
	    315737,
	    315782,
	    315826,
	    315865,
	    315909,
	    315952,
	    315986,
	    316025,
	    316070,
	    316122,
	    316156,
	    316208,
	    316258,
	    316307,
	    316362,
	    316412,
	    316474,
	    316515,
	    316555,
	    316591,
	    316637,
	    316677,
	    316725,
	    316769,
	    316806,
	    316848,
	    316899,
	    316934,
	    316978,
	    317015,
	    317060,
	    317095,
	    317135,
	    317180,
	    317228,
	    317255,
	    317302,
	    317333,
	    317367,
	    317405,
	    317442,
	    317477,
	    317517,
	    317558,
	    317611,
	    317653,
	    317694,
	    317729,
	    317773,
	    317820,
	    317863,
	    317918,
	    317956,
	    317997,
	    318039,
	    318085,
	    318134,
	    318178,
	    318216,
	    318256,
	    318306,
	    318359,
	    318404,
	    318456,
	    318503,
	    318543,
	    318575,
	    318618,
	    318649,
	    318685,
	    318728,
	    318765,
	    318798,
	    318839,
	    318889,
	    318919,
	    318975,
	    319021,
	    319056,
	    319093,
	    319131,
	    319177,
	    319205,
	    319254,
	    319286,
	    319322,
	    319377,
	    319426,
	    319467,
	    319511,
	    319550,
	    319592,
	    319630,
	    319671,
	    319713,
	    319753,
	    319786,
	    319826,
	    319856,
	    319892,
	    319937,
	    319974,
	    320017,
	    320056,
	    320089,
	    320132,
	    320177,
	    320232,
	    320266,
	    320314,
	    320344,
	    320390,
	    320436,
	    320488,
	    320527,
	    320578,
	    320616,
	    320662,
	    320703,
	    320739,
	    320771,
	    320816,
	    320864,
	    320901,
	    320939,
	    320984,
	    321032,
	    321071,
	    321126,
	    321175,
	    321225,
	    321271,
	    321311,
	    321366,
	    321408,
	    321450,
	    321492,
	    321538,
	    321583,
	    321624,
	    321660,
	    321711,
	    321758,
	    321804,
	    321845,
	    321885,
	    321925,
	    321962,
	    322000,
	    322047,
	    322093,
	    322132,
	    322173,
	    322205,
	    322247,
	    322283,
	    322329,
	    322367,
	    322411,
	    322457,
	    322500,
	    322536,
	    322585,
	    322613,
	    322655,
	    322689,
	    322725,
	    322757,
	    322786,
	    322826,
	    322867,
	    322905,
	    322932,
	    322962,
	    323002,
	    323041,
	    323070,
	    323097,
	    323131,
	    323171,
	    323220,
	    323257,
	    323294,
	    323338,
	    323373,
	    323410,
	    323442,
	    323483,
	    323521,
	    323554,
	    323590,
	    323619,
	    323656,
	    323698,
	    323733,
	    323773,
	    323807,
	    323859,
	    323902,
	    323947,
	    323993,
	    324028,
	    324070,
	    324112,
	    324154,
	    324192,
	    324229,
	    324278,
	    324310,
	    324336,
	    324382,
	    324412,
	    324445,
	    324480,
	    324502,
	    324550,
	    324586,
	    324632,
	    324658,
	    324709,
	    324757,
	    324801,
	    324832,
	    324870,
	    324900,
	    324940,
	    324976,
	    325022,
	    325056,
	    325094,
	    325128,
	    325174,
	    325215,
	    325243,
	    325278,
	    325319,
	    325352,
	    325399,
	    325434,
	    325472,
	    325505,
	    325553,
	    325584,
	    325629,
	    325665,
	    325698,
	    325731,
	    325764,
	    325811,
	    325855,
	    325895,
	    325933,
	    325971,
	    326013,
	    326037,
	    326069,
	    326112,
	    326149,
	    326176,
	    326216,
	    326251,
	    326280,
	    326323,
	    326365,
	    326411,
	    326448,
	    326493,
	    326533,
	    326568,
	    326604,
	    326646,
	    326682,
	    326732,
	    326768,
	    326803,
	    326848,
	    326881,
	    326921,
	    326963,
	    327007,
	    327043,
	    327069,
	    327095,
	    327140,
	    327169,
	    327214,
	    327257,
	    327296,
	    327331,
	    327364,
	    327407,
	    327439,
	    327481,
	    327518,
	    327556,
	    327600,
	    327641,
	    327691,
	    327732,
	    327776,
	    327837,
	    327873,
	    327923,
	    327960,
	    328002,
	    328046,
	    328091,
	    328131,
	    328168,
	    328214,
	    328249,
	    328300,
	    328323,
	    328372,
	    328422,
	    328466,
	    328503,
	    328542,
	    328589,
	    328643,
	    328674,
	    328702,
	    328729,
	    328776,
	    328819,
	    328854,
	    328893,
	    328941,
	    328974,
	    329001,
	    329046,
	    329082,
	    329122,
	    329164,
	    329196,
	    329227,
	    329266,
	    329312,
	    329354,
	    329392,
	    329427,
	    329466,
	    329501,
	    329535,
	    329572,
	    329602,
	    329641,
	    329673,
	    329714,
	    329751,
	    329779,
	    329821,
	    329864,
	    329900,
	    329937,
	    329978,
	    330018,
	    330058,
	    330093,
	    330136,
	    330173,
	    330209,
	    330244,
	    330280,
	    330320,
	    330359,
	    330399,
	    330437,
	    330474,
	    330513,
	    330562,
	    330599,
	    330635,
	    330676,
	    330701,
	    330736,
	    330779,
	    330805,
	    330848,
	    330879,
	    330918,
	    330949,
	    330974,
	    331008,
	    331051,
	    331092,
	    331129,
	    331167,
	    331210,
	    331246,
	    331274,
	    331316,
	    331346,
	    331379,
	    331425,
	    331466,
	    331495,
	    331538,
	    331571,
	    331596,
	    331632,
	    331672,
	    331706,
	    331736,
	    331774,
	    331811,
	    331840,
	    331876,
	    331919,
	    331960,
	    332004,
	    332034,
	    332070,
	    332114,
	    332154,
	    332194,
	    332237,
	    332273,
	    332311,
	    332353,
	    332391,
	    332430,
	    332460,
	    332489,
	    332532,
	    332573,
	    332606,
	    332642,
	    332668,
	    332692,
	    332729,
	    332762,
	    332805,
	    332839,
	    332878,
	    332912,
	    332952,
	    332986,
	    333031,
	    333074,
	    333109,
	    333140,
	    333178,
	    333210,
	    333243,
	    333274,
	    333311,
	    333339,
	    333386,
	    333429,
	    333475,
	    333502,
	    333529,
	    333574,
	    333616,
	    333663,
	    333703,
	    333739,
	    333767,
	    333797,
	    333841,
	    333878,
	    333914,
	    333957,
	    333987,
	    334030,
	    334056,
	    334093,
	    334137,
	    334177,
	    334212,
	    334244,
	    334279,
	    334313,
	    334354,
	    334393,
	    334433,
	    334475,
	    334499,
	    334532,
	    334571,
	    334612,
	    334645,
	    334680,
	    334707,
	    334739,
	    334782,
	    334813,
	    334843,
	    334878,
	    334910,
	    334937,
	    334974,
	    335019,
	    335051,
	    335088,
	    335121,
	    335154,
	    335194,
	    335229,
	    335264,
	    335292,
	    335332,
	    335365,
	    335404,
	    335462,
	    335492,
	    335529,
	    335570,
	    335616,
	    335651,
	    335680,
	    335729,
	    335776,
	    335816,
	    335858,
	    335898,
	    335940,
	    335962,
	    336003,
	    336051,
	    336094,
	    336142,
	    336171,
	    336211,
	    336247,
	    336299,
	    336341,
	    336384,
	    336427,
	    336463,
	    336509,
	    336549,
	    336582,
	    336617,
	    336663,
	    336705,
	    336753,
	    336781,
	    336819,
	    336862,
	    336911,
	    336943,
	    336989,
	    337029,
	    337072,
	    337114,
	    337152,
	    337195,
	    337245,
	    337289,
	    337325,
	    337369,
	    337412,
	    337452,
	    337494,
	    337539,
	    337580,
	    337616,
	    337661,
	    337696,
	    337736,
	    337777,
	    337818,
	    337855,
	    337891,
	    337934,
	    337969,
	    337997,
	    338036,
	    338070,
	    338115,
	    338155,
	    338190,
	    338234,
	    338263,
	    338307,
	    338342,
	    338387,
	    338418,
	    338458,
	    338495,
	    338539,
	    338576,
	    338609,
	    338655,
	    338698,
	    338721,
	    338755,
	    338784,
	    338818,
	    338862,
	    338899,
	    338939,
	    338980,
	    339017,
	    339044,
	    339083,
	    339133,
	    339173,
	    339204,
	    339237,
	    339275,
	    339307,
	    339339,
	    339376,
	    339418,
	    339449,
	    339496,
	    339540,
	    339578,
	    339615,
	    339662,
	    339694,
	    339720,
	    339748,
	    339781,
	    339817,
	    339843,
	    339877,
	    339917,
	    339964,
	    340003,
	    340035,
	    340073,
	    340106,
	    340139,
	    340167,
	    340200,
	    340232,
	    340269,
	    340292,
	    340330,
	    340364,
	    340394,
	    340428,
	    340460,
	    340495,
	    340525,
	    340556,
	    340594,
	    340629,
	    340661,
	    340697,
	    340740,
	    340780,
	    340814,
	    340859,
	    340907,
	    340942,
	    340984,
	    341037,
	    341079,
	    341119,
	    341154,
	    341189,
	    341225,
	    341261,
	    341311,
	    341350,
	    341395,
	    341438,
	    341485,
	    341520,
	    341553,
	    341593,
	    341638,
	    341673,
	    341719,
	    341749,
	    341779,
	    341816,
	    341858,
	    341905,
	    341945,
	    341977,
	    342019,
	    342051,
	    342096,
	    342137,
	    342188,
	    342225,
	    342267,
	    342316,
	    342355,
	    342401,
	    342444,
	    342480,
	    342516,
	    342546,
	    342583,
	    342621,
	    342665,
	    342703,
	    342743,
	    342785,
	    342821,
	    342866,
	    342894,
	    342934,
	    342969,
	    343010,
	    343049,
	    343090,
	    343115,
	    343157,
	    343187,
	    343213,
	    343254,
	    343292,
	    343324,
	    343363,
	    343405,
	    343456,
	    343493,
	    343521,
	    343554,
	    343592,
	    343596,
	    343597,
	    343598,
	    343599,
	    343600,
	    343601,
	    343602,
	    343603,
	    343604,
	    343605,
	    343606,
	    343607,
	    343608,
	    343609,
	    343610,
	    343611,
	    343612,
	    343613,
	    343614,
	    343615,
	    343616,
	    343617,
	    343618,
	    343619,
	    343620,
	    343621,
	    343622,
	    343623,
	    343624,
	    343625,
	    343626,
	    343627,
	    343628,
	    343629,
	    343630,
	    343631,
	    343632,
	    343633,
	    343634,
	    343635,
	    343636,
	    343637,
	    343638,
	    343639,
	    343640,
	    343641,
	    343642,
	    343643,
	    343644,
	    343645,
	    343646,
	    343647,
	    343648,
	    343649,
	    343650,
	    343651,
	    343652,
	    343653,
	    343654,
	    343655,
	    343656,
	    343657,
	    343658,
	    343659,
	    343660,
	    343661,
	    343662,
	    343663,
	    343664,
	    343665,
	    343666,
	    343667,
	    343668,
	    343669,
	    343670,
	    343671,
	    343672,
	    343673,
	    343674,
	    343675,
	    343676,
	    343677,
	    343678,
	    343679,
	    343680,
	    343681,
	    343682,
	    343683,
	    343684,
	    343685,
	    343686,
	    343687,
	    343688,
	    343689,
	    343690,
	    343691,
	    343692,
	    343693,
	    343694,
	    343695,
	    343696,
	    343697,
	    343698,
	    343699,
	    343700,
	    343701,
	    343702,
	    343703,
	    343704,
	    343705,
	    343706,
	    343707,
	    343708,
	    343709,
	    343710,
	    343711,
	    343712,
	    343713,
	    343714,
	    343715,
	    343716,
	    343717,
	    343718,
	    343719,
	    343720,
	    343721,
	    343722,
	    343723,
	    343724,
	    343725,
	    343726,
	    343727,
	    343728,
	    343729,
	    343730,
	    343731,
	    343732,
	    343733,
	    343734,
	    343735,
	    343736,
	    343737,
	    343738,
	    343739,
	    343740,
	    343741,
	    343742,
	    343743,
	    343744,
	    343745,
	    343746,
	    343747,
	    343748,
	    343749,
	    343750,
	    343751,
	    343752,
	    343753,
	    343754,
	    343755,
	    343756,
	    343757,
	    343758,
	    343759,
	    343760,
	    343761,
	    343762,
	    343763,
	    343764,
	    343765,
	    343766,
	    343767,
	    343768,
	    343769,
	    343770,
	    343771,
	    343772,
	    343773,
	    343774,
	    343775,
	    343776,
	    343777,
	    343778,
	    343779,
	    343780,
	    343781,
	    343782,
	    343783,
	    343784,
	    343785,
	    343786,
	    343787,
	    343788,
	    343789,
	    343790,
	    343791,
	    343792,
	    343793,
	    343794,
	    343795,
	    343796,
	    343797,
	    343798,
	    343799,
	    343800,
	    343801,
	    343802,
	    343803,
	    343804,
	    343805,
	    343806,
	    343807,
	    343808,
	    343809,
	    343810,
	    343811,
	    343812,
	    343813,
	    343814,
	    343815,
	    343816,
	    343817,
	    343818,
	    343819,
	    343820,
	    343821,
	    343822,
	    343823,
	    343824,
	    343825,
	    343826,
	    343827,
	    343828,
	    343829,
	    343830,
	    343831,
	    343832,
	    343833,
	    343834,
	    343835,
	    343836,
	    343837,
	    343838,
	    343839,
	    343840,
	    343841,
	    343842,
	    343843,
	    343844,
	    343845,
	    343846,
	    343847,
	    343848,
	    343849,
	    343850,
	    343851,
	    343852,
	    343853,
	    343854,
	    343855,
	    343856,
	    343857,
	    343858,
	    343859,
	    343860,
	    343861,
	    343862,
	    343863,
	    343864,
	    343865,
	    343866,
	    343867,
	    343868,
	    343869,
	    343870,
	    343871,
	    343872,
	    343873,
	    343874,
	    343875,
	    343876,
	    343877,
	    343878,
	    343879,
	    343880,
	    343881,
	    343882,
	    343883,
	    343884,
	    343885,
	    343886,
	    343887,
	    343888,
	    343889,
	    343890,
	    343891,
	    343892,
	    343893,
	    343894,
	    343895,
	    343896,
	    343897,
	    343898,
	    343899,
	    343900,
	    343901,
	    343902,
	    343903,
	    343904,
	    343905,
	    343906,
	    343907,
	    343908,
	    343909,
	    343910,
	    343911,
	    343912,
	    343913,
	    343914,
	    343915,
	    343916,
	    343917,
	    343918,
	    343919,
	    343920,
	    343921,
	    343922,
	    343923,
	    343924,
	    343925,
	    343926,
	    343927,
	    343928,
	    343929,
	    343930,
	    343931,
	    343932,
	    343933,
	    343934,
	    343935,
	    343936,
	    343937,
	    343938,
	    343939,
	    343940,
	    343941,
	    343942,
	    343943,
	    343944,
	    343945,
	    343946,
	    343947,
	    343948,
	    343949,
	    343950,
	    343951,
	    343952,
	    343953,
	    343954,
	    343955,
	    343956,
	    343957,
	    343958,
	    343959,
	    343960,
	    343961,
	    343962,
	    343963,
	    343964,
	    343965,
	    343966,
	    343967,
	    343968,
	    343969,
	    343970,
	    343971,
	    343972,
	    343973,
	    343974,
	    343975,
	    343976,
	    343977,
	    343978,
	    343979,
	    343980,
	    343981,
	    343982,
	    343983,
	    343984,
	    343985,
	    343986,
	    343987,
	    343988,
	    343989,
	    343990,
	    343991,
	    343992,
	    343993,
	    343994,
	    343995,
	    343996,
	    343997,
	    343998,
	    343999,
	    344000,
	    344001,
	    344002,
	    344003,
	    344004,
	    344005,
	    344006,
	    344007,
	    344008,
	    344009,
	    344010,
	    344011,
	    344012,
	    344013,
	    344014,
	    344015,
	    344016,
	    344017,
	    344018,
	    344019,
	    344020,
	    344021,
	    344022,
	    344023,
	    344024,
	    344025,
	    344026,
	    344027,
	    344028,
	    344029,
	    344030,
	    344031,
	    344032,
	    344033,
	    344034,
	    344035,
	    344036,
	    344037,
	    344038,
	    344039,
	    344040,
	    344041,
	    344042,
	    344043,
	    344044,
	    344045,
	    344046,
	    344047,
	    344048,
	    344049,
	    344050,
	    344051,
	    344052,
	    344053,
	    344054,
	    344055,
	    344056,
	    344057,
	    344058,
	    344059,
	    344060,
	    344061,
	    344062,
	    344063,
	    344064,
	    344065,
	    344066,
	    344067,
	    344068,
	    344069,
	    344070,
	    344071,
	    344072,
	    344073,
	    344074,
	    344075,
	    344076,
	    344077,
	    344078,
	    344079,
	    344080,
	    344081,
	    344082,
	    344083,
	    344084,
	    344085,
	    344086,
	    344087,
	    344088,
	    344089,
	    344090,
	    344091,
	    344092,
	    344093,
	    344094,
	    344095,
	    344096,
	    344097,
	    344098,
	    344099,
	    344100,
	    344101,
	    344102,
	    344103,
	    344104,
	    344105,
	    344106,
	    344107,
	    344108,
	    344109,
	    344110,
	    344111,
	    344112,
	    344113,
	    344114,
	    344115,
	    344116,
	    344117,
	    344118,
	    344119,
	    344120,
	    344121,
	    344122,
	    344123,
	    344124,
	    344125,
	    344126,
	    344127,
	    344128,
	    344129,
	    344130,
	    344131,
	    344132,
	    344133,
	    344134,
	    344135,
	    344136,
	    344137,
	    344138,
	    344139,
	    344140,
	    344141,
	    344142,
	    344143,
	    344144,
	    344145,
	    344146,
	    344147,
	    344148,
	    344149,
	    344150,
	    344151,
	    344152,
	    344153,
	    344154,
	    344155,
	    344156,
	    344157,
	    344158,
	    344159,
	    344160,
	    344161,
	    344162,
	    344163,
	    344164,
	    344165,
	    344166,
	    344167,
	    344168,
	    344169,
	    344170,
	    344171,
	    344172,
	    344173,
	    344174,
	    344175,
	    344176,
	    344177,
	    344178,
	    344179,
	    344180,
	    344181,
	    344182,
	    344183,
	    344184,
	    344185,
	    344186,
	    344187,
	    344188,
	    344189,
	    344190,
	    344191,
	    344192,
	    344193,
	    344194,
	    344195,
	    344196,
	    344197,
	    344198,
	    344199,
	    344200,
	    344201,
	    344202,
	    344203,
	    344204,
	    344205,
	    344206,
	    344207,
	    344208,
	    344209,
	    344210,
	    344211,
	    344212,
	    344213,
	    344214,
	    344215,
	    344216,
	    344217,
	    344218,
	    344219,
	    344220,
	    344221,
	    344222,
	    344223,
	    344224,
	    344225,
	    344226,
	    344227,
	    344228,
	    344229,
	    344230,
	    344231,
	    344232,
	    344233,
	    344234,
	    344235,
	    344236,
	    344237,
	    344238,
	    344239,
	    344240,
	    344241,
	    344242,
	    344243,
	    344244,
	    344245,
	    344246,
	    344247,
	    344248,
	    344249,
	    344250,
	    344251,
	    344252,
	    344253,
	    344254,
	    344255,
	    344256,
	    344257,
	    344258,
	    344259,
	    344260,
	    344261,
	    344262,
	    344263,
	    344264,
	    344265,
	    344266,
	    344267,
	    344268,
	    344269,
	    344270,
	    344271,
	    344272,
	    344273,
	    344274,
	    344275,
	    344276,
	    344277,
	    344278,
	    344279,
	    344280,
	    344281,
	    344282,
	    344283,
	    344284,
	    344285,
	    344286,
	    344287,
	    344288,
	    344289,
	    344290,
	    344291,
	    344292,
	    344293,
	    344294,
	    344295,
	    344296,
	    344297,
	    344298,
	    344299,
	    344300,
	    344301,
	    344302,
	    344303,
	    344304,
	    344305,
	    344306,
	    344307,
	    344308,
	    344309,
	    344310,
	    344311,
	    344312,
	    344313,
	    344314,
	    344315,
	    344316,
	    344317,
	    344318,
	    344319,
	    344320,
	    344321,
	    344322,
	    344323,
	    344324,
	    344325,
	    344326,
	    344327,
	    344328,
	    344329,
	    344330,
	    344331,
	    344332,
	    344333,
	    344334,
	    344335,
	    344336,
	    344337,
	    344338,
	    344339,
	    344340,
	    344341,
	    344342,
	    344343,
	    344344,
	    344345,
	    344346,
	    344347,
	    344348,
	    344349,
	    344350,
	    344351,
	    344352,
	    344353,
	    344354,
	    344355,
	    344356,
	    344357,
	    344358,
	    344359,
	    344360,
	    344361,
	    344362,
	    344363,
	    344364,
	    344365,
	    344366,
	    344367,
	    344368,
	    344369,
	    344370,
	    344371,
	    344372,
	    344373,
	    344374,
	    344375,
	    344376,
	    344377,
	    344378,
	    344379,
	    344380,
	    344381,
	    344382,
	    344383,
	    344384,
	    344385,
	    344386,
	    344387,
	    344388,
	    344389,
	    344390,
	    344391,
	    344392,
	    344393,
	    344394,
	    344395,
	    344396,
	    344397,
	    344398,
	    344399,
	    344400,
	    344401,
	    344402,
	    344403,
	    344404,
	    344405,
	    344406,
	    344407,
	    344408,
	    344409,
	    344410,
	    344411,
	    344412,
	    344413,
	    344414,
	    344415,
	    344416,
	    344417,
	    344418,
	    344419,
	    344420,
	    344421,
	    344422,
	    344423,
	    344424,
	    344425,
	    344426,
	    344427,
	    344428,
	    344429,
	    344430,
	    344431,
	    344432,
	    344433,
	    344434,
	    344435,
	    344436,
	    344437,
	    344438,
	    344439,
	    344440,
	    344441,
	    344442,
	    344443,
	    344444,
	    344445,
	    344446,
	    344447,
	    344448,
	    344449,
	    344450,
	    344451,
	    344452,
	    344453,
	    344454,
	    344455,
	    344456,
	    344457,
	    344458,
	    344459,
	    344460,
	    344461,
	    344462,
	    344463,
	    344464,
	    344465,
	    344466,
	    344467,
	    344468,
	    344469,
	    344470,
	    344471,
	    344472,
	    344473,
	    344474,
	    344475,
	    344476,
	    344477,
	    344478,
	    344479,
	    344480,
	    344481,
	    344482,
	    344483,
	    344484,
	    344485,
	    344486,
	    344487,
	    344488,
	    344489,
	    344490,
	    344491,
	    344492,
	    344493,
	    344494,
	    344495,
	    344496,
	    344497,
	    344498,
	    344499,
	    344500,
	    344501,
	    344502,
	    344503,
	    344504,
	    344505,
	    344506,
	    344507,
	    344508,
	    344509,
	    344510,
	    344511,
	    344512,
	    344513,
	    344514,
	    344515,
	    344516,
	    344517,
	    344518,
	    344519,
	    344520,
	    344521,
	    344522,
	    344523,
	    344524,
	    344525,
	    344526,
	    344527,
	    344528,
	    344529,
	    344530,
	    344531,
	    344532,
	    344533,
	    344534,
	    344535,
	    344536,
	    344537,
	    344538,
	    344539,
	    344540,
	    344541,
	    344542,
	    344543,
	    344544,
	    344545,
	    344546,
	    344547,
	    344548,
	    344549,
	    344550,
	    344551,
	    344552,
	    344553,
	    344554,
	    344555,
	    344556,
	    344557,
	    344558,
	    344559,
	    344560,
	    344561,
	    344562,
	    344563,
	    344564,
	    344565,
	    344566,
	    344567,
	    344568,
	    344569,
	    344570,
	    344571,
	    344572,
	    344573,
	    344574,
	    344575,
	    344576,
	    344577,
	    344578,
	    344579,
	    344580,
	    344581,
	    344582,
	    344583,
	    344584,
	    344585,
	    344586,
	    344587,
	    344588,
	    344589,
	    344590,
	    344591,
	    344592,
	    344593,
	    344594,
	    344595
	  ]
	}


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var P2P = __webpack_require__(201),
	    Messages = P2P.Messages,
	    bitcore = __webpack_require__(24),
	    BlockHeader = bitcore.BlockHeader,
	    EventEmitter = __webpack_require__(23).EventEmitter,
	    util = __webpack_require__(17),
	    BloomFilter = __webpack_require__(130);

	var Chain = __webpack_require__(186),
	    constants = __webpack_require__(115);


	function Pool(options) {
	  if (!(this instanceof Pool))
	    return new Pool(options);

	  this.options = options || {};
	  this.options.peerTimeout = this.options.peerTimeout || 3000;
	  this.options.relay = this.options.relay !== false;
	  this.size = this.options.size || 3;
	  this.network = bitcore.Networks[this.options.network]
	    || bitcore.Networks.defaultNetwork;
	  this.connected = false;
	  this.chain = null;
	  this.pool = null;
	  this.ping = {
	    interval: this.options.pingInterval || 30000,
	    _timers: []
	  }
	  this.peers = {
	    loader: null,
	    pending: [],
	    connected: []
	  };
	}
	util.inherits(Pool, EventEmitter);

	Pool.prototype.connect = function() {
	  if(this.connected) return;

	  // TODO: pass in options to the pool?
	  this.pool = new P2P.Pool(this.network, { maxSize: this.size });
	  // TODO: pass in options (storage, etc.) to the Chain?
	  this.chain = new Chain({ network: this.network });
	  this.pool.on('peerconnect', this._handlePeerConnect.bind(this));
	  this.pool.on('peerready', this._handlePeerReady.bind(this));
	  this.pool.on('peerdisconnect', this._handlePeerDisconnect.bind(this));
	  this.pool.on('peerheaders', this._handlePeerHeaders.bind(this));
	  this.pool.on('peerinv', this._handlePeerInv.bind(this));
	  this.pool.on('peererror', this._handlePeerError.bind(this));

	  this.pool.connect();
	  this.connected = true;

	  // TODO: figure out why this is needed
	  var poolTimeout = setTimeout(function(){
	    this.disconnect().connect();
	  }.bind(this),3000);
	  this.pool.once('peerready', function() { clearTimeout(poolTimeout); });

	  return this;
	}

	Pool.prototype.disconnect = function() {
	  this.connected=false;
	  this.pool.disconnect();
	  return this;
	}

	Pool.prototype.watch = function(id) {
	  // id can be a bitcoir 'Address' or a String, (or an HD public key?)
	  // TODO Set BloomFilter
	}

	Pool.prototype._setLoaderPeer = function(peer) {
	  var self = this;
	  if(!this.chain.loaded) {
	    this.chain.once('load',function() { self._setLoaderPeer(peer) });
	    return;
	  }
	  if(this.peers.loader) {
	    return;
	  }
	  this.peers.loader = peer;
	  var lastHashIdx = this.chain.index.hashes.length - 1;
	  peer.sendMessage(new Messages.GetHeaders([this.chain.index.hashes[lastHashIdx]]));
	}

	Pool.prototype._handlePeerConnect = function(peer) {
	  this.peers.pending.push(peer);
	  // Only wait 3 seconds for verAck
	  var peerTimeout = setTimeout(function() {
	    peer.disconnect();
	  },3000);
	  peer.on('ready', function() { clearTimeout(peerTimeout); });
	  this.emit('peer-connect', peer)
	}

	Pool.prototype._handlePeerReady = function(peer, addr) {
	  this._removePeer(peer);
	  this.peers.connected.push(peer);
	  this.emit('peer-ready', peer);

	  // Setup a ping interval
	  // TODO: not ideal to stick this on the peer object
	  // But its the simplest for now
	  peer._pingTimer = (setInterval(function(){
	    peer.sendMessage(new Messages.Ping());
	  },this.ping.interval));

	  //TODO: Smarter loader peer choosing
	  if(!this.peers.loader) {
	    this._setLoaderPeer(peer);
	  }
	}

	Pool.prototype._handlePeerDisconnect = function(peer, addr) {
	  this._removePeer(peer);
	  clearInterval(peer._pingTimer);
	  this.emit('peer-disconnect', peer)
	}

	Pool.prototype._handlePeerInv = function(peer, message) {
	  var txHashes = [], blockHashes = [];

	  if(message.count > constants.MAX_GETDATA_HASHES) {
	    console.log('inv message has too many items, dropping.');
	    return;
	  }

	  for(var i in message.inventory) {
	    switch(message.inventory[i].type) {
	      case 1: // TX
	        txHashes.push(message.inventory[i]);
	      break;
	      case 2: // Block
	        blockHashes.push(message.inventory[i]);
	      break;
	      default: break;
	    }
	  }

	  // Stole this logic from breadWallet
	  if(txHashes.length > 10000) {
	    console.log('too many transactions, disconnecting from peer');
	    peer.disconnect();
	    return;
	  }

	  // If we got new blocks, GetHeaders
	  if(blockHashes.length) {
	    var lastHashIdx = this.chain.index.hashes.length - 1;
	    peer.sendMessage(new Messages.GetHeaders([this.chain.index.hashes[lastHashIdx]]));
	  }
	}

	Pool.prototype._handlePeerHeaders = function(peer, message) {
	  for(var i in message.headers) {
	    var blockHeader = new BlockHeader(message.headers[i]);
	    this.chain.add(blockHeader);
	  }

	  this.emit('chain-progress', this.chain.fillPercent());

	  // If we got 2000 messages, assume we still have more to get
	  if(message.headers.length == 2000) {
	    var lastHeader = message.headers[message.headers.length - 1];
	    peer.sendMessage(new Messages.GetHeaders([lastHeader.id]));
	  } else {
	    this.emit('chain-full');
	  }
	}

	Pool.prototype._handlePeerReject = function(peer, message) {
	  this.emit('peer-reject', message);
	}

	Pool.prototype._handlePeerError = function(peer, e) {
	  this.emit('peer-error');
	  peer.disconnect();
	}

	Pool.prototype._removePeer = function(peer) {
	  var i = this.peers.pending.indexOf(peer);
	  if (i !== -1) {
	    this.peers.pending.splice(i, 1);
	  }

	  i = this.peers.connected.indexOf(peer);
	  if (i !== -1) {
	    this.peers.connected.splice(i, 1);
	  }

	  if (this.peers.loader === peer) {
	    this.peers.load = null;
	  }
	}

	Pool.Events = [
	  'chain-progress','chain-full', 'peer-error', 'peer-reject',
	  'peer-connect','peer-disconnect', 'peer-ready'
	];

	module.exports = Pool;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var bitcore = __webpack_require__(24),
	    Mnemonic = __webpack_require__(192),
	    EventEmitter = __webpack_require__(23).EventEmitter,
	    util = __webpack_require__(17);

	function Wallet(options) {
	  if (!(this instanceof Wallet))
	    return new Wallet(options, passphrase);

	  this.options = options || {};

	  // Default/fallback to ENGLISH
	  this.language = Mnemonic.Words[this.options.language] || Mnemonic.Words.ENGLISH;
	  this.loaded = false;
	  this.key = {
	    priv: null,
	    pub: null,
	    mnemonic: null,
	    // TODO: make use of password (maybe make it non-optional?)
	    passphrase: this.options.passphrase || null
	  };
	  this.masterPrivateKey = null;
	  // Delete the passphrase when we're done with it
	  delete this.options['passphrase'];

	  this._init();
	}
	util.inherits(Wallet, EventEmitter);

	Wallet.prototype._init = function() {
	  // TODO: Load from storage if already stored
	  var mnemonic = new Mnemonic(this.language);
	  this.key.mnemonic = mnemonic.toString();
	  this.key.priv = mnemonic.toHDPrivateKey();
	  this.key.pub = this.key.priv.hdPublicKey;
	  this.loaded = true;
	  this.emit('load');
	}

	Wallet.prototype.balance = function () {
	}

	Wallet.prototype.mnemonic = function () {
	}

	Wallet.prototype.fromJSON = function() {
	}

	Wallet.prototype.toJSON = function() {
	  return {
	    type: 'wallet',
	    pub: this.key.pub.xpubkey,
	    priv: this.key.priv.toString()
	  }
	}

	// load - when wallet is loaded
	// locked - when wallet 'times out' the master public key to erase from memory
	Wallet.Events = ['load', 'locked'];

	module.exports = Wallet;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(194);


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var spec = {
	  name: 'Mnemonic',
	  message: 'Internal Error on bitcore-mnemonic module {0}',
	  errors: [{
	    name: 'InvalidEntropy',
	    message: 'Entropy length must be an even multiple of 11 bits: {0}'
	  }, {
	    name: 'UnknownWordlist',
	    message: 'Could not detect the used word list: {0}'
	  }, {
	    name: 'InvalidMnemonic',
	    message: 'Mnemonic string is invalid: {0}'
	  }]
	};

	module.exports = __webpack_require__(24).errors.extend(spec);


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var bitcore = __webpack_require__(24);
	var _ = bitcore.deps._;

	var pbkdf2 = __webpack_require__(195);
	var errors = __webpack_require__(193);

	var Hash = bitcore.crypto.Hash;
	var Random = bitcore.crypto.Random;

	/**
	 * This is an immutable class that represents a Mnemonic code.
	 * A Mnemonic code is a a group of easy to remember words used for the generation
	 * of deterministic wallets. A Mnemonic can be used to generate a seed using 
	 * an optional passphrase, for later generate a HDPrivateKey.
	 * 
	 * @example
	 * // generate a random mnemonic
	 * var mnemonic = new Mnemonic();
	 * var phrase = mnemonic.phrase;
	 *
	 * // use a different language
	 * var mnemonic = new Mnemonic(Mnemonic.Words.SPANISH);
	 * var xprivkey = mnemonic.toHDPrivateKey();
	 *
	 * @param {*} data - The encoded data in various formats
	 * @param {Network|String|number} [network] - The network: 'livenet' or 'testnet'
	 * @param {String} [type] - The type of address: 'script' or 'pubkey'
	 * @returns {Address} A new valid and frozen instance of an Address
	 * @constructor
	 */
	var Mnemonic = function(data, wordlist) {
	  if (!(this instanceof Mnemonic)) {
	    return new Mnemonic(data, wordlist);
	  }

	  if (_.isArray(data)) {
	    wordlist = data;
	    data = null;
	  }

	  // handle data overloading
	  var ent, phrase;
	  if (_.isString(data)) {
	    phrase = data;
	  } else if (_.isNumber(data)) {
	    ent = data;
	  } else if (data) {
	    throw new bitcore.errors.InvalidArgument('data', 'Must be an string or an integer');
	  }
	  ent = ent || 128;

	  // check and detect wordlist
	  wordlist = wordlist || Mnemonic._getDictionary(phrase);
	  if (phrase && !wordlist) {
	    throw new errors.UnknownWordlist(phrase);
	  }
	  wordlist = wordlist || Mnemonic.Words.ENGLISH;

	  // validate phrase and ent
	  if (phrase && !Mnemonic.isValid(phrase, wordlist)) {
	    throw new errors.InvalidMnemonic(phrase);
	  }
	  if (ent % 32 !== 0 || ent < 128) {
	    throw new bitcore.errors.InvalidArgument('ENT', 'Values must be ENT > 128 and ENT % 32 == 0');
	  }

	  phrase = phrase || Mnemonic._mnemonic(ent, wordlist);

	  Object.defineProperty(this, 'wordlist', {
	    configurable: false,
	    value: wordlist
	  });

	  Object.defineProperty(this, 'phrase', {
	    configurable: false,
	    value: phrase
	  });
	};

	Mnemonic.Words = __webpack_require__(198);

	/**
	 * Will return a boolean if the mnemonic is valid
	 *
	 * @example
	 *
	 * var valid = Mnemonic.isValid('lab rescue lunch elbow recall phrase perfect donkey biology guess moment husband');
	 * // true
	 *
	 * @param {String} mnemonic - The mnemonic string
	 * @param {String} [wordlist] - The wordlist used
	 * @returns {boolean}
	 */
	Mnemonic.isValid = function(mnemonic, wordlist) {
	  wordlist = wordlist || Mnemonic._getDictionary(mnemonic);
	  
	  if (!wordlist) {
	    return false;
	  };

	  var words = mnemonic.split(' ');
	  var bin = "";
	  for (var i = 0; i < words.length; i++) {
	      var ind = wordlist.indexOf(words[i]);
	      if (ind < 0) return false;
	      bin = bin + ("00000000000" + ind.toString(2)).slice(-11);
	  }

	  var cs = bin.length / 33;
	  var hash_bits = bin.slice(-cs);
	  var nonhash_bits = bin.slice(0, bin.length - cs);
	  var buf = new Buffer(nonhash_bits.length / 8);
	  for (var i = 0; i < nonhash_bits.length / 8; i++) {
	    buf.writeUInt8(parseInt(bin.slice(i * 8, (i + 1) * 8), 2), i);
	  }
	  var expected_hash_bits = Mnemonic._entropyChecksum(buf);
	  return expected_hash_bits === hash_bits;
	};

	/**
	 * Internal function to check if a mnemonic belongs to a wordlist.
	 *
	 * @param {String} mnemonic - The mnemonic string
	 * @param {String} wordlist - The wordlist
	 * @returns {boolean}
	 */
	Mnemonic._belongsToWordlist = function(mnemonic, wordlist) {
	  var word = mnemonic.split(' ')[0];
	  return wordlist.indexOf(word) !== -1; // only checks for a word
	};

	/**
	 * Internal function to detect the wordlist used to generate the mnemonic.
	 *
	 * @param {String} mnemonic - The mnemonic string
	 * @returns {Array} the wordlist or null
	 */
	Mnemonic._getDictionary = function(mnemonic) {
	  if (!mnemonic) return null;

	  var dicts = Object.keys(Mnemonic.Words);
	  for (var i = 0; i < dicts.length; i++) {
	    var key = dicts[i];
	    if (Mnemonic._belongsToWordlist(mnemonic, Mnemonic.Words[key])) {
	      return Mnemonic.Words[key];    
	    }
	  }
	  return null;
	};

	/**
	 * Will generated a seed based on the mnemonic and and and optional passphrase.
	 *
	 * @param {String} [passphrase]
	 * @returns {Buffer}
	 */
	Mnemonic.prototype.toSeed = function(passphrase) {
	  passphrase = passphrase || "";
	  return pbkdf2(this.phrase, "mnemonic" + passphrase, 2048, 64);
	};

	/**
	 * Will generated a seed based on the mnemonic and and and optional passphrase.
	 *
	 * @param {String} [passphrase]
	 * @returns {Buffer}
	 */
	Mnemonic.prototype.toHDPrivateKey = function(passphrase, network) {
	  var seed = this.toSeed(passphrase);
	  return bitcore.HDPrivateKey.fromSeed(seed, network);
	};

	/**
	 * Will return a the string representation of the mnemonic
	 *
	 * @returns {String} Mnemonic
	 */
	Mnemonic.prototype.toString = function() {
	  return this.phrase;
	};

	/**
	 * Will return a string formatted for the console
	 *
	 * @returns {String} Mnemonic
	 */
	Mnemonic.prototype.inspect = function() {
	  return '<Mnemonic: ' + this.toString() + ' >';
	};

	/**
	 * Internal function to generate a random mnemonic
	 *
	 * @param {Number} ENT - Entropy size, defaults to 128
	 * @param {Array} wordlist - Array of words to generate the mnemonic
	 * @returns {String} Mnemonic string
	 */
	Mnemonic._mnemonic = function(ENT, wordlist) {
	  var buf = Random.getRandomBuffer(ENT / 8);
	  return Mnemonic._entropy2mnemonic(buf, wordlist);
	};

	/**
	 * Internal function to generate mnemonic based on entropy
	 *
	 * @param {Number} entropy - Entropy buffer
	 * @param {Array} wordlist - Array of words to generate the mnemonic
	 * @returns {String} Mnemonic string
	 */
	Mnemonic._entropy2mnemonic = function(entropy, wordlist) {
	  var bin = "";
	  for (var i = 0; i < entropy.length; i++) {
	    bin = bin + ("00000000" + entropy[i].toString(2)).slice(-8);
	  }

	  bin = bin + Mnemonic._entropyChecksum(entropy);
	  if (bin.length % 11 != 0) {
	    throw new errors.InvalidEntropy(bin);
	  }
	  var mnemonic = [];
	  for (var i = 0; i < bin.length / 11; i++) {
	    var wi = parseInt(bin.slice(i * 11, (i + 1) * 11), 2);
	    mnemonic.push(wordlist[wi]);
	  }
	  return mnemonic.join(" ");
	};

	/**
	 * Internal function to create checksum of entropy
	 *
	 * @param entropy
	 * @returns {string} Checksum of entropy length / 32
	 * @private
	 */
	Mnemonic._entropyChecksum = function(entropy) {
	  var hash = Hash.sha256(entropy);
	  var bits = entropy.length * 8;
	  var cs = bits / 32;

	  var hashbits = parseInt(hash.toString('hex'), 16).toString(2);
	  // zero pad the hash bits
	  hashbits = (new Array(256).join("0") + hashbits).slice(-256).slice(0, cs);

	  return hashbits;
	};

	module.exports = Mnemonic;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var crypto = __webpack_require__(77);

	/**
	 * PDKBF2
	 * Credit to: https://github.com/stayradiated/pbkdf2-sha512
	 * Copyright (c) 2014, JP Richardson Copyright (c) 2010-2011 Intalio Pte, All Rights Reserved
	 */
	function pbkdf2(key, salt, iterations, dkLen) {
	  var hLen = 64; //SHA512 Mac length
	  if (dkLen > (Math.pow(2, 32) - 1) * hLen) 
	    throw Error("Requested key length too long");
	  
	  if (typeof key != 'string' && !Buffer.isBuffer(key))
	    throw new TypeError('key must a string or Buffer');
	  if (typeof salt != 'string' && !Buffer.isBuffer(salt))
	    throw new TypeError('salt must a string or Buffer');

	  if (typeof salt == 'string') salt = new Buffer(salt);

	  var DK = new Buffer(dkLen);

	  var U = new Buffer(hLen);
	  var T = new Buffer(hLen);
	  var block1 = new Buffer(salt.length + 4);

	  var l = Math.ceil(dkLen / hLen);
	  var r = dkLen - (l - 1) * hLen;

	  salt.copy(block1, 0, 0, salt.length);
	  for (var i = 1; i <= l; i++) {
	    block1[salt.length + 0] = (i >> 24 & 0xff);
	    block1[salt.length + 1] = (i >> 16 & 0xff);
	    block1[salt.length + 2] = (i >> 8  & 0xff);
	    block1[salt.length + 3] = (i >> 0  & 0xff);

	    U = crypto.createHmac('sha512', key).update(block1).digest();
	    
	    U.copy(T, 0, 0, hLen);

	    for (var j = 1; j < iterations; j++) {
	      U = crypto.createHmac('sha512', key).update(U).digest();

	      for (var k = 0; k < hLen; k++) {
	        T[k] ^= U[k];
	      }
	    }

	    var destPos = (i - 1) * hLen;
	    var len = (i == l ? r : hLen);
	    T.copy(DK, destPos, 0, len);
	  }

	  return DK;
	}

	module.exports = pbkdf2;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var chinese = ['的', '一', '是', '在', '不', '了', '有', '和', '人', '这', '中', '大', '为', '上', '个', '国', '我', '以', '要', '他', '时', '来', '用', '们', '生', '到', '作', '地', '于', '出', '就', '分', '对', '成', '会', '可', '主', '发', '年', '动', '同', '工', '也', '能', '下', '过', '子', '说', '产', '种', '面', '而', '方', '后', '多', '定', '行', '学', '法', '所', '民', '得', '经', '十', '三', '之', '进', '着', '等', '部', '度', '家', '电', '力', '里', '如', '水', '化', '高', '自', '二', '理', '起', '小', '物', '现', '实', '加', '量', '都', '两', '体', '制', '机', '当', '使', '点', '从', '业', '本', '去', '把', '性', '好', '应', '开', '它', '合', '还', '因', '由', '其', '些', '然', '前', '外', '天', '政', '四', '日', '那', '社', '义', '事', '平', '形', '相', '全', '表', '间', '样', '与', '关', '各', '重', '新', '线', '内', '数', '正', '心', '反', '你', '明', '看', '原', '又', '么', '利', '比', '或', '但', '质', '气', '第', '向', '道', '命', '此', '变', '条', '只', '没', '结', '解', '问', '意', '建', '月', '公', '无', '系', '军', '很', '情', '者', '最', '立', '代', '想', '已', '通', '并', '提', '直', '题', '党', '程', '展', '五', '果', '料', '象', '员', '革', '位', '入', '常', '文', '总', '次', '品', '式', '活', '设', '及', '管', '特', '件', '长', '求', '老', '头', '基', '资', '边', '流', '路', '级', '少', '图', '山', '统', '接', '知', '较', '将', '组', '见', '计', '别', '她', '手', '角', '期', '根', '论', '运', '农', '指', '几', '九', '区', '强', '放', '决', '西', '被', '干', '做', '必', '战', '先', '回', '则', '任', '取', '据', '处', '队', '南', '给', '色', '光', '门', '即', '保', '治', '北', '造', '百', '规', '热', '领', '七', '海', '口', '东', '导', '器', '压', '志', '世', '金', '增', '争', '济', '阶', '油', '思', '术', '极', '交', '受', '联', '什', '认', '六', '共', '权', '收', '证', '改', '清', '美', '再', '采', '转', '更', '单', '风', '切', '打', '白', '教', '速', '花', '带', '安', '场', '身', '车', '例', '真', '务', '具', '万', '每', '目', '至', '达', '走', '积', '示', '议', '声', '报', '斗', '完', '类', '八', '离', '华', '名', '确', '才', '科', '张', '信', '马', '节', '话', '米', '整', '空', '元', '况', '今', '集', '温', '传', '土', '许', '步', '群', '广', '石', '记', '需', '段', '研', '界', '拉', '林', '律', '叫', '且', '究', '观', '越', '织', '装', '影', '算', '低', '持', '音', '众', '书', '布', '复', '容', '儿', '须', '际', '商', '非', '验', '连', '断', '深', '难', '近', '矿', '千', '周', '委', '素', '技', '备', '半', '办', '青', '省', '列', '习', '响', '约', '支', '般', '史', '感', '劳', '便', '团', '往', '酸', '历', '市', '克', '何', '除', '消', '构', '府', '称', '太', '准', '精', '值', '号', '率', '族', '维', '划', '选', '标', '写', '存', '候', '毛', '亲', '快', '效', '斯', '院', '查', '江', '型', '眼', '王', '按', '格', '养', '易', '置', '派', '层', '片', '始', '却', '专', '状', '育', '厂', '京', '识', '适', '属', '圆', '包', '火', '住', '调', '满', '县', '局', '照', '参', '红', '细', '引', '听', '该', '铁', '价', '严', '首', '底', '液', '官', '德', '随', '病', '苏', '失', '尔', '死', '讲', '配', '女', '黄', '推', '显', '谈', '罪', '神', '艺', '呢', '席', '含', '企', '望', '密', '批', '营', '项', '防', '举', '球', '英', '氧', '势', '告', '李', '台', '落', '木', '帮', '轮', '破', '亚', '师', '围', '注', '远', '字', '材', '排', '供', '河', '态', '封', '另', '施', '减', '树', '溶', '怎', '止', '案', '言', '士', '均', '武', '固', '叶', '鱼', '波', '视', '仅', '费', '紧', '爱', '左', '章', '早', '朝', '害', '续', '轻', '服', '试', '食', '充', '兵', '源', '判', '护', '司', '足', '某', '练', '差', '致', '板', '田', '降', '黑', '犯', '负', '击', '范', '继', '兴', '似', '余', '坚', '曲', '输', '修', '故', '城', '夫', '够', '送', '笔', '船', '占', '右', '财', '吃', '富', '春', '职', '觉', '汉', '画', '功', '巴', '跟', '虽', '杂', '飞', '检', '吸', '助', '升', '阳', '互', '初', '创', '抗', '考', '投', '坏', '策', '古', '径', '换', '未', '跑', '留', '钢', '曾', '端', '责', '站', '简', '述', '钱', '副', '尽', '帝', '射', '草', '冲', '承', '独', '令', '限', '阿', '宣', '环', '双', '请', '超', '微', '让', '控', '州', '良', '轴', '找', '否', '纪', '益', '依', '优', '顶', '础', '载', '倒', '房', '突', '坐', '粉', '敌', '略', '客', '袁', '冷', '胜', '绝', '析', '块', '剂', '测', '丝', '协', '诉', '念', '陈', '仍', '罗', '盐', '友', '洋', '错', '苦', '夜', '刑', '移', '频', '逐', '靠', '混', '母', '短', '皮', '终', '聚', '汽', '村', '云', '哪', '既', '距', '卫', '停', '烈', '央', '察', '烧', '迅', '境', '若', '印', '洲', '刻', '括', '激', '孔', '搞', '甚', '室', '待', '核', '校', '散', '侵', '吧', '甲', '游', '久', '菜', '味', '旧', '模', '湖', '货', '损', '预', '阻', '毫', '普', '稳', '乙', '妈', '植', '息', '扩', '银', '语', '挥', '酒', '守', '拿', '序', '纸', '医', '缺', '雨', '吗', '针', '刘', '啊', '急', '唱', '误', '训', '愿', '审', '附', '获', '茶', '鲜', '粮', '斤', '孩', '脱', '硫', '肥', '善', '龙', '演', '父', '渐', '血', '欢', '械', '掌', '歌', '沙', '刚', '攻', '谓', '盾', '讨', '晚', '粒', '乱', '燃', '矛', '乎', '杀', '药', '宁', '鲁', '贵', '钟', '煤', '读', '班', '伯', '香', '介', '迫', '句', '丰', '培', '握', '兰', '担', '弦', '蛋', '沉', '假', '穿', '执', '答', '乐', '谁', '顺', '烟', '缩', '征', '脸', '喜', '松', '脚', '困', '异', '免', '背', '星', '福', '买', '染', '井', '概', '慢', '怕', '磁', '倍', '祖', '皇', '促', '静', '补', '评', '翻', '肉', '践', '尼', '衣', '宽', '扬', '棉', '希', '伤', '操', '垂', '秋', '宜', '氢', '套', '督', '振', '架', '亮', '末', '宪', '庆', '编', '牛', '触', '映', '雷', '销', '诗', '座', '居', '抓', '裂', '胞', '呼', '娘', '景', '威', '绿', '晶', '厚', '盟', '衡', '鸡', '孙', '延', '危', '胶', '屋', '乡', '临', '陆', '顾', '掉', '呀', '灯', '岁', '措', '束', '耐', '剧', '玉', '赵', '跳', '哥', '季', '课', '凯', '胡', '额', '款', '绍', '卷', '齐', '伟', '蒸', '殖', '永', '宗', '苗', '川', '炉', '岩', '弱', '零', '杨', '奏', '沿', '露', '杆', '探', '滑', '镇', '饭', '浓', '航', '怀', '赶', '库', '夺', '伊', '灵', '税', '途', '灭', '赛', '归', '召', '鼓', '播', '盘', '裁', '险', '康', '唯', '录', '菌', '纯', '借', '糖', '盖', '横', '符', '私', '努', '堂', '域', '枪', '润', '幅', '哈', '竟', '熟', '虫', '泽', '脑', '壤', '碳', '欧', '遍', '侧', '寨', '敢', '彻', '虑', '斜', '薄', '庭', '纳', '弹', '饲', '伸', '折', '麦', '湿', '暗', '荷', '瓦', '塞', '床', '筑', '恶', '户', '访', '塔', '奇', '透', '梁', '刀', '旋', '迹', '卡', '氯', '遇', '份', '毒', '泥', '退', '洗', '摆', '灰', '彩', '卖', '耗', '夏', '择', '忙', '铜', '献', '硬', '予', '繁', '圈', '雪', '函', '亦', '抽', '篇', '阵', '阴', '丁', '尺', '追', '堆', '雄', '迎', '泛', '爸', '楼', '避', '谋', '吨', '野', '猪', '旗', '累', '偏', '典', '馆', '索', '秦', '脂', '潮', '爷', '豆', '忽', '托', '惊', '塑', '遗', '愈', '朱', '替', '纤', '粗', '倾', '尚', '痛', '楚', '谢', '奋', '购', '磨', '君', '池', '旁', '碎', '骨', '监', '捕', '弟', '暴', '割', '贯', '殊', '释', '词', '亡', '壁', '顿', '宝', '午', '尘', '闻', '揭', '炮', '残', '冬', '桥', '妇', '警', '综', '招', '吴', '付', '浮', '遭', '徐', '您', '摇', '谷', '赞', '箱', '隔', '订', '男', '吹', '园', '纷', '唐', '败', '宋', '玻', '巨', '耕', '坦', '荣', '闭', '湾', '键', '凡', '驻', '锅', '救', '恩', '剥', '凝', '碱', '齿', '截', '炼', '麻', '纺', '禁', '废', '盛', '版', '缓', '净', '睛', '昌', '婚', '涉', '筒', '嘴', '插', '岸', '朗', '庄', '街', '藏', '姑', '贸', '腐', '奴', '啦', '惯', '乘', '伙', '恢', '匀', '纱', '扎', '辩', '耳', '彪', '臣', '亿', '璃', '抵', '脉', '秀', '萨', '俄', '网', '舞', '店', '喷', '纵', '寸', '汗', '挂', '洪', '贺', '闪', '柬', '爆', '烯', '津', '稻', '墙', '软', '勇', '像', '滚', '厘', '蒙', '芳', '肯', '坡', '柱', '荡', '腿', '仪', '旅', '尾', '轧', '冰', '贡', '登', '黎', '削', '钻', '勒', '逃', '障', '氨', '郭', '峰', '币', '港', '伏', '轨', '亩', '毕', '擦', '莫', '刺', '浪', '秘', '援', '株', '健', '售', '股', '岛', '甘', '泡', '睡', '童', '铸', '汤', '阀', '休', '汇', '舍', '牧', '绕', '炸', '哲', '磷', '绩', '朋', '淡', '尖', '启', '陷', '柴', '呈', '徒', '颜', '泪', '稍', '忘', '泵', '蓝', '拖', '洞', '授', '镜', '辛', '壮', '锋', '贫', '虚', '弯', '摩', '泰', '幼', '廷', '尊', '窗', '纲', '弄', '隶', '疑', '氏', '宫', '姐', '震', '瑞', '怪', '尤', '琴', '循', '描', '膜', '违', '夹', '腰', '缘', '珠', '穷', '森', '枝', '竹', '沟', '催', '绳', '忆', '邦', '剩', '幸', '浆', '栏', '拥', '牙', '贮', '礼', '滤', '钠', '纹', '罢', '拍', '咱', '喊', '袖', '埃', '勤', '罚', '焦', '潜', '伍', '墨', '欲', '缝', '姓', '刊', '饱', '仿', '奖', '铝', '鬼', '丽', '跨', '默', '挖', '链', '扫', '喝', '袋', '炭', '污', '幕', '诸', '弧', '励', '梅', '奶', '洁', '灾', '舟', '鉴', '苯', '讼', '抱', '毁', '懂', '寒', '智', '埔', '寄', '届', '跃', '渡', '挑', '丹', '艰', '贝', '碰', '拔', '爹', '戴', '码', '梦', '芽', '熔', '赤', '渔', '哭', '敬', '颗', '奔', '铅', '仲', '虎', '稀', '妹', '乏', '珍', '申', '桌', '遵', '允', '隆', '螺', '仓', '魏', '锐', '晓', '氮', '兼', '隐', '碍', '赫', '拨', '忠', '肃', '缸', '牵', '抢', '博', '巧', '壳', '兄', '杜', '讯', '诚', '碧', '祥', '柯', '页', '巡', '矩', '悲', '灌', '龄', '伦', '票', '寻', '桂', '铺', '圣', '恐', '恰', '郑', '趣', '抬', '荒', '腾', '贴', '柔', '滴', '猛', '阔', '辆', '妻', '填', '撤', '储', '签', '闹', '扰', '紫', '砂', '递', '戏', '吊', '陶', '伐', '喂', '疗', '瓶', '婆', '抚', '臂', '摸', '忍', '虾', '蜡', '邻', '胸', '巩', '挤', '偶', '弃', '槽', '劲', '乳', '邓', '吉', '仁', '烂', '砖', '租', '乌', '舰', '伴', '瓜', '浅', '丙', '暂', '燥', '橡', '柳', '迷', '暖', '牌', '秧', '胆', '详', '簧', '踏', '瓷', '谱', '呆', '宾', '糊', '洛', '辉', '愤', '竞', '隙', '怒', '粘', '乃', '绪', '肩', '籍', '敏', '涂', '熙', '皆', '侦', '悬', '掘', '享', '纠', '醒', '狂', '锁', '淀', '恨', '牲', '霸', '爬', '赏', '逆', '玩', '陵', '祝', '秒', '浙', '貌', '役', '彼', '悉', '鸭', '趋', '凤', '晨', '畜', '辈', '秩', '卵', '署', '梯', '炎', '滩', '棋', '驱', '筛', '峡', '冒', '啥', '寿', '译', '浸', '泉', '帽', '迟', '硅', '疆', '贷', '漏', '稿', '冠', '嫩', '胁', '芯', '牢', '叛', '蚀', '奥', '鸣', '岭', '羊', '凭', '串', '塘', '绘', '酵', '融', '盆', '锡', '庙', '筹', '冻', '辅', '摄', '袭', '筋', '拒', '僚', '旱', '钾', '鸟', '漆', '沈', '眉', '疏', '添', '棒', '穗', '硝', '韩', '逼', '扭', '侨', '凉', '挺', '碗', '栽', '炒', '杯', '患', '馏', '劝', '豪', '辽', '勃', '鸿', '旦', '吏', '拜', '狗', '埋', '辊', '掩', '饮', '搬', '骂', '辞', '勾', '扣', '估', '蒋', '绒', '雾', '丈', '朵', '姆', '拟', '宇', '辑', '陕', '雕', '偿', '蓄', '崇', '剪', '倡', '厅', '咬', '驶', '薯', '刷', '斥', '番', '赋', '奉', '佛', '浇', '漫', '曼', '扇', '钙', '桃', '扶', '仔', '返', '俗', '亏', '腔', '鞋', '棱', '覆', '框', '悄', '叔', '撞', '骗', '勘', '旺', '沸', '孤', '吐', '孟', '渠', '屈', '疾', '妙', '惜', '仰', '狠', '胀', '谐', '抛', '霉', '桑', '岗', '嘛', '衰', '盗', '渗', '脏', '赖', '涌', '甜', '曹', '阅', '肌', '哩', '厉', '烃', '纬', '毅', '昨', '伪', '症', '煮', '叹', '钉', '搭', '茎', '笼', '酷', '偷', '弓', '锥', '恒', '杰', '坑', '鼻', '翼', '纶', '叙', '狱', '逮', '罐', '络', '棚', '抑', '膨', '蔬', '寺', '骤', '穆', '冶', '枯', '册', '尸', '凸', '绅', '坯', '牺', '焰', '轰', '欣', '晋', '瘦', '御', '锭', '锦', '丧', '旬', '锻', '垄', '搜', '扑', '邀', '亭', '酯', '迈', '舒', '脆', '酶', '闲', '忧', '酚', '顽', '羽', '涨', '卸', '仗', '陪', '辟', '惩', '杭', '姚', '肚', '捉', '飘', '漂', '昆', '欺', '吾', '郎', '烷', '汁', '呵', '饰', '萧', '雅', '邮', '迁', '燕', '撒', '姻', '赴', '宴', '烦', '债', '帐', '斑', '铃', '旨', '醇', '董', '饼', '雏', '姿', '拌', '傅', '腹', '妥', '揉', '贤', '拆', '歪', '葡', '胺', '丢', '浩', '徽', '昂', '垫', '挡', '览', '贪', '慰', '缴', '汪', '慌', '冯', '诺', '姜', '谊', '凶', '劣', '诬', '耀', '昏', '躺', '盈', '骑', '乔', '溪', '丛', '卢', '抹', '闷', '咨', '刮', '驾', '缆', '悟', '摘', '铒', '掷', '颇', '幻', '柄', '惠', '惨', '佳', '仇', '腊', '窝', '涤', '剑', '瞧', '堡', '泼', '葱', '罩', '霍', '捞', '胎', '苍', '滨', '俩', '捅', '湘', '砍', '霞', '邵', '萄', '疯', '淮', '遂', '熊', '粪', '烘', '宿', '档', '戈', '驳', '嫂', '裕', '徙', '箭', '捐', '肠', '撑', '晒', '辨', '殿', '莲', '摊', '搅', '酱', '屏', '疫', '哀', '蔡', '堵', '沫', '皱', '畅', '叠', '阁', '莱', '敲', '辖', '钩', '痕', '坝', '巷', '饿', '祸', '丘', '玄', '溜', '曰', '逻', '彭', '尝', '卿', '妨', '艇', '吞', '韦', '怨', '矮', '歇'];

	module.exports = chinese;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var english = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics', 'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo'];

	module.exports = english;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  'CHINESE': __webpack_require__(196),
	  'ENGLISH': __webpack_require__(197),
	  'JAPANESE': __webpack_require__(199),
	  'SPANISH': __webpack_require__(200)
	};


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var japanese = ['あいこくしん', 'あいさつ', 'あいだ', 'あおぞら', 'あかちゃん', 'あきる', 'あけがた', 'あける', 'あこがれる', 'あさい', 'あさひ', 'あしあと', 'あじわう', 'あずかる', 'あずき', 'あそぶ', 'あたえる', 'あたためる', 'あたりまえ', 'あたる', 'あつい', 'あつかう', 'あっしゅく', 'あつまり', 'あつめる', 'あてな', 'あてはまる', 'あひる', 'あぶら', 'あぶる', 'あふれる', 'あまい', 'あまど', 'あまやかす', 'あまり', 'あみもの', 'あめりか', 'あやまる', 'あゆむ', 'あらいぐま', 'あらし', 'あらすじ', 'あらためる', 'あらゆる', 'あらわす', 'ありがとう', 'あわせる', 'あわてる', 'あんい', 'あんがい', 'あんこ', 'あんぜん', 'あんてい', 'あんない', 'あんまり', 'いいだす', 'いおん', 'いがい', 'いがく', 'いきおい', 'いきなり', 'いきもの', 'いきる', 'いくじ', 'いくぶん', 'いけばな', 'いけん', 'いこう', 'いこく', 'いこつ', 'いさましい', 'いさん', 'いしき', 'いじゅう', 'いじょう', 'いじわる', 'いずみ', 'いずれ', 'いせい', 'いせえび', 'いせかい', 'いせき', 'いぜん', 'いそうろう', 'いそがしい', 'いだい', 'いだく', 'いたずら', 'いたみ', 'いたりあ', 'いちおう', 'いちじ', 'いちど', 'いちば', 'いちぶ', 'いちりゅう', 'いつか', 'いっしゅん', 'いっせい', 'いっそう', 'いったん', 'いっち', 'いってい', 'いっぽう', 'いてざ', 'いてん', 'いどう', 'いとこ', 'いない', 'いなか', 'いねむり', 'いのち', 'いのる', 'いはつ', 'いばる', 'いはん', 'いびき', 'いひん', 'いふく', 'いへん', 'いほう', 'いみん', 'いもうと', 'いもたれ', 'いもり', 'いやがる', 'いやす', 'いよかん', 'いよく', 'いらい', 'いらすと', 'いりぐち', 'いりょう', 'いれい', 'いれもの', 'いれる', 'いろえんぴつ', 'いわい', 'いわう', 'いわかん', 'いわば', 'いわゆる', 'いんげんまめ', 'いんさつ', 'いんしょう', 'いんよう', 'うえき', 'うえる', 'うおざ', 'うがい', 'うかぶ', 'うかべる', 'うきわ', 'うくらいな', 'うくれれ', 'うけたまわる', 'うけつけ', 'うけとる', 'うけもつ', 'うける', 'うごかす', 'うごく', 'うこん', 'うさぎ', 'うしなう', 'うしろがみ', 'うすい', 'うすぎ', 'うすぐらい', 'うすめる', 'うせつ', 'うちあわせ', 'うちがわ', 'うちき', 'うちゅう', 'うっかり', 'うつくしい', 'うったえる', 'うつる', 'うどん', 'うなぎ', 'うなじ', 'うなずく', 'うなる', 'うねる', 'うのう', 'うぶげ', 'うぶごえ', 'うまれる', 'うめる', 'うもう', 'うやまう', 'うよく', 'うらがえす', 'うらぐち', 'うらない', 'うりあげ', 'うりきれ', 'うるさい', 'うれしい', 'うれゆき', 'うれる', 'うろこ', 'うわき', 'うわさ', 'うんこう', 'うんちん', 'うんてん', 'うんどう', 'えいえん', 'えいが', 'えいきょう', 'えいご', 'えいせい', 'えいぶん', 'えいよう', 'えいわ', 'えおり', 'えがお', 'えがく', 'えきたい', 'えくせる', 'えしゃく', 'えすて', 'えつらん', 'えのぐ', 'えほうまき', 'えほん', 'えまき', 'えもじ', 'えもの', 'えらい', 'えらぶ', 'えりあ', 'えんえん', 'えんかい', 'えんぎ', 'えんげき', 'えんしゅう', 'えんぜつ', 'えんそく', 'えんちょう', 'えんとつ', 'おいかける', 'おいこす', 'おいしい', 'おいつく', 'おうえん', 'おうさま', 'おうじ', 'おうせつ', 'おうたい', 'おうふく', 'おうべい', 'おうよう', 'おえる', 'おおい', 'おおう', 'おおどおり', 'おおや', 'おおよそ', 'おかえり', 'おかず', 'おがむ', 'おかわり', 'おぎなう', 'おきる', 'おくさま', 'おくじょう', 'おくりがな', 'おくる', 'おくれる', 'おこす', 'おこなう', 'おこる', 'おさえる', 'おさない', 'おさめる', 'おしいれ', 'おしえる', 'おじぎ', 'おじさん', 'おしゃれ', 'おそらく', 'おそわる', 'おたがい', 'おたく', 'おだやか', 'おちつく', 'おっと', 'おつり', 'おでかけ', 'おとしもの', 'おとなしい', 'おどり', 'おどろかす', 'おばさん', 'おまいり', 'おめでとう', 'おもいで', 'おもう', 'おもたい', 'おもちゃ', 'おやつ', 'おやゆび', 'およぼす', 'おらんだ', 'おろす', 'おんがく', 'おんけい', 'おんしゃ', 'おんせん', 'おんだん', 'おんちゅう', 'おんどけい', 'かあつ', 'かいが', 'がいき', 'がいけん', 'がいこう', 'かいさつ', 'かいしゃ', 'かいすいよく', 'かいぜん', 'かいぞうど', 'かいつう', 'かいてん', 'かいとう', 'かいふく', 'がいへき', 'かいほう', 'かいよう', 'がいらい', 'かいわ', 'かえる', 'かおり', 'かかえる', 'かがく', 'かがし', 'かがみ', 'かくご', 'かくとく', 'かざる', 'がぞう', 'かたい', 'かたち', 'がちょう', 'がっきゅう', 'がっこう', 'がっさん', 'がっしょう', 'かなざわし', 'かのう', 'がはく', 'かぶか', 'かほう', 'かほご', 'かまう', 'かまぼこ', 'かめれおん', 'かゆい', 'かようび', 'からい', 'かるい', 'かろう', 'かわく', 'かわら', 'がんか', 'かんけい', 'かんこう', 'かんしゃ', 'かんそう', 'かんたん', 'かんち', 'がんばる', 'きあい', 'きあつ', 'きいろ', 'ぎいん', 'きうい', 'きうん', 'きえる', 'きおう', 'きおく', 'きおち', 'きおん', 'きかい', 'きかく', 'きかんしゃ', 'ききて', 'きくばり', 'きくらげ', 'きけんせい', 'きこう', 'きこえる', 'きこく', 'きさい', 'きさく', 'きさま', 'きさらぎ', 'ぎじかがく', 'ぎしき', 'ぎじたいけん', 'ぎじにってい', 'ぎじゅつしゃ', 'きすう', 'きせい', 'きせき', 'きせつ', 'きそう', 'きぞく', 'きぞん', 'きたえる', 'きちょう', 'きつえん', 'ぎっちり', 'きつつき', 'きつね', 'きてい', 'きどう', 'きどく', 'きない', 'きなが', 'きなこ', 'きぬごし', 'きねん', 'きのう', 'きのした', 'きはく', 'きびしい', 'きひん', 'きふく', 'きぶん', 'きぼう', 'きほん', 'きまる', 'きみつ', 'きむずかしい', 'きめる', 'きもだめし', 'きもち', 'きもの', 'きゃく', 'きやく', 'ぎゅうにく', 'きよう', 'きょうりゅう', 'きらい', 'きらく', 'きりん', 'きれい', 'きれつ', 'きろく', 'ぎろん', 'きわめる', 'ぎんいろ', 'きんかくじ', 'きんじょ', 'きんようび', 'ぐあい', 'くいず', 'くうかん', 'くうき', 'くうぐん', 'くうこう', 'ぐうせい', 'くうそう', 'ぐうたら', 'くうふく', 'くうぼ', 'くかん', 'くきょう', 'くげん', 'ぐこう', 'くさい', 'くさき', 'くさばな', 'くさる', 'くしゃみ', 'くしょう', 'くすのき', 'くすりゆび', 'くせげ', 'くせん', 'ぐたいてき', 'くださる', 'くたびれる', 'くちこみ', 'くちさき', 'くつした', 'ぐっすり', 'くつろぐ', 'くとうてん', 'くどく', 'くなん', 'くねくね', 'くのう', 'くふう', 'くみあわせ', 'くみたてる', 'くめる', 'くやくしょ', 'くらす', 'くらべる', 'くるま', 'くれる', 'くろう', 'くわしい', 'ぐんかん', 'ぐんしょく', 'ぐんたい', 'ぐんて', 'けあな', 'けいかく', 'けいけん', 'けいこ', 'けいさつ', 'げいじゅつ', 'けいたい', 'げいのうじん', 'けいれき', 'けいろ', 'けおとす', 'けおりもの', 'げきか', 'げきげん', 'げきだん', 'げきちん', 'げきとつ', 'げきは', 'げきやく', 'げこう', 'げこくじょう', 'げざい', 'けさき', 'げざん', 'けしき', 'けしごむ', 'けしょう', 'げすと', 'けたば', 'けちゃっぷ', 'けちらす', 'けつあつ', 'けつい', 'けつえき', 'けっこん', 'けつじょ', 'けっせき', 'けってい', 'けつまつ', 'げつようび', 'げつれい', 'けつろん', 'げどく', 'けとばす', 'けとる', 'けなげ', 'けなす', 'けなみ', 'けぬき', 'げねつ', 'けねん', 'けはい', 'げひん', 'けぶかい', 'げぼく', 'けまり', 'けみかる', 'けむし', 'けむり', 'けもの', 'けらい', 'けろけろ', 'けわしい', 'けんい', 'けんえつ', 'けんお', 'けんか', 'げんき', 'けんげん', 'けんこう', 'けんさく', 'けんしゅう', 'けんすう', 'げんそう', 'けんちく', 'けんてい', 'けんとう', 'けんない', 'けんにん', 'げんぶつ', 'けんま', 'けんみん', 'けんめい', 'けんらん', 'けんり', 'こあくま', 'こいぬ', 'こいびと', 'ごうい', 'こうえん', 'こうおん', 'こうかん', 'ごうきゅう', 'ごうけい', 'こうこう', 'こうさい', 'こうじ', 'こうすい', 'ごうせい', 'こうそく', 'こうたい', 'こうちゃ', 'こうつう', 'こうてい', 'こうどう', 'こうない', 'こうはい', 'ごうほう', 'ごうまん', 'こうもく', 'こうりつ', 'こえる', 'こおり', 'ごかい', 'ごがつ', 'ごかん', 'こくご', 'こくさい', 'こくとう', 'こくない', 'こくはく', 'こぐま', 'こけい', 'こける', 'ここのか', 'こころ', 'こさめ', 'こしつ', 'こすう', 'こせい', 'こせき', 'こぜん', 'こそだて', 'こたい', 'こたえる', 'こたつ', 'こちょう', 'こっか', 'こつこつ', 'こつばん', 'こつぶ', 'こてい', 'こてん', 'ことがら', 'ことし', 'ことば', 'ことり', 'こなごな', 'こねこね', 'このまま', 'このみ', 'このよ', 'ごはん', 'こひつじ', 'こふう', 'こふん', 'こぼれる', 'ごまあぶら', 'こまかい', 'ごますり', 'こまつな', 'こまる', 'こむぎこ', 'こもじ', 'こもち', 'こもの', 'こもん', 'こやく', 'こやま', 'こゆう', 'こゆび', 'こよい', 'こよう', 'こりる', 'これくしょん', 'ころっけ', 'こわもて', 'こわれる', 'こんいん', 'こんかい', 'こんき', 'こんしゅう', 'こんすい', 'こんだて', 'こんとん', 'こんなん', 'こんびに', 'こんぽん', 'こんまけ', 'こんや', 'こんれい', 'こんわく', 'ざいえき', 'さいかい', 'さいきん', 'ざいげん', 'ざいこ', 'さいしょ', 'さいせい', 'ざいたく', 'ざいちゅう', 'さいてき', 'ざいりょう', 'さうな', 'さかいし', 'さがす', 'さかな', 'さかみち', 'さがる', 'さぎょう', 'さくし', 'さくひん', 'さくら', 'さこく', 'さこつ', 'さずかる', 'ざせき', 'さたん', 'さつえい', 'ざつおん', 'ざっか', 'ざつがく', 'さっきょく', 'ざっし', 'さつじん', 'ざっそう', 'さつたば', 'さつまいも', 'さてい', 'さといも', 'さとう', 'さとおや', 'さとし', 'さとる', 'さのう', 'さばく', 'さびしい', 'さべつ', 'さほう', 'さほど', 'さます', 'さみしい', 'さみだれ', 'さむけ', 'さめる', 'さやえんどう', 'さゆう', 'さよう', 'さよく', 'さらだ', 'ざるそば', 'さわやか', 'さわる', 'さんいん', 'さんか', 'さんきゃく', 'さんこう', 'さんさい', 'ざんしょ', 'さんすう', 'さんせい', 'さんそ', 'さんち', 'さんま', 'さんみ', 'さんらん', 'しあい', 'しあげ', 'しあさって', 'しあわせ', 'しいく', 'しいん', 'しうち', 'しえい', 'しおけ', 'しかい', 'しかく', 'じかん', 'しごと', 'しすう', 'じだい', 'したうけ', 'したぎ', 'したて', 'したみ', 'しちょう', 'しちりん', 'しっかり', 'しつじ', 'しつもん', 'してい', 'してき', 'してつ', 'じてん', 'じどう', 'しなぎれ', 'しなもの', 'しなん', 'しねま', 'しねん', 'しのぐ', 'しのぶ', 'しはい', 'しばかり', 'しはつ', 'しはらい', 'しはん', 'しひょう', 'しふく', 'じぶん', 'しへい', 'しほう', 'しほん', 'しまう', 'しまる', 'しみん', 'しむける', 'じむしょ', 'しめい', 'しめる', 'しもん', 'しゃいん', 'しゃうん', 'しゃおん', 'じゃがいも', 'しやくしょ', 'しゃくほう', 'しゃけん', 'しゃこ', 'しゃざい', 'しゃしん', 'しゃせん', 'しゃそう', 'しゃたい', 'しゃちょう', 'しゃっきん', 'じゃま', 'しゃりん', 'しゃれい', 'じゆう', 'じゅうしょ', 'しゅくはく', 'じゅしん', 'しゅっせき', 'しゅみ', 'しゅらば', 'じゅんばん', 'しょうかい', 'しょくたく', 'しょっけん', 'しょどう', 'しょもつ', 'しらせる', 'しらべる', 'しんか', 'しんこう', 'じんじゃ', 'しんせいじ', 'しんちく', 'しんりん', 'すあげ', 'すあし', 'すあな', 'ずあん', 'すいえい', 'すいか', 'すいとう', 'ずいぶん', 'すいようび', 'すうがく', 'すうじつ', 'すうせん', 'すおどり', 'すきま', 'すくう', 'すくない', 'すける', 'すごい', 'すこし', 'ずさん', 'すずしい', 'すすむ', 'すすめる', 'すっかり', 'ずっしり', 'ずっと', 'すてき', 'すてる', 'すねる', 'すのこ', 'すはだ', 'すばらしい', 'ずひょう', 'ずぶぬれ', 'すぶり', 'すふれ', 'すべて', 'すべる', 'ずほう', 'すぼん', 'すまい', 'すめし', 'すもう', 'すやき', 'すらすら', 'するめ', 'すれちがう', 'すろっと', 'すわる', 'すんぜん', 'すんぽう', 'せあぶら', 'せいかつ', 'せいげん', 'せいじ', 'せいよう', 'せおう', 'せかいかん', 'せきにん', 'せきむ', 'せきゆ', 'せきらんうん', 'せけん', 'せこう', 'せすじ', 'せたい', 'せたけ', 'せっかく', 'せっきゃく', 'ぜっく', 'せっけん', 'せっこつ', 'せっさたくま', 'せつぞく', 'せつだん', 'せつでん', 'せっぱん', 'せつび', 'せつぶん', 'せつめい', 'せつりつ', 'せなか', 'せのび', 'せはば', 'せびろ', 'せぼね', 'せまい', 'せまる', 'せめる', 'せもたれ', 'せりふ', 'ぜんあく', 'せんい', 'せんえい', 'せんか', 'せんきょ', 'せんく', 'せんげん', 'ぜんご', 'せんさい', 'せんしゅ', 'せんすい', 'せんせい', 'せんぞ', 'せんたく', 'せんちょう', 'せんてい', 'せんとう', 'せんぬき', 'せんねん', 'せんぱい', 'ぜんぶ', 'ぜんぽう', 'せんむ', 'せんめんじょ', 'せんもん', 'せんやく', 'せんゆう', 'せんよう', 'ぜんら', 'ぜんりゃく', 'せんれい', 'せんろ', 'そあく', 'そいとげる', 'そいね', 'そうがんきょう', 'そうき', 'そうご', 'そうしん', 'そうだん', 'そうなん', 'そうび', 'そうめん', 'そうり', 'そえもの', 'そえん', 'そがい', 'そげき', 'そこう', 'そこそこ', 'そざい', 'そしな', 'そせい', 'そせん', 'そそぐ', 'そだてる', 'そつう', 'そつえん', 'そっかん', 'そつぎょう', 'そっけつ', 'そっこう', 'そっせん', 'そっと', 'そとがわ', 'そとづら', 'そなえる', 'そなた', 'そふぼ', 'そぼく', 'そぼろ', 'そまつ', 'そまる', 'そむく', 'そむりえ', 'そめる', 'そもそも', 'そよかぜ', 'そらまめ', 'そろう', 'そんかい', 'そんけい', 'そんざい', 'そんしつ', 'そんぞく', 'そんちょう', 'ぞんび', 'ぞんぶん', 'そんみん', 'たあい', 'たいいん', 'たいうん', 'たいえき', 'たいおう', 'だいがく', 'たいき', 'たいぐう', 'たいけん', 'たいこ', 'たいざい', 'だいじょうぶ', 'だいすき', 'たいせつ', 'たいそう', 'だいたい', 'たいちょう', 'たいてい', 'だいどころ', 'たいない', 'たいねつ', 'たいのう', 'たいはん', 'だいひょう', 'たいふう', 'たいへん', 'たいほ', 'たいまつばな', 'たいみんぐ', 'たいむ', 'たいめん', 'たいやき', 'たいよう', 'たいら', 'たいりょく', 'たいる', 'たいわん', 'たうえ', 'たえる', 'たおす', 'たおる', 'たおれる', 'たかい', 'たかね', 'たきび', 'たくさん', 'たこく', 'たこやき', 'たさい', 'たしざん', 'だじゃれ', 'たすける', 'たずさわる', 'たそがれ', 'たたかう', 'たたく', 'ただしい', 'たたみ', 'たちばな', 'だっかい', 'だっきゃく', 'だっこ', 'だっしゅつ', 'だったい', 'たてる', 'たとえる', 'たなばた', 'たにん', 'たぬき', 'たのしみ', 'たはつ', 'たぶん', 'たべる', 'たぼう', 'たまご', 'たまる', 'だむる', 'ためいき', 'ためす', 'ためる', 'たもつ', 'たやすい', 'たよる', 'たらす', 'たりきほんがん', 'たりょう', 'たりる', 'たると', 'たれる', 'たれんと', 'たろっと', 'たわむれる', 'だんあつ', 'たんい', 'たんおん', 'たんか', 'たんき', 'たんけん', 'たんご', 'たんさん', 'たんじょうび', 'だんせい', 'たんそく', 'たんたい', 'だんち', 'たんてい', 'たんとう', 'だんな', 'たんにん', 'だんねつ', 'たんのう', 'たんぴん', 'だんぼう', 'たんまつ', 'たんめい', 'だんれつ', 'だんろ', 'だんわ', 'ちあい', 'ちあん', 'ちいき', 'ちいさい', 'ちえん', 'ちかい', 'ちから', 'ちきゅう', 'ちきん', 'ちけいず', 'ちけん', 'ちこく', 'ちさい', 'ちしき', 'ちしりょう', 'ちせい', 'ちそう', 'ちたい', 'ちたん', 'ちちおや', 'ちつじょ', 'ちてき', 'ちてん', 'ちぬき', 'ちぬり', 'ちのう', 'ちひょう', 'ちへいせん', 'ちほう', 'ちまた', 'ちみつ', 'ちみどろ', 'ちめいど', 'ちゃんこなべ', 'ちゅうい', 'ちゆりょく', 'ちょうし', 'ちょさくけん', 'ちらし', 'ちらみ', 'ちりがみ', 'ちりょう', 'ちるど', 'ちわわ', 'ちんたい', 'ちんもく', 'ついか', 'ついたち', 'つうか', 'つうじょう', 'つうはん', 'つうわ', 'つかう', 'つかれる', 'つくね', 'つくる', 'つけね', 'つける', 'つごう', 'つたえる', 'つづく', 'つつじ', 'つつむ', 'つとめる', 'つながる', 'つなみ', 'つねづね', 'つのる', 'つぶす', 'つまらない', 'つまる', 'つみき', 'つめたい', 'つもり', 'つもる', 'つよい', 'つるぼ', 'つるみく', 'つわもの', 'つわり', 'てあし', 'てあて', 'てあみ', 'ていおん', 'ていか', 'ていき', 'ていけい', 'ていこく', 'ていさつ', 'ていし', 'ていせい', 'ていたい', 'ていど', 'ていねい', 'ていひょう', 'ていへん', 'ていぼう', 'てうち', 'ておくれ', 'てきとう', 'てくび', 'でこぼこ', 'てさぎょう', 'てさげ', 'てすり', 'てそう', 'てちがい', 'てちょう', 'てつがく', 'てつづき', 'でっぱ', 'てつぼう', 'てつや', 'でぬかえ', 'てぬき', 'てぬぐい', 'てのひら', 'てはい', 'てぶくろ', 'てふだ', 'てほどき', 'てほん', 'てまえ', 'てまきずし', 'てみじか', 'てみやげ', 'てらす', 'てれび', 'てわけ', 'てわたし', 'でんあつ', 'てんいん', 'てんかい', 'てんき', 'てんぐ', 'てんけん', 'てんごく', 'てんさい', 'てんし', 'てんすう', 'でんち', 'てんてき', 'てんとう', 'てんない', 'てんぷら', 'てんぼうだい', 'てんめつ', 'てんらんかい', 'でんりょく', 'でんわ', 'どあい', 'といれ', 'どうかん', 'とうきゅう', 'どうぐ', 'とうし', 'とうむぎ', 'とおい', 'とおか', 'とおく', 'とおす', 'とおる', 'とかい', 'とかす', 'ときおり', 'ときどき', 'とくい', 'とくしゅう', 'とくてん', 'とくに', 'とくべつ', 'とけい', 'とける', 'とこや', 'とさか', 'としょかん', 'とそう', 'とたん', 'とちゅう', 'とっきゅう', 'とっくん', 'とつぜん', 'とつにゅう', 'とどける', 'ととのえる', 'とない', 'となえる', 'となり', 'とのさま', 'とばす', 'どぶがわ', 'とほう', 'とまる', 'とめる', 'ともだち', 'ともる', 'どようび', 'とらえる', 'とんかつ', 'どんぶり', 'ないかく', 'ないこう', 'ないしょ', 'ないす', 'ないせん', 'ないそう', 'なおす', 'ながい', 'なくす', 'なげる', 'なこうど', 'なさけ', 'なたでここ', 'なっとう', 'なつやすみ', 'ななおし', 'なにごと', 'なにもの', 'なにわ', 'なのか', 'なふだ', 'なまいき', 'なまえ', 'なまみ', 'なみだ', 'なめらか', 'なめる', 'なやむ', 'ならう', 'ならび', 'ならぶ', 'なれる', 'なわとび', 'なわばり', 'にあう', 'にいがた', 'にうけ', 'におい', 'にかい', 'にがて', 'にきび', 'にくしみ', 'にくまん', 'にげる', 'にさんかたんそ', 'にしき', 'にせもの', 'にちじょう', 'にちようび', 'にっか', 'にっき', 'にっけい', 'にっこう', 'にっさん', 'にっしょく', 'にっすう', 'にっせき', 'にってい', 'になう', 'にほん', 'にまめ', 'にもつ', 'にやり', 'にゅういん', 'にりんしゃ', 'にわとり', 'にんい', 'にんか', 'にんき', 'にんげん', 'にんしき', 'にんずう', 'にんそう', 'にんたい', 'にんち', 'にんてい', 'にんにく', 'にんぷ', 'にんまり', 'にんむ', 'にんめい', 'にんよう', 'ぬいくぎ', 'ぬかす', 'ぬぐいとる', 'ぬぐう', 'ぬくもり', 'ぬすむ', 'ぬまえび', 'ぬめり', 'ぬらす', 'ぬんちゃく', 'ねあげ', 'ねいき', 'ねいる', 'ねいろ', 'ねぐせ', 'ねくたい', 'ねくら', 'ねこぜ', 'ねこむ', 'ねさげ', 'ねすごす', 'ねそべる', 'ねだん', 'ねつい', 'ねっしん', 'ねつぞう', 'ねったいぎょ', 'ねぶそく', 'ねふだ', 'ねぼう', 'ねほりはほり', 'ねまき', 'ねまわし', 'ねみみ', 'ねむい', 'ねむたい', 'ねもと', 'ねらう', 'ねわざ', 'ねんいり', 'ねんおし', 'ねんかん', 'ねんきん', 'ねんぐ', 'ねんざ', 'ねんし', 'ねんちゃく', 'ねんど', 'ねんぴ', 'ねんぶつ', 'ねんまつ', 'ねんりょう', 'ねんれい', 'のいず', 'のおづま', 'のがす', 'のきなみ', 'のこぎり', 'のこす', 'のこる', 'のせる', 'のぞく', 'のぞむ', 'のたまう', 'のちほど', 'のっく', 'のばす', 'のはら', 'のべる', 'のぼる', 'のみもの', 'のやま', 'のらいぬ', 'のらねこ', 'のりもの', 'のりゆき', 'のれん', 'のんき', 'ばあい', 'はあく', 'ばあさん', 'ばいか', 'ばいく', 'はいけん', 'はいご', 'はいしん', 'はいすい', 'はいせん', 'はいそう', 'はいち', 'ばいばい', 'はいれつ', 'はえる', 'はおる', 'はかい', 'ばかり', 'はかる', 'はくしゅ', 'はけん', 'はこぶ', 'はさみ', 'はさん', 'はしご', 'ばしょ', 'はしる', 'はせる', 'ぱそこん', 'はそん', 'はたん', 'はちみつ', 'はつおん', 'はっかく', 'はづき', 'はっきり', 'はっくつ', 'はっけん', 'はっこう', 'はっさん', 'はっしん', 'はったつ', 'はっちゅう', 'はってん', 'はっぴょう', 'はっぽう', 'はなす', 'はなび', 'はにかむ', 'はぶらし', 'はみがき', 'はむかう', 'はめつ', 'はやい', 'はやし', 'はらう', 'はろうぃん', 'はわい', 'はんい', 'はんえい', 'はんおん', 'はんかく', 'はんきょう', 'ばんぐみ', 'はんこ', 'はんしゃ', 'はんすう', 'はんだん', 'ぱんち', 'ぱんつ', 'はんてい', 'はんとし', 'はんのう', 'はんぱ', 'はんぶん', 'はんぺん', 'はんぼうき', 'はんめい', 'はんらん', 'はんろん', 'ひいき', 'ひうん', 'ひえる', 'ひかく', 'ひかり', 'ひかる', 'ひかん', 'ひくい', 'ひけつ', 'ひこうき', 'ひこく', 'ひさい', 'ひさしぶり', 'ひさん', 'びじゅつかん', 'ひしょ', 'ひそか', 'ひそむ', 'ひたむき', 'ひだり', 'ひたる', 'ひつぎ', 'ひっこし', 'ひっし', 'ひつじゅひん', 'ひっす', 'ひつぜん', 'ぴったり', 'ぴっちり', 'ひつよう', 'ひてい', 'ひとごみ', 'ひなまつり', 'ひなん', 'ひねる', 'ひはん', 'ひびく', 'ひひょう', 'ひほう', 'ひまわり', 'ひまん', 'ひみつ', 'ひめい', 'ひめじし', 'ひやけ', 'ひやす', 'ひよう', 'びょうき', 'ひらがな', 'ひらく', 'ひりつ', 'ひりょう', 'ひるま', 'ひるやすみ', 'ひれい', 'ひろい', 'ひろう', 'ひろき', 'ひろゆき', 'ひんかく', 'ひんけつ', 'ひんこん', 'ひんしゅ', 'ひんそう', 'ぴんち', 'ひんぱん', 'びんぼう', 'ふあん', 'ふいうち', 'ふうけい', 'ふうせん', 'ぷうたろう', 'ふうとう', 'ふうふ', 'ふえる', 'ふおん', 'ふかい', 'ふきん', 'ふくざつ', 'ふくぶくろ', 'ふこう', 'ふさい', 'ふしぎ', 'ふじみ', 'ふすま', 'ふせい', 'ふせぐ', 'ふそく', 'ぶたにく', 'ふたん', 'ふちょう', 'ふつう', 'ふつか', 'ふっかつ', 'ふっき', 'ふっこく', 'ぶどう', 'ふとる', 'ふとん', 'ふのう', 'ふはい', 'ふひょう', 'ふへん', 'ふまん', 'ふみん', 'ふめつ', 'ふめん', 'ふよう', 'ふりこ', 'ふりる', 'ふるい', 'ふんいき', 'ぶんがく', 'ぶんぐ', 'ふんしつ', 'ぶんせき', 'ふんそう', 'ぶんぽう', 'へいあん', 'へいおん', 'へいがい', 'へいき', 'へいげん', 'へいこう', 'へいさ', 'へいしゃ', 'へいせつ', 'へいそ', 'へいたく', 'へいてん', 'へいねつ', 'へいわ', 'へきが', 'へこむ', 'べにいろ', 'べにしょうが', 'へらす', 'へんかん', 'べんきょう', 'べんごし', 'へんさい', 'へんたい', 'べんり', 'ほあん', 'ほいく', 'ぼうぎょ', 'ほうこく', 'ほうそう', 'ほうほう', 'ほうもん', 'ほうりつ', 'ほえる', 'ほおん', 'ほかん', 'ほきょう', 'ぼきん', 'ほくろ', 'ほけつ', 'ほけん', 'ほこう', 'ほこる', 'ほしい', 'ほしつ', 'ほしゅ', 'ほしょう', 'ほせい', 'ほそい', 'ほそく', 'ほたて', 'ほたる', 'ぽちぶくろ', 'ほっきょく', 'ほっさ', 'ほったん', 'ほとんど', 'ほめる', 'ほんい', 'ほんき', 'ほんけ', 'ほんしつ', 'ほんやく', 'まいにち', 'まかい', 'まかせる', 'まがる', 'まける', 'まこと', 'まさつ', 'まじめ', 'ますく', 'まぜる', 'まつり', 'まとめ', 'まなぶ', 'まぬけ', 'まねく', 'まほう', 'まもる', 'まゆげ', 'まよう', 'まろやか', 'まわす', 'まわり', 'まわる', 'まんが', 'まんきつ', 'まんぞく', 'まんなか', 'みいら', 'みうち', 'みえる', 'みがく', 'みかた', 'みかん', 'みけん', 'みこん', 'みじかい', 'みすい', 'みすえる', 'みせる', 'みっか', 'みつかる', 'みつける', 'みてい', 'みとめる', 'みなと', 'みなみかさい', 'みねらる', 'みのう', 'みのがす', 'みほん', 'みもと', 'みやげ', 'みらい', 'みりょく', 'みわく', 'みんか', 'みんぞく', 'むいか', 'むえき', 'むえん', 'むかい', 'むかう', 'むかえ', 'むかし', 'むぎちゃ', 'むける', 'むげん', 'むさぼる', 'むしあつい', 'むしば', 'むじゅん', 'むしろ', 'むすう', 'むすこ', 'むすぶ', 'むすめ', 'むせる', 'むせん', 'むちゅう', 'むなしい', 'むのう', 'むやみ', 'むよう', 'むらさき', 'むりょう', 'むろん', 'めいあん', 'めいうん', 'めいえん', 'めいかく', 'めいきょく', 'めいさい', 'めいし', 'めいそう', 'めいぶつ', 'めいれい', 'めいわく', 'めぐまれる', 'めざす', 'めした', 'めずらしい', 'めだつ', 'めまい', 'めやす', 'めんきょ', 'めんせき', 'めんどう', 'もうしあげる', 'もうどうけん', 'もえる', 'もくし', 'もくてき', 'もくようび', 'もちろん', 'もどる', 'もらう', 'もんく', 'もんだい', 'やおや', 'やける', 'やさい', 'やさしい', 'やすい', 'やすたろう', 'やすみ', 'やせる', 'やそう', 'やたい', 'やちん', 'やっと', 'やっぱり', 'やぶる', 'やめる', 'ややこしい', 'やよい', 'やわらかい', 'ゆうき', 'ゆうびんきょく', 'ゆうべ', 'ゆうめい', 'ゆけつ', 'ゆしゅつ', 'ゆせん', 'ゆそう', 'ゆたか', 'ゆちゃく', 'ゆでる', 'ゆにゅう', 'ゆびわ', 'ゆらい', 'ゆれる', 'ようい', 'ようか', 'ようきゅう', 'ようじ', 'ようす', 'ようちえん', 'よかぜ', 'よかん', 'よきん', 'よくせい', 'よくぼう', 'よけい', 'よごれる', 'よさん', 'よしゅう', 'よそう', 'よそく', 'よっか', 'よてい', 'よどがわく', 'よねつ', 'よやく', 'よゆう', 'よろこぶ', 'よろしい', 'らいう', 'らくがき', 'らくご', 'らくさつ', 'らくだ', 'らしんばん', 'らせん', 'らぞく', 'らたい', 'らっか', 'られつ', 'りえき', 'りかい', 'りきさく', 'りきせつ', 'りくぐん', 'りくつ', 'りけん', 'りこう', 'りせい', 'りそう', 'りそく', 'りてん', 'りねん', 'りゆう', 'りゅうがく', 'りよう', 'りょうり', 'りょかん', 'りょくちゃ', 'りょこう', 'りりく', 'りれき', 'りろん', 'りんご', 'るいけい', 'るいさい', 'るいじ', 'るいせき', 'るすばん', 'るりがわら', 'れいかん', 'れいぎ', 'れいせい', 'れいぞうこ', 'れいとう', 'れいぼう', 'れきし', 'れきだい', 'れんあい', 'れんけい', 'れんこん', 'れんさい', 'れんしゅう', 'れんぞく', 'れんらく', 'ろうか', 'ろうご', 'ろうじん', 'ろうそく', 'ろくが', 'ろこつ', 'ろじうら', 'ろしゅつ', 'ろせん', 'ろてん', 'ろめん', 'ろれつ', 'ろんぎ', 'ろんぱ', 'ろんぶん', 'ろんり', 'わかす', 'わかめ', 'わかやま', 'わかれる', 'わしつ', 'わじまし', 'わすれもの', 'わらう', 'われる'];

	module.exports = japanese;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var spanish = ['ábaco', 'abdomen', 'abeja', 'abierto', 'abogado', 'abono', 'aborto', 'abrazo', 'abrir', 'abuelo', 'abuso', 'acabar', 'academia', 'acceso', 'acción', 'aceite', 'acelga', 'acento', 'aceptar', 'ácido', 'aclarar', 'acné', 'acoger', 'acoso', 'activo', 'acto', 'actriz', 'actuar', 'acudir', 'acuerdo', 'acusar', 'adicto', 'admitir', 'adoptar', 'adorno', 'aduana', 'adulto', 'aéreo', 'afectar', 'afición', 'afinar', 'afirmar', 'ágil', 'agitar', 'agonía', 'agosto', 'agotar', 'agregar', 'agrio', 'agua', 'agudo', 'águila', 'aguja', 'ahogo', 'ahorro', 'aire', 'aislar', 'ajedrez', 'ajeno', 'ajuste', 'alacrán', 'alambre', 'alarma', 'alba', 'álbum', 'alcalde', 'aldea', 'alegre', 'alejar', 'alerta', 'aleta', 'alfiler', 'alga', 'algodón', 'aliado', 'aliento', 'alivio', 'alma', 'almeja', 'almíbar', 'altar', 'alteza', 'altivo', 'alto', 'altura', 'alumno', 'alzar', 'amable', 'amante', 'amapola', 'amargo', 'amasar', 'ámbar', 'ámbito', 'ameno', 'amigo', 'amistad', 'amor', 'amparo', 'amplio', 'ancho', 'anciano', 'ancla', 'andar', 'andén', 'anemia', 'ángulo', 'anillo', 'ánimo', 'anís', 'anotar', 'antena', 'antiguo', 'antojo', 'anual', 'anular', 'anuncio', 'añadir', 'añejo', 'año', 'apagar', 'aparato', 'apetito', 'apio', 'aplicar', 'apodo', 'aporte', 'apoyo', 'aprender', 'aprobar', 'apuesta', 'apuro', 'arado', 'araña', 'arar', 'árbitro', 'árbol', 'arbusto', 'archivo', 'arco', 'arder', 'ardilla', 'arduo', 'área', 'árido', 'aries', 'armonía', 'arnés', 'aroma', 'arpa', 'arpón', 'arreglo', 'arroz', 'arruga', 'arte', 'artista', 'asa', 'asado', 'asalto', 'ascenso', 'asegurar', 'aseo', 'asesor', 'asiento', 'asilo', 'asistir', 'asno', 'asombro', 'áspero', 'astilla', 'astro', 'astuto', 'asumir', 'asunto', 'atajo', 'ataque', 'atar', 'atento', 'ateo', 'ático', 'atleta', 'átomo', 'atraer', 'atroz', 'atún', 'audaz', 'audio', 'auge', 'aula', 'aumento', 'ausente', 'autor', 'aval', 'avance', 'avaro', 'ave', 'avellana', 'avena', 'avestruz', 'avión', 'aviso', 'ayer', 'ayuda', 'ayuno', 'azafrán', 'azar', 'azote', 'azúcar', 'azufre', 'azul', 'baba', 'babor', 'bache', 'bahía', 'baile', 'bajar', 'balanza', 'balcón', 'balde', 'bambú', 'banco', 'banda', 'baño', 'barba', 'barco', 'barniz', 'barro', 'báscula', 'bastón', 'basura', 'batalla', 'batería', 'batir', 'batuta', 'baúl', 'bazar', 'bebé', 'bebida', 'bello', 'besar', 'beso', 'bestia', 'bicho', 'bien', 'bingo', 'blanco', 'bloque', 'blusa', 'boa', 'bobina', 'bobo', 'boca', 'bocina', 'boda', 'bodega', 'boina', 'bola', 'bolero', 'bolsa', 'bomba', 'bondad', 'bonito', 'bono', 'bonsái', 'borde', 'borrar', 'bosque', 'bote', 'botín', 'bóveda', 'bozal', 'bravo', 'brazo', 'brecha', 'breve', 'brillo', 'brinco', 'brisa', 'broca', 'broma', 'bronce', 'brote', 'bruja', 'brusco', 'bruto', 'buceo', 'bucle', 'bueno', 'buey', 'bufanda', 'bufón', 'búho', 'buitre', 'bulto', 'burbuja', 'burla', 'burro', 'buscar', 'butaca', 'buzón', 'caballo', 'cabeza', 'cabina', 'cabra', 'cacao', 'cadáver', 'cadena', 'caer', 'café', 'caída', 'caimán', 'caja', 'cajón', 'cal', 'calamar', 'calcio', 'caldo', 'calidad', 'calle', 'calma', 'calor', 'calvo', 'cama', 'cambio', 'camello', 'camino', 'campo', 'cáncer', 'candil', 'canela', 'canguro', 'canica', 'canto', 'caña', 'cañón', 'caoba', 'caos', 'capaz', 'capitán', 'capote', 'captar', 'capucha', 'cara', 'carbón', 'cárcel', 'careta', 'carga', 'cariño', 'carne', 'carpeta', 'carro', 'carta', 'casa', 'casco', 'casero', 'caspa', 'castor', 'catorce', 'catre', 'caudal', 'causa', 'cazo', 'cebolla', 'ceder', 'cedro', 'celda', 'célebre', 'celoso', 'célula', 'cemento', 'ceniza', 'centro', 'cerca', 'cerdo', 'cereza', 'cero', 'cerrar', 'certeza', 'césped', 'cetro', 'chacal', 'chaleco', 'champú', 'chancla', 'chapa', 'charla', 'chico', 'chiste', 'chivo', 'choque', 'choza', 'chuleta', 'chupar', 'ciclón', 'ciego', 'cielo', 'cien', 'cierto', 'cifra', 'cigarro', 'cima', 'cinco', 'cine', 'cinta', 'ciprés', 'circo', 'ciruela', 'cisne', 'cita', 'ciudad', 'clamor', 'clan', 'claro', 'clase', 'clave', 'cliente', 'clima', 'clínica', 'cobre', 'cocción', 'cochino', 'cocina', 'coco', 'código', 'codo', 'cofre', 'coger', 'cohete', 'cojín', 'cojo', 'cola', 'colcha', 'colegio', 'colgar', 'colina', 'collar', 'colmo', 'columna', 'combate', 'comer', 'comida', 'cómodo', 'compra', 'conde', 'conejo', 'conga', 'conocer', 'consejo', 'contar', 'copa', 'copia', 'corazón', 'corbata', 'corcho', 'cordón', 'corona', 'correr', 'coser', 'cosmos', 'costa', 'cráneo', 'cráter', 'crear', 'crecer', 'creído', 'crema', 'cría', 'crimen', 'cripta', 'crisis', 'cromo', 'crónica', 'croqueta', 'crudo', 'cruz', 'cuadro', 'cuarto', 'cuatro', 'cubo', 'cubrir', 'cuchara', 'cuello', 'cuento', 'cuerda', 'cuesta', 'cueva', 'cuidar', 'culebra', 'culpa', 'culto', 'cumbre', 'cumplir', 'cuna', 'cuneta', 'cuota', 'cupón', 'cúpula', 'curar', 'curioso', 'curso', 'curva', 'cutis', 'dama', 'danza', 'dar', 'dardo', 'dátil', 'deber', 'débil', 'década', 'decir', 'dedo', 'defensa', 'definir', 'dejar', 'delfín', 'delgado', 'delito', 'demora', 'denso', 'dental', 'deporte', 'derecho', 'derrota', 'desayuno', 'deseo', 'desfile', 'desnudo', 'destino', 'desvío', 'detalle', 'detener', 'deuda', 'día', 'diablo', 'diadema', 'diamante', 'diana', 'diario', 'dibujo', 'dictar', 'diente', 'dieta', 'diez', 'difícil', 'digno', 'dilema', 'diluir', 'dinero', 'directo', 'dirigir', 'disco', 'diseño', 'disfraz', 'diva', 'divino', 'doble', 'doce', 'dolor', 'domingo', 'don', 'donar', 'dorado', 'dormir', 'dorso', 'dos', 'dosis', 'dragón', 'droga', 'ducha', 'duda', 'duelo', 'dueño', 'dulce', 'dúo', 'duque', 'durar', 'dureza', 'duro', 'ébano', 'ebrio', 'echar', 'eco', 'ecuador', 'edad', 'edición', 'edificio', 'editor', 'educar', 'efecto', 'eficaz', 'eje', 'ejemplo', 'elefante', 'elegir', 'elemento', 'elevar', 'elipse', 'élite', 'elixir', 'elogio', 'eludir', 'embudo', 'emitir', 'emoción', 'empate', 'empeño', 'empleo', 'empresa', 'enano', 'encargo', 'enchufe', 'encía', 'enemigo', 'enero', 'enfado', 'enfermo', 'engaño', 'enigma', 'enlace', 'enorme', 'enredo', 'ensayo', 'enseñar', 'entero', 'entrar', 'envase', 'envío', 'época', 'equipo', 'erizo', 'escala', 'escena', 'escolar', 'escribir', 'escudo', 'esencia', 'esfera', 'esfuerzo', 'espada', 'espejo', 'espía', 'esposa', 'espuma', 'esquí', 'estar', 'este', 'estilo', 'estufa', 'etapa', 'eterno', 'ética', 'etnia', 'evadir', 'evaluar', 'evento', 'evitar', 'exacto', 'examen', 'exceso', 'excusa', 'exento', 'exigir', 'exilio', 'existir', 'éxito', 'experto', 'explicar', 'exponer', 'extremo', 'fábrica', 'fábula', 'fachada', 'fácil', 'factor', 'faena', 'faja', 'falda', 'fallo', 'falso', 'faltar', 'fama', 'familia', 'famoso', 'faraón', 'farmacia', 'farol', 'farsa', 'fase', 'fatiga', 'fauna', 'favor', 'fax', 'febrero', 'fecha', 'feliz', 'feo', 'feria', 'feroz', 'fértil', 'fervor', 'festín', 'fiable', 'fianza', 'fiar', 'fibra', 'ficción', 'ficha', 'fideo', 'fiebre', 'fiel', 'fiera', 'fiesta', 'figura', 'fijar', 'fijo', 'fila', 'filete', 'filial', 'filtro', 'fin', 'finca', 'fingir', 'finito', 'firma', 'flaco', 'flauta', 'flecha', 'flor', 'flota', 'fluir', 'flujo', 'flúor', 'fobia', 'foca', 'fogata', 'fogón', 'folio', 'folleto', 'fondo', 'forma', 'forro', 'fortuna', 'forzar', 'fosa', 'foto', 'fracaso', 'frágil', 'franja', 'frase', 'fraude', 'freír', 'freno', 'fresa', 'frío', 'frito', 'fruta', 'fuego', 'fuente', 'fuerza', 'fuga', 'fumar', 'función', 'funda', 'furgón', 'furia', 'fusil', 'fútbol', 'futuro', 'gacela', 'gafas', 'gaita', 'gajo', 'gala', 'galería', 'gallo', 'gamba', 'ganar', 'gancho', 'ganga', 'ganso', 'garaje', 'garza', 'gasolina', 'gastar', 'gato', 'gavilán', 'gemelo', 'gemir', 'gen', 'género', 'genio', 'gente', 'geranio', 'gerente', 'germen', 'gesto', 'gigante', 'gimnasio', 'girar', 'giro', 'glaciar', 'globo', 'gloria', 'gol', 'golfo', 'goloso', 'golpe', 'goma', 'gordo', 'gorila', 'gorra', 'gota', 'goteo', 'gozar', 'grada', 'gráfico', 'grano', 'grasa', 'gratis', 'grave', 'grieta', 'grillo', 'gripe', 'gris', 'grito', 'grosor', 'grúa', 'grueso', 'grumo', 'grupo', 'guante', 'guapo', 'guardia', 'guerra', 'guía', 'guiño', 'guion', 'guiso', 'guitarra', 'gusano', 'gustar', 'haber', 'hábil', 'hablar', 'hacer', 'hacha', 'hada', 'hallar', 'hamaca', 'harina', 'haz', 'hazaña', 'hebilla', 'hebra', 'hecho', 'helado', 'helio', 'hembra', 'herir', 'hermano', 'héroe', 'hervir', 'hielo', 'hierro', 'hígado', 'higiene', 'hijo', 'himno', 'historia', 'hocico', 'hogar', 'hoguera', 'hoja', 'hombre', 'hongo', 'honor', 'honra', 'hora', 'hormiga', 'horno', 'hostil', 'hoyo', 'hueco', 'huelga', 'huerta', 'hueso', 'huevo', 'huida', 'huir', 'humano', 'húmedo', 'humilde', 'humo', 'hundir', 'huracán', 'hurto', 'icono', 'ideal', 'idioma', 'ídolo', 'iglesia', 'iglú', 'igual', 'ilegal', 'ilusión', 'imagen', 'imán', 'imitar', 'impar', 'imperio', 'imponer', 'impulso', 'incapaz', 'índice', 'inerte', 'infiel', 'informe', 'ingenio', 'inicio', 'inmenso', 'inmune', 'innato', 'insecto', 'instante', 'interés', 'íntimo', 'intuir', 'inútil', 'invierno', 'ira', 'iris', 'ironía', 'isla', 'islote', 'jabalí', 'jabón', 'jamón', 'jarabe', 'jardín', 'jarra', 'jaula', 'jazmín', 'jefe', 'jeringa', 'jinete', 'jornada', 'joroba', 'joven', 'joya', 'juerga', 'jueves', 'juez', 'jugador', 'jugo', 'juguete', 'juicio', 'junco', 'jungla', 'junio', 'juntar', 'júpiter', 'jurar', 'justo', 'juvenil', 'juzgar', 'kilo', 'koala', 'labio', 'lacio', 'lacra', 'lado', 'ladrón', 'lagarto', 'lágrima', 'laguna', 'laico', 'lamer', 'lámina', 'lámpara', 'lana', 'lancha', 'langosta', 'lanza', 'lápiz', 'largo', 'larva', 'lástima', 'lata', 'látex', 'latir', 'laurel', 'lavar', 'lazo', 'leal', 'lección', 'leche', 'lector', 'leer', 'legión', 'legumbre', 'lejano', 'lengua', 'lento', 'leña', 'león', 'leopardo', 'lesión', 'letal', 'letra', 'leve', 'leyenda', 'libertad', 'libro', 'licor', 'líder', 'lidiar', 'lienzo', 'liga', 'ligero', 'lima', 'límite', 'limón', 'limpio', 'lince', 'lindo', 'línea', 'lingote', 'lino', 'linterna', 'líquido', 'liso', 'lista', 'litera', 'litio', 'litro', 'llaga', 'llama', 'llanto', 'llave', 'llegar', 'llenar', 'llevar', 'llorar', 'llover', 'lluvia', 'lobo', 'loción', 'loco', 'locura', 'lógica', 'logro', 'lombriz', 'lomo', 'lonja', 'lote', 'lucha', 'lucir', 'lugar', 'lujo', 'luna', 'lunes', 'lupa', 'lustro', 'luto', 'luz', 'maceta', 'macho', 'madera', 'madre', 'maduro', 'maestro', 'mafia', 'magia', 'mago', 'maíz', 'maldad', 'maleta', 'malla', 'malo', 'mamá', 'mambo', 'mamut', 'manco', 'mando', 'manejar', 'manga', 'maniquí', 'manjar', 'mano', 'manso', 'manta', 'mañana', 'mapa', 'máquina', 'mar', 'marco', 'marea', 'marfil', 'margen', 'marido', 'mármol', 'marrón', 'martes', 'marzo', 'masa', 'máscara', 'masivo', 'matar', 'materia', 'matiz', 'matriz', 'máximo', 'mayor', 'mazorca', 'mecha', 'medalla', 'medio', 'médula', 'mejilla', 'mejor', 'melena', 'melón', 'memoria', 'menor', 'mensaje', 'mente', 'menú', 'mercado', 'merengue', 'mérito', 'mes', 'mesón', 'meta', 'meter', 'método', 'metro', 'mezcla', 'miedo', 'miel', 'miembro', 'miga', 'mil', 'milagro', 'militar', 'millón', 'mimo', 'mina', 'minero', 'mínimo', 'minuto', 'miope', 'mirar', 'misa', 'miseria', 'misil', 'mismo', 'mitad', 'mito', 'mochila', 'moción', 'moda', 'modelo', 'moho', 'mojar', 'molde', 'moler', 'molino', 'momento', 'momia', 'monarca', 'moneda', 'monja', 'monto', 'moño', 'morada', 'morder', 'moreno', 'morir', 'morro', 'morsa', 'mortal', 'mosca', 'mostrar', 'motivo', 'mover', 'móvil', 'mozo', 'mucho', 'mudar', 'mueble', 'muela', 'muerte', 'muestra', 'mugre', 'mujer', 'mula', 'muleta', 'multa', 'mundo', 'muñeca', 'mural', 'muro', 'músculo', 'museo', 'musgo', 'música', 'muslo', 'nácar', 'nación', 'nadar', 'naipe', 'naranja', 'nariz', 'narrar', 'nasal', 'natal', 'nativo', 'natural', 'náusea', 'naval', 'nave', 'navidad', 'necio', 'néctar', 'negar', 'negocio', 'negro', 'neón', 'nervio', 'neto', 'neutro', 'nevar', 'nevera', 'nicho', 'nido', 'niebla', 'nieto', 'niñez', 'niño', 'nítido', 'nivel', 'nobleza', 'noche', 'nómina', 'noria', 'norma', 'norte', 'nota', 'noticia', 'novato', 'novela', 'novio', 'nube', 'nuca', 'núcleo', 'nudillo', 'nudo', 'nuera', 'nueve', 'nuez', 'nulo', 'número', 'nutria', 'oasis', 'obeso', 'obispo', 'objeto', 'obra', 'obrero', 'observar', 'obtener', 'obvio', 'oca', 'ocaso', 'océano', 'ochenta', 'ocho', 'ocio', 'ocre', 'octavo', 'octubre', 'oculto', 'ocupar', 'ocurrir', 'odiar', 'odio', 'odisea', 'oeste', 'ofensa', 'oferta', 'oficio', 'ofrecer', 'ogro', 'oído', 'oír', 'ojo', 'ola', 'oleada', 'olfato', 'olivo', 'olla', 'olmo', 'olor', 'olvido', 'ombligo', 'onda', 'onza', 'opaco', 'opción', 'ópera', 'opinar', 'oponer', 'optar', 'óptica', 'opuesto', 'oración', 'orador', 'oral', 'órbita', 'orca', 'orden', 'oreja', 'órgano', 'orgía', 'orgullo', 'oriente', 'origen', 'orilla', 'oro', 'orquesta', 'oruga', 'osadía', 'oscuro', 'osezno', 'oso', 'ostra', 'otoño', 'otro', 'oveja', 'óvulo', 'óxido', 'oxígeno', 'oyente', 'ozono', 'pacto', 'padre', 'paella', 'página', 'pago', 'país', 'pájaro', 'palabra', 'palco', 'paleta', 'pálido', 'palma', 'paloma', 'palpar', 'pan', 'panal', 'pánico', 'pantera', 'pañuelo', 'papá', 'papel', 'papilla', 'paquete', 'parar', 'parcela', 'pared', 'parir', 'paro', 'párpado', 'parque', 'párrafo', 'parte', 'pasar', 'paseo', 'pasión', 'paso', 'pasta', 'pata', 'patio', 'patria', 'pausa', 'pauta', 'pavo', 'payaso', 'peatón', 'pecado', 'pecera', 'pecho', 'pedal', 'pedir', 'pegar', 'peine', 'pelar', 'peldaño', 'pelea', 'peligro', 'pellejo', 'pelo', 'peluca', 'pena', 'pensar', 'peñón', 'peón', 'peor', 'pepino', 'pequeño', 'pera', 'percha', 'perder', 'pereza', 'perfil', 'perico', 'perla', 'permiso', 'perro', 'persona', 'pesa', 'pesca', 'pésimo', 'pestaña', 'pétalo', 'petróleo', 'pez', 'pezuña', 'picar', 'pichón', 'pie', 'piedra', 'pierna', 'pieza', 'pijama', 'pilar', 'piloto', 'pimienta', 'pino', 'pintor', 'pinza', 'piña', 'piojo', 'pipa', 'pirata', 'pisar', 'piscina', 'piso', 'pista', 'pitón', 'pizca', 'placa', 'plan', 'plata', 'playa', 'plaza', 'pleito', 'pleno', 'plomo', 'pluma', 'plural', 'pobre', 'poco', 'poder', 'podio', 'poema', 'poesía', 'poeta', 'polen', 'policía', 'pollo', 'polvo', 'pomada', 'pomelo', 'pomo', 'pompa', 'poner', 'porción', 'portal', 'posada', 'poseer', 'posible', 'poste', 'potencia', 'potro', 'pozo', 'prado', 'precoz', 'pregunta', 'premio', 'prensa', 'preso', 'previo', 'primo', 'príncipe', 'prisión', 'privar', 'proa', 'probar', 'proceso', 'producto', 'proeza', 'profesor', 'programa', 'prole', 'promesa', 'pronto', 'propio', 'próximo', 'prueba', 'público', 'puchero', 'pudor', 'pueblo', 'puerta', 'puesto', 'pulga', 'pulir', 'pulmón', 'pulpo', 'pulso', 'puma', 'punto', 'puñal', 'puño', 'pupa', 'pupila', 'puré', 'quedar', 'queja', 'quemar', 'querer', 'queso', 'quieto', 'química', 'quince', 'quitar', 'rábano', 'rabia', 'rabo', 'ración', 'radical', 'raíz', 'rama', 'rampa', 'rancho', 'rango', 'rapaz', 'rápido', 'rapto', 'rasgo', 'raspa', 'rato', 'rayo', 'raza', 'razón', 'reacción', 'realidad', 'rebaño', 'rebote', 'recaer', 'receta', 'rechazo', 'recoger', 'recreo', 'recto', 'recurso', 'red', 'redondo', 'reducir', 'reflejo', 'reforma', 'refrán', 'refugio', 'regalo', 'regir', 'regla', 'regreso', 'rehén', 'reino', 'reír', 'reja', 'relato', 'relevo', 'relieve', 'relleno', 'reloj', 'remar', 'remedio', 'remo', 'rencor', 'rendir', 'renta', 'reparto', 'repetir', 'reposo', 'reptil', 'res', 'rescate', 'resina', 'respeto', 'resto', 'resumen', 'retiro', 'retorno', 'retrato', 'reunir', 'revés', 'revista', 'rey', 'rezar', 'rico', 'riego', 'rienda', 'riesgo', 'rifa', 'rígido', 'rigor', 'rincón', 'riñón', 'río', 'riqueza', 'risa', 'ritmo', 'rito', 'rizo', 'roble', 'roce', 'rociar', 'rodar', 'rodeo', 'rodilla', 'roer', 'rojizo', 'rojo', 'romero', 'romper', 'ron', 'ronco', 'ronda', 'ropa', 'ropero', 'rosa', 'rosca', 'rostro', 'rotar', 'rubí', 'rubor', 'rudo', 'rueda', 'rugir', 'ruido', 'ruina', 'ruleta', 'rulo', 'rumbo', 'rumor', 'ruptura', 'ruta', 'rutina', 'sábado', 'saber', 'sabio', 'sable', 'sacar', 'sagaz', 'sagrado', 'sala', 'saldo', 'salero', 'salir', 'salmón', 'salón', 'salsa', 'salto', 'salud', 'salvar', 'samba', 'sanción', 'sandía', 'sanear', 'sangre', 'sanidad', 'sano', 'santo', 'sapo', 'saque', 'sardina', 'sartén', 'sastre', 'satán', 'sauna', 'saxofón', 'sección', 'seco', 'secreto', 'secta', 'sed', 'seguir', 'seis', 'sello', 'selva', 'semana', 'semilla', 'senda', 'sensor', 'señal', 'señor', 'separar', 'sepia', 'sequía', 'ser', 'serie', 'sermón', 'servir', 'sesenta', 'sesión', 'seta', 'setenta', 'severo', 'sexo', 'sexto', 'sidra', 'siesta', 'siete', 'siglo', 'signo', 'sílaba', 'silbar', 'silencio', 'silla', 'símbolo', 'simio', 'sirena', 'sistema', 'sitio', 'situar', 'sobre', 'socio', 'sodio', 'sol', 'solapa', 'soldado', 'soledad', 'sólido', 'soltar', 'solución', 'sombra', 'sondeo', 'sonido', 'sonoro', 'sonrisa', 'sopa', 'soplar', 'soporte', 'sordo', 'sorpresa', 'sorteo', 'sostén', 'sótano', 'suave', 'subir', 'suceso', 'sudor', 'suegra', 'suelo', 'sueño', 'suerte', 'sufrir', 'sujeto', 'sultán', 'sumar', 'superar', 'suplir', 'suponer', 'supremo', 'sur', 'surco', 'sureño', 'surgir', 'susto', 'sutil', 'tabaco', 'tabique', 'tabla', 'tabú', 'taco', 'tacto', 'tajo', 'talar', 'talco', 'talento', 'talla', 'talón', 'tamaño', 'tambor', 'tango', 'tanque', 'tapa', 'tapete', 'tapia', 'tapón', 'taquilla', 'tarde', 'tarea', 'tarifa', 'tarjeta', 'tarot', 'tarro', 'tarta', 'tatuaje', 'tauro', 'taza', 'tazón', 'teatro', 'techo', 'tecla', 'técnica', 'tejado', 'tejer', 'tejido', 'tela', 'teléfono', 'tema', 'temor', 'templo', 'tenaz', 'tender', 'tener', 'tenis', 'tenso', 'teoría', 'terapia', 'terco', 'término', 'ternura', 'terror', 'tesis', 'tesoro', 'testigo', 'tetera', 'texto', 'tez', 'tibio', 'tiburón', 'tiempo', 'tienda', 'tierra', 'tieso', 'tigre', 'tijera', 'tilde', 'timbre', 'tímido', 'timo', 'tinta', 'tío', 'típico', 'tipo', 'tira', 'tirón', 'titán', 'títere', 'título', 'tiza', 'toalla', 'tobillo', 'tocar', 'tocino', 'todo', 'toga', 'toldo', 'tomar', 'tono', 'tonto', 'topar', 'tope', 'toque', 'tórax', 'torero', 'tormenta', 'torneo', 'toro', 'torpedo', 'torre', 'torso', 'tortuga', 'tos', 'tosco', 'toser', 'tóxico', 'trabajo', 'tractor', 'traer', 'tráfico', 'trago', 'traje', 'tramo', 'trance', 'trato', 'trauma', 'trazar', 'trébol', 'tregua', 'treinta', 'tren', 'trepar', 'tres', 'tribu', 'trigo', 'tripa', 'triste', 'triunfo', 'trofeo', 'trompa', 'tronco', 'tropa', 'trote', 'trozo', 'truco', 'trueno', 'trufa', 'tubería', 'tubo', 'tuerto', 'tumba', 'tumor', 'túnel', 'túnica', 'turbina', 'turismo', 'turno', 'tutor', 'ubicar', 'úlcera', 'umbral', 'unidad', 'unir', 'universo', 'uno', 'untar', 'uña', 'urbano', 'urbe', 'urgente', 'urna', 'usar', 'usuario', 'útil', 'utopía', 'uva', 'vaca', 'vacío', 'vacuna', 'vagar', 'vago', 'vaina', 'vajilla', 'vale', 'válido', 'valle', 'valor', 'válvula', 'vampiro', 'vara', 'variar', 'varón', 'vaso', 'vecino', 'vector', 'vehículo', 'veinte', 'vejez', 'vela', 'velero', 'veloz', 'vena', 'vencer', 'venda', 'veneno', 'vengar', 'venir', 'venta', 'venus', 'ver', 'verano', 'verbo', 'verde', 'vereda', 'verja', 'verso', 'verter', 'vía', 'viaje', 'vibrar', 'vicio', 'víctima', 'vida', 'vídeo', 'vidrio', 'viejo', 'viernes', 'vigor', 'vil', 'villa', 'vinagre', 'vino', 'viñedo', 'violín', 'viral', 'virgo', 'virtud', 'visor', 'víspera', 'vista', 'vitamina', 'viudo', 'vivaz', 'vivero', 'vivir', 'vivo', 'volcán', 'volumen', 'volver', 'voraz', 'votar', 'voto', 'voz', 'vuelo', 'vulgar', 'yacer', 'yate', 'yegua', 'yema', 'yerno', 'yeso', 'yodo', 'yoga', 'yogur', 'zafiro', 'zanja', 'zapato', 'zarza', 'zona', 'zorro', 'zumo', 'zurdo'];

	module.exports = spanish;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var bitcore = __webpack_require__(24);
	bitcore.P2P = __webpack_require__(202);

	module.exports = bitcore.P2P;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @namespace P2P
	 */
	module.exports = {
	  Messages: __webpack_require__(117),
	  Peer: __webpack_require__(118),
	  Pool: __webpack_require__(203),
	  BloomFilter: __webpack_require__(116)
	};


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var dns = __webpack_require__(266);
	var EventEmitter = __webpack_require__(23).EventEmitter;

	var bitcore = __webpack_require__(24);
	var Networks = bitcore.Networks;
	var sha256 = bitcore.crypto.Hash.sha256;
	var Peer = __webpack_require__(118);
	var util = __webpack_require__(17);

	function now() {
	  return Math.floor(new Date().getTime() / 1000);
	}

	/**
	 * A pool is a collection of Peers. A pool will discover peers from DNS seeds, and
	 * collect information about new peers in the network. When a peer disconnects the pool
	 * will connect to others that are available to maintain a max number of
	 * ongoing peer connections. Peer events are relayed to the pool.
	 *
	 * @example
	 * ```javascript
	 *
	 * var pool = new Pool(Networks.livenet);
	 * pool.on('peerinv', function(peer, message) {
	 *   // do something with the inventory announcement
	 * });
	 * pool.connect();
	 * ```
	 *
	 * @param {Network|String} network - The network to connect
	 * @param {Object} [options] - Options object
	 * @param {Boolean} [options.listenAddr=true] - Prevent new peers being added from addr messages
	 * @param {Boolean} [options.dnsSeed=true] - Prevent seeding with DNS discovered known peers
	 * @param {Boolean} [options.relay=true] - Prevent inventory announcements until a filter is loaded
	 * @param {Number} [options.maxSize=Pool.MaxConnectedPeers] - The max number of peers
	 * @returns {Pool}
	 * @constructor
	 */
	function Pool(network, options) {

	  var self = this;

	  options = options || {};
	  this.network = Networks.get(network) || Networks.defaultNetwork;
	  this.keepalive = false;

	  this._connectedPeers = {};
	  this._addrs = [];

	  this.listenAddr = options.listenAddr !== false;
	  this.dnsSeed = options.dnsSeed !== false;
	  this.relay = options.relay !== false;
	  this.maxSize = options.maxSize || Pool.MaxConnectedPeers;

	  if (options.addrs) {
	    for(var i = 0; i < options.addrs.length; i++) {
	      this._addAddr(options.addrs[i]);
	    }
	  }

	  if (this.listenAddr) {
	    this.on('peeraddr', function peerAddrEvent(peer, message) {
	      var addrs = message.addresses;
	      var length = addrs.length;
	      for (var i = 0; i < length; i++) {
	        var addr = addrs[i];
	        // In case of an invalid time, assume "5 days ago"
	        if (addr.time <= 100000000 || addr.time > (now() + 10 * 60)) {
	          addr.time = now() - 5 * 24 * 60 * 60;
	        }
	        this._addAddr(addr);
	      }
	    });
	  }

	  this.on('seed', function seedEvent(ips) {
	    ips.forEach(function(ip) {
	      self._addAddr({
	        ip: {
	          v4: ip
	        }
	      });
	    });
	    if (self.keepalive) {
	      self._fillConnections();
	    }
	  });

	  this.on('peerdisconnect', function peerDisconnectEvent(peer, addr) {
	    self._deprioritizeAddr(addr);
	    self._removeConnectedPeer(addr);
	    if (self.keepalive) {
	      self._fillConnections();
	    }
	  });

	  return this;

	}

	util.inherits(Pool, EventEmitter);

	Pool.MaxConnectedPeers = 8;
	Pool.RetrySeconds = 30;
	Pool.PeerEvents = ['version', 'inv', 'getdata', 'ping', 'pong', 'addr',
	  'getaddr', 'verack', 'reject', 'alert', 'headers', 'block', 'merkleblock',
	  'tx', 'getblocks', 'getheaders', 'error', 'filterload', 'filteradd',
	  'filterclear'
	];


	/**
	 * Will initiatiate connection to peers, if available peers have been added to
	 * the pool, it will connect to those, otherwise will use DNS seeds to find
	 * peers to connect. When a peer disconnects it will add another.
	 */
	Pool.prototype.connect = function connect() {
	  this.keepalive = true;
	  var self = this;
	  if (this.dnsSeed) {
	    self._addAddrsFromSeeds();
	  } else {
	    self._fillConnections();
	  }
	  return this;
	};


	/**
	 * Will disconnect all peers that are connected.
	 */
	Pool.prototype.disconnect = function disconnect() {
	  this.keepalive = false;
	  for (var i in this._connectedPeers) {
	    this._connectedPeers[i].disconnect();
	  }
	  return this;
	};

	/**
	 * @returns {Number} The number of peers currently connected.
	 */
	Pool.prototype.numberConnected = function numberConnected() {
	  return Object.keys(this._connectedPeers).length;
	};

	/**
	 * Will fill the conneted peers to the maximum amount.
	 */
	Pool.prototype._fillConnections = function _fillConnections() {
	  var length = this._addrs.length;
	  for (var i = 0; i < length; i++) {
	    if (this.numberConnected() >= this.maxSize) {
	      break;
	    }
	    var addr = this._addrs[i];
	    if (!addr.retryTime || now() > addr.retryTime) {
	      this._connectPeer(addr);
	    }
	  }
	  return this;
	};

	/**
	 * Will remove a peer from the list of connected peers.
	 * @param {Object} addr - An addr from the list of addrs
	 */
	Pool.prototype._removeConnectedPeer = function _removeConnectedPeer(addr) {
	  if (this._connectedPeers[addr.hash] &&
	      this._connectedPeers[addr.hash].status !== Peer.STATUS.DISCONNECTED) {
	    this._connectedPeers[addr.hash].disconnect();
	  } else {
	    delete this._connectedPeers[addr.hash];
	  }
	  return this;
	};

	/**
	 * Will connect a peer and add to the list of connected peers.
	 * @param {Object} addr - An addr from the list of addrs
	 */
	Pool.prototype._connectPeer = function _connectPeer(addr) {
	  var self = this;

	  function addConnectedPeer(addr) {
	    var port = addr.port || self.network.port;
	    var ip = addr.ip.v4 || addr.ip.v6;
	    var peer = new Peer(ip, port, self.network, self.relay);
	    peer.on('disconnect', function peerDisconnect() {
	      self.emit('peerdisconnect', peer, addr);
	    });
	    peer.on('connect', function peerConnect() {
	      self.emit('peerconnect', peer, addr);
	    });
	    peer.on('ready', function peerReady() {
	      self.emit('peerready', peer, addr);
	    });
	    Pool.PeerEvents.forEach(function addPeerEvents(event) {
	      peer.on(event, function peerEvent(message) {
	        self.emit('peer' + event, peer, message);
	      });
	    });
	    peer.connect();
	    self._connectedPeers[addr.hash] = peer;
	  }

	  if (!this._connectedPeers[addr.hash]) {
	    addConnectedPeer(addr);
	  }

	  return this;
	};

	/**
	 * Will deprioritize an addr in the list of addrs by moving it to the end
	 * of the array, and setting a retryTime
	 * @param {Object} addr - An addr from the list of addrs
	 */
	Pool.prototype._deprioritizeAddr = function _deprioritizeAddr(addr) {
	  for (var i = 0; i < this._addrs.length; i++) {
	    if (this._addrs[i].hash === addr.hash) {
	      var middle = this._addrs[i];
	      middle.retryTime = now() + Pool.RetrySeconds;
	      var beginning = this._addrs.splice(0, i);
	      var end = this._addrs.splice(i + 1, this._addrs.length);
	      var combined = beginning.concat(end);
	      this._addrs = combined.concat([middle]);
	    }
	  }
	  return this;
	};

	/**
	 * Will add an addr to the beginning of the addrs array
	 * @param {Object}
	 */
	Pool.prototype._addAddr = function _addAddr(addr) {

	  // make a unique key
	  addr.hash = sha256(new Buffer(addr.ip.v6 + addr.ip.v4 + addr.port)).toString('hex');

	  var length = this._addrs.length;
	  var exists = false;
	  for (var i = 0; i < length; i++) {
	    if (this._addrs[i].hash === addr.hash) {
	      exists = true;
	    }
	  }
	  if (!exists) {
	    this._addrs.unshift(addr);
	  }
	  return this;
	};

	/**
	 * Will add addrs to the list of addrs from a DNS seed
	 * @param {String} seed - A domain name to resolve known peers
	 * @param {Function} done
	 */
	Pool.prototype._addAddrsFromSeed = function _addAddrsFromSeed(seed) {
	  var self = this;
	  dns.resolve(seed, function(err, ips) {
	    if (err) {
	      self.emit('seederror', err);
	      return;
	    }
	    if (!ips || !ips.length) {
	      self.emit('seederror', new Error('No IPs found from seed lookup.'));
	      return;
	    }
	    // announce to pool
	    self.emit('seed', ips);
	  });
	  return this;
	};

	/**
	 * Will add addrs to the list of addrs from network DNS seeds
	 * @param {Function} done
	 */
	Pool.prototype._addAddrsFromSeeds = function _addAddrsFromSeeds() {
	  var self = this;
	  var seeds = this.network.dnsSeeds;
	  seeds.forEach(function(seed) {
	    self._addAddrsFromSeed(seed);
	  });
	  return this;
	};

	/**
	 * @returns {String} A string formatted for the console
	 */
	Pool.prototype.inspect = function inspect() {
	  return '<Pool network: ' +
	    this.network + ', connected: ' +
	    this.numberConnected() + ', available: ' +
	    this._addrs.length + '>';
	};

	module.exports = Pool;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {function BufferPut () {
	  this.words = [];
	  this.len = 0;
	};
	module.exports = BufferPut;

	BufferPut.prototype.put = function(buf) {
	  this.words.push({buffer: buf});
	  this.len += buf.length;
	  return this;
	};

	BufferPut.prototype.word8 = function(x) {
	  this.words.push({bytes: 1, value: x});
	  this.len += 1;
	  return this;
	};

	BufferPut.prototype.floatle = function(x) {
	  this.words.push({bytes: 'float', endian: 'little', value: x});
	  this.len += 4;
	  return this;
	};

	BufferPut.prototype.varint = function(i) {
	  if(i < 0xFD) {
	    this.word8(i);
	  } else if(i <= 1<<16) {
	    this.word8(0xFD);
	    this.word16le(i);
	  } else if(i <= 1<<32) {
	    this.word8(0xFE);
	    this.word32le(i);
	  } else {
	    this.word8(0xFF);
	    this.word64le(i);
	  }
	};

	[8, 16, 24, 32, 64].forEach(function(bits) {
	  BufferPut.prototype['word'+bits+'be'] = function(x) {
	    this.words.push({endian: 'big', bytes: bits / 8, value: x});
	    this.len += bits / 8;
	    return this;
	  };

	  BufferPut.prototype['word'+bits+'le'] = function(x) {
	    this.words.push({endian: 'little', bytes: bits / 8, value: x});
	    this.len += bits / 8;
	    return this;
	  };
	});

	BufferPut.prototype.pad = function(bytes) {
	  this.words.push({endian: 'big', bytes: bytes, value: 0});
	  this.len += bytes;
	  return this;
	};

	BufferPut.prototype.length = function() {
	  return this.len;
	};

	BufferPut.prototype.buffer = function () {
	  var buf = new Buffer(this.len);
	  var offset = 0;
	  this.words.forEach(function(word) {
	    if(word.buffer) {
	      word.buffer.copy(buf, offset, 0);
	      offset += word.buffer.length;
	    } else if(word.bytes == 'float') {
	      // s * f * 2^e
	      var v = Math.abs(word.value);
	      var s = (word.value >= 0) * 1;
	      var e = Math.ceil(Math.log(v) / Math.LN2);
	      var f = v / (1 << e);

	      // s:1, e:7, f:23
	      // [seeeeeee][efffffff][ffffffff][ffffffff]
	      buf[offset++] = (s << 7) & ~~(e / 2);
	      buf[offset++] = ((e & 1) << 7) & ~~(f / (1 << 16));
	      buf[offset++] = 0;
	      buf[offset++] = 0;
	      offset += 4;
	    } else {
	      var big = word.endian === 'big';
	      var ix = big ? [ (word.bytes - 1) * 8, -8 ] : [ 0, 8 ];
	      for(var i=ix[0]; big ? i >= 0 : i < word.bytes * 8; i += ix[1]) {
	        if(i >= 32) {
	          buf[offset++] = Math.floor(word.value / Math.pow(2, i)) & 0xff;
	        } else {
	          buf[offset++] = (word.value >> i) & 0xff;
	        }
	      }
	    }
	  });
	  return buf;
	};

	BufferPut.prototype.write = function(stream) {
	  stream.write(this.buffer());
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/**
	 * @author Matthew Caruana Galizia <m@m.cg>
	 * @license MIT
	 * @copyright Copyright (c) 2013, Matthew Caruana Galizia
	 * @preserve
	 *
	 * Portions of this code are copyright (c) 2011 Valentin Háloiu, redistributed and modified under the following license (MIT).
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */

	'use strict';

	/*jshint node:true*/

	var net = __webpack_require__(132);
	var EventEmitter = __webpack_require__(23).EventEmitter;
	var inherits = __webpack_require__(17).inherits;

	var htons = __webpack_require__(210).htons;
	var ipv6 = __webpack_require__(206).v6;

	module.exports = exports = Socks5ClientSocket;

	exports.createConnection = function(options) {
		var socksSocket, socksHost, socksPort;

		socksHost = options.socksHost || 'localhost';
		socksPort = options.socksPort || 1080;
		socksSocket = new Socks5ClientSocket(socksHost, socksPort);

		return socksSocket.connect(options.port, options.host);
	};

	function Socks5ClientSocket(socksHost, socksPort) {
		var self = this;

		EventEmitter.call(self);

		self.socket = new net.Socket();
		self.socksHost = socksHost;
		self.socksPort = socksPort;

		self.socket.on('error', function(err) {
			self.emit('error', err);
		});

		self.on('error', function(err) {
			if (!self.socket.destroyed) {
				self.socket.destroy();
			}
		});
	}

	inherits(Socks5ClientSocket, EventEmitter);

	Socks5ClientSocket.prototype.setTimeout = function(msecs, callback) {
		return this.socket.setTimeout(msecs, callback);
	};

	Socks5ClientSocket.prototype.setNoDelay = function() {
		return this.socket.setNoDelay();
	};

	Socks5ClientSocket.prototype.setKeepAlive = function(setting, msecs) {
		return this.socket.setKeepAlive(setting, msecs);
	};

	Socks5ClientSocket.prototype.address = function() {
		return this.socket.address();
	};

	Socks5ClientSocket.prototype.pause = function() {
		return this.socket.pause();
	};

	Socks5ClientSocket.prototype.resume = function() {
		return this.socket.resume();
	};

	Socks5ClientSocket.prototype.end = function(data, encoding) {
		return this.socket.end(data, encoding);
	};

	Socks5ClientSocket.prototype.destroy = function(exception) {
		return this.socket.destroy(exception);
	};

	Socks5ClientSocket.prototype.destroySoon = function() {
		var ret = this.socket.destroySoon();

		this.writable = false; // node's http library asserts writable to be false after destroySoon

		return ret;
	};

	Socks5ClientSocket.prototype.setEncoding = function(encoding) {
		return this.socket.setEncoding(encoding);
	};

	Socks5ClientSocket.prototype.write = function(data, arg1, arg2) {
		return this.socket.write(data, arg1, arg2);
	};

	Socks5ClientSocket.prototype.connect = function(port, host) {
		var self = this;

		self.socket.connect(self.socksPort, self.socksHost, function() {
			self.establishSocksConnection(host, port);
		});

		return self;
	};

	Socks5ClientSocket.prototype.handleSocksConnectToHost = function() {
		var self = this;

		self.socket.on('close', function(hadError) {
			self.emit('close', hadError);
		});

		self.socket.on('end', function() {
			self.emit('end');
		});

		self.socket.on('data', function(data) {
			self.emit('data', data);
		});

		self.socket._httpMessage = self._httpMessage;
		self.socket.parser = self.parser;
		self.socket.ondata = self.ondata;
		self.writable = true;
		self.readable = true;
		self.emit('connect');
	};

	Socks5ClientSocket.prototype.establishSocksConnection = function(host, port) {
		var self = this;

		self.authenticateWithSocks(function() {
			self.connectSocksToHost(host, port, function() {
				self.handleSocksConnectToHost();
			});
		});
	};

	Socks5ClientSocket.prototype.authenticateWithSocks = function(cb) {
		var request, self = this;

		self.socket.ondata = function(d, start, end) {
			var error;

			if (end - start !== 2) {
				error = new Error('SOCKS authentication failed. Unexpected number of bytes received.');
			} else if (d[start] !== 0x05) {
				error = new Error('SOCKS authentication failed. Unexpected SOCKS version number: ' + d[start] + '.');
			} else if (d[start + 1] !== 0x00) {
				error = new Error('SOCKS authentication failed. Unexpected SOCKS authentication method: ' + d[start+1] + '.');
			}

			if (error) {
				self.emit('error', error);
				return;
			}

			if (cb) {
				cb();
			}
		};

		request = new Buffer(3);
		request[0] = 0x05;  // SOCKS version
		request[1] = 0x01;  // number of authentication methods
		request[2] = 0x00;  // no authentication
		self.socket.write(request);
	};

	Socks5ClientSocket.prototype.connectSocksToHost = function(host, port, cb) {
		var buffer, request, self = this;

		this.socket.ondata = function(d, start, end) {
			var i, address, addressLength, error;

			if (d[start] !== 0x05) {
				error = new Error('SOCKS connection failed. Unexpected SOCKS version number: ' + d[start] + '.');
			} else if (d[start + 1] !== 0x00) {
				error = new Error('SOCKS connection failed. ' + getErrorMessage(d[start + 1]) + '.');
			} else if (d[start + 2] !== 0x00) {
				error = new Error('SOCKS connection failed. The reserved byte must be 0x00.');
			}

			if (error) {
				self.emit('error', error);
				return;
			}

			address = '';
			addressLength = 0;

			switch (d[start + 3]) {
				case 1:
					address = d[start + 4] + '.' + d[start + 5] + '.' + d[start + 6] + '.' + d[start + 7];
					addressLength = 4;
					break;
				case 3:
					addressLength = d[start + 4] + 1;
					for (i = start + 5; i < start + addressLength; i++) {
						address += String.fromCharCode(d[i]);
					}
					break;
				case 4:
					addressLength = 16;
					break;
				default:
					self.emit('error', new Error('SOCKS connection failed. Unknown addres type: ' + d[start + 3] + '.'));
					return;
			}

			if (cb) {
				cb();
			}
		};

		buffer = [];
		buffer.push(0x05); // SOCKS version
		buffer.push(0x01); // Command code: establish a TCP/IP stream connection
		buffer.push(0x00); // Reserved - myst be 0x00

		switch (net.isIP(host)) {
			case 0:
				buffer.push(0x03);
				parseDomainName(host, buffer);
				break;
			case 4:
				buffer.push(0x01);
				parseIPv4(host, buffer);
				break;
			case 6:
				buffer.push(0x04);
				if (parseIPv6(host, buffer) === false) {
					self.emit('error', new Error('IPv6 host parsing failed. Invalid address.'));
					return;
				}
				break;
		}

		parsePort(port, buffer);

		request = new Buffer(buffer);
		this.socket.write(request);
	};

	function parseIPv4(host, buffer) {
		var i, ip, groups = host.split('.');

		for (i = 0; i < groups.length; i++) {
			ip = parseInt(groups[i], 10);
			buffer.push(ip);
		}
	}

	function parseIPv6(host, buffer) {
		var i, b1, b2, part1, part2, address, groups;

		address = new ipv6.Address(host).canonicalForm();
		if (!address) {
			return false;
		}

		groups = address.split(':');

		for (i = 0; i < groups.length; i++) {
			part1 = groups[i].substr(0,2);
			part2 = groups[i].substr(2,2);

			b1 = parseInt(part1, 16);
			b2 = parseInt(part2, 16);

			buffer.push(b1);
			buffer.push(b2);
		}

		return true;
	}

	function parseDomainName(host, buffer) {
		var i, c;

		buffer.push(host.length);
		for (i = 0; i < host.length; i++) {
			c = host.charCodeAt(i);
			buffer.push(c);
		}
	}

	function parsePort(port, buffer) {
		htons(buffer, buffer.length, port);
	}

	function getErrorMessage(code) {
		switch (code) {
			case 1:
				return 'General SOCKS server failure';
			case 2:
				return 'Connection not allowed by ruleset';
			case 3:
				return 'Network unreachable';
			case 4:
				return 'Host unreachable';
			case 5:
				return 'Connection refused';
			case 6:
				return 'TTL expired';
			case 7:
				return 'Command not supported';
			case 8:
				return 'Address type not supported';
			default:
				return 'Unknown status code ' + code;
		}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(207);

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	if (true) {
	  var sprintf = __webpack_require__(209).sprintf;
	  var BigInteger = __webpack_require__(208).BigInteger;
	}

	var v4 = this.v4 = {};
	var v6 = this.v6 = {};

	v4.GROUPS = 4;
	v6.GROUPS = 8;

	v4.BITS = 32;
	v6.BITS = 128;

	v6.SCOPES = {
	  0: 'Reserved',
	  1: 'Interface local',
	  2: 'Link local',
	  4: 'Admin local',
	  5: 'Site local',
	  8: 'Organization local',
	  15: 'Global',
	  16: 'Reserved'
	};

	v4.RE_ADDRESS = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
	v4.RE_SUBNET_STRING = /\/\d{1,2}$/;

	v6.RE_BAD_CHARACTERS = /([^0-9a-f:\/%])/ig;
	v6.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/ig;

	v6.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
	v6.RE_ZONE_STRING = /%.*$/;

	v6.RE_URL = new RegExp(/([0-9a-f:]+)/);
	v6.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);

	// Convenience functions
	function map(array, fn) {
	  var results = [];
	  var i;

	  for (i = 0; i < array.length; i++) {
	    results.push(fn(array[i], i));
	  }

	  return results;
	}

	function repeatString(s, n) {
	  var result = '';
	  var i;

	  for (i = 0; i < n; i++) {
	    result += s;
	  }

	  return result;
	}

	function addCommas(number) {
	  var r = /(\d+)(\d{3})/;

	  while (r.test(number)) {
	    number = number.replace(r, '$1,$2');
	  }

	  return number;
	}

	function spanLeadingZeroesSimple(group) {
	  return group.replace(/^(0+)/, '<span class="zero">$1</span>');
	}

	function spanLeadingZeroes4(n) {
	  n = n.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2');
	  n = n.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2');

	  return n;
	}

	function simpleRegularExpression(addressArray) {
	  var output = [];
	  var i;

	  for (i = 0; i < addressArray.length; i++) {
	    var segment = addressArray[i];

	    if (segment.length < 4) {
	      output.push(sprintf('0{0,%d}%s', 4 - segment.length, segment));
	    } else {
	      output.push(segment);
	    }
	  }

	  return output.join(':');
	}

	function zeroPad(s, n) {
	  return String(repeatString(0, n) + s).slice(n * -1);
	}

	function isInSubnet(address) {
	  // XXX: This is a hunch
	  if (this.subnetMask < address.subnetMask) {
	    return false;
	  }

	  if (this.mask(address.subnetMask) === address.mask()) {
	    return true;
	  }

	  return false;
	}

	/*
	 * Instantiates an IPv4 address
	 */
	v4.Address = function (address) {
	  this.valid = false;
	  this.address = address;
	  this.groups = v4.GROUPS;

	  this.v4 = true;

	  this.subnet = '/32';
	  this.subnetMask = 32;

	  var subnet = v4.RE_SUBNET_STRING.exec(address);

	  if (subnet) {
	    this.parsedSubnet = subnet[0].replace('/', '');
	    this.subnetMask = parseInt(this.parsedSubnet, 10);
	    this.subnet = '/' + this.subnetMask;

	    if (this.subnetMask < 0 || this.subnetMask > v4.BITS) {
	      this.valid = false;
	      this.error = "Invalid subnet mask.";

	      return;
	    }

	    address = address.replace(v4.RE_SUBNET_STRING, '');
	  }

	  this.addressMinusSuffix = address;

	  this.parsedAddress = this.parse(address);
	};

	/*
	 * Parses a v4 address
	 */
	v4.Address.prototype.parse = function (address) {
	  var groups = address.split('.');

	  if (address.match(v4.RE_ADDRESS)) {
	    this.valid = true;
	  } else {
	    this.error = 'Invalid IPv4 address.';
	  }

	  return groups;
	};

	/*
	 * Returns true if the address is valid
	 */
	v4.Address.prototype.isValid = function () {
	  return this.valid;
	};

	/*
	 * Returns the correct form of an address
	 */
	v4.Address.prototype.correctForm = function () {
	  return this.parsedAddress.map(function (part) {
	    return parseInt(part, 10);
	  }).join('.');
	};

	/*
	 * Returns true if the address is correct, false otherwise
	 */
	v4.Address.prototype.isCorrect = function () {
	  return this.addressMinusSuffix === this.correctForm() &&
	    (this.subnetMask === 32 ||
	      this.parsedSubnet === String(this.subnet.replace('/')));
	};

	/*
	 * Converts a hex string to an IPv4 address object
	 */
	v4.Address.fromHex = function (hex) {
	  var padded = zeroPad(hex.replace(/:/g, ''), 8);
	  var groups = [];
	  var i;

	  for (i = 0; i < 8; i += 2) {
	    var h = padded.slice(i, i + 2);

	    groups.push(parseInt(h, 16));
	  }

	  return new v4.Address(groups.join('.'));
	};

	/*
	 * Converts an integer into a IPv4 address object
	 */
	v4.Address.fromInteger = function (integer) {
	  return v4.Address.fromHex(integer.toString(16));
	};

	/*
	 * Converts an IPv4 address object to a hex string
	 */
	v4.Address.prototype.toHex = function () {
	  return this.parsedAddress.map(function (part) {
	    return sprintf('%02x', parseInt(part, 10));
	  }).join(':');
	};

	/*
	 * Converts an IPv4 address object to an array of bytes
	 */
	v4.Address.prototype.toArray = function () {
	  return this.parsedAddress.map(function (part) {
	    return parseInt(part, 10);
	  });
	};

	/*
	 * Converts an IPv4 address object to an IPv6 address group
	 */
	v4.Address.prototype.toV6Group = function () {
	  var output = [];
	  var i;

	  for (i = 0; i < v4.GROUPS; i += 2) {
	    var hex = sprintf('%02x%02x',
	      parseInt(this.parsedAddress[i], 10),
	      parseInt(this.parsedAddress[i + 1], 10));

	    output.push(sprintf('%x', parseInt(hex, 16)));
	  }

	  return output.join(':');
	};

	/*
	 * Returns the address as a BigInteger
	 */
	v4.Address.prototype.bigInteger = function () {
	  if (!this.valid) {
	    return;
	  }

	  return new BigInteger(map(this.parsedAddress, function (n) {
	    return sprintf("%02x", parseInt(n, 10));
	  }).join(''), 16);
	};

	/*
	 * The first address in the range given by this address' subnet.
	 * Often referred to as the Network Address.
	 */
	v4.Address.prototype.startAddress = function () {
	  var startAddress = new BigInteger(this.mask() + repeatString(0,
	    v4.BITS - this.subnetMask), 2);

	  return v4.Address.fromBigInteger(startAddress);
	};

	/*
	 * The last address in the range given by this address' subnet
	 * Often referred to as the Broadcast
	 */
	v4.Address.prototype.endAddress = function () {
	  var endAddress = new BigInteger(this.mask() + repeatString(1,
	    v4.BITS - this.subnetMask), 2);

	  return v4.Address.fromBigInteger(endAddress);
	};

	/*
	 * Converts a BigInteger to a v4 address object
	 */
	v4.Address.fromBigInteger = function (bigInteger) {
	  return v4.Address.fromInteger(parseInt(bigInteger.toString(), 10));
	};

	/*
	 * Returns the first n bits of the address, defaulting to the
	 * subnet mask
	 */
	v4.Address.prototype.mask = function (opt_mask) {
	  if (opt_mask === undefined) {
	    opt_mask = this.subnetMask;
	  }

	  return this.getBitsBase2(0, opt_mask);
	};

	/*
	 * Returns the bits in the given range as a base-2 string
	 */
	v4.Address.prototype.getBitsBase2 = function (start, end) {
	  return this.binaryZeroPad().slice(start, end);
	};

	/*
	 * Returns true if the given address is in the subnet of the current address
	 */
	v4.Address.prototype.isInSubnet = isInSubnet;

	/*
	 * Returns a zero-padded base-2 string representation of the address
	 */
	v4.Address.prototype.binaryZeroPad = function () {
	  return zeroPad(this.bigInteger().toString(2), v4.BITS);
	};

	/*
	 * Instantiates an IPv6 address
	 */
	v6.Address = function (address, opt_groups) {
	  if (opt_groups === undefined) {
	    this.groups = v6.GROUPS;
	  } else {
	    this.groups = opt_groups;
	  }

	  this.v4 = false;

	  this.subnet = '/128';
	  this.subnetMask = 128;

	  this.zone = '';

	  this.address = address;

	  var subnet = v6.RE_SUBNET_STRING.exec(address);

	  if (subnet) {
	    this.parsedSubnet = subnet[0].replace('/', '');
	    this.subnetMask = parseInt(this.parsedSubnet, 10);
	    this.subnet = '/' + this.subnetMask;

	    if (isNaN(this.subnetMask) ||
	      this.subnetMask < 0 ||
	      this.subnetMask > v6.BITS) {
	      this.valid = false;
	      this.error = "Invalid subnet mask.";

	      return;
	    }

	    address = address.replace(v6.RE_SUBNET_STRING, '');
	  } else if (/\//.test(address)) {
	    this.valid = false;
	    this.error = "Invalid subnet mask.";

	    return;
	  }

	  var zone = v6.RE_ZONE_STRING.exec(address);

	  if (zone) {
	    this.zone = zone[0];

	    address = address.replace(v6.RE_ZONE_STRING, '');
	  }

	  this.addressMinusSuffix = address;

	  this.parsedAddress = this.parse(this.addressMinusSuffix);
	};

	/*
	 * Converts a BigInteger to a v6 address object
	 */
	v6.Address.fromBigInteger = function (bigInteger) {
	  var hex = zeroPad(bigInteger.toString(16), 32);
	  var groups = [];
	  var i;

	  for (i = 0; i < 8; i++) {
	    groups.push(hex.slice(i * 4, (i + 1) * 4));
	  }

	  return new v6.Address(groups.join(':'));
	};

	/*
	 * Converts a URL (optional port number) to an address object
	 */
	v6.Address.fromURL = function (url) {
	  var host;
	  var port;
	  var result;

	  // If we have brackets parse them and find a port
	  if (url.indexOf('[') !== -1 && url.indexOf(']') !== -1) {
	    result = v6.RE_URL_WITH_PORT.exec(url);

	    if (result === null) {
	      return {
	        error: 'failed to parse address with port',
	        address: null,
	        port: null
	      };
	    }

	    host = result[1];
	    port = result[2];
	  // If there's a URL extract the address
	  } else if (url.indexOf('/') !== -1) {
	    // Remove the protocol prefix
	    url = url.replace(/^[a-z0-9]+:\/\//, '');

	    // Parse the address
	    result = v6.RE_URL.exec(url);

	    if (result === null) {
	      return {
	        error: 'failed to parse address from URL',
	        address: null,
	        port: null
	      };
	    }

	    host = result[1];
	  // Otherwise just assign the URL to the host and let the library parse it
	  } else {
	    host = url;
	  }

	  // If there's a port convert it to an integer
	  if (port) {
	    port = parseInt(port, 10);

	    //squelch out of range ports
	    if (port < 0 || port > 65536) {
	      port = null;
	    }
	  } else {
	    // Standardize `undefined` to `null`
	    port = null;
	  }

	  return {
	    address: new v6.Address(host),
	    port: port
	  };
	};

	/*
	 * A helper function to compact an array
	 */
	v6.Address.compact = function (address, slice) {
	  var s1 = [];
	  var s2 = [];
	  var i;

	  for (i = 0; i < address.length; i++) {
	    if (i < slice[0]) {
	      s1.push(address[i]);
	    } else if (i > slice[1]) {
	      s2.push(address[i]);
	    }
	  }

	  return s1.concat(['compact']).concat(s2);
	};

	/*
	 * Returns true if the address is valid, false otherwise
	 */
	v6.Address.prototype.isValid = function () {
	  return this.valid;
	};

	/*
	 * Returns true if the address is correct, false otherwise
	 */
	v6.Address.prototype.isCorrect = function () {
	  return this.addressMinusSuffix === this.correctForm() &&
	    (this.subnetMask === 128 ||
	      this.parsedSubnet === String(this.subnet.replace('/')));
	};

	/*
	 * Returns true if the address is a link local address, false otherwise
	 */
	v6.Address.prototype.isLinkLocal = function () {
	  // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'
	  if (this.getBitsBase2(0, 64) ===
	    "1111111010000000000000000000000000000000000000000000000000000000") {
	    return true;
	  }

	  return false;
	};

	/*
	 * Returns true if the address is in the canonical form, false otherwise
	 */
	v6.Address.prototype.isCanonical = function () {
	  return this.addressMinusSuffix === this.canonicalForm();
	};

	/*
	 * Returns true if the address is a multicast address, false otherwise
	 */
	v6.Address.prototype.isMulticast = function () {
	  return this.getType() === 'Multicast';
	};

	/*
	 * Returns true if the address is a v4-in-v6 address, false otherwise
	 */
	v6.Address.prototype.is4 = function () {
	  return this.v4;
	};

	/*
	 * Returns true if the address is a Teredo address, false otherwise
	 */
	v6.Address.prototype.isTeredo = function () {
	  if (this.isInSubnet(new v6.Address('2001::/32'))) {
	    return true;
	  }

	  return false;
	};

	/*
	 * Returns true if the address is a 6to4 address, false otherwise
	 */
	v6.Address.prototype.is6to4 = function () {
	  if (this.isInSubnet(new v6.Address('2002::/16'))) {
	    return true;
	  }

	  return false;
	};

	/*
	 * Returns true if the address is a loopback address, false otherwise
	 */
	v6.Address.prototype.isLoopback = function () {
	  return this.getType() === 'Loopback';
	};

	/*
	 * Returns the Microsoft UNC transcription of the address
	 */
	v6.Address.prototype.microsoftTranscription = function () {
	  return sprintf('%s.ipv6-literal.net',
	    this.correctForm().replace(/:/g, '-'));
	};

	/*
	 * Returns the address in link form with a default port of 80
	 */
	v6.Address.prototype.href = function (opt_port) {
	  if (opt_port === undefined) {
	    opt_port = '';
	  } else {
	    opt_port = sprintf(':%s', opt_port);
	  }

	  return sprintf('http://[%s]%s/', this.correctForm(), opt_port);
	};

	/*
	 * Returns the first n bits of the address, defaulting to the
	 * subnet mask
	 */
	v6.Address.prototype.mask = function (opt_mask) {
	  if (opt_mask === undefined) {
	    opt_mask = this.subnetMask;
	  }

	  return this.getBitsBase2(0, opt_mask);
	};

	/*
	 * Returns a link suitable for conveying the address via a URL hash
	 */
	v6.Address.prototype.link = function (options) {
	  if (!options) {
	    options = {};
	  }

	  if (options.className === undefined) {
	    options.className = '';
	  }

	  if (options.prefix === undefined) {
	    options.prefix = '/#address=';
	  }

	  if (options.v4 === undefined) {
	    options.v4 = false;
	  }

	  var formFunction = this.correctForm;

	  if (options.v4) {
	    formFunction = this.v4inv6;
	  }

	  if (options.className) {
	    return sprintf('<a href="%1$s%2$s" class="%3$s">%2$s</a>',
	      options.prefix, formFunction.call(this), options.className);
	  }

	  return sprintf('<a href="%1$s%2$s">%2$s</a>', options.prefix,
	    formFunction.call(this));
	};

	/*
	 * Returns the number of possible subnets of a given size in the address
	 */
	v6.Address.prototype.possibleAddresses = function (opt_subnetSize) {
	  if (opt_subnetSize === undefined) {
	    opt_subnetSize = 0;
	  }

	  return addCommas(new BigInteger('2', 10).pow((v6.BITS - this.subnetMask) -
	    (v6.BITS - opt_subnetSize)).toString(10));
	};

	/*
	 * Returns true if the given address is in the subnet of the current address
	 */
	v6.Address.prototype.isInSubnet = isInSubnet;

	/*
	 * Create an IPv6-mapped address given an IPv4 address
	 */
	v6.Address.fromAddress4 = function (address4) {
	  return new v6.Address('::ffff:' + address4);
	};

	/*
	 * The first address in the range given by this address' subnet
	 */
	v6.Address.prototype.startAddress = function () {
	  var startAddress = new BigInteger(this.mask() + repeatString(0,
	    v6.BITS - this.subnetMask), 2);

	  return v6.Address.fromBigInteger(startAddress);
	};

	/*
	 * The last address in the range given by this address' subnet
	 */
	v6.Address.prototype.endAddress = function () {
	  var endAddress = new BigInteger(this.mask() + repeatString(1,
	    v6.BITS - this.subnetMask), 2);

	  return v6.Address.fromBigInteger(endAddress);
	};

	/*
	 * Returns the scope of the address
	 */
	v6.Address.prototype.getScope = function () {
	  var scope = v6.SCOPES[this.getBits(12, 16)];

	  if (this.getType() === "Global unicast") {
	    if (scope !== "Link local") {
	      scope = "Global";
	    }
	  }

	  return scope;
	};

	/*
	 * Returns the type of the address
	 */
	v6.Address.prototype.getType = function () {
	  // TODO: Refactor this
	  // TODO: Add ff0x::fb, etc. for multicast DNS
	  var TYPES = {
	    'ff01::1/128': 'Multicast (All nodes on this interface)',
	    'ff01::2/128': 'Multicast (All routers on this interface)',
	    'ff02::1/128': 'Multicast (All nodes on this link)',
	    'ff02::2/128': 'Multicast (All routers on this link)',
	    'ff05::2/128': 'Multicast (All routers in this site)',
	    'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',
	    'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',
	    'ff02::9/128': 'Multicast (RIP routers)',
	    'ff02::a/128': 'Multicast (EIGRP routers)',
	    'ff02::d/128': 'Multicast (PIM routers)',
	    'ff02::16/128': 'Multicast (MLDv2 reports)',
	    'ff01::fb/128': 'Multicast (mDNSv6)',
	    'ff02::fb/128': 'Multicast (mDNSv6)',
	    'ff05::fb/128': 'Multicast (mDNSv6)',
	    'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',
	    'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',
	    'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',
	    'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',
	    '::/128': 'Unspecified',
	    '::1/128': 'Loopback',
	    'ff00::/8': 'Multicast',
	    'fe80::/10': 'Link-local unicast'
	  };

	  var type = 'Global unicast';
	  var p;

	  for (p in TYPES) {
	    if (TYPES.hasOwnProperty(p)) {
	      if (this.isInSubnet(new v6.Address(p))) {
	        type = TYPES[p];

	        break;
	      }
	    }
	  }

	  return type;
	};

	/*
	 * Returns the bits in the given range as a BigInteger
	 */
	v6.Address.prototype.getBits = function (start, end) {
	  return new BigInteger(this.getBitsBase2(start, end), 2);
	};

	/*
	 * Returns the bits in the given range as a base-2 string
	 */
	v6.Address.prototype.getBitsBase2 = function (start, end) {
	  return this.binaryZeroPad().slice(start, end);
	};

	/*
	 * Returns the bits in the given range as a base-16 string
	 */
	v6.Address.prototype.getBitsBase16 = function (start, end) {
	  var length = end - start;

	  if (length % 4 !== 0) {
	    return;
	  }

	  return zeroPad(this.getBits(start, end).toString(16), length / 4);
	};

	/*
	 * Returns the bits that are set past the subnet mask length
	 */
	v6.Address.prototype.getBitsPastSubnet = function () {
	  return this.getBitsBase2(this.subnetMask, v6.BITS);
	};

	/*
	 * Returns the string with each character contained in a <span>
	 */
	v6.Address.spanAll = function (s, opt_offset) {
	  if (opt_offset === undefined) {
	    opt_offset = 0;
	  }

	  var letters = s.split('');

	  return map(letters, function (n, i) {
	    return sprintf('<span class="digit value-%s position-%d">%s</span>', n,
	      i + opt_offset,
	      v6.Address.spanAllZeroes(n)); // XXX Use #base-2 .value-0 instead?
	  }).join('');
	};

	/*
	 * Returns the string with all zeroes contained in a <span>
	 */
	v6.Address.spanAllZeroes = function (s) {
	  return s.replace(/(0+)/g, '<span class="zero">$1</span>');
	};

	/*
	 * Returns the string with leading zeroes contained in a <span>
	 */
	v6.Address.spanLeadingZeroes = function (address) {
	  var groups = address.split(':');

	  groups = map(groups, function (g) {
	    return spanLeadingZeroesSimple(g);
	  });

	  return groups.join(':');
	};

	/*
	 * Groups an address
	 */
	v6.Address.simpleGroup = function (addressString, offset) {
	  var groups = addressString.split(':');

	  if (!offset) {
	    offset = 0;
	  }

	  groups = map(groups, function (g, i) {
	    if (/group-v4/.test(g)) {
	      return g;
	    }

	    return sprintf('<span class="hover-group group-%d">%s</span>',
	      i + offset,
	      spanLeadingZeroesSimple(g));
	  });

	  return groups.join(':');
	};

	/*
	 * Groups an address
	 */
	v6.Address.group = function (addressString) {
	  var address6 = new v6.Address(addressString);
	  var address4 = address6.address.match(v4.RE_ADDRESS);
	  var i;

	  if (address4) {
	    // The IPv4 case
	    var segments = address4[0].split('.');

	    address6.address = address6.address.replace(v4.RE_ADDRESS,
	      sprintf('<span class="hover-group group-v4 group-6">%s</span>' +
	        '.' +
	        '<span class="hover-group group-v4 group-7">%s</span>',
	        segments.slice(0, 2).join('.'),
	        segments.slice(2, 4).join('.')));
	  }

	  if (address6.elidedGroups === 0) {
	    // The simple case
	    return v6.Address.simpleGroup(address6.address);
	  }

	  // The elided case
	  var output = [];

	  var halves = address6.address.split('::');

	  if (halves[0].length) {
	    output.push(v6.Address.simpleGroup(halves[0]));
	  } else {
	    output.push('');
	  }

	  var classes = ['hover-group'];

	  for (i = address6.elisionBegin; i < address6.elisionBegin +
	    address6.elidedGroups; i++) {
	    classes.push(sprintf('group-%d', i));
	  }

	  output.push(sprintf('<span class="%s"></span>', classes.join(' ')));

	  if (halves[1].length) {
	    output.push(v6.Address.simpleGroup(halves[1], address6.elisionEnd));
	  } else {
	    output.push('');
	  }

	  return output.join(':');
	};

	/*
	 * Returns the reversed ip6.arpa form of the address
	 */
	v6.Address.prototype.reverseForm = function () {
	  var characters = Math.floor(this.subnetMask / 4);

	  var reversed = this.canonicalForm()
	    .replace(/:/g, '')
	    .split('')
	    .slice(0, characters)
	    .reverse()
	    .join('.');

	  if (characters > 0) {
	    return sprintf("%s.ip6.arpa.", reversed);
	  }

	  return 'ip6.arpa.';
	};

	/*
	 * Returns the correct form of the address
	 */
	v6.Address.prototype.correctForm = function () {
	  if (!this.parsedAddress) {
	    return;
	  }

	  var i;
	  var groups = [];

	  var zeroCounter = 0;
	  var zeroes = [];

	  for (i = 0; i < this.parsedAddress.length; i++) {
	    var value = parseInt(this.parsedAddress[i], 16);

	    if (value === 0) {
	      zeroCounter++;
	    }

	    if (value !== 0 && zeroCounter > 0) {
	      if (zeroCounter > 1) {
	        zeroes.push([i - zeroCounter, i - 1]);
	      }

	      zeroCounter = 0;
	    }
	  }

	  // Do we end with a string of zeroes?
	  if (zeroCounter > 1) {
	    zeroes.push([this.parsedAddress.length - zeroCounter,
	      this.parsedAddress.length - 1]);
	  }

	  var zeroLengths = map(zeroes, function (n) {
	    return (n[1] - n[0]) + 1;
	  });

	  if (zeroes.length > 0) {
	    var max = Math.max.apply(Math, zeroLengths);
	    var index = zeroLengths.indexOf(max);

	    groups = v6.Address.compact(this.parsedAddress, zeroes[index]);
	  } else {
	    groups = this.parsedAddress;
	  }

	  for (i = 0; i < groups.length; i++) {
	    if (groups[i] !== 'compact') {
	      groups[i] = parseInt(groups[i], 16).toString(16);
	    }
	  }

	  var correct = groups.join(':');

	  correct = correct.replace(/^compact$/, '::');
	  correct = correct.replace(/^compact|compact$/, ':');
	  correct = correct.replace(/compact/, '');

	  return correct;
	};

	/*
	 * Returns a zero-padded base-2 string representation of the address
	 */
	v6.Address.prototype.binaryZeroPad = function () {
	  return zeroPad(this.bigInteger().toString(2), v6.BITS);
	};

	// TODO: Improve the semantics of this helper function
	v6.Address.prototype.parse4in6 = function (address) {
	  var groups = address.split(':');
	  var lastGroup = groups.slice(-1)[0];

	  var address4 = lastGroup.match(v4.RE_ADDRESS);

	  if (address4) {
	    var temp4 = new v4.Address(address4[0]);

	    for (var i = 0; i < temp4.groups; i++) {
	      if (/^0[0-9]+/.test(temp4.parsedAddress[i])) {
	        this.valid = false;
	        this.error = 'IPv4 addresses can not have leading zeroes.';

	        this.parseError = address.replace(v4.RE_ADDRESS,
	          map(temp4.parsedAddress, spanLeadingZeroes4).join('.'));

	        return;
	      }
	    }

	    this.v4 = true;

	    groups[groups.length - 1] = temp4.toV6Group();

	    address = groups.join(':');
	  }

	  return address;
	};

	// TODO: Make private?
	v6.Address.prototype.parse = function (address) {
	  address = this.parse4in6(address);

	  if (this.error) {
	    return;
	  }

	  var badCharacters = address.match(v6.RE_BAD_CHARACTERS);

	  if (badCharacters) {
	    this.valid = false;
	    this.error = sprintf("Bad character%s detected in address: %s",
	      badCharacters.length > 1 ? 's' : '', badCharacters.join(''));

	    this.parseError = address.replace(v6.RE_BAD_CHARACTERS,
	      '<span class="parse-error">$1</span>');

	    return;
	  }

	  var badAddress = address.match(v6.RE_BAD_ADDRESS);

	  if (badAddress) {
	    this.valid = false;
	    this.error = sprintf("Address failed regex: %s", badAddress.join(''));

	    this.parseError = address.replace(v6.RE_BAD_ADDRESS,
	      '<span class="parse-error">$1</span>');

	    return;
	  }

	  var groups = [];

	  var halves = address.split('::');

	  if (halves.length === 2) {
	    var first = halves[0].split(':');
	    var last = halves[1].split(':');

	    if (first.length === 1 &&
	      first[0] === '') {
	      first = [];
	    }

	    if (last.length === 1 &&
	      last[0] === '') {
	      last = [];
	    }

	    var remaining = this.groups - (first.length + last.length);

	    if (!remaining) {
	      this.valid = false;
	      this.error = "Error parsing groups";

	      return;
	    }

	    this.elidedGroups = remaining;

	    this.elisionBegin = first.length;
	    this.elisionEnd = first.length + this.elidedGroups;

	    first.forEach(function (group) {
	      groups.push(group);
	    });

	    for (var i = 0; i < remaining; i++) {
	      groups.push(0);
	    }

	    last.forEach(function (group) {
	      groups.push(group);
	    });
	  } else if (halves.length === 1) {
	    groups = address.split(':');

	    this.elidedGroups = 0;
	  } else {
	    this.valid = false;
	    this.error = "Too many :: groups found";

	    return;
	  }

	  groups = map(groups, function (g) {
	    return sprintf('%x', parseInt(g, 16));
	  });

	  if (groups.length !== this.groups) {
	    this.valid = false;
	    this.error = "Incorrect number of groups found";

	    return;
	  }

	  groups.forEach(function (group, i) {
	    if (groups.length > 4 && !this.v4) {
	      this.valid = false;
	      this.error = sprintf("Group %d is too long", i + 1);

	      return;
	    }
	  });

	  this.valid = true;

	  return groups;
	};

	/*
	 * Generate a regular expression string that can be used to find or validate all
	 * variations of this address.
	 */
	v6.Address.prototype.regularExpressionString = function (opt_subString) {
	  if (opt_subString === undefined) {
	    opt_subString = false;
	  }

	  var i;
	  var output = [];

	  var address6 = new v6.Address(this.correctForm());

	  if (address6.elidedGroups === 0) {
	    // The simple case
	    output = simpleRegularExpression(address6.parsedAddress);
	  } else if (address6.elidedGroups === 8) {
	    output.push('::|');

	    // TODO: Validate this
	    for (i = 0; i < address6.elidedGroups; i++) {
	      var pipe = '|';

	      if (i === address6.elidedGroups - 1) {
	        pipe = '';
	      }

	      output.push(sprintf('(0{1,4}:){%d}:%s', address6.elidedGroups, pipe));
	    }
	  } else {
	    // The elided case

	    // TODO: Allow sloppy elision
	    // TODO: Compute all possible elisions
	    var halves = address6.address.split('::');

	    if (halves[0].length) {
	      output = output.concat(simpleRegularExpression(halves[0].split(':')));
	      output.push(':');
	    }

	    output.push(sprintf('((0{1,4}:){%d}|:)', address6.elidedGroups));

	    if (halves[1].length) {
	      output = output.concat(simpleRegularExpression(halves[1].split(':')));
	    }
	  }

	  if (!opt_subString) {
	    output = [].concat('\\b', output, '\\b');
	  }

	  return output.join('');
	};

	/*
	 * Generate a regular expression that can be used to find or validate all
	 * variations of this address.
	 */
	v6.Address.prototype.regularExpression = function () {
	  return new RegExp(this.regularExpressionString(), 'i');
	};

	/*
	 * Returns the canonical form of the address
	 */
	v6.Address.prototype.canonicalForm = function () {
	  if (!this.valid) {
	    return;
	  }

	  return map(this.parsedAddress, function (n) {
	    return sprintf("%04x", parseInt(n, 16));
	  }).join(':');
	};

	/*
	 * Returns the decimal form of the address
	 */
	v6.Address.prototype.decimal = function () {
	  if (!this.valid) {
	    return;
	  }

	  return map(this.parsedAddress, function (n) {
	    return sprintf("%05d", parseInt(n, 16));
	  }).join(':');
	};

	/*
	 * Returns the address as a BigInteger
	 */
	v6.Address.prototype.bigInteger = function () {
	  if (!this.valid) {
	    return;
	  }

	  return new BigInteger(map(this.parsedAddress, function (n) {
	    return sprintf("%04x", parseInt(n, 16));
	  }).join(''), 16);
	};

	/*
	 * Returns the v4-in-v6 form of the address
	 */
	v6.Address.prototype.v4inv6 = function () {
	  var binary = this.binaryZeroPad().split('');

	  var address4 = v4.Address.fromHex(new BigInteger(binary.slice(96, 128)
	    .join(''), 2).toString(16));
	  var address6 = new v6.Address(this.parsedAddress.slice(0, 6).join(':'), 6);

	  var correct = address6.correctForm();

	  var infix = '';

	  if (!/:$/.test(correct)) {
	    infix = ':';
	  }

	  return address6.correctForm() + infix + address4.address;
	};

	/*
	 * Returns an object containing the Teredo properties of the address
	 */
	v6.Address.prototype.teredo = function () {
	  /*
	  - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).
	  - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that
	  is used.
	  - Bits 64 to 79 can be used to define some flags. Currently only the
	  higher order bit is used; it is set to 1 if the Teredo client is
	  located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista
	  and Windows Server 2008 implementations, more bits are used. In those
	  implementations, the format for these 16 bits is "CRAAAAUG AAAAAAAA",
	  where "C" remains the "Cone" flag. The "R" bit is reserved for future
	  use. The "U" bit is for the Universal/Local flag (set to 0). The "G" bit
	  is Individual/Group flag (set to 0). The A bits are set to a 12-bit
	  randomly generated number chosen by the Teredo client to introduce
	  additional protection for the Teredo node against IPv6-based scanning
	  attacks.
	  - Bits 80 to 95 contains the obfuscated UDP port number. This is the
	  port number that is mapped by the NAT to the Teredo client with all
	  bits inverted.
	  - Bits 96 to 127 contains the obfuscated IPv4 address. This is the
	  public IPv4 address of the NAT with all bits inverted.
	  */

	  var prefix = this.getBitsBase16(0, 32);

	  var udpPort = this.getBits(80, 96).xor(new BigInteger('ffff', 16)).toString();

	  var server4 = v4.Address.fromHex(this.getBitsBase16(32, 64));
	  var client4 = v4.Address.fromHex(this.getBits(96, 128)
	    .xor(new BigInteger('ffffffff', 16)).toString(16));

	  var flags = this.getBits(64, 80);
	  var flagsBase2 = this.getBitsBase2(64, 80);

	  var coneNat = flags.testBit(15);
	  var reserved = flags.testBit(14);
	  var groupIndividual = flags.testBit(8);
	  var universalLocal = flags.testBit(9);
	  var nonce = new BigInteger(flagsBase2.slice(2, 6) +
	    flagsBase2.slice(8, 16), 2).toString(10);

	  return {
	    prefix: sprintf('%s:%s', prefix.slice(0, 4), prefix.slice(4, 8)),
	    server4: server4.address,
	    client4: client4.address,
	    flags: flagsBase2,
	    coneNat: coneNat,
	    microsoft: {
	      reserved: reserved,
	      universalLocal: universalLocal,
	      groupIndividual: groupIndividual,
	      nonce: nonce
	    },
	    udpPort: udpPort
	  };
	};

	/*
	 * Returns an object containing the 6to4 properties of the address
	 */
	v6.Address.prototype.six2four = function () {
	  /*
	  - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).
	  - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.
	  */

	  var prefix = this.getBitsBase16(0, 16);

	  var gateway = v4.Address.fromHex(this.getBitsBase16(16, 48));

	  return {
	    prefix: sprintf('%s', prefix.slice(0, 4)),
	    gateway: gateway.address
	  };
	};


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * copped from https://github.com/joyent/node/blob/master/deps/v8/benchmarks/crypto.js (under same license).
	 * 
	 * Copyright (c) 2003-2005  Tom Wu
	 * All Rights Reserved.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
	 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
	 *
	 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
	 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
	 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
	 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
	 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 *
	 * In addition, the following condition applies:
	 *
	 * All redistributions must retain an intact copy of this copyright notice
	 * and disclaimer.
	 */

	// V8 optimized constants.
	var dbits = 26
	var BI_DB = dbits;
	var BI_DM = ((1<<dbits)-1);
	var BI_DV = (1<<dbits);

	var BI_FP = 52;
	var BI_FV = Math.pow(2,BI_FP);
	var BI_F1 = BI_FP-dbits;
	var BI_F2 = 2*dbits-BI_FP;

	BigInteger = module.exports.BigInteger = function(a,b,c) {
	  this.array = new Array();
	  if(a != null)
	    if("number" == typeof a) this.fromNumber(a,b,c);
	    else if(b == null && "string" != typeof a) this.fromString(a,256);
	    else this.fromString(a,b);
	}

	// return new, unset BigInteger
	function nbi() { return new BigInteger(null); }

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// This is tailored to VMs with 2-bit tagging. It makes sure
	// that all the computations stay within the 29 bits available.
	function am4(i,x,w,j,c,n) {
	  var this_array = this.array;
	  var w_array    = w.array;

	  var xl = x&0x1fff, xh = x>>13;
	  while(--n >= 0) {
	    var l = this_array[i]&0x1fff;
	    var h = this_array[i++]>>13;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x1fff)<<13)+w_array[j]+c;
	    c = (l>>26)+(m>>13)+xh*h;
	    w_array[j++] = l&0x3ffffff;
	  }
	  return c;
	}

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr,vv;
	rr = "0".charCodeAt(0);
	for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	rr = "a".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	rr = "A".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	function int2char(n) { return BI_RM.charAt(n); }
	function intAt(s,i) {
	  var c = BI_RC[s.charCodeAt(i)];
	  return (c==null)?-1:c;
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  var this_array = this.array;
	  var r_array    = r.array;

	  for(var i = this.t-1; i >= 0; --i) r_array[i] = this_array[i];
	  r.t = this.t;
	  r.s = this.s;
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  var this_array = this.array;
	  this.t = 1;
	  this.s = (x<0)?-1:0;
	  if(x > 0) this_array[0] = x;
	  else if(x < -1) this_array[0] = x+DV; // WTH is DV?  BI_DV maybe?
	  else this.t = 0;
	}

	// return bigint initialized to value
	function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	// (protected) set from string and radix
	function bnpFromString(s,b) {
	  var this_array = this.array;
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 256) k = 8; // byte array
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else { this.fromRadix(s,b); return; }
	  this.t = 0;
	  this.s = 0;
	  var i = s.length, mi = false, sh = 0;
	  while(--i >= 0) {
	    var x = (k==8)?s[i]&0xff:intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-") mi = true;
	      continue;
	    }
	    mi = false;
	    if(sh == 0)
	      this_array[this.t++] = x;
	    else if(sh+k > BI_DB) {
	      this_array[this.t-1] |= (x&((1<<(BI_DB-sh))-1))<<sh;
	      this_array[this.t++] = (x>>(BI_DB-sh));
	    }
	    else
	      this_array[this.t-1] |= x<<sh;
	    sh += k;
	    if(sh >= BI_DB) sh -= BI_DB;
	  }
	  if(k == 8 && (s[0]&0x80) != 0) {
	    this.s = -1;
	    if(sh > 0) this_array[this.t-1] |= ((1<<(BI_DB-sh))-1)<<sh;
	  }
	  this.clamp();
	  if(mi) BigInteger.ZERO.subTo(this,this);
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var this_array = this.array;
	  var c = this.s&BI_DM;
	  while(this.t > 0 && this_array[this.t-1] == c) --this.t;
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  var this_array = this.array;
	  if(this.s < 0) return "-"+this.negate().toString(b);
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else return this.toRadix(b);
	  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	  var p = BI_DB-(i*BI_DB)%k;
	  if(i-- > 0) {
	    if(p < BI_DB && (d = this_array[i]>>p) > 0) { m = true; r = int2char(d); }
	    while(i >= 0) {
	      if(p < k) {
	        d = (this_array[i]&((1<<p)-1))<<(k-p);
	        d |= this_array[--i]>>(p+=BI_DB-k);
	      }
	      else {
	        d = (this_array[i]>>(p-=k))&km;
	        if(p <= 0) { p += BI_DB; --i; }
	      }
	      if(d > 0) m = true;
	      if(m) r += int2char(d);
	    }
	  }
	  return m?r:"0";
	}

	// (public) -this
	function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	// (public) |this|
	function bnAbs() { return (this.s<0)?this.negate():this; }

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var this_array = this.array;
	  var a_array = a.array;

	  var r = this.s-a.s;
	  if(r != 0) return r;
	  var i = this.t;
	  r = i-a.t;
	  if(r != 0) return r;
	  while(--i >= 0) if((r=this_array[i]-a_array[i]) != 0) return r;
	  return 0;
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1, t;
	  if((t=x>>>16) != 0) { x = t; r += 16; }
	  if((t=x>>8) != 0) { x = t; r += 8; }
	  if((t=x>>4) != 0) { x = t; r += 4; }
	  if((t=x>>2) != 0) { x = t; r += 2; }
	  if((t=x>>1) != 0) { x = t; r += 1; }
	  return r;
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  var this_array = this.array;
	  if(this.t <= 0) return 0;
	  return BI_DB*(this.t-1)+nbits(this_array[this.t-1]^(this.s&BI_DM));
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r) {
	  var this_array = this.array;
	  var r_array = r.array;
	  var i;
	  for(i = this.t-1; i >= 0; --i) r_array[i+n] = this_array[i];
	  for(i = n-1; i >= 0; --i) r_array[i] = 0;
	  r.t = this.t+n;
	  r.s = this.s;
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r) {
	  var this_array = this.array;
	  var r_array = r.array;
	  for(var i = n; i < this.t; ++i) r_array[i-n] = this_array[i];
	  r.t = Math.max(this.t-n,0);
	  r.s = this.s;
	}

	// (protected) r = this << n
	function bnpLShiftTo(n,r) {
	  var this_array = this.array;
	  var r_array = r.array;
	  var bs = n%BI_DB;
	  var cbs = BI_DB-bs;
	  var bm = (1<<cbs)-1;
	  var ds = Math.floor(n/BI_DB), c = (this.s<<bs)&BI_DM, i;
	  for(i = this.t-1; i >= 0; --i) {
	    r_array[i+ds+1] = (this_array[i]>>cbs)|c;
	    c = (this_array[i]&bm)<<bs;
	  }
	  for(i = ds-1; i >= 0; --i) r_array[i] = 0;
	  r_array[ds] = c;
	  r.t = this.t+ds+1;
	  r.s = this.s;
	  r.clamp();
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n,r) {
	  var this_array = this.array;
	  var r_array = r.array;
	  r.s = this.s;
	  var ds = Math.floor(n/BI_DB);
	  if(ds >= this.t) { r.t = 0; return; }
	  var bs = n%BI_DB;
	  var cbs = BI_DB-bs;
	  var bm = (1<<bs)-1;
	  r_array[0] = this_array[ds]>>bs;
	  for(var i = ds+1; i < this.t; ++i) {
	    r_array[i-ds-1] |= (this_array[i]&bm)<<cbs;
	    r_array[i-ds] = this_array[i]>>bs;
	  }
	  if(bs > 0) r_array[this.t-ds-1] |= (this.s&bm)<<cbs;
	  r.t = this.t-ds;
	  r.clamp();
	}

	// (protected) r = this - a
	function bnpSubTo(a,r) {
	  var this_array = this.array;
	  var r_array = r.array;
	  var a_array = a.array;
	  var i = 0, c = 0, m = Math.min(a.t,this.t);
	  while(i < m) {
	    c += this_array[i]-a_array[i];
	    r_array[i++] = c&BI_DM;
	    c >>= BI_DB;
	  }
	  if(a.t < this.t) {
	    c -= a.s;
	    while(i < this.t) {
	      c += this_array[i];
	      r_array[i++] = c&BI_DM;
	      c >>= BI_DB;
	    }
	    c += this.s;
	  }
	  else {
	    c += this.s;
	    while(i < a.t) {
	      c -= a_array[i];
	      r_array[i++] = c&BI_DM;
	      c >>= BI_DB;
	    }
	    c -= a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c < -1) r_array[i++] = BI_DV+c;
	  else if(c > 0) r_array[i++] = c;
	  r.t = i;
	  r.clamp();
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r) {
	  var this_array = this.array; // Unused local var?
	  var r_array = r.array;
	  var x = this.abs(), y = a.abs();
	  var y_array = y.array;

	  var i = x.t;
	  r.t = i+y.t;
	  while(--i >= 0) r_array[i] = 0;
	  for(i = 0; i < y.t; ++i) r_array[i+x.t] = x.am(0,y_array[i],r,i,0,x.t);
	  r.s = 0;
	  r.clamp();
	  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs();
	  var x_array = x.array;
	  var r_array = r.array;

	  var i = r.t = 2*x.t;
	  while(--i >= 0) r_array[i] = 0;
	  for(i = 0; i < x.t-1; ++i) {
	    var c = x.am(i,x_array[i],r,2*i,0,1);
	    if((r_array[i+x.t]+=x.am(i+1,2*x_array[i],r,2*i+1,c,x.t-i-1)) >= BI_DV) {
	      r_array[i+x.t] -= BI_DV;
	      r_array[i+x.t+1] = 1;
	    }
	  }
	  if(r.t > 0) r_array[r.t-1] += x.am(i,x_array[i],r,2*i,0,1);
	  r.s = 0;
	  r.clamp();
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r) {
	  var pm = m.abs();
	  if(pm.t <= 0) return;
	  var pt = this.abs();
	  if(pt.t < pm.t) {
	    if(q != null) q.fromInt(0);
	    if(r != null) this.copyTo(r);
	    return;
	  }
	  if(r == null) r = nbi();
	  var y = nbi(), ts = this.s, ms = m.s;
	  var pm_array = pm.array;
	  var nsh = BI_DB-nbits(pm_array[pm.t-1]);	// normalize modulus
	  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
	  else { pm.copyTo(y); pt.copyTo(r); }
	  var ys = y.t;

	  var y_array = y.array;
	  var y0 = y_array[ys-1];
	  if(y0 == 0) return;
	  var yt = y0*(1<<BI_F1)+((ys>1)?y_array[ys-2]>>BI_F2:0);
	  var d1 = BI_FV/yt, d2 = (1<<BI_F1)/yt, e = 1<<BI_F2;
	  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	  y.dlShiftTo(j,t);

	  var r_array = r.array;
	  if(r.compareTo(t) >= 0) {
	    r_array[r.t++] = 1;
	    r.subTo(t,r);
	  }
	  BigInteger.ONE.dlShiftTo(ys,t);
	  t.subTo(y,y);	// "negative" y so we can replace sub with am later
	  while(y.t < ys) y_array[y.t++] = 0;
	  while(--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r_array[--i]==y0)?BI_DM:Math.floor(r_array[i]*d1+(r_array[i-1]+e)*d2);
	    if((r_array[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
	      y.dlShiftTo(j,t);
	      r.subTo(t,r);
	      while(r_array[i] < --qd) r.subTo(t,r);
	    }
	  }
	  if(q != null) {
	    r.drShiftTo(ys,q);
	    if(ts != ms) BigInteger.ZERO.subTo(q,q);
	  }
	  r.t = ys;
	  r.clamp();
	  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
	  if(ts < 0) BigInteger.ZERO.subTo(r,r);
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = nbi();
	  this.abs().divRemTo(a,null,r);
	  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	  return r;
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) { this.m = m; }
	function cConvert(x) {
	  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	  else return x;
	}
	function cRevert(x) { return x; }
	function cReduce(x) { x.divRemTo(this.m,null,x); }
	function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	Classic.prototype.convert = cConvert;
	Classic.prototype.revert = cRevert;
	Classic.prototype.reduce = cReduce;
	Classic.prototype.mulTo = cMulTo;
	Classic.prototype.sqrTo = cSqrTo;

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  var this_array = this.array;
	  if(this.t < 1) return 0;
	  var x = this_array[0];
	  if((x&1) == 0) return 0;
	  var y = x&3;		// y == 1/x mod 2^2
	  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
	  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
	  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly;
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y*(2-x*y%BI_DV))%BI_DV;		// y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y>0)?BI_DV-y:-y;
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m;
	  this.mp = m.invDigit();
	  this.mpl = this.mp&0x7fff;
	  this.mph = this.mp>>15;
	  this.um = (1<<(BI_DB-15))-1;
	  this.mt2 = 2*m.t;
	}

	// xR mod m
	function montConvert(x) {
	  var r = nbi();
	  x.abs().dlShiftTo(this.m.t,r);
	  r.divRemTo(this.m,null,r);
	  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	  return r;
	}

	// x/R mod m
	function montRevert(x) {
	  var r = nbi();
	  x.copyTo(r);
	  this.reduce(r);
	  return r;
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  var x_array = x.array;
	  while(x.t <= this.mt2)	// pad x so am has enough room later
	    x_array[x.t++] = 0;
	  for(var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x[i]*mp mod DV
	    var j = x_array[i]&0x7fff;
	    var u0 = (j*this.mpl+(((j*this.mph+(x_array[i]>>15)*this.mpl)&this.um)<<15))&BI_DM;
	    // use am to combine the multiply-shift-add into one call
	    j = i+this.m.t;
	    x_array[j] += this.m.am(0,u0,x,i,0,this.m.t);
	    // propagate carry
	    while(x_array[j] >= BI_DV) { x_array[j] -= BI_DV; x_array[++j]++; }
	  }
	  x.clamp();
	  x.drShiftTo(this.m.t,x);
	  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;

	// (protected) true iff this is even
	function bnpIsEven() {
	  var this_array = this.array;
	  return ((this.t>0)?(this_array[0]&1):this.s) == 0;
	}

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z) {
	  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	  g.copyTo(r);
	  while(--i >= 0) {
	    z.sqrTo(r,r2);
	    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	    else { var t = r; r = r2; r2 = t; }
	  }
	  return z.revert(r);
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m) {
	  var z;
	  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	  return this.exp(e,z);
	}

	// protected
	BigInteger.prototype.copyTo = bnpCopyTo;
	BigInteger.prototype.fromInt = bnpFromInt;
	BigInteger.prototype.fromString = bnpFromString;
	BigInteger.prototype.clamp = bnpClamp;
	BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	BigInteger.prototype.lShiftTo = bnpLShiftTo;
	BigInteger.prototype.rShiftTo = bnpRShiftTo;
	BigInteger.prototype.subTo = bnpSubTo;
	BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	BigInteger.prototype.squareTo = bnpSquareTo;
	BigInteger.prototype.divRemTo = bnpDivRemTo;
	BigInteger.prototype.invDigit = bnpInvDigit;
	BigInteger.prototype.isEven = bnpIsEven;
	BigInteger.prototype.exp = bnpExp;

	// public
	BigInteger.prototype.toString = bnToString;
	BigInteger.prototype.negate = bnNegate;
	BigInteger.prototype.abs = bnAbs;
	BigInteger.prototype.compareTo = bnCompareTo;
	BigInteger.prototype.bitLength = bnBitLength;
	BigInteger.prototype.mod = bnMod;
	BigInteger.prototype.modPowInt = bnModPowInt;

	// "constants"
	BigInteger.ZERO = nbv(0);
	BigInteger.ONE = nbv(1);
	// Copyright (c) 2005  Tom Wu
	// All Rights Reserved.
	// See "LICENSE" for details.

	// Extended JavaScript BN functions, required for RSA private ops.

	// (public)
	function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	// (public) return value as integer
	function bnIntValue() {
	  var this_array = this.array;
	  if(this.s < 0) {
	    if(this.t == 1) return this_array[0]-BI_DV;
	    else if(this.t == 0) return -1;
	  }
	  else if(this.t == 1) return this_array[0];
	  else if(this.t == 0) return 0;
	  // assumes 16 < DB < 32
	  return ((this_array[1]&((1<<(32-BI_DB))-1))<<BI_DB)|this_array[0];
	}

	// (public) return value as byte
	function bnByteValue() {
	  var this_array = this.array;
	  return (this.t==0)?this.s:(this_array[0]<<24)>>24;
	}

	// (public) return value as short (assumes DB>=16)
	function bnShortValue() {
	  var this_array = this.array;
	  return (this.t==0)?this.s:(this_array[0]<<16)>>16;
	}

	// (protected) return x s.t. r^x < DV
	function bnpChunkSize(r) { return Math.floor(Math.LN2*BI_DB/Math.log(r)); }

	// (public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	  var this_array = this.array;
	  if(this.s < 0) return -1;
	  else if(this.t <= 0 || (this.t == 1 && this_array[0] <= 0)) return 0;
	  else return 1;
	}

	// (protected) convert to radix string
	function bnpToRadix(b) {
	  if(b == null) b = 10;
	  if(this.signum() == 0 || b < 2 || b > 36) return "0";
	  var cs = this.chunkSize(b);
	  var a = Math.pow(b,cs);
	  var d = nbv(a), y = nbi(), z = nbi(), r = "";
	  this.divRemTo(d,y,z);
	  while(y.signum() > 0) {
	    r = (a+z.intValue()).toString(b).substr(1) + r;
	    y.divRemTo(d,y,z);
	  }
	  return z.intValue().toString(b) + r;
	}

	// (protected) convert from radix string
	function bnpFromRadix(s,b) {
	  this.fromInt(0);
	  if(b == null) b = 10;
	  var cs = this.chunkSize(b);
	  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	  for(var i = 0; i < s.length; ++i) {
	    var x = intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	      continue;
	    }
	    w = b*w+x;
	    if(++j >= cs) {
	      this.dMultiply(d);
	      this.dAddOffset(w,0);
	      j = 0;
	      w = 0;
	    }
	  }
	  if(j > 0) {
	    this.dMultiply(Math.pow(b,j));
	    this.dAddOffset(w,0);
	  }
	  if(mi) BigInteger.ZERO.subTo(this,this);
	}

	// (protected) alternate constructor
	function bnpFromNumber(a,b,c) {
	  if("number" == typeof b) {
	    // new BigInteger(int,int,RNG)
	    if(a < 2) this.fromInt(1);
	    else {
	      this.fromNumber(a,c);
	      if(!this.testBit(a-1))	// force MSB set
	        this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
	      if(this.isEven()) this.dAddOffset(1,0); // force odd
	      while(!this.isProbablePrime(b)) {
	        this.dAddOffset(2,0);
	        if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
	      }
	    }
	  }
	  else {
	    // todo: we don't need this.
	    // new BigInteger(int,RNG)
	    var x = new Array(), t = a&7;
	    x.length = (a>>3)+1;
	    b.nextBytes(x);
	    if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	    this.fromString(x,256);
	  }
	}

	// (public) convert to bigendian byte array
	function bnToByteArray() {
	  var this_array = this.array;
	  var i = this.t, r = new Array();
	  r[0] = this.s;
	  var p = BI_DB-(i*BI_DB)%8, d, k = 0;
	  if(i-- > 0) {
	    if(p < BI_DB && (d = this_array[i]>>p) != (this.s&BI_DM)>>p)
	      r[k++] = d|(this.s<<(BI_DB-p));
	    while(i >= 0) {
	      if(p < 8) {
	        d = (this_array[i]&((1<<p)-1))<<(8-p);
	        d |= this_array[--i]>>(p+=BI_DB-8);
	      }
	      else {
	        d = (this_array[i]>>(p-=8))&0xff;
	        if(p <= 0) { p += BI_DB; --i; }
	      }
	      if((d&0x80) != 0) d |= -256;
	      if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
	      if(k > 0 || d != this.s) r[k++] = d;
	    }
	  }
	  return r;
	}

	function bnEquals(a) { return(this.compareTo(a)==0); }
	function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
	function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

	// (protected) r = this op a (bitwise)
	function bnpBitwiseTo(a,op,r) {
	  var this_array = this.array;
	  var a_array    = a.array;
	  var r_array    = r.array;
	  var i, f, m = Math.min(a.t,this.t);
	  for(i = 0; i < m; ++i) r_array[i] = op(this_array[i],a_array[i]);
	  if(a.t < this.t) {
	    f = a.s&BI_DM;
	    for(i = m; i < this.t; ++i) r_array[i] = op(this_array[i],f);
	    r.t = this.t;
	  }
	  else {
	    f = this.s&BI_DM;
	    for(i = m; i < a.t; ++i) r_array[i] = op(f,a_array[i]);
	    r.t = a.t;
	  }
	  r.s = op(this.s,a.s);
	  r.clamp();
	}

	// (public) this & a
	function op_and(x,y) { return x&y; }
	function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	// (public) this | a
	function op_or(x,y) { return x|y; }
	function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	// (public) this ^ a
	function op_xor(x,y) { return x^y; }
	function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	// (public) this & ~a
	function op_andnot(x,y) { return x&~y; }
	function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	// (public) ~this
	function bnNot() {
	  var this_array = this.array;
	  var r = nbi();
	  var r_array = r.array;

	  for(var i = 0; i < this.t; ++i) r_array[i] = BI_DM&~this_array[i];
	  r.t = this.t;
	  r.s = ~this.s;
	  return r;
	}

	// (public) this << n
	function bnShiftLeft(n) {
	  var r = nbi();
	  if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	  return r;
	}

	// (public) this >> n
	function bnShiftRight(n) {
	  var r = nbi();
	  if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	  return r;
	}

	// return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	  if(x == 0) return -1;
	  var r = 0;
	  if((x&0xffff) == 0) { x >>= 16; r += 16; }
	  if((x&0xff) == 0) { x >>= 8; r += 8; }
	  if((x&0xf) == 0) { x >>= 4; r += 4; }
	  if((x&3) == 0) { x >>= 2; r += 2; }
	  if((x&1) == 0) ++r;
	  return r;
	}

	// (public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	  var this_array = this.array;
	  for(var i = 0; i < this.t; ++i)
	    if(this_array[i] != 0) return i*BI_DB+lbit(this_array[i]);
	  if(this.s < 0) return this.t*BI_DB;
	  return -1;
	}

	// return number of 1 bits in x
	function cbit(x) {
	  var r = 0;
	  while(x != 0) { x &= x-1; ++r; }
	  return r;
	}

	// (public) return number of set bits
	function bnBitCount() {
	  var this_array = this.array;
	  var r = 0, x = this.s&BI_DM;
	  for(var i = 0; i < this.t; ++i) r += cbit(this_array[i]^x);
	  return r;
	}

	// (public) true iff nth bit is set
	function bnTestBit(n) {
	  var this_array = this.array;
	  var j = Math.floor(n/BI_DB);
	  if(j >= this.t) return(this.s!=0);
	  return((this_array[j]&(1<<(n%BI_DB)))!=0);
	}

	// (protected) this op (1<<n)
	function bnpChangeBit(n,op) {
	  var r = BigInteger.ONE.shiftLeft(n);
	  this.bitwiseTo(r,op,r);
	  return r;
	}

	// (public) this | (1<<n)
	function bnSetBit(n) { return this.changeBit(n,op_or); }

	// (public) this & ~(1<<n)
	function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	// (public) this ^ (1<<n)
	function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	// (protected) r = this + a
	function bnpAddTo(a,r) {
	  var this_array = this.array;
	  var a_array = a.array;
	  var r_array = r.array;
	  var i = 0, c = 0, m = Math.min(a.t,this.t);
	  while(i < m) {
	    c += this_array[i]+a_array[i];
	    r_array[i++] = c&BI_DM;
	    c >>= BI_DB;
	  }
	  if(a.t < this.t) {
	    c += a.s;
	    while(i < this.t) {
	      c += this_array[i];
	      r_array[i++] = c&BI_DM;
	      c >>= BI_DB;
	    }
	    c += this.s;
	  }
	  else {
	    c += this.s;
	    while(i < a.t) {
	      c += a_array[i];
	      r_array[i++] = c&BI_DM;
	      c >>= BI_DB;
	    }
	    c += a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c > 0) r_array[i++] = c;
	  else if(c < -1) r_array[i++] = BI_DV+c;
	  r.t = i;
	  r.clamp();
	}

	// (public) this + a
	function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	// (public) this - a
	function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	// (public) this * a
	function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	// (public) this / a
	function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	// (public) this % a
	function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	// (public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	  var q = nbi(), r = nbi();
	  this.divRemTo(a,q,r);
	  return new Array(q,r);
	}

	// (protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	  var this_array = this.array;
	  this_array[this.t] = this.am(0,n-1,this,0,0,this.t);
	  ++this.t;
	  this.clamp();
	}

	// (protected) this += n << w words, this >= 0
	function bnpDAddOffset(n,w) {
	  var this_array = this.array;
	  while(this.t <= w) this_array[this.t++] = 0;
	  this_array[w] += n;
	  while(this_array[w] >= BI_DV) {
	    this_array[w] -= BI_DV;
	    if(++w >= this.t) this_array[this.t++] = 0;
	    ++this_array[w];
	  }
	}

	// A "null" reducer
	function NullExp() {}
	function nNop(x) { return x; }
	function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	function nSqrTo(x,r) { x.squareTo(r); }

	NullExp.prototype.convert = nNop;
	NullExp.prototype.revert = nNop;
	NullExp.prototype.mulTo = nMulTo;
	NullExp.prototype.sqrTo = nSqrTo;

	// (public) this^e
	function bnPow(e) { return this.exp(e,new NullExp()); }

	// (protected) r = lower n words of "this * a", a.t <= n
	// "this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a,n,r) {
	  var r_array = r.array;
	  var a_array = a.array;
	  var i = Math.min(this.t+a.t,n);
	  r.s = 0; // assumes a,this >= 0
	  r.t = i;
	  while(i > 0) r_array[--i] = 0;
	  var j;
	  for(j = r.t-this.t; i < j; ++i) r_array[i+this.t] = this.am(0,a_array[i],r,i,0,this.t);
	  for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a_array[i],r,i,0,n-i);
	  r.clamp();
	}

	// (protected) r = "this * a" without lower n words, n > 0
	// "this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a,n,r) {
	  var r_array = r.array;
	  var a_array = a.array;
	  --n;
	  var i = r.t = this.t+a.t-n;
	  r.s = 0; // assumes a,this >= 0
	  while(--i >= 0) r_array[i] = 0;
	  for(i = Math.max(n-this.t,0); i < a.t; ++i)
	    r_array[this.t+i-n] = this.am(n-i,a_array[i],r,0,0,this.t+i-n);
	  r.clamp();
	  r.drShiftTo(1,r);
	}

	// Barrett modular reduction
	function Barrett(m) {
	  // setup Barrett
	  this.r2 = nbi();
	  this.q3 = nbi();
	  BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
	  this.mu = this.r2.divide(m);
	  this.m = m;
	}

	function barrettConvert(x) {
	  if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	  else if(x.compareTo(this.m) < 0) return x;
	  else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	}

	function barrettRevert(x) { return x; }

	// x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	  x.drShiftTo(this.m.t-1,this.r2);
	  if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
	  this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
	  this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
	  while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
	  x.subTo(this.r2,x);
	  while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = x^2 mod m; x != r
	function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = x*y mod m; x,y != r
	function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Barrett.prototype.convert = barrettConvert;
	Barrett.prototype.revert = barrettRevert;
	Barrett.prototype.reduce = barrettReduce;
	Barrett.prototype.mulTo = barrettMulTo;
	Barrett.prototype.sqrTo = barrettSqrTo;

	// (public) this^e % m (HAC 14.85)
	function bnModPow(e,m) {
	  var e_array = e.array;
	  var i = e.bitLength(), k, r = nbv(1), z;
	  if(i <= 0) return r;
	  else if(i < 18) k = 1;
	  else if(i < 48) k = 3;
	  else if(i < 144) k = 4;
	  else if(i < 768) k = 5;
	  else k = 6;
	  if(i < 8)
	    z = new Classic(m);
	  else if(m.isEven())
	    z = new Barrett(m);
	  else
	    z = new Montgomery(m);

	  // precomputation
	  var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	  g[1] = z.convert(this);
	  if(k > 1) {
	    var g2 = nbi();
	    z.sqrTo(g[1],g2);
	    while(n <= km) {
	      g[n] = nbi();
	      z.mulTo(g2,g[n-2],g[n]);
	      n += 2;
	    }
	  }

	  var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	  i = nbits(e_array[j])-1;
	  while(j >= 0) {
	    if(i >= k1) w = (e_array[j]>>(i-k1))&km;
	    else {
	      w = (e_array[j]&((1<<(i+1))-1))<<(k1-i);
	      if(j > 0) w |= e_array[j-1]>>(BI_DB+i-k1);
	    }

	    n = k;
	    while((w&1) == 0) { w >>= 1; --n; }
	    if((i -= n) < 0) { i += BI_DB; --j; }
	    if(is1) {	// ret == 1, don't bother squaring or multiplying it
	      g[w].copyTo(r);
	      is1 = false;
	    }
	    else {
	      while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	      if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	      z.mulTo(r2,g[w],r);
	    }

	    while(j >= 0 && (e_array[j]&(1<<i)) == 0) {
	      z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	      if(--i < 0) { i = BI_DB-1; --j; }
	    }
	  }
	  return z.revert(r);
	}

	// (public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	  var x = (this.s<0)?this.negate():this.clone();
	  var y = (a.s<0)?a.negate():a.clone();
	  if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	  var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	  if(g < 0) return x;
	  if(i < g) g = i;
	  if(g > 0) {
	    x.rShiftTo(g,x);
	    y.rShiftTo(g,y);
	  }
	  while(x.signum() > 0) {
	    if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	    if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	    if(x.compareTo(y) >= 0) {
	      x.subTo(y,x);
	      x.rShiftTo(1,x);
	    }
	    else {
	      y.subTo(x,y);
	      y.rShiftTo(1,y);
	    }
	  }
	  if(g > 0) y.lShiftTo(g,y);
	  return y;
	}

	// (protected) this % n, n < 2^26
	function bnpModInt(n) {
	  var this_array = this.array;
	  if(n <= 0) return 0;
	  var d = BI_DV%n, r = (this.s<0)?n-1:0;
	  if(this.t > 0)
	    if(d == 0) r = this_array[0]%n;
	    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this_array[i])%n;
	  return r;
	}

	// (public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	  var ac = m.isEven();
	  if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
	  var u = m.clone(), v = this.clone();
	  var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	  while(u.signum() != 0) {
	    while(u.isEven()) {
	      u.rShiftTo(1,u);
	      if(ac) {
	        if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	        a.rShiftTo(1,a);
	      }
	      else if(!b.isEven()) b.subTo(m,b);
	      b.rShiftTo(1,b);
	    }
	    while(v.isEven()) {
	      v.rShiftTo(1,v);
	      if(ac) {
	        if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	        c.rShiftTo(1,c);
	      }
	      else if(!d.isEven()) d.subTo(m,d);
	      d.rShiftTo(1,d);
	    }
	    if(u.compareTo(v) >= 0) {
	      u.subTo(v,u);
	      if(ac) a.subTo(c,a);
	      b.subTo(d,b);
	    }
	    else {
	      v.subTo(u,v);
	      if(ac) c.subTo(a,c);
	      d.subTo(b,d);
	    }
	  }
	  if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	  if(d.compareTo(m) >= 0) return d.subtract(m);
	  if(d.signum() < 0) d.addTo(m,d); else return d;
	  if(d.signum() < 0) return d.add(m); else return d;
	}

	var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
	var lplim = (1<<26)/lowprimes[lowprimes.length-1];

	// (public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t) {
	  var i, x = this.abs();
	  var x_array = x.array;
	  if(x.t == 1 && x_array[0] <= lowprimes[lowprimes.length-1]) {
	    for(i = 0; i < lowprimes.length; ++i)
	      if(x_array[0] == lowprimes[i]) return true;
	    return false;
	  }
	  if(x.isEven()) return false;
	  i = 1;
	  while(i < lowprimes.length) {
	    var m = lowprimes[i], j = i+1;
	    while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
	    m = x.modInt(m);
	    while(i < j) if(m%lowprimes[i++] == 0) return false;
	  }
	  return x.millerRabin(t);
	}

	// (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t) {
	  var n1 = this.subtract(BigInteger.ONE);
	  var k = n1.getLowestSetBit();
	  if(k <= 0) return false;
	  var r = n1.shiftRight(k);
	  t = (t+1)>>1;
	  if(t > lowprimes.length) t = lowprimes.length;
	  var a = nbi();
	  for(var i = 0; i < t; ++i) {
	    a.fromInt(lowprimes[i]);
	    var y = a.modPow(r,this);
	    if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	      var j = 1;
	      while(j++ < k && y.compareTo(n1) != 0) {
	        y = y.modPowInt(2,this);
	        if(y.compareTo(BigInteger.ONE) == 0) return false;
	      }
	      if(y.compareTo(n1) != 0) return false;
	    }
	  }
	  return true;
	};

	// protected
	BigInteger.prototype.chunkSize = bnpChunkSize;
	BigInteger.prototype.toRadix = bnpToRadix;
	BigInteger.prototype.fromRadix = bnpFromRadix;
	BigInteger.prototype.fromNumber = bnpFromNumber;
	BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
	BigInteger.prototype.changeBit = bnpChangeBit;
	BigInteger.prototype.addTo = bnpAddTo;
	BigInteger.prototype.dMultiply = bnpDMultiply;
	BigInteger.prototype.dAddOffset = bnpDAddOffset;
	BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	BigInteger.prototype.modInt = bnpModInt;
	BigInteger.prototype.millerRabin = bnpMillerRabin;

	// public
	BigInteger.prototype.clone = bnClone;
	BigInteger.prototype.intValue = bnIntValue;
	BigInteger.prototype.byteValue = bnByteValue;
	BigInteger.prototype.shortValue = bnShortValue;
	BigInteger.prototype.signum = bnSigNum;
	BigInteger.prototype.toByteArray = bnToByteArray;
	BigInteger.prototype.equals = bnEquals;
	BigInteger.prototype.min = bnMin;
	BigInteger.prototype.max = bnMax;
	BigInteger.prototype.and = bnAnd;
	BigInteger.prototype.or = bnOr;
	BigInteger.prototype.xor = bnXor;
	BigInteger.prototype.andNot = bnAndNot;
	BigInteger.prototype.not = bnNot;
	BigInteger.prototype.shiftLeft = bnShiftLeft;
	BigInteger.prototype.shiftRight = bnShiftRight;
	BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
	BigInteger.prototype.bitCount = bnBitCount;
	BigInteger.prototype.testBit = bnTestBit;
	BigInteger.prototype.setBit = bnSetBit;
	BigInteger.prototype.clearBit = bnClearBit;
	BigInteger.prototype.flipBit = bnFlipBit;
	BigInteger.prototype.add = bnAdd;
	BigInteger.prototype.subtract = bnSubtract;
	BigInteger.prototype.multiply = bnMultiply;
	BigInteger.prototype.divide = bnDivide;
	BigInteger.prototype.remainder = bnRemainder;
	BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
	BigInteger.prototype.modPow = bnModPow;
	BigInteger.prototype.modInverse = bnModInverse;
	BigInteger.prototype.pow = bnPow;
	BigInteger.prototype.gcd = bnGCD;
	BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
	BigInteger.prototype.am = am4;

	// end of stuff copied from github.

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/**
	sprintf() for JavaScript 0.7-beta1
	http://www.diveintojavascript.com/projects/javascript-sprintf

	Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.
	    * Neither the name of sprintf() for JavaScript nor the
	      names of its contributors may be used to endorse or promote products
	      derived from this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	DISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY
	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


	Changelog:
	2010.11.07 - 0.7-beta1-node
	  - converted it to a node.js compatible module

	2010.09.06 - 0.7-beta1
	  - features: vsprintf, support for named placeholders
	  - enhancements: format cache, reduced global namespace pollution

	2010.05.22 - 0.6:
	 - reverted to 0.4 and fixed the bug regarding the sign of the number 0
	 Note:
	 Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)
	 who warned me about a bug in 0.5, I discovered that the last update was
	 a regress. I appologize for that.

	2010.05.09 - 0.5:
	 - bug fix: 0 is now preceeded with a + sign
	 - bug fix: the sign was not at the right position on padded results (Kamal Abdali)
	 - switched from GPL to BSD license

	2007.10.21 - 0.4:
	 - unit test and patch (David Baird)

	2007.09.17 - 0.3:
	 - bug fix: no longer throws exception on empty paramenters (Hans Pufal)

	2007.09.11 - 0.2:
	 - feature: added argument swapping

	2007.04.03 - 0.1:
	 - initial release
	**/

	var sprintf = (function() {
		function get_type(variable) {
			return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
		}
		function str_repeat(input, multiplier) {
			for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}
			return output.join('');
		}

		var str_format = function() {
			if (!str_format.cache.hasOwnProperty(arguments[0])) {
				str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
			}
			return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
		};

		// convert object to simple one line string without indentation or
		// newlines. Note that this implementation does not print array
		// values to their actual place for sparse arrays. 
		//
		// For example sparse array like this
		//    l = []
		//    l[4] = 1
		// Would be printed as "[1]" instead of "[, , , , 1]"
		// 
		// If argument 'seen' is not null and array the function will check for 
		// circular object references from argument.
		str_format.object_stringify = function(obj, depth, maxdepth, seen) {
			var str = '';
			if (obj != null) {
				switch( typeof(obj) ) {
				case 'function': 
					return '[Function' + (obj.name ? ': '+obj.name : '') + ']';
				    break;
				case 'object':
					if ( obj instanceof Error) { return '[' + obj.toString() + ']' };
					if (depth >= maxdepth) return '[Object]'
					if (seen) {
						// add object to seen list
						seen = seen.slice(0)
						seen.push(obj);
					}
					if (obj.length != null) { //array
						str += '[';
						var arr = []
						for (var i in obj) {
							if (seen && seen.indexOf(obj[i]) >= 0) arr.push('[Circular]');
							else arr.push(str_format.object_stringify(obj[i], depth+1, maxdepth, seen));
						}
						str += arr.join(', ') + ']';
					} else if ('getMonth' in obj) { // date
						return 'Date(' + obj + ')';
					} else { // object
						str += '{';
						var arr = []
						for (var k in obj) { 
							if(obj.hasOwnProperty(k)) {
								if (seen && seen.indexOf(obj[k]) >= 0) arr.push(k + ': [Circular]');
								else arr.push(k +': ' +str_format.object_stringify(obj[k], depth+1, maxdepth, seen)); 
							}
						}
						str += arr.join(', ') + '}';
					}
					return str;
					break;
				case 'string':				
					return '"' + obj + '"';
					break
				}
			}
			return '' + obj;
		}

		str_format.format = function(parse_tree, argv) {
			var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
			for (i = 0; i < tree_length; i++) {
				node_type = get_type(parse_tree[i]);
				if (node_type === 'string') {
					output.push(parse_tree[i]);
				}
				else if (node_type === 'array') {
					match = parse_tree[i]; // convenience purposes only
					if (match[2]) { // keyword argument
						arg = argv[cursor];
						for (k = 0; k < match[2].length; k++) {
							if (!arg.hasOwnProperty(match[2][k])) {
								throw new Error(sprintf('[sprintf] property "%s" does not exist', match[2][k]));
							}
							arg = arg[match[2][k]];
						}
					}
					else if (match[1]) { // positional argument (explicit)
						arg = argv[match[1]];
					}
					else { // positional argument (implicit)
						arg = argv[cursor++];
					}

					if (/[^sO]/.test(match[8]) && (get_type(arg) != 'number')) {
						throw new Error(sprintf('[sprintf] expecting number but found %s "' + arg + '"', get_type(arg)));
					}
					switch (match[8]) {
						case 'b': arg = arg.toString(2); break;
						case 'c': arg = String.fromCharCode(arg); break;
						case 'd': arg = parseInt(arg, 10); break;
						case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
						case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
					    case 'O': arg = str_format.object_stringify(arg, 0, parseInt(match[7]) || 5); break;
						case 'o': arg = arg.toString(8); break;
						case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
						case 'u': arg = Math.abs(arg); break;
						case 'x': arg = arg.toString(16); break;
						case 'X': arg = arg.toString(16).toUpperCase(); break;
					}
					arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
					pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
					pad_length = match[6] - String(arg).length;
					pad = match[6] ? str_repeat(pad_character, pad_length) : '';
					output.push(match[5] ? arg + pad : pad + arg);
				}
			}
			return output.join('');
		};

		str_format.cache = {};

		str_format.parse = function(fmt) {
			var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
			while (_fmt) {
				if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
					parse_tree.push(match[0]);
				}
				else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
					parse_tree.push('%');
				}
				else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosOuxX])/.exec(_fmt)) !== null) {
					if (match[2]) {
						arg_names |= 1;
						var field_list = [], replacement_field = match[2], field_match = [];
						if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
							field_list.push(field_match[1]);
							while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
								if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
									field_list.push(field_match[1]);
								}
								else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
									field_list.push(field_match[1]);
								}
								else {
									throw new Error('[sprintf] ' + replacement_field);
								}
							}
						}
						else {
	                        throw new Error('[sprintf] ' + replacement_field);
						}
						match[2] = field_list;
					}
					else {
						arg_names |= 2;
					}
					if (arg_names === 3) {
						throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');
					}
					parse_tree.push(match);
				}
				else {
					throw new Error('[sprintf] ' + _fmt);
				}
				_fmt = _fmt.substring(match[0].length);
			}
			return parse_tree;
		};

		return str_format;
	})();

	var vsprintf = function(fmt, argv) {
		var argvClone = argv.slice();
		argvClone.unshift(fmt);
		return sprintf.apply(null, argvClone);
	};

	module.exports = sprintf;
	sprintf.sprintf = sprintf;
	sprintf.vsprintf = vsprintf;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright 2010 Membase, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	'use strict';

	/*jshint node:true*/


	/**
	 * Convert a 16-bit quantity (short integer) from host byte order to network byte order (Little-Endian to Big-Endian).
	 *
	 * @param {Array|Buffer} b Array of octets or a nodejs Buffer
	 * @param {number} i Zero-based index at which to write into b
	 * @param {number} v Value to convert
	 */
	exports.htons = function(b, i, v) {
		b[i] = (0xff & (v >> 8));
		b[i + 1] = (0xff & (v));
	};


	/**
	 * Convert a 16-bit quantity (short integer) from network byte order to host byte order (Big-Endian to Little-Endian).
	 *
	 * @param {Array|Buffer} b Array of octets or a nodejs Buffer to read value from
	 * @param {number} i Zero-based index at which to read from b
	 * @returns {number}
	 */
	exports.ntohs = function(b, i) {
		return ((0xff & b[i]) << 8) | 
		       ((0xff & b[i + 1]));
	};


	/**
	 * Convert a 16-bit quantity (short integer) from network byte order to host byte order (Big-Endian to Little-Endian).
	 *
	 * @param {string} s String to read value from
	 * @param {number} i Zero-based index at which to read from s
	 * @returns {number}
	 */
	exports.ntohsStr = function(s, i) {
		return ((0xff & s.charCodeAt(i)) << 8) |
		       ((0xff & s.charCodeAt(i + 1)));
	};


	/**
	 * Convert a 32-bit quantity (long integer) from host byte order to network byte order (Little-Endian to Big-Endian).
	 *
	 * @param {Array|Buffer} b Array of octets or a nodejs Buffer
	 * @param {number} i Zero-based index at which to write into b
	 * @param {number} v Value to convert
	 */
	exports.htonl = function(b, i, v) {
		b[i] = (0xff & (v >> 24));
		b[i + 1] = (0xff & (v >> 16));
		b[i + 2] = (0xff & (v >> 8));
		b[i + 3] = (0xff & (v));
	};


	/**
	 * Convert a 32-bit quantity (long integer) from network byte order to host byte order (Big-Endian to Little-Endian).
	 *
	 * @param {Array|Buffer} b Array of octets or a nodejs Buffer to read value from
	 * @param {number} i Zero-based index at which to read from b
	 * @returns {number}
	 */
	exports.ntohl = function(b, i) {
		return ((0xff & b[i]) << 24) |
		       ((0xff & b[i + 1]) << 16) |
		       ((0xff & b[i + 2]) << 8) |
		       ((0xff & b[i + 3]));
	};


	/**
	 * Convert a 32-bit quantity (long integer) from network byte order to host byte order (Big-Endian to Little-Endian).
	 *
	 * @param {string} s String to read value from
	 * @param {number} i Zero-based index at which to read from s
	 * @returns {number}
	 */
	exports.ntohlStr = function(s, i) {
		return ((0xff & s.charCodeAt(i)) << 24) |
		       ((0xff & s.charCodeAt(i + 1)) << 16) |
		       ((0xff & s.charCodeAt(i + 2)) << 8) |
		       ((0xff & s.charCodeAt(i + 3)));
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var BufferWriter = __webpack_require__(29);
	var BufferReader = __webpack_require__(39);
	var BN = __webpack_require__(12);

	var Varint = function Varint(buf) {
	  if (!(this instanceof Varint))
	    return new Varint(buf);
	  if (Buffer.isBuffer(buf)) {
	    this.buf = buf;
	  } else if (typeof buf === 'number') {
	    var num = buf;
	    this.fromNumber(num);
	  } else if (buf instanceof BN) {
	    var bn = buf;
	    this.fromBN(bn);
	  } else if (buf) {
	    var obj = buf;
	    this.set(obj);
	  }
	};

	Varint.prototype.set = function(obj) {
	  this.buf = obj.buf || this.buf;
	  return this;
	};

	Varint.prototype.fromString = function(str) {
	  this.set({
	    buf: new Buffer(str, 'hex')
	  });
	  return this;
	};

	Varint.prototype.toString = function() {
	  return this.buf.toString('hex');
	};

	Varint.prototype.fromBuffer = function(buf) {
	  this.buf = buf;
	  return this;
	};

	Varint.prototype.fromBufferReader = function(br) {
	  this.buf = br.readVarintBuf();
	  return this;
	};

	Varint.prototype.fromBN = function(bn) {
	  this.buf = BufferWriter().writeVarintBN(bn).concat();
	  return this;
	};

	Varint.prototype.fromNumber = function(num) {
	  this.buf = BufferWriter().writeVarintNum(num).concat();
	  return this;
	};

	Varint.prototype.toBuffer = function() {
	  return this.buf;
	};

	Varint.prototype.toBN = function() {
	  return BufferReader(this.buf).readVarintBN();
	};

	Varint.prototype.toNumber = function() {
	  return BufferReader(this.buf).readVarintNum();
	};

	module.exports = Varint;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var docsURL = 'http://bitcore.io/';

	module.exports = [{
	  name: 'InvalidB58Char',
	  message: 'Invalid Base58 character: {0} in {1}'
	}, {
	  name: 'InvalidB58Checksum',
	  message: 'Invalid Base58 checksum for {0}'
	}, {
	  name: 'InvalidNetwork',
	  message: 'Invalid version for network: got {0}'
	}, {
	  name: 'InvalidState',
	  message: 'Invalid state: {0}'
	}, {
	  name: 'NotImplemented',
	  message: 'Function {0} was not implemented yet'
	}, {
	  name: 'InvalidNetworkArgument',
	  message: 'Invalid network: must be "livenet" or "testnet", got {0}'
	}, {
	  name: 'InvalidArgument',
	  message: function() {
	    return 'Invalid Argument' + (arguments[0] ? (': ' + arguments[0]) : '') +
	      (arguments[1] ? (' Documentation: ' + docsURL + arguments[1]) : '');
	  }
	}, {
	  name: 'AbstractMethodInvoked',
	  message: 'Abstract Method Invokation: {0}'
	}, {
	  name: 'InvalidArgumentType',
	  message: function() {
	    return 'Invalid Argument for ' + arguments[2] + ', expected ' + arguments[1] + ' but got ' + typeof arguments[0];
	  }
	}, {
	  name: 'Unit',
	  message: 'Internal Error on Unit {0}',
	  errors: [{
	    'name': 'UnknownCode',
	    'message': 'Unrecognized unit code: {0}'
	  }, {
	    'name': 'InvalidRate',
	    'message': 'Invalid exchange rate: {0}'
	  }]
	}, {
	  name: 'Transaction',
	  message: 'Internal Error on Transaction {0}',
	  errors: [{
	    name: 'Input',
	    message: 'Internal Error on Input {0}',
	    errors: [{
	      name: 'MissingScript',
	      message: 'Need a script to create an input'
	    }, {
	      name: 'UnsupportedScript',
	      message: 'Unsupported input script type: {0}'
	    }]
	  }, {
	    name: 'NeedMoreInfo',
	    message: '{0}'
	  }, {
	    name: 'InvalidIndex',
	    message: 'Invalid index: {0} is not between 0, {1}'
	  }, {
	    name: 'UnableToVerifySignature',
	    message: 'Unable to verify signature: {0}'
	  }, {
	    name: 'DustOutputs',
	    message: 'Dust amount detected in one output'
	  }, {
	    name: 'FeeError',
	    message: 'Fees are not correctly set {0}',
	  }, {
	    name: 'ChangeAddressMissing',
	    message: 'Change address is missing'
	  }, {
	    name: 'BlockHeightTooHigh',
	    message: 'Block Height can be at most 2^32 -1'
	  }, {
	    name: 'NLockTimeOutOfRange',
	    message: 'Block Height can only be between 0 and 499 999 999'
	  }, {
	    name: 'LockTimeTooEarly',
	    message: 'Lock Time can\'t be earlier than UNIX date 500 000 000'
	  }]
	}, {
	  name: 'Script',
	  message: 'Internal Error on Script {0}',
	  errors: [{
	    name: 'UnrecognizedAddress',
	    message: 'Expected argument {0} to be an address'
	  }]
	}, {
	  name: 'HDPrivateKey',
	  message: 'Internal Error on HDPrivateKey {0}',
	  errors: [{
	    name: 'InvalidDerivationArgument',
	    message: 'Invalid derivation argument {0}, expected string, or number and boolean'
	  }, {
	    name: 'InvalidEntropyArgument',
	    message: 'Invalid entropy: must be an hexa string or binary buffer, got {0}',
	    errors: [{
	      name: 'TooMuchEntropy',
	      message: 'Invalid entropy: more than 512 bits is non standard, got "{0}"'
	    }, {
	      name: 'NotEnoughEntropy',
	      message: 'Invalid entropy: at least 128 bits needed, got "{0}"'
	    }]
	  }, {
	    name: 'InvalidLength',
	    message: 'Invalid length for xprivkey string in {0}'
	  }, {
	    name: 'InvalidPath',
	    message: 'Invalid derivation path: {0}'
	  }, {
	    name: 'UnrecognizedArgument',
	    message: 'Invalid argument: creating a HDPrivateKey requires a string, buffer, json or object, got "{0}"'
	  }]
	}, {
	  name: 'HDPublicKey',
	  message: 'Internal Error on HDPublicKey {0}',
	  errors: [{
	    name: 'ArgumentIsPrivateExtended',
	    message: 'Argument is an extended private key: {0}'
	  }, {
	    name: 'InvalidDerivationArgument',
	    message: 'Invalid derivation argument: got {0}'
	  }, {
	    name: 'InvalidLength',
	    message: 'Invalid length for xpubkey: got "{0}"'
	  }, {
	    name: 'InvalidPath',
	    message: 'Invalid derivation path, it should look like: "m/1/100", got "{0}"'
	  }, {
	    name: 'MustSupplyArgument',
	    message: 'Must supply an argument to create a HDPublicKey'
	  }, {
	    name: 'UnrecognizedArgument',
	    message: 'Invalid argument for creation, must be string, json, buffer, or object'
	  }]
	}];


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

	var _ = __webpack_require__(4);

	var Script = __webpack_require__(125);
	var Opcode = __webpack_require__(81);
	var BN = __webpack_require__(12);
	var Hash = __webpack_require__(14);
	var Signature = __webpack_require__(28);
	var PublicKey = __webpack_require__(25);

	/**
	 * Bitcoin transactions contain scripts. Each input has a script called the
	 * scriptSig, and each output has a script called the scriptPubkey. To validate
	 * an input, the input's script is concatenated with the referenced output script,
	 * and the result is executed. If at the end of execution the stack contains a
	 * "true" value, then the transaction is valid.
	 *
	 * The primary way to use this class is via the verify function.
	 * e.g., Interpreter().verify( ... );
	 */
	var Interpreter = function Interpreter(obj) {
	  if (!(this instanceof Interpreter)) {
	    return new Interpreter(obj);
	  }
	  if (obj) {
	    this.initialize();
	    this.set(obj);
	  } else {
	    this.initialize();
	  }
	};

	/**
	 * Verifies a Script by executing it and returns true if it is valid.
	 * This function needs to be provided with the scriptSig and the scriptPubkey
	 * separately.
	 * @param {Script} scriptSig - the script's first part (corresponding to the tx input)
	 * @param {Script} scriptPubkey - the script's last part (corresponding to the tx output)
	 * @param {Transaction} [tx] - the Transaction containing the scriptSig in one input (used
	 *    to check signature validity for some opcodes like OP_CHECKSIG)
	 * @param {number} nin - index of the transaction input containing the scriptSig verified.
	 * @param {number} flags - evaluation flags. See Interpreter.SCRIPT_* constants
	 *
	 * Translated from bitcoind's VerifyScript
	 */
	Interpreter.prototype.verify = function(scriptSig, scriptPubkey, tx, nin, flags) {
	  var Transaction = __webpack_require__(82);
	  if (_.isUndefined(tx)) {
	    tx = new Transaction();
	  }
	  if (_.isUndefined(nin)) {
	    nin = 0;
	  }
	  if (_.isUndefined(flags)) {
	    flags = 0;
	  }
	  this.set({
	    script: scriptSig,
	    tx: tx,
	    nin: nin,
	    flags: flags
	  });
	  var stackCopy;

	  if ((flags & Interpreter.SCRIPT_VERIFY_SIGPUSHONLY) !== 0 && !scriptSig.isPushOnly()) {
	    this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';
	    return false;
	  }

	  // evaluate scriptSig
	  if (!this.evaluate()) {
	    return false;
	  }

	  if (flags & Interpreter.SCRIPT_VERIFY_P2SH) {
	    stackCopy = this.stack.slice();
	  }

	  var stack = this.stack;
	  this.initialize();
	  this.set({
	    script: scriptPubkey,
	    stack: stack,
	    tx: tx,
	    nin: nin,
	    flags: flags
	  });

	  // evaluate scriptPubkey
	  if (!this.evaluate()) {
	    return false;
	  }

	  if (this.stack.length === 0) {
	    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_RESULT';
	    return false;
	  }

	  var buf = this.stack[this.stack.length - 1];
	  if (!Interpreter.castToBool(buf)) {
	    this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_STACK';
	    return false;
	  }

	  // Additional validation for spend-to-script-hash transactions:
	  if ((flags & Interpreter.SCRIPT_VERIFY_P2SH) && scriptPubkey.isScriptHashOut()) {
	    // scriptSig must be literals-only or validation fails
	    if (!scriptSig.isPushOnly()) {
	      this.errstr = 'SCRIPT_ERR_SIG_PUSHONLY';
	      return false;
	    }

	    // stackCopy cannot be empty here, because if it was the
	    // P2SH  HASH <> EQUAL  scriptPubKey would be evaluated with
	    // an empty stack and the EvalScript above would return false.
	    if (stackCopy.length === 0) {
	      throw new Error('internal error - stack copy empty');
	    }

	    var redeemScriptSerialized = stackCopy[stackCopy.length - 1];
	    var redeemScript = Script.fromBuffer(redeemScriptSerialized);
	    stackCopy.pop();

	    this.initialize();
	    this.set({
	      script: redeemScript,
	      stack: stackCopy,
	      tx: tx,
	      nin: nin,
	      flags: flags
	    });

	    // evaluate redeemScript
	    if (!this.evaluate()) {
	      return false;
	    }

	    if (stackCopy.length === 0) {
	      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_NO_P2SH_STACK';
	      return false;
	    }

	    if (!Interpreter.castToBool(stackCopy[stackCopy.length - 1])) {
	      this.errstr = 'SCRIPT_ERR_EVAL_FALSE_IN_P2SH_STACK';
	      return false;
	    } else {
	      return true;
	    }
	  }

	  return true;
	};

	module.exports = Interpreter;

	Interpreter.prototype.initialize = function(obj) {
	  this.stack = [];
	  this.altstack = [];
	  this.pc = 0;
	  this.pbegincodehash = 0;
	  this.nOpCount = 0;
	  this.vfExec = [];
	  this.errstr = '';
	  this.flags = 0;
	};

	Interpreter.prototype.set = function(obj) {
	  this.script = obj.script || this.script;
	  this.tx = obj.tx || this.tx;
	  this.nin = typeof obj.nin !== 'undefined' ? obj.nin : this.nin;
	  this.stack = obj.stack || this.stack;
	  this.altstack = obj.altack || this.altstack;
	  this.pc = typeof obj.pc !== 'undefined' ? obj.pc : this.pc;
	  this.pbegincodehash = typeof obj.pbegincodehash !== 'undefined' ? obj.pbegincodehash : this.pbegincodehash;
	  this.nOpCount = typeof obj.nOpCount !== 'undefined' ? obj.nOpCount : this.nOpCount;
	  this.vfExec = obj.vfExec || this.vfExec;
	  this.errstr = obj.errstr || this.errstr;
	  this.flags = typeof obj.flags !== 'undefined' ? obj.flags : this.flags;
	};

	Interpreter.true = new Buffer([1]);
	Interpreter.false = new Buffer([]);

	Interpreter.MAX_SCRIPT_ELEMENT_SIZE = 520;

	// flags taken from bitcoind
	// bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104
	Interpreter.SCRIPT_VERIFY_NONE = 0;

	// Evaluate P2SH subscripts (softfork safe, BIP16).
	Interpreter.SCRIPT_VERIFY_P2SH = (1 << 0);

	// Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.
	// Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be
	// skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).
	Interpreter.SCRIPT_VERIFY_STRICTENC = (1 << 1);

	// Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)
	Interpreter.SCRIPT_VERIFY_DERSIG = (1 << 2);

	// Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure
	// (softfork safe, BIP62 rule 5).
	Interpreter.SCRIPT_VERIFY_LOW_S = (1 << 3);

	// verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).
	Interpreter.SCRIPT_VERIFY_NULLDUMMY = (1 << 4);

	// Using a non-push operator in the scriptSig causes script failure (softfork safe, BIP62 rule 2).
	Interpreter.SCRIPT_VERIFY_SIGPUSHONLY = (1 << 5);

	// Require minimal encodings for all push operations (OP_0... OP_16, OP_1NEGATE where possible, direct
	// pushes up to 75 bytes, OP_PUSHDATA up to 255 bytes, OP_PUSHDATA2 for anything larger). Evaluating
	// any other push causes the script to fail (BIP62 rule 3).
	// In addition, whenever a stack element is interpreted as a number, it must be of minimal length (BIP62 rule 4).
	// (softfork safe)
	Interpreter.SCRIPT_VERIFY_MINIMALDATA = (1 << 6);

	// Discourage use of NOPs reserved for upgrades (NOP1-10)
	//
	// Provided so that nodes can avoid accepting or mining transactions
	// containing executed NOP's whose meaning may change after a soft-fork,
	// thus rendering the script invalid; with this flag set executing
	// discouraged NOPs fails the script. This verification flag will never be
	// a mandatory flag applied to scripts in a block. NOPs that are not
	// executed, e.g.  within an unexecuted IF ENDIF block, are *not* rejected.
	Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = (1 << 7);

	Interpreter.castToBool = function(buf) {
	  for (var i = 0; i < buf.length; i++) {
	    if (buf[i] !== 0) {
	      // can be negative zero
	      if (i === buf.length - 1 && buf[i] === 0x80) {
	        return false;
	      }
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Translated from bitcoind's CheckSignatureEncoding
	 */
	Interpreter.prototype.checkSignatureEncoding = function(buf) {
	  var sig;
	  if ((this.flags & (Interpreter.SCRIPT_VERIFY_DERSIG | Interpreter.SCRIPT_VERIFY_LOW_S | Interpreter.SCRIPT_VERIFY_STRICTENC)) !== 0 && !Signature.isTxDER(buf)) {
	    this.errstr = 'SCRIPT_ERR_SIG_DER_INVALID_FORMAT';
	    return false;
	  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_LOW_S) !== 0) {
	    sig = Signature.fromTxFormat(buf);
	    if (!sig.hasLowS()) {
	      this.errstr = 'SCRIPT_ERR_SIG_DER_HIGH_S';
	      return false;
	    }
	  } else if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0) {
	    sig = Signature.fromTxFormat(buf);
	    if (!sig.hasDefinedHashtype()) {
	      this.errstr = 'SCRIPT_ERR_SIG_HASHTYPE';
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Translated from bitcoind's CheckPubKeyEncoding
	 */
	Interpreter.prototype.checkPubkeyEncoding = function(buf) {
	  if ((this.flags & Interpreter.SCRIPT_VERIFY_STRICTENC) !== 0 && !PublicKey.isValid(buf)) {
	    this.errstr = 'SCRIPT_ERR_PUBKEYTYPE';
	    return false;
	  }
	  return true;
	};

	/**
	 * Based on bitcoind's EvalScript function, with the inner loop moved to
	 * Interpreter.prototype.step()
	 * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104
	 */
	Interpreter.prototype.evaluate = function() {
	  if (this.script.toBuffer().length > 10000) {
	    this.errstr = 'SCRIPT_ERR_SCRIPT_SIZE';
	    return false;
	  }

	  try {
	    while (this.pc < this.script.chunks.length) {
	      var fSuccess = this.step();
	      if (!fSuccess) {
	        return false;
	      }
	    }

	    // Size limits
	    if (this.stack.length + this.altstack.length > 1000) {
	      this.errstr = 'SCRIPT_ERR_STACK_SIZE';
	      return false;
	    }
	  } catch (e) {
	    this.errstr = 'SCRIPT_ERR_UNKNOWN_ERROR: ' + e;
	    return false;
	  }

	  if (this.vfExec.length > 0) {
	    this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';
	    return false;
	  }

	  return true;
	};

	/** 
	 * Based on the inner loop of bitcoind's EvalScript function
	 * bitcoind commit: b5d1b1092998bc95313856d535c632ea5a8f9104
	 */
	Interpreter.prototype.step = function() {

	  var fRequireMinimal = (this.flags & Interpreter.SCRIPT_VERIFY_MINIMALDATA) !== 0;

	  //bool fExec = !count(vfExec.begin(), vfExec.end(), false);
	  var fExec = (this.vfExec.indexOf(false) === -1);
	  var buf, buf1, buf2, spliced, n, x1, x2, bn, bn1, bn2, bufSig, bufPubkey, subscript;
	  var sig, pubkey;
	  var fValue, fSuccess;

	  // Read instruction
	  var chunk = this.script.chunks[this.pc];
	  this.pc++;
	  var opcodenum = chunk.opcodenum;
	  if (_.isUndefined(opcodenum)) {
	    this.errstr = 'SCRIPT_ERR_UNDEFINED_OPCODE';
	    return false;
	  }
	  if (chunk.buf && chunk.buf.length > Interpreter.MAX_SCRIPT_ELEMENT_SIZE) {
	    this.errstr = 'SCRIPT_ERR_PUSH_SIZE';
	    return false;
	  }

	  // Note how Opcode.OP_RESERVED does not count towards the opcode limit.
	  if (opcodenum > Opcode.OP_16 && ++(this.nOpCount) > 201) {
	    this.errstr = 'SCRIPT_ERR_OP_COUNT';
	    return false;
	  }


	  if (opcodenum === Opcode.OP_CAT ||
	    opcodenum === Opcode.OP_SUBSTR ||
	    opcodenum === Opcode.OP_LEFT ||
	    opcodenum === Opcode.OP_RIGHT ||
	    opcodenum === Opcode.OP_INVERT ||
	    opcodenum === Opcode.OP_AND ||
	    opcodenum === Opcode.OP_OR ||
	    opcodenum === Opcode.OP_XOR ||
	    opcodenum === Opcode.OP_2MUL ||
	    opcodenum === Opcode.OP_2DIV ||
	    opcodenum === Opcode.OP_MUL ||
	    opcodenum === Opcode.OP_DIV ||
	    opcodenum === Opcode.OP_MOD ||
	    opcodenum === Opcode.OP_LSHIFT ||
	    opcodenum === Opcode.OP_RSHIFT) {
	    this.errstr = 'SCRIPT_ERR_DISABLED_OPCODE';
	    return false;
	  }

	  if (fExec && 0 <= opcodenum && opcodenum <= Opcode.OP_PUSHDATA4) {
	    if (fRequireMinimal && !this.script.checkMinimalPush(this.pc - 1)) {
	      this.errstr = 'SCRIPT_ERR_MINIMALDATA';
	      return false;
	    }
	    if (!chunk.buf) {
	      this.stack.push(Interpreter.false);
	    } else if (chunk.len !== chunk.buf.length) {
	      throw new Error('Length of push value not equal to length of data');
	    } else {
	      this.stack.push(chunk.buf);
	    }
	  } else if (fExec || (Opcode.OP_IF <= opcodenum && opcodenum <= Opcode.OP_ENDIF)) {
	    switch (opcodenum) {
	      // Push value
	      case Opcode.OP_1NEGATE:
	      case Opcode.OP_1:
	      case Opcode.OP_2:
	      case Opcode.OP_3:
	      case Opcode.OP_4:
	      case Opcode.OP_5:
	      case Opcode.OP_6:
	      case Opcode.OP_7:
	      case Opcode.OP_8:
	      case Opcode.OP_9:
	      case Opcode.OP_10:
	      case Opcode.OP_11:
	      case Opcode.OP_12:
	      case Opcode.OP_13:
	      case Opcode.OP_14:
	      case Opcode.OP_15:
	      case Opcode.OP_16:
	        {
	          // ( -- value)
	          // ScriptNum bn((int)opcode - (int)(Opcode.OP_1 - 1));
	          n = opcodenum - (Opcode.OP_1 - 1);
	          buf = new BN(n).toScriptNumBuffer();
	          this.stack.push(buf);
	          // The result of these opcodes should always be the minimal way to push the data
	          // they push, so no need for a CheckMinimalPush here.
	        }
	        break;


	        //
	        // Control
	        //
	      case Opcode.OP_NOP:
	        break;

	      case Opcode.OP_NOP1:
	      case Opcode.OP_NOP2:
	      case Opcode.OP_NOP3:
	      case Opcode.OP_NOP4:
	      case Opcode.OP_NOP5:
	      case Opcode.OP_NOP6:
	      case Opcode.OP_NOP7:
	      case Opcode.OP_NOP8:
	      case Opcode.OP_NOP9:
	      case Opcode.OP_NOP10:
	        {
	          if (this.flags & Interpreter.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
	            this.errstr = 'SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS';
	            return false;
	          }
	        }
	        break;

	      case Opcode.OP_IF:
	      case Opcode.OP_NOTIF:
	        {
	          // <expression> if [statements] [else [statements]] endif
	          // bool fValue = false;
	          fValue = false;
	          if (fExec) {
	            if (this.stack.length < 1) {
	              this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';
	              return false;
	            }
	            buf = this.stack.pop();
	            fValue = Interpreter.castToBool(buf);
	            if (opcodenum === Opcode.OP_NOTIF) {
	              fValue = !fValue;
	            }
	          }
	          this.vfExec.push(fValue);
	        }
	        break;

	      case Opcode.OP_ELSE:
	        {
	          if (this.vfExec.length === 0) {
	            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';
	            return false;
	          }
	          this.vfExec[this.vfExec.length - 1] = !this.vfExec[this.vfExec.length - 1];
	        }
	        break;

	      case Opcode.OP_ENDIF:
	        {
	          if (this.vfExec.length === 0) {
	            this.errstr = 'SCRIPT_ERR_UNBALANCED_CONDITIONAL';
	            return false;
	          }
	          this.vfExec.pop();
	        }
	        break;

	      case Opcode.OP_VERIFY:
	        {
	          // (true -- ) or
	          // (false -- false) and return
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf = this.stack[this.stack.length - 1];
	          fValue = Interpreter.castToBool(buf);
	          if (fValue) {
	            this.stack.pop();
	          } else {
	            this.errstr = 'SCRIPT_ERR_VERIFY';
	            return false;
	          }
	        }
	        break;

	      case Opcode.OP_RETURN:
	        {
	          this.errstr = 'SCRIPT_ERR_OP_RETURN';
	          return false;
	        }
	        break;


	        //
	        // Stack ops
	        //
	      case Opcode.OP_TOALTSTACK:
	        {
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.altstack.push(this.stack.pop());
	        }
	        break;

	      case Opcode.OP_FROMALTSTACK:
	        {
	          if (this.altstack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_ALTSTACK_OPERATION';
	            return false;
	          }
	          this.stack.push(this.altstack.pop());
	        }
	        break;

	      case Opcode.OP_2DROP:
	        {
	          // (x1 x2 -- )
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.stack.pop();
	          this.stack.pop();
	        }
	        break;

	      case Opcode.OP_2DUP:
	        {
	          // (x1 x2 -- x1 x2 x1 x2)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf1 = this.stack[this.stack.length - 2];
	          buf2 = this.stack[this.stack.length - 1];
	          this.stack.push(buf1);
	          this.stack.push(buf2);
	        }
	        break;

	      case Opcode.OP_3DUP:
	        {
	          // (x1 x2 x3 -- x1 x2 x3 x1 x2 x3)
	          if (this.stack.length < 3) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf1 = this.stack[this.stack.length - 3];
	          buf2 = this.stack[this.stack.length - 2];
	          var buf3 = this.stack[this.stack.length - 1];
	          this.stack.push(buf1);
	          this.stack.push(buf2);
	          this.stack.push(buf3);
	        }
	        break;

	      case Opcode.OP_2OVER:
	        {
	          // (x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2)
	          if (this.stack.length < 4) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf1 = this.stack[this.stack.length - 4];
	          buf2 = this.stack[this.stack.length - 3];
	          this.stack.push(buf1);
	          this.stack.push(buf2);
	        }
	        break;

	      case Opcode.OP_2ROT:
	        {
	          // (x1 x2 x3 x4 x5 x6 -- x3 x4 x5 x6 x1 x2)
	          if (this.stack.length < 6) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          spliced = this.stack.splice(this.stack.length - 6, 2);
	          this.stack.push(spliced[0]);
	          this.stack.push(spliced[1]);
	        }
	        break;

	      case Opcode.OP_2SWAP:
	        {
	          // (x1 x2 x3 x4 -- x3 x4 x1 x2)
	          if (this.stack.length < 4) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          spliced = this.stack.splice(this.stack.length - 4, 2);
	          this.stack.push(spliced[0]);
	          this.stack.push(spliced[1]);
	        }
	        break;

	      case Opcode.OP_IFDUP:
	        {
	          // (x - 0 | x x)
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf = this.stack[this.stack.length - 1];
	          fValue = Interpreter.castToBool(buf);
	          if (fValue) {
	            this.stack.push(buf);
	          }
	        }
	        break;

	      case Opcode.OP_DEPTH:
	        {
	          // -- stacksize
	          buf = new BN(this.stack.length).toScriptNumBuffer();
	          this.stack.push(buf);
	        }
	        break;

	      case Opcode.OP_DROP:
	        {
	          // (x -- )
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.stack.pop();
	        }
	        break;

	      case Opcode.OP_DUP:
	        {
	          // (x -- x x)
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.stack.push(this.stack[this.stack.length - 1]);
	        }
	        break;

	      case Opcode.OP_NIP:
	        {
	          // (x1 x2 -- x2)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.stack.splice(this.stack.length - 2, 1);
	        }
	        break;

	      case Opcode.OP_OVER:
	        {
	          // (x1 x2 -- x1 x2 x1)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.stack.push(this.stack[this.stack.length - 2]);
	        }
	        break;

	      case Opcode.OP_PICK:
	      case Opcode.OP_ROLL:
	        {
	          // (xn ... x2 x1 x0 n - xn ... x2 x1 x0 xn)
	          // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf = this.stack[this.stack.length - 1];
	          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);
	          n = bn.toNumber();
	          this.stack.pop();
	          if (n < 0 || n >= this.stack.length) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf = this.stack[this.stack.length - n - 1];
	          if (opcodenum === Opcode.OP_ROLL) {
	            this.stack.splice(this.stack.length - n - 1, 1);
	          }
	          this.stack.push(buf);
	        }
	        break;

	      case Opcode.OP_ROT:
	        {
	          // (x1 x2 x3 -- x2 x3 x1)
	          //  x2 x1 x3  after first swap
	          //  x2 x3 x1  after second swap
	          if (this.stack.length < 3) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          x1 = this.stack[this.stack.length - 3];
	          x2 = this.stack[this.stack.length - 2];
	          var x3 = this.stack[this.stack.length - 1];
	          this.stack[this.stack.length - 3] = x2;
	          this.stack[this.stack.length - 2] = x3;
	          this.stack[this.stack.length - 1] = x1;
	        }
	        break;

	      case Opcode.OP_SWAP:
	        {
	          // (x1 x2 -- x2 x1)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          x1 = this.stack[this.stack.length - 2];
	          x2 = this.stack[this.stack.length - 1];
	          this.stack[this.stack.length - 2] = x2;
	          this.stack[this.stack.length - 1] = x1;
	        }
	        break;

	      case Opcode.OP_TUCK:
	        {
	          // (x1 x2 -- x2 x1 x2)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);
	        }
	        break;


	      case Opcode.OP_SIZE:
	        {
	          // (in -- in size)
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          bn = new BN(this.stack[this.stack.length - 1].length);
	          this.stack.push(bn.toScriptNumBuffer());
	        }
	        break;


	        //
	        // Bitwise logic
	        //
	      case Opcode.OP_EQUAL:
	      case Opcode.OP_EQUALVERIFY:
	        //case Opcode.OP_NOTEQUAL: // use Opcode.OP_NUMNOTEQUAL
	        {
	          // (x1 x2 - bool)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf1 = this.stack[this.stack.length - 2];
	          buf2 = this.stack[this.stack.length - 1];
	          var fEqual = buf1.toString('hex') === buf2.toString('hex');
	          this.stack.pop();
	          this.stack.pop();
	          this.stack.push(fEqual ? Interpreter.true : Interpreter.false);
	          if (opcodenum === Opcode.OP_EQUALVERIFY) {
	            if (fEqual) {
	              this.stack.pop();
	            } else {
	              this.errstr = 'SCRIPT_ERR_EQUALVERIFY';
	              return false;
	            }
	          }
	        }
	        break;


	        //
	        // Numeric
	        //
	      case Opcode.OP_1ADD:
	      case Opcode.OP_1SUB:
	      case Opcode.OP_NEGATE:
	      case Opcode.OP_ABS:
	      case Opcode.OP_NOT:
	      case Opcode.OP_0NOTEQUAL:
	        {
	          // (in -- out)
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf = this.stack[this.stack.length - 1];
	          bn = BN.fromScriptNumBuffer(buf, fRequireMinimal);
	          switch (opcodenum) {
	            case Opcode.OP_1ADD:
	              bn = bn.add(BN.One);
	              break;
	            case Opcode.OP_1SUB:
	              bn = bn.sub(BN.One);
	              break;
	            case Opcode.OP_NEGATE:
	              bn = bn.neg();
	              break;
	            case Opcode.OP_ABS:
	              if (bn.cmp(BN.Zero) < 0) {
	                bn = bn.neg();
	              }
	              break;
	            case Opcode.OP_NOT:
	              bn = new BN((bn.cmp(BN.Zero) === 0) + 0);
	              break;
	            case Opcode.OP_0NOTEQUAL:
	              bn = new BN((bn.cmp(BN.Zero) !== 0) + 0);
	              break;
	              //default:      assert(!'invalid opcode'); break; // TODO: does this ever occur?
	          }
	          this.stack.pop();
	          this.stack.push(bn.toScriptNumBuffer());
	        }
	        break;

	      case Opcode.OP_ADD:
	      case Opcode.OP_SUB:
	      case Opcode.OP_BOOLAND:
	      case Opcode.OP_BOOLOR:
	      case Opcode.OP_NUMEQUAL:
	      case Opcode.OP_NUMEQUALVERIFY:
	      case Opcode.OP_NUMNOTEQUAL:
	      case Opcode.OP_LESSTHAN:
	      case Opcode.OP_GREATERTHAN:
	      case Opcode.OP_LESSTHANOREQUAL:
	      case Opcode.OP_GREATERTHANOREQUAL:
	      case Opcode.OP_MIN:
	      case Opcode.OP_MAX:
	        {
	          // (x1 x2 -- out)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);
	          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);
	          bn = new BN(0);

	          switch (opcodenum) {
	            case Opcode.OP_ADD:
	              bn = bn1.add(bn2);
	              break;

	            case Opcode.OP_SUB:
	              bn = bn1.sub(bn2);
	              break;

	              // case Opcode.OP_BOOLAND:       bn = (bn1 != bnZero && bn2 != bnZero); break;
	            case Opcode.OP_BOOLAND:
	              bn = new BN(((bn1.cmp(BN.Zero) !== 0) && (bn2.cmp(BN.Zero) !== 0)) + 0);
	              break;
	              // case Opcode.OP_BOOLOR:        bn = (bn1 != bnZero || bn2 != bnZero); break;
	            case Opcode.OP_BOOLOR:
	              bn = new BN(((bn1.cmp(BN.Zero) !== 0) || (bn2.cmp(BN.Zero) !== 0)) + 0);
	              break;
	              // case Opcode.OP_NUMEQUAL:      bn = (bn1 == bn2); break;
	            case Opcode.OP_NUMEQUAL:
	              bn = new BN((bn1.cmp(bn2) === 0) + 0);
	              break;
	              // case Opcode.OP_NUMEQUALVERIFY:    bn = (bn1 == bn2); break;
	            case Opcode.OP_NUMEQUALVERIFY:
	              bn = new BN((bn1.cmp(bn2) === 0) + 0);
	              break;
	              // case Opcode.OP_NUMNOTEQUAL:     bn = (bn1 != bn2); break;
	            case Opcode.OP_NUMNOTEQUAL:
	              bn = new BN((bn1.cmp(bn2) !== 0) + 0);
	              break;
	              // case Opcode.OP_LESSTHAN:      bn = (bn1 < bn2); break;
	            case Opcode.OP_LESSTHAN:
	              bn = new BN((bn1.cmp(bn2) < 0) + 0);
	              break;
	              // case Opcode.OP_GREATERTHAN:     bn = (bn1 > bn2); break;
	            case Opcode.OP_GREATERTHAN:
	              bn = new BN((bn1.cmp(bn2) > 0) + 0);
	              break;
	              // case Opcode.OP_LESSTHANOREQUAL:   bn = (bn1 <= bn2); break;
	            case Opcode.OP_LESSTHANOREQUAL:
	              bn = new BN((bn1.cmp(bn2) <= 0) + 0);
	              break;
	              // case Opcode.OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;
	            case Opcode.OP_GREATERTHANOREQUAL:
	              bn = new BN((bn1.cmp(bn2) >= 0) + 0);
	              break;
	            case Opcode.OP_MIN:
	              bn = (bn1.cmp(bn2) < 0 ? bn1 : bn2);
	              break;
	            case Opcode.OP_MAX:
	              bn = (bn1.cmp(bn2) > 0 ? bn1 : bn2);
	              break;
	              // default:           assert(!'invalid opcode'); break; //TODO: does this ever occur?
	          }
	          this.stack.pop();
	          this.stack.pop();
	          this.stack.push(bn.toScriptNumBuffer());

	          if (opcodenum === Opcode.OP_NUMEQUALVERIFY) {
	            // if (CastToBool(stacktop(-1)))
	            if (Interpreter.castToBool(this.stack[this.stack.length - 1])) {
	              this.stack.pop();
	            } else {
	              this.errstr = 'SCRIPT_ERR_NUMEQUALVERIFY';
	              return false;
	            }
	          }
	        }
	        break;

	      case Opcode.OP_WITHIN:
	        {
	          // (x min max -- out)
	          if (this.stack.length < 3) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          bn1 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 3], fRequireMinimal);
	          bn2 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);
	          var bn3 = BN.fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);
	          //bool fValue = (bn2 <= bn1 && bn1 < bn3);
	          fValue = (bn2.cmp(bn1) <= 0) && (bn1.cmp(bn3) < 0);
	          this.stack.pop();
	          this.stack.pop();
	          this.stack.pop();
	          this.stack.push(fValue ? Interpreter.true : Interpreter.false);
	        }
	        break;


	        //
	        // Crypto
	        //
	      case Opcode.OP_RIPEMD160:
	      case Opcode.OP_SHA1:
	      case Opcode.OP_SHA256:
	      case Opcode.OP_HASH160:
	      case Opcode.OP_HASH256:
	        {
	          // (in -- hash)
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          buf = this.stack[this.stack.length - 1];
	          //valtype vchHash((opcode == Opcode.OP_RIPEMD160 ||
	          //                 opcode == Opcode.OP_SHA1 || opcode == Opcode.OP_HASH160) ? 20 : 32);
	          var bufHash;
	          if (opcodenum === Opcode.OP_RIPEMD160) {
	            bufHash = Hash.ripemd160(buf);
	          } else if (opcodenum === Opcode.OP_SHA1) {
	            bufHash = Hash.sha1(buf);
	          } else if (opcodenum === Opcode.OP_SHA256) {
	            bufHash = Hash.sha256(buf);
	          } else if (opcodenum === Opcode.OP_HASH160) {
	            bufHash = Hash.sha256ripemd160(buf);
	          } else if (opcodenum === Opcode.OP_HASH256) {
	            bufHash = Hash.sha256sha256(buf);
	          }
	          this.stack.pop();
	          this.stack.push(bufHash);
	        }
	        break;

	      case Opcode.OP_CODESEPARATOR:
	        {
	          // Hash starts after the code separator
	          this.pbegincodehash = this.pc;
	        }
	        break;

	      case Opcode.OP_CHECKSIG:
	      case Opcode.OP_CHECKSIGVERIFY:
	        {
	          // (sig pubkey -- bool)
	          if (this.stack.length < 2) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }

	          bufSig = this.stack[this.stack.length - 2];
	          bufPubkey = this.stack[this.stack.length - 1];

	          // Subset of script starting at the most recent codeseparator
	          // CScript scriptCode(pbegincodehash, pend);
	          subscript = new Script().set({
	            chunks: this.script.chunks.slice(this.pbegincodehash)
	          });

	          // Drop the signature, since there's no way for a signature to sign itself
	          var tmpScript = new Script().add(bufSig);
	          subscript.findAndDelete(tmpScript);

	          if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {
	            return false;
	          }

	          try {
	            sig = Signature.fromTxFormat(bufSig);
	            pubkey = PublicKey.fromBuffer(bufPubkey, false);
	            fSuccess = this.tx.verifySignature(sig, pubkey, this.nin, subscript);
	          } catch (e) {
	            //invalid sig or pubkey
	            fSuccess = false;
	          }

	          this.stack.pop();
	          this.stack.pop();
	          // stack.push_back(fSuccess ? vchTrue : vchFalse);
	          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);
	          if (opcodenum === Opcode.OP_CHECKSIGVERIFY) {
	            if (fSuccess) {
	              this.stack.pop();
	            } else {
	              this.errstr = 'SCRIPT_ERR_CHECKSIGVERIFY';
	              return false;
	            }
	          }
	        }
	        break;

	      case Opcode.OP_CHECKMULTISIG:
	      case Opcode.OP_CHECKMULTISIGVERIFY:
	        {
	          // ([sig ...] num_of_signatures [pubkey ...] num_of_pubkeys -- bool)

	          var i = 1;
	          if (this.stack.length < i) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }

	          var nKeysCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();
	          if (nKeysCount < 0 || nKeysCount > 20) {
	            this.errstr = 'SCRIPT_ERR_PUBKEY_COUNT';
	            return false;
	          }
	          this.nOpCount += nKeysCount;
	          if (this.nOpCount > 201) {
	            this.errstr = 'SCRIPT_ERR_OP_COUNT';
	            return false;
	          }
	          // int ikey = ++i;
	          var ikey = ++i;
	          i += nKeysCount;
	          if (this.stack.length < i) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }

	          var nSigsCount = BN.fromScriptNumBuffer(this.stack[this.stack.length - i], fRequireMinimal).toNumber();
	          if (nSigsCount < 0 || nSigsCount > nKeysCount) {
	            this.errstr = 'SCRIPT_ERR_SIG_COUNT';
	            return false;
	          }
	          // int isig = ++i;
	          var isig = ++i;
	          i += nSigsCount;
	          if (this.stack.length < i) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }

	          // Subset of script starting at the most recent codeseparator
	          subscript = new Script().set({
	            chunks: this.script.chunks.slice(this.pbegincodehash)
	          });

	          // Drop the signatures, since there's no way for a signature to sign itself
	          for (var k = 0; k < nSigsCount; k++) {
	            bufSig = this.stack[this.stack.length - isig - k];
	            subscript.findAndDelete(new Script().add(bufSig));
	          }

	          fSuccess = true;
	          while (fSuccess && nSigsCount > 0) {
	            // valtype& vchSig  = stacktop(-isig);
	            bufSig = this.stack[this.stack.length - isig];
	            // valtype& vchPubKey = stacktop(-ikey);
	            bufPubkey = this.stack[this.stack.length - ikey];

	            if (!this.checkSignatureEncoding(bufSig) || !this.checkPubkeyEncoding(bufPubkey)) {
	              return false;
	            }

	            var fOk;
	            try {
	              sig = Signature.fromTxFormat(bufSig);
	              pubkey = PublicKey.fromBuffer(bufPubkey, false);
	              fOk = this.tx.verifySignature(sig, pubkey, this.nin, subscript);
	            } catch (e) {
	              //invalid sig or pubkey
	              fOk = false;
	            }

	            if (fOk) {
	              isig++;
	              nSigsCount--;
	            }
	            ikey++;
	            nKeysCount--;

	            // If there are more signatures left than keys left,
	            // then too many signatures have failed
	            if (nSigsCount > nKeysCount) {
	              fSuccess = false;
	            }
	          }

	          // Clean up stack of actual arguments
	          while (i-- > 1) {
	            this.stack.pop();
	          }

	          // A bug causes CHECKMULTISIG to consume one extra argument
	          // whose contents were not checked in any way.
	          //
	          // Unfortunately this is a potential source of mutability,
	          // so optionally verify it is exactly equal to zero prior
	          // to removing it from the stack.
	          if (this.stack.length < 1) {
	            this.errstr = 'SCRIPT_ERR_INVALID_STACK_OPERATION';
	            return false;
	          }
	          if ((this.flags & Interpreter.SCRIPT_VERIFY_NULLDUMMY) && this.stack[this.stack.length - 1].length) {
	            this.errstr = 'SCRIPT_ERR_SIG_NULLDUMMY';
	            return false;
	          }
	          this.stack.pop();

	          this.stack.push(fSuccess ? Interpreter.true : Interpreter.false);

	          if (opcodenum === Opcode.OP_CHECKMULTISIGVERIFY) {
	            if (fSuccess) {
	              this.stack.pop();
	            } else {
	              this.errstr = 'SCRIPT_ERR_CHECKMULTISIGVERIFY';
	              return false;
	            }
	          }
	        }
	        break;

	      default:
	        this.errstr = 'SCRIPT_ERR_BAD_OPCODE';
	        return false;
	    }
	  }

	  return true;
	};

	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);
	var inherits = __webpack_require__(42);
	var Input = __webpack_require__(84);
	var Output = __webpack_require__(48);
	var $ = __webpack_require__(8);

	var Script = __webpack_require__(19);
	var Signature = __webpack_require__(28);
	var Sighash = __webpack_require__(56);
	var PublicKey = __webpack_require__(25);
	var BufferUtil = __webpack_require__(6);
	var TransactionSignature = __webpack_require__(85);

	/**
	 * @constructor
	 */
	function MultiSigScriptHashInput(input, pubkeys, threshold, signatures) {
	  Input.apply(this, arguments);
	  var self = this;
	  pubkeys = pubkeys || input.publicKeys;
	  threshold = threshold || input.threshold;
	  signatures = signatures || input.signatures;
	  this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });
	  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold);
	  $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script),
	               'Provided public keys don\'t hash to the provided output');
	  this.publicKeyIndex = {};
	  _.each(this.publicKeys, function(publicKey, index) {
	    self.publicKeyIndex[publicKey.toString()] = index;
	  });
	  this.threshold = threshold;
	  // Empty array of signatures
	  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);
	}
	inherits(MultiSigScriptHashInput, Input);

	MultiSigScriptHashInput.prototype.toObject = function() {
	  var obj = Input.prototype.toObject.apply(this, arguments);
	  obj.threshold = this.threshold;
	  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });
	  obj.signatures = this._serializeSignatures();
	  return obj;
	};

	MultiSigScriptHashInput.prototype._deserializeSignatures = function(signatures) {
	  return _.map(signatures, function(signature) {
	    if (!signature) {
	      return undefined;
	    }
	    return new TransactionSignature(signature);
	  });
	};

	MultiSigScriptHashInput.prototype._serializeSignatures = function() {
	  return _.map(this.signatures, function(signature) {
	    if (!signature) {
	      return undefined;
	    }
	    return signature.toObject();
	  });
	};

	MultiSigScriptHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {
	  $.checkState(this.output instanceof Output);
	  sigtype = sigtype || Signature.SIGHASH_ALL;

	  var self = this;
	  var results = [];
	  _.each(this.publicKeys, function(publicKey) {
	    if (publicKey.toString() === privateKey.publicKey.toString()) {
	      results.push(new TransactionSignature({
	        publicKey: privateKey.publicKey,
	        prevTxId: self.prevTxId,
	        outputIndex: self.outputIndex,
	        inputIndex: index,
	        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript),
	        sigtype: sigtype
	      }));
	    }
	  });
	  return results;
	};

	MultiSigScriptHashInput.prototype.addSignature = function(transaction, signature) {
	  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');
	  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]),
	                  'Signature has no matching public key');
	  $.checkState(this.isValidSignature(transaction, signature));
	  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;
	  this._updateScript();
	  return this;
	};

	MultiSigScriptHashInput.prototype._updateScript = function() {
	  this.setScript(Script.buildP2SHMultisigIn(
	    this.publicKeys,
	    this.threshold,
	    this._createSignatures(),
	    { cachedMultisig: this.redeemScript }
	  ));
	  return this;
	};

	MultiSigScriptHashInput.prototype._createSignatures = function() {
	  return _.map(
	    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),
	    function(signature) {
	      return BufferUtil.concat([
	        signature.signature.toDER(),
	        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)
	      ]);
	    }
	  );
	};

	MultiSigScriptHashInput.prototype.clearSignatures = function() {
	  this.signatures = new Array(this.publicKeys.length);
	  this._updateScript();
	};

	MultiSigScriptHashInput.prototype.isFullySigned = function() {
	  return this.countSignatures() === this.threshold;
	};

	MultiSigScriptHashInput.prototype.countMissingSignatures = function() {
	  return this.threshold - this.countSignatures();
	};

	MultiSigScriptHashInput.prototype.countSignatures = function() {
	  return _.reduce(this.signatures, function(sum, signature) {
	    return sum + (!!signature);
	  }, 0);
	};

	MultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function() {
	  var self = this;
	  return _.filter(this.publicKeys, function(publicKey) {
	    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);
	  });
	};

	MultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signature) {
	  // FIXME: Refactor signature so this is not necessary
	  signature.signature.nhashtype = signature.sigtype;
	  return Sighash.verify(
	      transaction,
	      signature.signature,
	      signature.publicKey,
	      signature.inputIndex,
	      this.redeemScript
	  );
	};

	MultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG
	MultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)
	MultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)

	MultiSigScriptHashInput.prototype._estimateSize = function() {
	  return MultiSigScriptHashInput.OPCODES_SIZE +
	    this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE +
	    this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;
	};

	module.exports = MultiSigScriptHashInput;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(42);

	var $ = __webpack_require__(8);
	var BufferUtil = __webpack_require__(6);

	var Hash = __webpack_require__(14);
	var Input = __webpack_require__(84);
	var Output = __webpack_require__(48);
	var Sighash = __webpack_require__(56);
	var Script = __webpack_require__(19);
	var Signature = __webpack_require__(28);
	var TransactionSignature = __webpack_require__(85);

	/**
	 * Represents a special kind of input of PayToPublicKeyHash kind.
	 * @constructor
	 */
	function PublicKeyHashInput() {
	  Input.apply(this, arguments);
	}
	inherits(PublicKeyHashInput, Input);

	/* jshint maxparams: 5 */
	/**
	 * @param {Transaction} transaction - the transaction to be signed
	 * @param {PrivateKey} privateKey - the private key with which to sign the transaction
	 * @param {number} index - the index of the input in the transaction input vector
	 * @param {number=} sigtype - the type of signature, defaults to Signature.SIGHASH_ALL
	 * @param {Buffer=} hashData - the precalculated hash of the public key associated with the privateKey provided
	 * @return {Array} of objects that can be
	 */
	PublicKeyHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype, hashData) {
	  $.checkState(this.output instanceof Output);
	  hashData = hashData || Hash.sha256ripemd160(privateKey.publicKey.toBuffer());
	  sigtype = sigtype || Signature.SIGHASH_ALL;

	  if (BufferUtil.equals(hashData, this.output.script.getPublicKeyHash())) {
	    return [new TransactionSignature({
	      publicKey: privateKey.publicKey,
	      prevTxId: this.prevTxId,
	      outputIndex: this.outputIndex,
	      inputIndex: index,
	      signature: Sighash.sign(transaction, privateKey, sigtype, index, this.output.script),
	      sigtype: sigtype
	    })];
	  }
	  return [];
	};
	/* jshint maxparams: 3 */

	/**
	 * Add the provided signature
	 *
	 * @param {Object} signature
	 * @param {PublicKey} signature.publicKey
	 * @param {Signature} signature.signature
	 * @param {number=} signature.sigtype
	 * @return {PublicKeyHashInput} this, for chaining
	 */
	PublicKeyHashInput.prototype.addSignature = function(transaction, signature) {
	  $.checkState(this.isValidSignature(transaction, signature), 'Signature is invalid');
	  this.setScript(Script.buildPublicKeyHashIn(
	    signature.publicKey,
	    signature.signature.toDER(),
	    signature.sigtype
	  ));
	  return this;
	};

	/**
	 * Clear the input's signature
	 * @return {PublicKeyHashInput} this, for chaining
	 */
	PublicKeyHashInput.prototype.clearSignatures = function() {
	  this.setScript(Script.empty());
	  return this;
	};

	/**
	 * Query whether the input is signed
	 * @return {boolean}
	 */
	PublicKeyHashInput.prototype.isFullySigned = function() {
	  return this.script.isPublicKeyHashIn();
	};

	PublicKeyHashInput.SCRIPT_MAX_SIZE = 73 + 34; // sigsize (1 + 72) + pubkey (1 + 33)

	PublicKeyHashInput.prototype._estimateSize = function() {
	  return PublicKeyHashInput.SCRIPT_MAX_SIZE;
	};

	module.exports = PublicKeyHashInput;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _ = __webpack_require__(4);
	var URL = __webpack_require__(388);

	var Address = __webpack_require__(38);
	var Unit = __webpack_require__(86);
	var JSUtil = __webpack_require__(10);

	/**
	 * Bitcore URI
	 *
	 * Instantiate an URI from a bitcoin URI String or an Object. An URI instance
	 * can be created with a bitcoin uri string or an object. All instances of
	 * URI are valid, the static method isValid allows checking before instanciation.
	 *
	 * All standard parameters can be found as members of the class, the address
	 * is represented using an {Address} instance and the amount is represented in
	 * satoshis. Any other non-standard parameters can be found under the extra member.
	 *
	 * @example
	 * ```javascript
	 *
	 * var uri = new URI('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu?amount=1.2');
	 * console.log(uri.address, uri.amount);
	 * ```
	 *
	 * @param {string|Object} data - A bitcoin URI string or an Object
	 * @param {Array.<string>} [knownParams] - Required non-standard params
	 * @throws {TypeError} Invalid bitcoin address
	 * @throws {TypeError} Invalid amount
	 * @throws {Error} Unknown required argument
	 * @returns {URI} A new valid and frozen instance of URI
	 * @constructor
	 */
	var URI = function(data, knownParams) {
	  if (!(this instanceof URI)) {
	    return new URI(data, knownParams);
	  }

	  this.extras = {};
	  this.knownParams = knownParams || [];
	  this.address = this.network = this.amount = this.message = null;

	  if (typeof(data) === 'string') {
	    var params = URI.parse(data);
	    if (params.amount) {
	      params.amount = this._parseAmount(params.amount);
	    }
	    this._fromObject(params);
	  } else if (typeof(data) === 'object') {
	    this._fromObject(data);
	  } else {
	    throw new TypeError('Unrecognized data format.');
	  }
	};

	/**
	 * Instantiate a URI from a String
	 *
	 * @param {String} str - JSON string or object of the URI
	 * @returns {URI} A new instance of a URI
	 */
	URI.fromString = function fromString(str) {
	  if (typeof(str) !== 'string') {
	    throw new TypeError('Expected a string');
	  }
	  return new URI(str);
	};

	/**
	 * Instantiate a URI from JSON
	 *
	 * @param {String|Object} json - JSON string or object of the URI
	 * @returns {URI} A new instance of a URI
	 */
	URI.fromJSON = function fromJSON(json) {
	  if (JSUtil.isValidJSON(json)) {
	    json = JSON.parse(json);
	  }
	  return new URI(json);
	};

	/**
	 * Check if an bitcoin URI string is valid
	 *
	 * @example
	 * ```javascript
	 *
	 * var valid = URI.isValid('bitcoin:12A1MyfXbW6RhdRAZEqofac5jCQQjwEPBu');
	 * // true
	 * ```
	 *
	 * @param {string|Object} data - A bitcoin URI string or an Object
	 * @param {Array.<string>} [knownParams] - Required non-standard params
	 * @returns {boolean} Result of uri validation
	 */
	URI.isValid = function(arg, knownParams) {
	  try {
	    new URI(arg, knownParams);
	  } catch (err) {
	    return false;
	  }
	  return true;
	};

	/**
	 * Convert a bitcoin URI string into a simple object.
	 *
	 * @param {string} uri - A bitcoin URI string
	 * @throws {TypeError} Invalid bitcoin URI
	 * @returns {Object} An object with the parsed params
	 */
	URI.parse = function(uri) {
	  var info = URL.parse(uri, true);

	  if (info.protocol !== 'bitcoin:') {
	    throw new TypeError('Invalid bitcoin URI');
	  }

	  // workaround to host insensitiveness
	  var group = /[^:]*:\/?\/?([^?]*)/.exec(uri);
	  info.query.address = group && group[1] || undefined;

	  return info.query;
	};

	URI.Members = ['address', 'amount', 'message', 'label', 'r'];

	/**
	 * Internal function to load the URI instance with an object.
	 *
	 * @param {Object} obj - Object with the information
	 * @throws {TypeError} Invalid bitcoin address
	 * @throws {TypeError} Invalid amount
	 * @throws {Error} Unknown required argument
	 */
	URI.prototype._fromObject = function(obj) {
	  /* jshint maxcomplexity: 10 */

	  if (!Address.isValid(obj.address)) {
	    throw new TypeError('Invalid bitcoin address');
	  }

	  this.address = new Address(obj.address);
	  this.network = this.address.network;
	  this.amount = obj.amount;

	  for (var key in obj) {
	    if (key === 'address' || key === 'amount') {
	      continue;
	    }

	    if (/^req-/.exec(key) && this.knownParams.indexOf(key) === -1) {
	      throw Error('Unknown required argument ' + key);
	    }

	    var destination = URI.Members.indexOf(key) > -1 ? this : this.extras;
	    destination[key] = obj[key];
	  }
	};

	/**
	 * Internal function to transform a BTC string amount into satoshis
	 *
	 * @param {String} amount - Amount BTC string
	 * @throws {TypeError} Invalid amount
	 * @returns {Object} Amount represented in satoshis
	 */
	URI.prototype._parseAmount = function(amount) {
	  amount = Number(amount);
	  if (isNaN(amount)) {
	    throw new TypeError('Invalid amount');
	  }
	  return Unit.fromBTC(amount).toSatoshis();
	};

	URI.prototype.toObject = function toObject() {
	  var json = {};
	  for (var i = 0; i < URI.Members.length; i++) {
	    var m = URI.Members[i];
	    if (this.hasOwnProperty(m) && typeof(this[m]) !== 'undefined') {
	      json[m] = this[m].toString();
	    }
	  }
	  _.extend(json, this.extras);
	  return json;
	};

	URI.prototype.toJSON = function toJSON() {
	  return JSON.stringify(this.toObject());
	};

	/**
	 * Will return a the string representation of the URI
	 *
	 * @returns {String} Bitcoin URI string
	 */
	URI.prototype.toString = function() {
	  var query = {};
	  if (this.amount) {
	    query.amount = Unit.fromSatoshis(this.amount).toBTC();
	  }
	  if (this.message) {
	    query.message = this.message;
	  }
	  if (this.label) {
	    query.label = this.label;
	  }
	  if (this.r) {
	    query.r = this.r;
	  }
	  _.extend(query, this.extras);

	  return URL.format({
	    protocol: 'bitcoin:',
	    host: this.address,
	    query: query
	  });
	};

	/**
	 * Will return a string formatted for the console
	 *
	 * @returns {String} Bitcoin URI
	 */
	URI.prototype.inspect = function() {
	  return '<URI: ' + this.toString() + '>';
	};

	module.exports = URI;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var bn = __webpack_require__(20);
	var elliptic = __webpack_require__(21);

	var getNAF = elliptic.utils.getNAF;
	var getJSF = elliptic.utils.getJSF;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new bn(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

	  // Useful for many curves
	  this.zero = new bn(0).toRed(this.red);
	  this.one = new bn(1).toRed(this.red);
	  this.two = new bn(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new bn(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);
	}
	module.exports = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate(point) {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  for (var j = 0; j < naf.length; j += doubles.step) {
	    var nafW = 0;
	    for (var k = j + doubles.step - 1; k >= j; k--)
	      nafW = (nafW << 1) + naf[k];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (var j = 0; j < repr.length; j++) {
	      var nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var k = 0; i >= 0 && naf[i] === 0; i--)
	      k++;
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	                                                       points,
	                                                       coeffs,
	                                                       len) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  for (var i = 0; i < len; i++) {
	    var p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (var i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a]);
	      naf[b] = getNAF(coeffs[b], wndWidth[b]);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b] /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (var j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (var i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (var j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (var j = 0; j < len; j++) {
	      var z = tmp[j];
	      var p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (var i = 0; i < len; i++)
	    wnd[i] = null;
	  return acc.toP();
	};

	BaseCurve.BasePoint = BasePoint;

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BasePoint.prototype.precompute = function precompute(power, _beta) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var curve = __webpack_require__(67);
	var elliptic = __webpack_require__(21);
	var bn = __webpack_require__(20);
	var inherits = __webpack_require__(42);
	var Base = curve.base;

	var getNAF = elliptic.utils.getNAF;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = conf.a != 1;
	  this.mOneA = this.twisted && conf.a == -1;
	  this.extended = this.mOneA;

	  Base.call(this, 'mont', conf);

	  this.a = new bn(conf.a, 16).mod(this.red.m).toRed(this.red);
	  this.c = new bn(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new bn(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = conf.c == 1;
	}
	inherits(EdwardsCurve, Base);
	module.exports = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(odd, x) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y = rhs.redMul(lhs.redInvm()).redSqrt();
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y, curve.one);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = z ? new bn(z, 16) : this.curve.one;
	    this.t = t && new bn(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits(Point, Base.BasePoint);

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	         this.y.cmp(this.z) === 0;
	};

	Point.prototype._extDbl = function _extDbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projDbl = function _projDbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#doubling-dbl-2008-bbjlp
	  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  if (this.curve.twisted) {
	    // E = a * C
	    var e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      var nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      var ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      var nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      var h = this.z.redSqr();
	      // J = F - 2 * H
	      var j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      var nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      var ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      var nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    var e = c.redAdd(d);
	    // H = (c * Z1)^2
	    var h = this.curve._mulC(redMul(this.z)).redSqr();
	    // J = E - 2 * H
	    var j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    var nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    var ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    var nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point.prototype._extAdd = function _extAdd(p) {
	  // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point.prototype._projAdd = function _projAdd(p) {
	  // http://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html#addition-add-2008-bbjlp
	  // http://hyperelliptic.org/EFD/g1p/auto-edwards-projective.html#addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    var ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    var nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    var ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    var nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point.prototype.mul = function mul(k) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2);
	};

	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	                          this.y,
	                          this.z,
	                          this.t && this.t.redNeg());
	};

	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var curve = __webpack_require__(67);
	var elliptic = __webpack_require__(21);
	var bn = __webpack_require__(20);
	var inherits = __webpack_require__(42);
	var Base = curve.base;

	var getNAF = elliptic.utils.getNAF;

	function MontCurve(conf) {
	  Base.call(this, 'mont', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.i4 = new bn(4).toRed(this.red).redInvm();
	  this.two = new bn(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits(MontCurve, Base);
	module.exports = MontCurve;

	MontCurve.prototype.point = function point(x, z) {
	  return new Point(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	}

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point(curve, x, z) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new bn(x, 16);
	    this.z = new bn(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits(Point, Base.BasePoint);

	Point.prototype.precompute = function precompute() {
	  // No-op
	};

	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1] || curve.one);
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point.prototype.add = function add(p) {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.ishrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var curve = __webpack_require__(67);
	var elliptic = __webpack_require__(21);
	var bn = __webpack_require__(20);
	var inherits = __webpack_require__(42);
	var Base = curve.base;

	var getNAF = elliptic.utils.getNAF;

	function ShortCurve(conf) {
	  Base.call(this, 'short', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits(ShortCurve, Base);
	module.exports = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new bn(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new bn(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new bn(vec.a, 16),
	        b: new bn(vec.b, 16),
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : bn.mont(num);
	  var tinv = new bn(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();
	  var one = new bn(1).toRed(red);

	  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.shrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new bn(1);
	  var y1 = new bn(0);
	  var x2 = new bn(0);
	  var y2 = new bn(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    var r = v.sub(q.mul(u));
	    var x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.sign) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.sign) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 }
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromX = function pointFromX(odd, x) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs) {
	  var npoints = this._endoWnafT1;
	  var ncoeffs = this._endoWnafT2;
	  for (var i = 0; i < points.length; i++) {
	    var split = this._endoSplit(coeffs[i]);
	    var p = points[i];
	    var beta = p._getBeta();

	    if (split.k1.sign) {
	      split.k1.sign = !split.k1.sign;
	      p = p.neg(true);
	    }
	    if (split.k2.sign) {
	      split.k2.sign = !split.k2.sign;
	      beta = beta.neg(true);
	    }

	    npoints[i * 2] = p;
	    npoints[i * 2 + 1] = beta;
	    ncoeffs[i * 2] = split.k1;
	    ncoeffs[i * 2 + 1] = split.k2;
	  }
	  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2);

	  // Clean-up references to points and coefficients
	  for (var j = 0; j < i * 2; j++) {
	    npoints[j] = null;
	    ncoeffs[j] = null;
	  }
	  return res;
	};

	function Point(curve, x, y, isRed) {
	  Base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits(Point, Base.BasePoint);

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    function endoMul(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    }
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul)
	      }
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1)
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1)
	    }
	  }];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point))
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point))
	    }
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16 ,2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new bn(k, 16);

	  if (this.precomputed && this.precomputed.doubles)
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    function negate(p) {
	      return p.neg();
	    }
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate)
	      }
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  Base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new bn(0);
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = new bn(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits(JPoint, Base.BasePoint);

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (var i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (var i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  // Z = 1
	  if (this.zOne) {
	    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    var nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    var nz = this.y.redAdd(this.y);
	  } else {
	    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    var nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    var ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    var nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  // Z = 1
	  if (this.zOne) {
	    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    var nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    var ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    var nz = this.y.redAdd(this.y);
	  } else {
	    // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    var nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    var nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    var ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // http://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new bn(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var curves = exports;

	var assert = __webpack_require__(15);
	var hash = __webpack_require__(41);
	var bn = __webpack_require__(20);
	var elliptic = __webpack_require__(21);

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new elliptic.curve.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new elliptic.curve.edwards(options);
	  else
	    this.curve = new elliptic.curve.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve
	      });
	      return curve;
	    }
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
	  ],
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
	  ],
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
	  ],
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '0',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '9'
	  ]
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658'
	  ]
	});

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3'
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15'
	    }
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    {
	      'doubles': {
	        'step': 4,
	        'points': [
	          [
	            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
	          ],
	          [
	            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
	          ],
	          [
	            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
	          ],
	          [
	            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
	          ],
	          [
	            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
	          ],
	          [
	            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
	          ],
	          [
	            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
	          ],
	          [
	            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
	          ],
	          [
	            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
	          ],
	          [
	            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
	          ],
	          [
	            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
	          ],
	          [
	            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
	          ],
	          [
	            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
	          ],
	          [
	            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
	          ],
	          [
	            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
	          ],
	          [
	            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
	          ],
	          [
	            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
	          ],
	          [
	            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
	          ],
	          [
	            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
	          ],
	          [
	            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
	          ],
	          [
	            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
	          ],
	          [
	            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
	          ],
	          [
	            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
	          ],
	          [
	            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
	          ],
	          [
	            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
	          ],
	          [
	            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
	          ],
	          [
	            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
	          ],
	          [
	            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
	          ],
	          [
	            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
	          ],
	          [
	            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
	          ],
	          [
	            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
	          ],
	          [
	            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
	          ],
	          [
	            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
	          ],
	          [
	            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
	          ],
	          [
	            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
	          ],
	          [
	            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
	          ],
	          [
	            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
	          ],
	          [
	            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
	          ],
	          [
	            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
	          ],
	          [
	            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
	          ],
	          [
	            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
	          ],
	          [
	            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
	          ],
	          [
	            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
	          ],
	          [
	            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
	          ],
	          [
	            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
	          ],
	          [
	            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
	          ],
	          [
	            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
	          ],
	          [
	            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
	          ],
	          [
	            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
	          ],
	          [
	            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
	          ],
	          [
	            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
	          ],
	          [
	            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
	          ],
	          [
	            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
	          ],
	          [
	            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
	          ],
	          [
	            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
	          ],
	          [
	            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
	          ],
	          [
	            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
	          ],
	          [
	            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
	          ],
	          [
	            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
	          ],
	          [
	            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
	          ],
	          [
	            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
	          ],
	          [
	            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
	          ],
	          [
	            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
	          ],
	          [
	            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
	          ],
	          [
	            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
	          ]
	        ]
	      },
	      'naf': {
	        'wnd': 7,
	        'points': [
	          [
	            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
	          ],
	          [
	            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
	          ],
	          [
	            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
	          ],
	          [
	            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
	          ],
	          [
	            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
	          ],
	          [
	            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
	          ],
	          [
	            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
	          ],
	          [
	            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
	          ],
	          [
	            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
	          ],
	          [
	            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
	          ],
	          [
	            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
	          ],
	          [
	            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
	          ],
	          [
	            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
	          ],
	          [
	            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
	          ],
	          [
	            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
	          ],
	          [
	            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
	          ],
	          [
	            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
	          ],
	          [
	            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
	          ],
	          [
	            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
	          ],
	          [
	            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
	          ],
	          [
	            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
	          ],
	          [
	            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
	          ],
	          [
	            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
	          ],
	          [
	            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
	          ],
	          [
	            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
	          ],
	          [
	            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
	          ],
	          [
	            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
	          ],
	          [
	            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
	          ],
	          [
	            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
	          ],
	          [
	            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
	          ],
	          [
	            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
	          ],
	          [
	            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
	          ],
	          [
	            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
	          ],
	          [
	            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
	          ],
	          [
	            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
	          ],
	          [
	            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
	          ],
	          [
	            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
	          ],
	          [
	            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
	          ],
	          [
	            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
	          ],
	          [
	            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
	          ],
	          [
	            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
	          ],
	          [
	            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
	          ],
	          [
	            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
	          ],
	          [
	            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
	          ],
	          [
	            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
	          ],
	          [
	            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
	          ],
	          [
	            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
	          ],
	          [
	            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
	          ],
	          [
	            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
	          ],
	          [
	            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
	          ],
	          [
	            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
	          ],
	          [
	            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
	          ],
	          [
	            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
	          ],
	          [
	            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
	          ],
	          [
	            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
	          ],
	          [
	            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
	          ],
	          [
	            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
	          ],
	          [
	            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
	          ],
	          [
	            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
	          ],
	          [
	            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
	          ],
	          [
	            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
	          ],
	          [
	            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
	          ],
	          [
	            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
	          ],
	          [
	            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
	          ],
	          [
	            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
	          ],
	          [
	            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
	          ],
	          [
	            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
	          ],
	          [
	            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
	          ],
	          [
	            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
	          ],
	          [
	            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
	          ],
	          [
	            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
	          ],
	          [
	            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
	          ],
	          [
	            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
	          ],
	          [
	            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
	          ],
	          [
	            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
	          ],
	          [
	            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
	          ],
	          [
	            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
	          ],
	          [
	            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
	          ],
	          [
	            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
	          ],
	          [
	            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
	          ],
	          [
	            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
	          ],
	          [
	            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
	          ],
	          [
	            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
	          ],
	          [
	            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
	          ],
	          [
	            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
	          ],
	          [
	            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
	          ],
	          [
	            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
	          ],
	          [
	            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
	          ],
	          [
	            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
	          ],
	          [
	            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
	          ],
	          [
	            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
	          ],
	          [
	            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
	          ],
	          [
	            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
	          ],
	          [
	            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
	          ],
	          [
	            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
	          ],
	          [
	            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
	          ],
	          [
	            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
	          ],
	          [
	            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
	          ],
	          [
	            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
	          ],
	          [
	            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
	          ],
	          [
	            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
	          ],
	          [
	            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
	          ],
	          [
	            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
	          ],
	          [
	            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
	          ],
	          [
	            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
	          ],
	          [
	            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
	          ],
	          [
	            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
	          ],
	          [
	            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
	          ],
	          [
	            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
	          ],
	          [
	            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
	          ],
	          [
	            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
	          ],
	          [
	            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
	          ],
	          [
	            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
	          ],
	          [
	            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
	          ],
	          [
	            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
	          ],
	          [
	            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
	          ],
	          [
	            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
	          ],
	          [
	            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
	          ],
	          [
	            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
	          ],
	          [
	            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
	          ],
	          [
	            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
	          ],
	          [
	            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
	          ],
	          [
	            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
	          ],
	          [
	            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
	          ],
	          [
	            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
	          ],
	          [
	            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
	          ],
	          [
	            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
	          ]
	        ]
	      }
	    }
	  ]
	});


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var bn = __webpack_require__(20);
	var elliptic = __webpack_require__(21);
	var utils = elliptic.utils;

	var KeyPair = __webpack_require__(223);
	var Signature = __webpack_require__(224);

	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

	    options = elliptic.curves[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof elliptic.curves.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.shrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	module.exports = EC;

	EC.prototype.keyPair = function keyPair(priv, pub) {
	  return new KeyPair(this, priv, pub);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new elliptic.hmacDRBG({
	    hash: this.hash,
	    pers: options.pers,
	    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
	    nonce: this.n.toArray()
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new bn(2));
	  do {
	    var priv = new bn(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyPair(priv);
	  } while (true);
	};

	EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.shrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key, options) {
	  key = this.keyPair(key, 'hex');
	  msg = this._truncateToN(new bn(msg, 16));
	  if (!options)
	    options = {};

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray();
	  for (var i = bkey.length; i < 21; i++)
	    bkey.unshift(0);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray();
	  for (var i = nonce.length; i < bytes; i++)
	    nonce.unshift(0);

	  // Instantiate Hmac_DRBG
	  var drbg = new elliptic.hmacDRBG({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new bn(1));
	  do {
	    var k = new bn(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var r = kp.getX().mod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg)).mod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0)
	      s = this.n.sub(s);

	    return new Signature(r, s);
	  } while (true);
	};

	EC.prototype.verify = function verify(msg, signature, key) {
	  msg = this._truncateToN(new bn(msg, 16));
	  key = this.keyPair(key, 'hex');
	  signature = new Signature(signature, 'hex');

	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).mod(this.n);
	  var u2 = sinv.mul(r).mod(this.n);

	  var p = this.g.mulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  return p.getX().mod(this.n).cmp(r) === 0;
	};


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var bn = __webpack_require__(20);

	var elliptic = __webpack_require__(21);
	var utils = elliptic.utils;

	function KeyPair(ec, priv, pub) {
	  if (priv instanceof KeyPair)
	    return priv;
	  if (pub instanceof KeyPair)
	    return pub;

	  if (!priv) {
	    priv = pub;
	    pub = null;
	  }
	  if (priv !== null && typeof priv === 'object') {
	    if (priv.x) {
	      // KeyPair(public)
	      pub = priv;
	      priv = null;
	    } else if (priv.priv || priv.pub) {
	      // KeyPair({ priv: ..., pub: ... })
	      pub = priv.pub;
	      priv = priv.priv;
	    }
	  }

	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(public, 'hex')
	  if (this._importPublicHex(priv, pub))
	    return;

	  if (pub === 'hex')
	    pub = null;

	  // KeyPair(priv, pub)
	  if (priv)
	    this._importPrivate(priv);
	  if (pub)
	    this._importPublic(pub);
	}
	module.exports = KeyPair;

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!enc)
	    return this.pub;

	  var len = this.ec.curve.p.byteLength();
	  var x = this.pub.getX().toArray();

	  for (var i = x.length; i < len; i++)
	    x.unshift(0);

	  if (compact) {
	    var res = [ this.pub.getY().isEven() ? 0x02 : 0x03 ].concat(x);
	  } else {
	    var y = this.pub.getY().toArray();
	    for (var i = y.length; i < len; i++)
	      y.unshift(0);
	    var res = [ 0x04 ].concat(x, y);
	  }
	  return utils.encode(res, enc);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key) {
	  this.priv = new bn(key, 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.mod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key) {
	  this.pub = this.ec.curve.point(key.x, key.y);
	};

	KeyPair.prototype._importPublicHex = function _importPublic(key, enc) {
	  key = utils.toArray(key, enc);
	  var len = this.ec.curve.p.byteLength();
	  if (key[0] === 0x04 && key.length - 1 === 2 * len) {
	    this.pub = this.ec.curve.point(
	      key.slice(1, 1 + len),
	      key.slice(1 + len, 1 + 2 * len));
	  } else if ((key[0] === 0x02 || key[0] === 0x03) && key.length - 1 === len) {
	    this.pub = this.ec.curve.pointFromX(key[0] === 0x03,
	                                        key.slice(1, 1 +len));
	  } else {
	    return false;
	  }

	  return true;
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg) {
	  return this.ec.sign(msg, this);
	};

	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var bn = __webpack_require__(20);

	var elliptic = __webpack_require__(21);
	var utils = elliptic.utils;

	function Signature(r, s) {
	  if (r instanceof Signature)
	    return r;

	  if (this._importDER(r, s))
	    return;

	  assert(r && s, 'Signature without r or s');
	  this.r = new bn(r, 16);
	  this.s = new bn(s, 16);
	}
	module.exports = Signature;

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils.toArray(data, enc);
	  if (data.length < 6 || data[0] !== 0x30 || data[2] !== 0x02)
	    return false;
	  var total = data[1];
	  if (1 + total > data.length)
	    return false;
	  var rlen = data[3];
	  // Short length notation
	  if (rlen >= 0x80)
	    return false;
	  if (4 + rlen + 2 >= data.length)
	    return false;
	  if (data[4 + rlen] !== 0x02)
	    return false;
	  var slen = data[5 + rlen];
	  // Short length notation
	  if (slen >= 0x80)
	    return false;
	  if (4 + rlen + 2 + slen > data.length)
	    return false;

	  this.r = new bn(data.slice(4, 4 + rlen));
	  this.s = new bn(data.slice(4 + rlen + 2, 4 + rlen + 2 + slen));

	  return true;
	};

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  var total = r.length + s.length + 4;
	  var res = [ 0x30, total, 0x02, r.length ];
	  res = res.concat(r, [ 0x02, s.length ], s);
	  return utils.encode(res, enc);
	};


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);

	var hash = __webpack_require__(41);
	var elliptic = __webpack_require__(21);
	var utils = elliptic.utils;

	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this.reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils.toArray(options.entropy, options.entropyEnc);
	  var nonce = utils.toArray(options.nonce, options.nonceEnc);
	  var pers = utils.toArray(options.pers, options.persEnc);
	  assert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	module.exports = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this.reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils.toBuffer(entropy, entropyEnc);
	  add = utils.toBuffer(add, addEnc);

	  assert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this.reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this.reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils.toArray(add, addEnc);
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this.reseed++;
	  return utils.encode(res, enc);
	};


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var assert = __webpack_require__(15);
	var bn = __webpack_require__(20);

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        var hi = c >> 8;
	        var lo = c & 0xff;
	        if (hi)
	          res.push(hi, lo);
	        else
	          res.push(lo);
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (var i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	// Represent num in a w-NAF form
	function getNAF(num, w) {
	  var naf = [];
	  var ws = 1 << (w + 1);
	  var k = num.clone();
	  while (k.cmpn(1) >= 0) {
	    var z;
	    if (k.isOdd()) {
	      var mod = k.andln(ws - 1);
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }
	    naf.push(z);

	    // Optimization, shift by word if possible
	    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
	    for (var i = 1; i < shift; i++)
	      naf.push(0);
	    k.ishrn(shift);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    []
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      var m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      var m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.ishrn(1);
	    k2.ishrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var r;

	module.exports = function rand(len) {
	  if (!r)
	    r = new Rand();

	  return r.generate(len);
	};

	function Rand() {
	}

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	if (typeof window === 'object') {
	  if (window.crypto && window.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      window.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (window.msCrypto && window.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      window.msCrypto.getRandomValues(arr);
	      return arr;
	    };
	  } else {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js
	  var crypto;
	  Rand.prototype._rand = function _rand(n) {
	    if (!crypto)
	      crypto = __webpack_require__(77);
	    return crypto.randomBytes(n);
	  };
	}


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(41);
	var utils = hash.utils;
	var assert = utils.assert;

	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	exports.BlockHash = BlockHash;

	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + 8) % bytes);
	  var res = new Array(k + 8);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	  }

	  return res;
	}


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var hmac = exports;

	var hash = __webpack_require__(41);
	var utils = hash.utils;
	var assert = utils.assert;

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils.toArray(key, enc));
	}
	module.exports = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  assert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (var i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (var i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(41);
	var utils = hash.utils;

	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_3 = utils.sum32_3;
	var sum32_4 = utils.sum32_4;
	var BlockHash = hash.common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash);
	exports.ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32(
	      rotl32(
	        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32(C, 10);
	    C = B;
	    B = T;
	    T = sum32(
	      rotl32(
	        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var hash = __webpack_require__(41);
	var utils = hash.utils;
	var assert = utils.assert;

	var rotr32 = utils.rotr32;
	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_4 = utils.sum32_4;
	var sum32_5 = utils.sum32_5;
	var BlockHash = hash.common.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash.call(this);
	  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash);
	exports.sha256 = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i++) {
	    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
	    var T2 = sum32(s0_256(a), maj32(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32(T1, T2);
	  }

	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	  this.h[5] = sum32(this.h[5], f);
	  this.h[6] = sum32(this.h[6], g);
	  this.h[7] = sum32(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  SHA256.call(this);
	  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, SHA256);
	exports.sha224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash.call(this);
	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
	             0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils.inherits(SHA1, BlockHash);
	exports.sha1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (var i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}

	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}

	function s0_256(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}

	function s1_256(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}

	function g0_256(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}

	function g1_256(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}

	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z)
	  if (s === 2)
	    return maj32(x, y, z)
	}


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var utils = exports;
	var inherits = __webpack_require__(42);

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        var hi = c >> 8;
	        var lo = c & 0xff;
	        if (hi)
	          res.push(hi, lo);
	        else
	          res.push(lo);
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 != 0)
	        msg = '0' + msg;
	      for (var i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	utils.toArray = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little') {
	      w = (w >>> 24) |
	          ((w >>> 8) & 0xff00) |
	          ((w << 8) & 0xff0000) |
	          ((w & 0xff) << 24);
	      if (w < 0)
	        w += 0x100000000;
	    }
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	utils.toHex32 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	utils.zero8 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    if (w < 0)
	      w += 0x100000000;
	    res[i] = w;
	  }
	  return res;
	}
	utils.join32 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	utils.split32 = split32;

	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	utils.rotr32 = rotr32;

	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	utils.rotl32 = rotl32;

	function sum32(a, b) {
	  var r = (a + b) & 0xffffffff;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	utils.sum32 = sum32;

	function sum32_3(a, b, c) {
	  var r = (a + b + c) & 0xffffffff;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	utils.sum32_3 = sum32_3;

	function sum32_4(a, b, c, d) {
	  var r = (a + b + c + d) & 0xffffffff;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	utils.sum32_4 = sum32_4;

	function sum32_5(a, b, c, d, e) {
	  var r = (a + b + c + d + e) & 0xffffffff;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}
	utils.sum32_5 = sum32_5;

	function assert(cond, msg) {
	  if (!cond)
	    throw new Error(msg || 'Assertion failed');
	}
	utils.assert = assert;

	utils.inherits = inherits;


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var WordArray = __webpack_require__(87)

	var Base = (function () {
	  function F() {}

	  return {
	    /**
	     * Creates a new object that inherits from this object.
	     *
	     * @param {Object} overrides Properties to copy into the new object.
	     *
	     * @return {Object} The new object.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var MyType = CryptoJS.lib.Base.extend({
	     *         field: 'value',
	     *
	     *         method: function () {
	     *         }
	     *     });
	     */
	    extend: function (overrides) {
	      // Spawn
	      F.prototype = this;
	      var subtype = new F();

	      // Augment
	      if (overrides) {
	        subtype.mixIn(overrides);
	      }

	      // Create default initializer
	      if (!subtype.hasOwnProperty('init')) {
	        subtype.init = function () {
	          subtype.$super.init.apply(this, arguments);
	        };
	      }

	      // Initializer's prototype is the subtype object
	      subtype.init.prototype = subtype;

	      // Reference supertype
	      subtype.$super = this;

	      return subtype;
	    },

	    /**
	     * Extends this object and runs the init method.
	     * Arguments to create() will be passed to init().
	     *
	     * @return {Object} The new object.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var instance = MyType.create();
	     */
	    create: function () {
	      var instance = this.extend();
	      instance.init.apply(instance, arguments);

	      return instance;
	    },

	    /**
	     * Initializes a newly created object.
	     * Override this method to add some logic when your objects are created.
	     *
	     * @example
	     *
	     *     var MyType = CryptoJS.lib.Base.extend({
	     *         init: function () {
	     *             // ...
	     *         }
	     *     });
	     */
	      init: function () {
	    },


	    mixIn: function (properties) {
	      for (var propertyName in properties) {
	        if (properties.hasOwnProperty(propertyName)) {
	          this[propertyName] = properties[propertyName];
	        }
	      }

	      // IE won't copy toString using the loop above
	      if (properties.hasOwnProperty('toString')) {
	        this.toString = properties.toString;
	      }
	    },


	    clone: function () {
	      return this.init.prototype.extend(this);
	    }
	  };
	}());


	/**
	 * Abstract buffered block algorithm template.
	 *
	 * The property blockSize must be implemented in a concrete subtype.
	 *
	 * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	 */
	var BufferedBlockAlgorithm = Base.extend({
	  /**
	   * Resets this block algorithm's data buffer to its initial state.
	   *
	   * @example
	   *
	   *     bufferedBlockAlgorithm.reset();
	   */
	    reset: function () {
	      // Initial values
	      this._data = new WordArray();
	      this._nDataBytes = 0;
	    },

	    /**
	     * Adds new data to this block algorithm's buffer.
	     *
	     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	     *
	     * @example
	     *
	     *     bufferedBlockAlgorithm._append('data');
	     *     bufferedBlockAlgorithm._append(wordArray);
	     */
	    _append: function (data) {
	      //console.dir(data)

	      if (Buffer.isBuffer(data)) {
	        data = WordArray.fromBuffer(data)
	      }

	      // Append
	      this._data.concat(data);
	      this._nDataBytes += data.sigBytes;
	    },

	    /**
	     * Processes available data blocks.
	     *
	     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	     *
	     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	     *
	     * @return {WordArray} The processed data.
	     *
	     * @example
	     *
	     *     var processedData = bufferedBlockAlgorithm._process();
	     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	     */
	    _process: function (doFlush) {
	      // Shortcuts
	      var data = this._data;
	      var dataWords = data.words;
	      var dataSigBytes = data.sigBytes;
	      var blockSize = this.blockSize;
	      var blockSizeBytes = blockSize * 4;

	      // Count blocks ready
	      var nBlocksReady = dataSigBytes / blockSizeBytes;
	      if (doFlush) {
	          // Round up to include partial blocks
	          nBlocksReady = Math.ceil(nBlocksReady);
	      } else {
	          // Round down to include only full blocks,
	          // less the number of blocks that must remain in the buffer
	          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	      }

	      // Count words ready
	      var nWordsReady = nBlocksReady * blockSize;

	      // Count bytes ready
	      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	      // Process blocks
	      if (nWordsReady) {
	        for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	          // Perform concrete-algorithm logic
	          this._doProcessBlock(dataWords, offset);
	        }

	        // Remove processed words
	        var processedWords = dataWords.splice(0, nWordsReady);
	        data.sigBytes -= nBytesReady;
	      }

	      // Return processed words
	      return new WordArray(processedWords, nBytesReady);
	    },

	    /**
	     * Creates a copy of this object.
	     * @example
	     *
	     *     var clone = bufferedBlockAlgorithm.clone();
	     */
	    clone: function () {
	      var clone = Base.clone.call(this);
	      clone._data = this._data.clone();

	      return clone;
	    },

	      _minBufferSize: 0
	    });

	/**
	 * Abstract hasher template.
	 *
	 * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	 */
	var Hasher = BufferedBlockAlgorithm.extend({
	  /**
	   * Configuration options.
	   */
	  cfg: Base.extend(),

	  /**
	   * Initializes a newly created hasher.
	   * @example
	   *
	   *     var hasher = CryptoJS.algo.SHA256.create();
	   */
	  init: function (cfg) {
	    // Apply config defaults
	    this.cfg = this.cfg.extend(cfg);

	    // Set initial values
	    this.reset();
	  },

	  reset: function () {
	    // Reset data buffer
	    BufferedBlockAlgorithm.reset.call(this);

	    // Perform concrete-hasher logic
	    this._doReset();
	  },

	  update: function (messageUpdate) {
	    if (typeof messageUpdate == 'string')
	      messageUpdate = WordArray.fromBuffer(new Buffer(messageUpdate, 'utf8'))

	    if (Buffer.isBuffer(messageUpdate))
	      messageUpdate = WordArray.fromBuffer(messageUpdate)

	    // Append
	    this._append(messageUpdate);

	    // Update the hash
	    this._process();

	    // Chainable
	    return this;
	  },

	  finalize: function (messageUpdate) {
	    if (typeof messageUpdate == 'string')
	      messageUpdate = WordArray.fromBuffer(new Buffer(messageUpdate, 'utf8'))

	    if (Buffer.isBuffer(messageUpdate))
	      messageUpdate = WordArray.fromBuffer(messageUpdate)


	    // Final message update
	    if (messageUpdate) {
	      this._append(messageUpdate);
	    }

	    // Perform concrete-hasher logic
	    var hash = this._doFinalize();

	    return hash.toBuffer()
	  },

	  blockSize: 512/32,

	  /** TODO: DELETE
	   * Creates a shortcut function to a hasher's object interface.
	   * @example
	   *
	   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	   */
	  _createHelper: function (hasher) {
	    return function (message, cfg) {
	      return new hasher.init(cfg).finalize(message);
	    };
	  }

	});

	module.exports.Hasher = Hasher


	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var sha512 = __webpack_require__(129).sha512
	var WordArray = __webpack_require__(87)

	function HMAC(key) {
	  if (!(this instanceof HMAC))
	    return new HMAC(key)

	  // Init hasher
	  var hasher = this._hasher = new sha512.init()//new hasher.init();

	  // Convert string to WordArray, else assume WordArray already
	  if (typeof key == 'string') {
	    key = WordArray.fromBuffer(new Buffer(key, 'utf8'));
	  }

	  if (Buffer.isBuffer(key)) {
	    key = WordArray.fromBuffer(key)
	  }

	  // Shortcuts
	  var hasherBlockSize = hasher.blockSize;
	  var hasherBlockSizeBytes = hasherBlockSize * 4;

	  // Allow arbitrary length keys
	  if (key.sigBytes > hasherBlockSizeBytes) {
	      key = hasher.finalize(key);
	  }

	  // Clamp excess bits
	  key.clamp();

	  // Clone key for inner and outer pads
	  var oKey = this._oKey = key.clone();
	  var iKey = this._iKey = key.clone();

	  // Shortcuts
	  var oKeyWords = oKey.words;
	  var iKeyWords = iKey.words;

	  // XOR keys with pad constants
	  for (var i = 0; i < hasherBlockSize; i++) {
	    oKeyWords[i] ^= 0x5c5c5c5c;
	    iKeyWords[i] ^= 0x36363636;
	  }
	  oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	  // Set initial values
	  this.reset();
	}

	HMAC.prototype.reset = function () {
	  // Shortcut
	  var hasher = this._hasher;

	  // Reset
	  hasher.reset();
	  hasher.update(this._iKey);
	}

	HMAC.prototype.update = function (messageUpdate) {
	  if (typeof messageUpdate == 'string')
	    messageUpdate = WordArray.fromBuffer(new Buffer(messageUpdate, 'utf8'))

	  if (Buffer.isBuffer(messageUpdate))
	    messageUpdate = WordArray.fromBuffer(messageUpdate)

	  this._hasher.update(messageUpdate);

	  // Chainable
	  return this;
	}

	HMAC.prototype.finalize = function (messageUpdate) {
	   if (typeof messageUpdate == 'string')
	    messageUpdate = WordArray.fromBuffer(new Buffer(messageUpdate, 'utf8'))

	  if (Buffer.isBuffer(messageUpdate))
	    messageUpdate = WordArray.fromBuffer(messageUpdate)

	  // Shortcut
	  var hasher = this._hasher;

	  // Compute HMAC
	  var innerHash = hasher.finalize(messageUpdate);
	  hasher.reset();
	  var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	  return hmac;
	}
	  

	module.exports = HMAC
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(129)
	module.exports.hmac = __webpack_require__(234)

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var X32WordArray = __webpack_require__(87)


	function X64Word(high, low) {
	  if (!(this instanceof X64Word)) return new X64Word(high, low)
	  this.high = high
	  this.low = low
	}

	function X64WordArray (words) {
	  this.words = words || [];
	}

	/**
	 * Converts this 64-bit word array to a 32-bit word array.
	 */
	X64WordArray.prototype.toX32 = function () {
	  // Shortcuts
	  var x64Words = this.words;
	  var x64WordsLength = x64Words.length;

	  // Convert
	  var x32Words = [];
	  for (var i = 0; i < x64WordsLength; i++) {
	      var x64Word = x64Words[i];
	      x32Words.push(x64Word.high);
	      x32Words.push(x64Word.low);
	  }

	  return new X32WordArray(x32Words, this.sigBytes);
	}


	module.exports.Word = X64Word
	module.exports.WordArray = X64WordArray



/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var MurmurHash3 = __webpack_require__(131);

	/**
	 * A Bloom Filter implemented as for use in Bitcoin Connection Bloom Filtering (BIP37) that
	 * uses version 3 of the 32-bit Murmur hash function.
	 *
	 * @see https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki
	 * @see https://github.com/bitcoin/bitcoin/blob/master/src/bloom.cpp
	 *
	 * @param {Object} data - The data object used to initialize the filter.
	 * @param {Array} data.vData - The data of the bloom filter.
	 * @param {Number} data.nHashFuncs - The number of hash functions.
	 * @param {Number} data.nTweak - A random value to seed the hash functions.
	 * @param {Number} data.nFlag - A flag to determine how matched items are added to the filter.
	 * @constructor
	 */
	function Filter(arg) {
	  /* jshint maxcomplexity: 10 */
	  if (typeof(arg) === 'object') {
	    if (!arg.vData) {
	      throw new TypeError('Data object should include filter data "vData"');
	    }
	    this.vData = arg.vData;
	    if (!arg.nHashFuncs) {
	      throw new TypeError('Data object should include number of hash functions "nHashFuncs"');
	    }
	    this.nHashFuncs = arg.nHashFuncs;
	    this.nTweak = arg.nTweak || 0;
	    this.nFlags = arg.nFlags || Filter.BLOOM_UPDATE_NONE;
	  } else {
	    throw new TypeError('Unrecognized argument');
	  }
	}

	Filter.prototype.toObject = function toObject() {
	  return {
	    vData: this.vData,
	    nHashFuncs: this.nHashFuncs,
	    nTweak: this.nTweak,
	    nFlags: this.nFlags
	  };
	};

	Filter.create = function create(elements, falsePositiveRate, nTweak, nFlags) {
	  /* jshint maxstatements: 18 */

	  var info = {};

	  // The ideal size for a bloom filter with a given number of elements and false positive rate is:
	  // * - nElements * log(fp rate) / ln(2)^2
	  // See: https://github.com/bitcoin/bitcoin/blob/master/src/bloom.cpp
	  var size = -1.0 / Filter.LN2SQUARED * elements * Math.log(falsePositiveRate);
	  var filterSize = Math.floor(size / 8);
	  var max = Filter.MAX_BLOOM_FILTER_SIZE * 8;
	  if (filterSize > max) {
	    filterSize = max;
	  }
	  info.vData = [];
	  for (var i = 0; i < filterSize; i++) {
	    info.vData.push(0);
	  }

	  // The ideal number of hash functions is:
	  // filter size * ln(2) / number of elements
	  // See: https://github.com/bitcoin/bitcoin/blob/master/src/bloom.cpp
	  var nHashFuncs = Math.floor(info.vData.length * 8 / elements * Filter.LN2);
	  if (nHashFuncs > Filter.MAX_HASH_FUNCS) {
	    nHashFuncs = Filter.MAX_HASH_FUNCS;
	  }
	  if (nHashFuncs < Filter.MIN_HASH_FUNCS) {
	    nHashFuncs = Filter.MIN_HASH_FUNCS;
	  }

	  info.nHashFuncs = nHashFuncs;
	  info.nTweak = nTweak;
	  info.nFlags = nFlags;

	  return new Filter(info);

	};

	Filter.prototype.hash = function hash(nHashNum, vDataToHash) {
	  var h = MurmurHash3(((nHashNum * 0xFBA4C795) + this.nTweak) & 0xFFFFFFFF, vDataToHash);
	  return h % (this.vData.length * 8);
	};

	Filter.prototype.insert = function insert(data) {
	  for (var i = 0; i < this.nHashFuncs; i++) {
	    var index = this.hash(i, data);
	    var position = (1 << (7 & index));
	    this.vData[index >> 3] |= position;
	  }
	  return this;
	};

	/**
	 * @param {Buffer} Data to check if exists in the filter
	 * @returns {Boolean} If the data matches
	 */
	Filter.prototype.contains = function contains(data) {
	  if (!this.vData.length) {
	    return false;
	  }
	  for (var i = 0; i < this.nHashFuncs; i++) {
	    var index = this.hash(i, data);
	    if (!(this.vData[index >> 3] & (1 << (7 & index)))) {
	      return false;
	    }
	  }
	  return true;
	};

	Filter.prototype.clear = function clear() {
	  this.vData = [];
	};

	Filter.prototype.inspect = function inspect() {
	  return '<BloomFilter:' +
	    this.vData + ' nHashFuncs:' +
	    this.nHashFuncs + ' nTweak:' +
	    this.nTweak + ' nFlags:' +
	    this.nFlags + '>';
	};

	Filter.BLOOM_UPDATE_NONE = 0;
	Filter.BLOOM_UPDATE_ALL = 1;
	Filter.BLOOM_UPDATE_P2PUBKEY_ONLY = 2;
	Filter.MAX_BLOOM_FILTER_SIZE = 36000; // bytes
	Filter.MAX_HASH_FUNCS = 50;
	Filter.MIN_HASH_FUNCS = 1;
	Filter.LN2SQUARED = Math.pow(Math.log(2), 2); // 0.4804530139182014246671025263266649717305529515945455
	Filter.LN2 = Math.log(2); // 0.6931471805599453094172321214581765680755001343602552

	module.exports = Filter;


/***/ },
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {(function() {
	  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root;

	  ipaddr = {};

	  root = this;

	  if ((typeof module !== "undefined" && module !== null) && module.exports) {
	    module.exports = ipaddr;
	  } else {
	    root['ipaddr'] = ipaddr;
	  }

	  matchCIDR = function(first, second, partSize, cidrBits) {
	    var part, shift;
	    if (first.length !== second.length) {
	      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
	    }
	    part = 0;
	    while (cidrBits > 0) {
	      shift = partSize - cidrBits;
	      if (shift < 0) {
	        shift = 0;
	      }
	      if (first[part] >> shift !== second[part] >> shift) {
	        return false;
	      }
	      cidrBits -= partSize;
	      part += 1;
	    }
	    return true;
	  };

	  ipaddr.subnetMatch = function(address, rangeList, defaultName) {
	    var rangeName, rangeSubnets, subnet, _i, _len;
	    if (defaultName == null) {
	      defaultName = 'unicast';
	    }
	    for (rangeName in rangeList) {
	      rangeSubnets = rangeList[rangeName];
	      if (toString.call(rangeSubnets[0]) !== '[object Array]') {
	        rangeSubnets = [rangeSubnets];
	      }
	      for (_i = 0, _len = rangeSubnets.length; _i < _len; _i++) {
	        subnet = rangeSubnets[_i];
	        if (address.match.apply(address, subnet)) {
	          return rangeName;
	        }
	      }
	    }
	    return defaultName;
	  };

	  ipaddr.IPv4 = (function() {
	    function IPv4(octets) {
	      var octet, _i, _len;
	      if (octets.length !== 4) {
	        throw new Error("ipaddr: ipv4 octet count should be 4");
	      }
	      for (_i = 0, _len = octets.length; _i < _len; _i++) {
	        octet = octets[_i];
	        if (!((0 <= octet && octet <= 255))) {
	          throw new Error("ipaddr: ipv4 octet is a byte");
	        }
	      }
	      this.octets = octets;
	    }

	    IPv4.prototype.kind = function() {
	      return 'ipv4';
	    };

	    IPv4.prototype.toString = function() {
	      return this.octets.join(".");
	    };

	    IPv4.prototype.toByteArray = function() {
	      return this.octets.slice(0);
	    };

	    IPv4.prototype.match = function(other, cidrRange) {
	      if (other.kind() !== 'ipv4') {
	        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
	      }
	      return matchCIDR(this.octets, other.octets, 8, cidrRange);
	    };

	    IPv4.prototype.SpecialRanges = {
	      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
	      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
	    };

	    IPv4.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv4.prototype.toIPv4MappedAddress = function() {
	      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
	    };

	    return IPv4;

	  })();

	  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

	  ipv4Regexes = {
	    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
	    longValue: new RegExp("^" + ipv4Part + "$", 'i')
	  };

	  ipaddr.IPv4.parser = function(string) {
	    var match, parseIntAuto, part, shift, value;
	    parseIntAuto = function(string) {
	      if (string[0] === "0" && string[1] !== "x") {
	        return parseInt(string, 8);
	      } else {
	        return parseInt(string);
	      }
	    };
	    if (match = string.match(ipv4Regexes.fourOctet)) {
	      return (function() {
	        var _i, _len, _ref, _results;
	        _ref = match.slice(1, 6);
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(parseIntAuto(part));
	        }
	        return _results;
	      })();
	    } else if (match = string.match(ipv4Regexes.longValue)) {
	      value = parseIntAuto(match[1]);
	      if (value > 0xffffffff || value < 0) {
	        throw new Error("ipaddr: address outside defined range");
	      }
	      return ((function() {
	        var _i, _results;
	        _results = [];
	        for (shift = _i = 0; _i <= 24; shift = _i += 8) {
	          _results.push((value >> shift) & 0xff);
	        }
	        return _results;
	      })()).reverse();
	    } else {
	      return null;
	    }
	  };

	  ipaddr.IPv6 = (function() {
	    function IPv6(parts) {
	      var part, _i, _len;
	      if (parts.length !== 8) {
	        throw new Error("ipaddr: ipv6 part count should be 8");
	      }
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (!((0 <= part && part <= 0xffff))) {
	          throw new Error("ipaddr: ipv6 part should fit to two octets");
	        }
	      }
	      this.parts = parts;
	    }

	    IPv6.prototype.kind = function() {
	      return 'ipv6';
	    };

	    IPv6.prototype.toString = function() {
	      var compactStringParts, part, pushPart, state, stringParts, _i, _len;
	      stringParts = (function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this);
	      compactStringParts = [];
	      pushPart = function(part) {
	        return compactStringParts.push(part);
	      };
	      state = 0;
	      for (_i = 0, _len = stringParts.length; _i < _len; _i++) {
	        part = stringParts[_i];
	        switch (state) {
	          case 0:
	            if (part === '0') {
	              pushPart('');
	            } else {
	              pushPart(part);
	            }
	            state = 1;
	            break;
	          case 1:
	            if (part === '0') {
	              state = 2;
	            } else {
	              pushPart(part);
	            }
	            break;
	          case 2:
	            if (part !== '0') {
	              pushPart('');
	              pushPart(part);
	              state = 3;
	            }
	            break;
	          case 3:
	            pushPart(part);
	        }
	      }
	      if (state === 2) {
	        pushPart('');
	        pushPart('');
	      }
	      return compactStringParts.join(":");
	    };

	    IPv6.prototype.toByteArray = function() {
	      var bytes, part, _i, _len, _ref;
	      bytes = [];
	      _ref = this.parts;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        bytes.push(part >> 8);
	        bytes.push(part & 0xff);
	      }
	      return bytes;
	    };

	    IPv6.prototype.toNormalizedString = function() {
	      var part;
	      return ((function() {
	        var _i, _len, _ref, _results;
	        _ref = this.parts;
	        _results = [];
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          part = _ref[_i];
	          _results.push(part.toString(16));
	        }
	        return _results;
	      }).call(this)).join(":");
	    };

	    IPv6.prototype.match = function(other, cidrRange) {
	      if (other.kind() !== 'ipv6') {
	        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
	      }
	      return matchCIDR(this.parts, other.parts, 16, cidrRange);
	    };

	    IPv6.prototype.SpecialRanges = {
	      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	    };

	    IPv6.prototype.range = function() {
	      return ipaddr.subnetMatch(this, this.SpecialRanges);
	    };

	    IPv6.prototype.isIPv4MappedAddress = function() {
	      return this.range() === 'ipv4Mapped';
	    };

	    IPv6.prototype.toIPv4Address = function() {
	      var high, low, _ref;
	      if (!this.isIPv4MappedAddress()) {
	        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
	      }
	      _ref = this.parts.slice(-2), high = _ref[0], low = _ref[1];
	      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	    };

	    return IPv6;

	  })();

	  ipv6Part = "(?:[0-9a-f]+::?)+";

	  ipv6Regexes = {
	    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?$", 'i'),
	    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + ("" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$"), 'i')
	  };

	  expandIPv6 = function(string, parts) {
	    var colonCount, lastColon, part, replacement, replacementCount;
	    if (string.indexOf('::') !== string.lastIndexOf('::')) {
	      return null;
	    }
	    colonCount = 0;
	    lastColon = -1;
	    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	      colonCount++;
	    }
	    if (string[0] === ':') {
	      colonCount--;
	    }
	    if (string[string.length - 1] === ':') {
	      colonCount--;
	    }
	    replacementCount = parts - colonCount;
	    replacement = ':';
	    while (replacementCount--) {
	      replacement += '0:';
	    }
	    string = string.replace('::', replacement);
	    if (string[0] === ':') {
	      string = string.slice(1);
	    }
	    if (string[string.length - 1] === ':') {
	      string = string.slice(0, -1);
	    }
	    return (function() {
	      var _i, _len, _ref, _results;
	      _ref = string.split(":");
	      _results = [];
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        part = _ref[_i];
	        _results.push(parseInt(part, 16));
	      }
	      return _results;
	    })();
	  };

	  ipaddr.IPv6.parser = function(string) {
	    var match, parts;
	    if (string.match(ipv6Regexes['native'])) {
	      return expandIPv6(string, 8);
	    } else if (match = string.match(ipv6Regexes['transitional'])) {
	      parts = expandIPv6(match[1].slice(0, -1), 6);
	      if (parts) {
	        parts.push(parseInt(match[2]) << 8 | parseInt(match[3]));
	        parts.push(parseInt(match[4]) << 8 | parseInt(match[5]));
	        return parts;
	      }
	    }
	    return null;
	  };

	  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
	    return this.parser(string) !== null;
	  };

	  ipaddr.IPv4.isValid = ipaddr.IPv6.isValid = function(string) {
	    var e;
	    try {
	      new this(this.parser(string));
	      return true;
	    } catch (_error) {
	      e = _error;
	      return false;
	    }
	  };

	  ipaddr.IPv4.parse = ipaddr.IPv6.parse = function(string) {
	    var parts;
	    parts = this.parser(string);
	    if (parts === null) {
	      throw new Error("ipaddr: string is not formatted like ip address");
	    }
	    return new this(parts);
	  };

	  ipaddr.isValid = function(string) {
	    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	  };

	  ipaddr.parse = function(string) {
	    if (ipaddr.IPv6.isValid(string)) {
	      return ipaddr.IPv6.parse(string);
	    } else if (ipaddr.IPv4.isValid(string)) {
	      return ipaddr.IPv4.parse(string);
	    } else {
	      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
	    }
	  };

	  ipaddr.process = function(string) {
	    var addr;
	    addr = this.parse(string);
	    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	      return addr.toIPv4Address();
	    } else {
	      return addr;
	    }
	  };

	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)(module)))

/***/ },
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "bitcore-p2p",
		"version": "0.10.0",
		"description": "Interface to the bitcoin P2P network for bitcore",
		"author": {
			"name": "BitPay",
			"email": "dev@bitpay.com"
		},
		"main": "index.js",
		"scripts": {
			"lint": "gulp lint",
			"test": "gulp test:node",
			"coverage": "gulp coverage",
			"build": "gulp"
		},
		"contributors": [
			{
				"name": "Yemel Jardi",
				"email": "yemel@bitpay.com"
			},
			{
				"name": "Braydon Fuller",
				"email": "braydon@bitpay.com"
			},
			{
				"name": "Ryan X. Charles",
				"email": "ryan@bitpay.com"
			},
			{
				"name": "Eric Martindale",
				"email": "eric@bitpay.com"
			},
			{
				"name": "Philip Hutchins",
				"email": "philip@bitpay.com"
			},
			{
				"name": "Manuel Araoz",
				"email": "maraoz@bitpay.com"
			},
			{
				"name": "Esteban Ordano",
				"email": "eordano@gmail.com"
			},
			{
				"name": "Elichai Turkel"
			}
		],
		"keywords": [
			"bitcoin",
			"bitcore"
		],
		"repository": {
			"type": "git",
			"url": "https://github.com/bitpay/bitcore-p2p.git"
		},
		"dependencies": {
			"bitcore": "^0.10.2",
			"bloom-filter": "^0.1.1",
			"bufferput": "^0.1.2",
			"buffers": "^0.1.1",
			"socks5-client": "^0.3.6"
		},
		"devDependencies": {
			"bitcore-build": "git://github.com/bitpay/bitcore-build.git",
			"brfs": "^1.2.0",
			"chai": "~1.10.0",
			"gulp": "^3.8.10",
			"sinon": "^1.12.2"
		},
		"license": "MIT",
		"gitHead": "4cad909a1f8902e8708825e75d1b6a4fc2243dcf",
		"readme": "P2P Networking capabilities for bitcore\n=======\n\n[![NPM Package](https://img.shields.io/npm/v/bitcore-p2p.svg?style=flat-square)](https://www.npmjs.org/package/bitcore-p2p)\n[![Build Status](https://img.shields.io/travis/bitpay/bitcore-p2p.svg?branch=master&style=flat-square)](https://travis-ci.org/bitpay/bitcore-p2p)\n[![Coverage Status](https://img.shields.io/coveralls/bitpay/bitcore-p2p.svg?style=flat-square)](https://coveralls.io/r/bitpay/bitcore-p2p?branch=master)\n\nbitcore-p2p adds support for connecting to the bitcoin p2p network in [Node.js](http://nodejs.org/).\n\nSee [the main bitcore repo](https://github.com/bitpay/bitcore) for more information.\n\n## Getting Started\n\n```sh\nnpm install bitcore-p2p\n```\nIn order to connect to the bitcore network, you'll need to know the IP address of at least one node of the network. You can do that by using the known DNS servers. Then, you can connect to it:\n\n```javascript\nvar Peer = require('bitcore-p2p').Peer;\n\nvar peer = new Peer('0.0.0.0');\n\npeer.on('ready', function() {\n  // peer info\n  console.log(peer.version, peer.subversion, peer.bestHeight);\n});\npeer.on('disconnect', function() {\n  console.log('connection closed');\n});\npeer.connect();\n```\n\nThen, you can get information from other peers by using:\n\n```javascript\n// handle events\npeer.on('inv', function(message) {\n  // message.inventory[]\n});\npeer.on('tx', function(message) {\n  // message.transaction\n});\n```\n\nTake a look at the [bitcore guide](http://bitcore.io/guide/peer.html) on the usage of the `Peer` class.\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/bitpay/bitcore) on the main bitcore repo for information about how to contribute.\n\n## License\n\nCode released under [the MIT license](https://github.com/bitpay/bitcore/blob/master/LICENSE).\n\nCopyright 2013-2015 BitPay, Inc. Bitcore is a trademark maintained by BitPay, Inc.\n\n",
		"readmeFilename": "README.md",
		"bugs": {
			"url": "https://github.com/bitpay/bitcore-p2p/issues"
		},
		"homepage": "https://github.com/bitpay/bitcore-p2p",
		"_id": "bitcore-p2p@0.10.0",
		"_shasum": "0b918f42379aa6928e2b723d06a330503c9269dd",
		"_from": "../../../../../var/folders/ht/zgv6kqxn6w7gklpbs8qp7bpr0000gn/T/npm-12499-be857f90/git-cache-f09410939957/4cad909a1f8902e8708825e75d1b6a4fc2243dcf",
		"_resolved": "git://github.com/throughnothing/bitcore-p2p.git#4cad909a1f8902e8708825e75d1b6a4fc2243dcf"
	}

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "elliptic",
		"version": "0.16.0",
		"description": "EC cryptography",
		"main": "lib/elliptic.js",
		"scripts": {
			"test": "mocha --reporter=spec test/*-test.js"
		},
		"repository": {
			"type": "git",
			"url": "git@github.com:indutny/elliptic"
		},
		"keywords": [
			"EC",
			"Elliptic",
			"curve",
			"Cryptography"
		],
		"author": {
			"name": "Fedor Indutny",
			"email": "fedor@indutny.com"
		},
		"license": "MIT",
		"bugs": {
			"url": "https://github.com/indutny/elliptic/issues"
		},
		"homepage": "https://github.com/indutny/elliptic",
		"devDependencies": {
			"browserify": "^3.44.2",
			"mocha": "^1.18.2",
			"uglify-js": "^2.4.13"
		},
		"dependencies": {
			"bn.js": "^0.16.0",
			"brorand": "^1.0.1",
			"hash.js": "^0.3.2",
			"inherits": "^2.0.1"
		},
		"readme": "# Elliptic [![Build Status](https://secure.travis-ci.org/indutny/elliptic.png)](http://travis-ci.org/indutny/elliptic)\n\nFast elliptic-curve cryptography in a plain javascript implementation.\n\nNOTE: Please take a look at http://safecurves.cr.yp.to/ before choosing a curve\nfor your cryptography operations.\n\n## Incentive\n\nECC is much slower than regular RSA cryptography, the JS implementations are\neven more slower.\n\n## Benchmarks\n\n```bash\n$ node benchmarks/index.js\nBenchmarking: sign\nelliptic#sign x 262 ops/sec ±0.51% (177 runs sampled)\neccjs#sign x 55.91 ops/sec ±0.90% (144 runs sampled)\n------------------------\nFastest is elliptic#sign\n========================\nBenchmarking: verify\nelliptic#verify x 113 ops/sec ±0.50% (166 runs sampled)\neccjs#verify x 48.56 ops/sec ±0.36% (125 runs sampled)\n------------------------\nFastest is elliptic#verify\n========================\nBenchmarking: gen\nelliptic#gen x 294 ops/sec ±0.43% (176 runs sampled)\neccjs#gen x 62.25 ops/sec ±0.63% (129 runs sampled)\n------------------------\nFastest is elliptic#gen\n========================\nBenchmarking: ecdh\nelliptic#ecdh x 136 ops/sec ±0.85% (156 runs sampled)\n------------------------\nFastest is elliptic#ecdh\n========================\n```\n\n## API\n\n### ECDSA\n\n```javascript\nvar EC = require('elliptic').ec;\n\n// Create and initialize EC context\n// (better do it once and reuse it)\nvar ec = new EC('secp256k1');\n\n// Generate keys\nvar key = ec.genKeyPair();\n\n// Sign message (must be an array, or it'll be treated as a hex sequence)\nvar msg = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nvar signature = key.sign(msg);\n\n// Export DER encoded signature in Array\nvar derSign = signature.toDER();\n\n// Verify signature\nconsole.log(key.verify(msg, derSign));\n```\n\n### ECDH\n\n```javascript\n// Generate keys\nvar key1 = ec.genKeyPair();\nvar key2 = ec.genKeyPair();\n\nvar shared1 = key1.derive(key2.getPublic());\nvar shared2 = key2.derive(key1.getPublic());\n\nconsole.log('Both shared secrets are BN instances');\nconsole.log(shared1.toString(16));\nconsole.log(shared2.toString(16));\n```\n\nNOTE: `.derive()` returns a [BN][1] instance.\n\n## Supported curves\n\nElliptic.js support following curve types:\n\n* Short Weierstrass\n* Montgomery\n* Edwards\n* Twisted Edwards\n\nFollowing curve 'presets' are embedded into the library:\n\n* `secp256k1`\n* `p192`\n* `p224`\n* `p256`\n* `curve25519`\n* `ed25519`\n\nNOTE: That `curve25519` could not be used for ECDSA, use `ed25519` instead.\n\n### Implementation details\n\nECDSA is using deterministic `k` value generation as per [RFC6979][0]. Most of\nthe curve operations are performed on non-affine coordinates (either projective\nor extended), various windowing techniques are used for different cases.\n\nAll operations are performed in reduction context using [bn.js][1], hashing is\nprovided by [hash.js][2]\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2014.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://tools.ietf.org/html/rfc6979\n[1]: https://github.com/indutny/bn.js\n[2]: https://github.com/indutny/hash.js\n",
		"readmeFilename": "README.md",
		"_id": "elliptic@0.16.0",
		"_shasum": "9bc84e75ccd97e3e452c97371726c535314d1a57",
		"_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-0.16.0.tgz",
		"_from": "https://registry.npmjs.org/elliptic/-/elliptic-0.16.0.tgz"
	}

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
		"name": "bitcore",
		"version": "0.10.4",
		"description": "A pure and powerful JavaScript Bitcoin library.",
		"author": {
			"name": "BitPay",
			"email": "dev@bitpay.com"
		},
		"main": "index.js",
		"scripts": {
			"lint": "gulp lint",
			"test": "gulp test",
			"coverage": "gulp coverage",
			"build": "gulp"
		},
		"contributors": [
			{
				"name": "Daniel Cousens",
				"email": "bitcoin@dcousens.com"
			},
			{
				"name": "Esteban Ordano",
				"email": "eordano@gmail.com"
			},
			{
				"name": "Gordon Hall",
				"email": "gordon@bitpay.com"
			},
			{
				"name": "Jeff Garzik",
				"email": "jgarzik@bitpay.com"
			},
			{
				"name": "Kyle Drake",
				"email": "kyle@kyledrake.net"
			},
			{
				"name": "Manuel Araoz",
				"email": "manuelaraoz@gmail.com"
			},
			{
				"name": "Matias Alejo Garcia",
				"email": "ematiu@gmail.com"
			},
			{
				"name": "Ryan X. Charles",
				"email": "ryanxcharles@gmail.com"
			},
			{
				"name": "Stefan Thomas",
				"email": "moon@justmoon.net"
			},
			{
				"name": "Stephen Pair",
				"email": "stephen@bitpay.com"
			},
			{
				"name": "Wei Lu",
				"email": "luwei.here@gmail.com"
			}
		],
		"keywords": [
			"bitcoin",
			"transaction",
			"address",
			"p2p",
			"ecies",
			"cryptocurrency",
			"blockchain",
			"payment",
			"bip21",
			"bip32",
			"bip37",
			"bip70",
			"multisig"
		],
		"repository": {
			"type": "git",
			"url": "https://github.com/bitpay/bitcore.git"
		},
		"browser": {
			"request": "browser-request"
		},
		"dependencies": {
			"bn.js": "=0.16.1",
			"bs58": "=2.0.0",
			"elliptic": "=0.16.0",
			"hash.js": "=0.3.2",
			"inherits": "=2.0.1",
			"lodash": "=2.4.1",
			"sha512": "=0.0.1"
		},
		"devDependencies": {
			"bitcore-build": "git+https://github.com/bitpay/bitcore-build",
			"brfs": "^1.2.0",
			"chai": "^1.10.0",
			"gulp": "^3.8.10"
		},
		"license": "MIT",
		"gitHead": "2670cd1ac5ec1742aae0599e1583c063415959ff",
		"bugs": {
			"url": "https://github.com/bitpay/bitcore/issues"
		},
		"homepage": "https://github.com/bitpay/bitcore",
		"_id": "bitcore@0.10.4",
		"_shasum": "2325e153650b6967ed15fd2dbd928d07a2982b13",
		"_from": "bitcore@>=0.10.4 <0.11.0",
		"_npmVersion": "2.3.0",
		"_nodeVersion": "0.11.15",
		"_npmUser": {
			"name": "maraoz",
			"email": "manuelaraoz@gmail.com"
		},
		"maintainers": [
			{
				"name": "gasteve",
				"email": "stephen@pairhome.net"
			},
			{
				"name": "maraoz",
				"email": "manuelaraoz@gmail.com"
			},
			{
				"name": "eordano",
				"email": "eordano@gmail.com"
			},
			{
				"name": "yemel",
				"email": "angel.jardi@gmail.com"
			}
		],
		"dist": {
			"shasum": "2325e153650b6967ed15fd2dbd928d07a2982b13",
			"tarball": "http://registry.npmjs.org/bitcore/-/bitcore-0.10.4.tgz"
		},
		"directories": {},
		"_resolved": "https://registry.npmjs.org/bitcore/-/bitcore-0.10.4.tgz",
		"readme": "ERROR: No README data found!"
	}

/***/ },
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/* This is a 'dns' module 'replacement' since Chrome App API
	 * has no dns abilities :(  I didn't want to make a full blown
	 * dns client, so this is a temporary workaround using statdns.com's
	 * HTTP interface to DNS, as this was simple to get up and running
	 * with quickly.
	 *
	 * Currently this is just barebones what is needed by bitcoin-p2p/pool.js
	 * May break this out into its own module eventually.
	 *
	 */

	var base_url='http://api.statdns.com/';

	// This is for running with node for testing
	//if(!window) {
	    //require.ensure([], function(require){
	        //XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
	    //});
	//}

	exports.resolve = function(domain, rrtype, cb) {
	    var res;
	    if (!cb) {
	        cb = rrtype;
	        rrtype = undefined;
	    }
	    if(!rrtype) {
	        rrtype = 'A'
	    }

	    var xhr = new XMLHttpRequest();
	    xhr.open("GET", base_url + domain + '/' + rrtype, true);
	    xhr.onload = function(e) {
	        var ips = [];
	        var response = JSON.parse(this.responseText);
	        if(response.code) {
	            return cb("Bad DNS lookup response")
	        };
	        for (var i in response.answer) {
	            ips.push(response.answer[i].rdata);
	        }
	        cb(null, ips);
	    }
	    xhr.onerror = function(e) { cb("Error with dns lookup request") }
	    xhr.send();
	};


/***/ },
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS)
				return 62 // '+'
			if (code === SLASH)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(false ? (this.base64js = {}) : exports))


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function(buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

	  buffer[offset + i - d] |= s * 128;
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(174)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}

	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(363);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(108);
	var Transform = __webpack_require__(109);
	var inherits = __webpack_require__(78);
	var modes = __webpack_require__(110);
	var StreamCipher = __webpack_require__(181);
	var ebtk = __webpack_require__(175);

	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }

	  this.push(unpad(this._mode.decrypt(this, chunk)));

	  next();
	};

	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}

	var modelist = {
	  ECB: __webpack_require__(179),
	  CBC: __webpack_require__(176),
	  CFB: __webpack_require__(177),
	  OFB: __webpack_require__(180),
	  CTR: __webpack_require__(178)
	};

	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }

	  function createDecipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var aes = __webpack_require__(108);
	var Transform = __webpack_require__(109);
	var inherits = __webpack_require__(78);
	var modes = __webpack_require__(110);
	var ebtk = __webpack_require__(175);
	var StreamCipher = __webpack_require__(181);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while ((chunk = this._cache.get())) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};


	function Splitter() {
	   if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};

	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);

	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(179),
	  CBC: __webpack_require__(176),
	  CFB: __webpack_require__(177),
	  OFB: __webpack_require__(180),
	  CTR: __webpack_require__(178)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key/8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher (suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(366)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(365)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(110);
	  function listCiphers () {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};



/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}


	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1).Buffer))

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(1).Buffer
	var Hash   = __webpack_require__(370)(Buffer)

	exports.sha1 = __webpack_require__(372)(Buffer, Hash)
	exports.sha256 = __webpack_require__(373)(Buffer, Hash)
	exports.sha512 = __webpack_require__(374)(Buffer, Hash)


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(17).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(17).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(17).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(368)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(389)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(1).Buffer))

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(107)(module), (function() { return this; }())))

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};

	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(378);
	exports.encode = exports.stringify = __webpack_require__(379);


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(46)


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(182)


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(183);
	exports.Stream = __webpack_require__(63);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(112);
	exports.Duplex = __webpack_require__(46);
	exports.Transform = __webpack_require__(111);
	exports.PassThrough = __webpack_require__(182);


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(111)


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(112)


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(377);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(380);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ }
/******/ ])
